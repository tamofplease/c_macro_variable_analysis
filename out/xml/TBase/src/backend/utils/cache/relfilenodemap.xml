<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/utils/cache/relfilenodemap.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * relfilenodemap.c
 *      relfilenode to oid mapping cache.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/backend/utils/cache/relfilenode.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/catcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relfilenodemap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relmapper.h"</cpp:file></cpp:include>

<comment type="block">/* Hash table for informations about each relfilenode &lt;-&gt; oid pair */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>RelfilenodeMapHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* built first time through in InitializeRelfilenodeMap */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ScanKeyData</name></type> <name><name>relfilenode_skey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>Oid</name></type>            <name>reltablespace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>relfilenode</name></decl>;</decl_stmt>
}</block></struct></type> <name>RelfilenodeMapKey</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>RelfilenodeMapKey</name></type> <name>key</name></decl>;</decl_stmt>        <comment type="block">/* lookup key - must be first */</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>relid</name></decl>;</decl_stmt>            <comment type="block">/* pg_class.oid */</comment>
}</block></struct></type> <name>RelfilenodeMapEntry</name>;</typedef>

<comment type="block">/*
 * RelfilenodeMapInvalidateCallback
 *        Flush mapping entries when pg_class is updated in a relevant fashion.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RelfilenodeMapInvalidateCallback</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RelfilenodeMapEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

    <comment type="block">/* callback only gets registered after creating the hash */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>RelfilenodeMapHash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>RelfilenodeMapHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <operator>(</operator><name>RelfilenodeMapEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * If relid is InvalidOid, signalling a complete reset, we must remove
         * all entries, otherwise just remove the specific relation's entry.
         * Always remove negative cache entries.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>relid</name> <operator>==</operator> <name>InvalidOid</name> <operator>||</operator>    <comment type="block">/* complete reset */</comment>
            <name><name>entry</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>InvalidOid</name> <operator>||</operator>    <comment type="block">/* negative cache entry */</comment>
            <name><name>entry</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>relid</name></expr>)</condition>    <comment type="block">/* individual flushed relation */</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>RelfilenodeMapHash</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
                            <argument><expr><name>HASH_REMOVE</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"hash table corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * RelfilenodeMapInvalidateCallback
 *        Initialize cache, either on first use or after a reset.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitializeRelfilenodeMap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HASHCTL</name></type>        <name>ctl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Make sure we've initialized CacheMemoryContext. */</comment>
    <if_stmt><if>if <condition>(<expr><name>CacheMemoryContext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CreateCacheMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* build skey */</comment>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>relfilenode_skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>relfilenode_skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>F_OIDEQ</name></expr></argument>,
                      <argument><expr><operator>&amp;</operator><name><name>relfilenode_skey</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_func</name></expr></argument>,
                      <argument><expr><name>CacheMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relfilenode_skey</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name> <operator>=</operator> <name>BTEqualStrategyNumber</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relfilenode_skey</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_subtype</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relfilenode_skey</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_collation</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>relfilenode_skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sk_attno</name> <operator>=</operator> <name>Anum_pg_class_reltablespace</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>relfilenode_skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sk_attno</name> <operator>=</operator> <name>Anum_pg_class_relfilenode</name></expr>;</expr_stmt>

    <comment type="block">/* Initialize the hash table. */</comment>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelfilenodeMapKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelfilenodeMapEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>CacheMemoryContext</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Only create the RelfilenodeMapHash now, so we don't end up partially
     * initialized when fmgr_info_cxt() above ERRORs out with an out of memory
     * error.
     */</comment>
    <expr_stmt><expr><name>RelfilenodeMapHash</name> <operator>=</operator>
        <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"RelfilenodeMap cache"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
                    <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Watch for invalidation events. */</comment>
    <expr_stmt><expr><call><name>CacheRegisterRelcacheCallback</name><argument_list>(<argument><expr><name>RelfilenodeMapInvalidateCallback</name></expr></argument>,
                                  <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Map a relation's (tablespace, filenode) to a relation's oid and cache the
 * result.
 *
 * Returns InvalidOid if no relation matching the criteria could be found.
 */</comment>
<function><type><name>Oid</name></type>
<name>RelidByRelfilenode</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>reltablespace</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relfilenode</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>RelfilenodeMapKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RelfilenodeMapEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scandesc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>relation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>ntp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>relid</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>RelfilenodeMapHash</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>InitializeRelfilenodeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* pg_class will show 0 when the value is actually MyDatabaseTableSpace */</comment>
    <if_stmt><if>if <condition>(<expr><name>reltablespace</name> <operator>==</operator> <name>MyDatabaseTableSpace</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>reltablespace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>reltablespace</name></name> <operator>=</operator> <name>reltablespace</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>relfilenode</name></name> <operator>=</operator> <name>relfilenode</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Check cache and return entry if one is found. Even if no target
     * relation can be found later on we store the negative match and return a
     * InvalidOid from cache. That's not really necessary for performance
     * since querying invalid values isn't supposed to be a frequent thing,
     * but it's basically free.
     */</comment>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>RelfilenodeMapHash</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>relid</name></name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* ok, no previous cache entry, do it the hard way */</comment>

    <comment type="block">/* initialize empty/negative cache entry before doing the actual lookups */</comment>
    <expr_stmt><expr><name>relid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>reltablespace</name> <operator>==</operator> <name>GLOBALTABLESPACE_OID</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Ok, shared table, check relmapper.
         */</comment>
        <expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>RelationMapFilenodeToOid</name><argument_list>(<argument><expr><name>relfilenode</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * Not a shared table, could either be a plain relation or a
         * non-shared, nailed one, like e.g. pg_class.
         */</comment>

        <comment type="block">/* check for plain relations by looking in pg_class */</comment>
        <expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* copy scankey to local copy, it will be modified during the scan */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>relfilenode_skey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* set scan arguments */</comment>
        <expr_stmt><expr><name><name>skey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>sk_argument</name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>reltablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>skey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>sk_argument</name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relfilenode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>scandesc</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>relation</name></expr></argument>,
                                      <argument><expr><name>ClassTblspcRelfilenodeIndexId</name></expr></argument>,
                                      <argument><expr><name>true</name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr><literal type="number">2</literal></expr></argument>,
                                      <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>ntp</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                     <argument><expr><literal type="string">"unexpected duplicate for tablespace %u, relfilenode %u"</literal></expr></argument>,
                     <argument><expr><name>reltablespace</name></expr></argument>, <argument><expr><name>relfilenode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
            <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Oid</name></type>            <name>check</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>ntp</name></expr></argument>, <argument><expr><name>Anum_pg_class_reltablespace</name></expr></argument>,
                                    <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name> <operator>&amp;&amp;</operator> <name>check</name> <operator>==</operator> <name>reltablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>ntp</name></expr></argument>, <argument><expr><name>Anum_pg_class_relfilenode</name></expr></argument>,
                                    <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name> <operator>&amp;&amp;</operator> <name>check</name> <operator>==</operator> <name>relfilenode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>ntp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* check for tables that are mapped but not shared */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>RelationMapFilenodeToOid</name><argument_list>(<argument><expr><name>relfilenode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Only enter entry into cache now, our opening of pg_class could have
     * caused cache invalidations to be executed which would have deleted a
     * new entry if we had entered it above.
     */</comment>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>RelfilenodeMapHash</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"corrupted hashtable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>relid</name></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>

    <return>return <expr><name>relid</name></expr>;</return>
</block_content>}</block></function>
</unit>
