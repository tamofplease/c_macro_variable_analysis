<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/audit/audit.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audit/audit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/skey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_shard_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_audit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_data_wrapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_foreign_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_largeobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_largeobject_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_rewrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_subscription.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/username.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/proclang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"foreign/foreign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxcnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/auditlogger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lockdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/palloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bool</name></type> <name>enable_audit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enable_audit_warning</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>enable_audit_depend</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>use_object_missok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="line">// #define Use_Audit_Assert 0</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_001_For_Input</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>        <comment type="block">/* audit first part for Audit Input */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_002_For_Clean</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>        <comment type="block">/* audit second part for Clean Audit */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_003_For_Hit</name></cpp:macro>             <cpp:value>0</cpp:value></cpp:define>        <comment type="block">/* audit third part for Audit Hit */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_004_For_Log</name></cpp:macro>             <cpp:value>0</cpp:value></cpp:define>        <comment type="block">/* audit forth part for Audit Log */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_MaxStmtPerShortcut</name></cpp:macro>    <cpp:value>64</cpp:value></cpp:define>        <comment type="block">/* max number of AuditSQL that belongs to one shortcut sql
                                             *
                                             * Audit Alter Type, Audit Create Type and Audit Drop type 
                                             * are all belong to Audit Type
                                             */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_MaxObjectTypePerStmt</name></cpp:macro>     <cpp:value>64</cpp:value></cpp:define>        <comment type="block">/* max number of object type that one AuditSQL can record
                                             *
                                             * Audit Rename can used on table, view,
                                             * or materialized view and all their columns.
                                             */</comment>
                                            
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_MaxNodeTagPerStmt</name></cpp:macro>        <cpp:value>64</cpp:value></cpp:define>        <comment type="block">/* max number of stmt that one AuditSQL can record 
                                             *
                                             * Audit Index, not only audit Create Index, but also
                                             * audit Drop Index, Alter Index
                                             *
                                             * Audit Grand, not only audit Grant, but alst audit Revoke.
                                             */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_InvalidEnum</name></cpp:macro>             <cpp:value>-99999</cpp:value></cpp:define>    <comment type="block">/* put into the end of AuditStmtMap.sub_id/.obj_type/.stmt_tag */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_Object_Default</name></cpp:macro>        <cpp:value>InvalidOid</cpp:value></cpp:define>            <comment type="block">/* Object ID used when Audit xxx ON DEFAULT */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>InvalidSysCacheID</name></cpp:macro>             <cpp:value>(SysCacheSize + SysCacheSize)</cpp:value></cpp:define>    <comment type="block">/* Ivalid ID for SysCacheIdentifier */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Audit_nSysScanKeys</name></cpp:macro>            <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>AuditModeMius</name>
<block>{
    <decl><name>AuditModeMi_All</name>            <init>= <expr><name>AuditMode_All</name></expr></init></decl>,            <comment type="block">/* just a place holder*/</comment>
    <decl><name>AuditModeMi_Success</name>        <init>= <expr><name>AuditMode_Success</name></expr></init></decl>,        <comment type="block">/* AuditMode_All - AuditMode_Fail = AuditModeMi_Success */</comment>
    <decl><name>AuditModeMi_Fail</name>        <init>= <expr><name>AuditMode_Fail</name></expr></init></decl>,            <comment type="block">/* AuditModeMi_All - AuditMode_Success = AuditModeMi_Fail */</comment>
    <decl><name>AuditModeMi_Mutex</name>        <init>= <expr><literal type="char">'m'</literal></expr></init></decl>,                        <comment type="block">/* AuditModeMi_Success - AuditMode_Fail = AuditModeMi_Mutex 
                                                         * AuditMode_Fail - AuditModeMi_Success = AuditModeMi_Mutex
                                                         */</comment>
    <decl><name>AuditModeMi_Overtop</name>        <init>= <expr><literal type="char">'o'</literal></expr></init></decl>,                        <comment type="block">/* xxx - AuditMode_All = AuditModeMi_Overtop */</comment>
    <decl><name>AuditModeMi_Equal</name>        <init>= <expr><literal type="char">'e'</literal></expr></init></decl>,                        <comment type="block">/* if (ModeA == ModeB) then ModeA - ModeB = AuditModeMi_Equal */</comment>
    <decl><name>AuditModeMi_Ivalid</name>        <init>= <expr><literal type="char">'i'</literal></expr></init></decl>,                        <comment type="block">/* All others are Ivalid AuditMode minus operation */</comment>
}</block></enum></type> <name>AuditModeMi</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AuditStmtMap</name>
<block>{
    <decl_stmt><decl><type><name>AuditSQL</name></type>    <name>id</name></decl>;</decl_stmt>                                        <comment type="block">/* refer to AuditSQL */</comment>                        
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type>        <name>name</name></decl>;</decl_stmt>                                    <comment type="block">/* Create Table, Drop Index defined in gram.y */</comment>
    <decl_stmt><decl><type><name>AuditSQL</name></type>    <name><name>sub_id</name><index>[<expr><name>Audit_MaxStmtPerShortcut</name></expr>]</index></name></decl>;</decl_stmt>        <comment type="block">/* refer to AuditSQL */</comment>
    <decl_stmt><decl><type><name>ObjectType</name></type>    <name><name>obj_type</name><index>[<expr><name>Audit_MaxObjectTypePerStmt</name></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* see OBJECT_VIEW, OBJECT_INDEX in parsenodes.h */</comment>
    <decl_stmt><decl><type><name>NodeTag</name></type>        <name><name>stmt_tag</name><index>[<expr><name>Audit_MaxNodeTagPerStmt</name></expr>]</index></name></decl>;</decl_stmt>        <comment type="block">/* see definitions in NodeTag: T_CommentStmt, T_SelectStmt */</comment>
}</block></struct></type> <name>AuditStmtMap</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AuditStmtContext</name>
<block>{
    <decl_stmt><decl><type><name>StringInfo</name></type>         <name>action_str</name></decl>;</decl_stmt>                            <comment type="block">/* transform AuditStmt to SQL text string */</comment>
    <decl_stmt><decl><type><name>List</name>             <modifier>*</modifier></type><name>l_action_items</name></decl>;</decl_stmt>                    <comment type="block">/* action items expanded from AuditStmt-&gt;action_list */</comment>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>l_user_oids</name></decl>;</decl_stmt>                        <comment type="block">/* user ids expanded from AuditStmt-&gt;user_list */</comment>
    <decl_stmt><decl><type><name>ObjectAddress</name></type>    <name>object_address</name></decl>;</decl_stmt>                        <comment type="block">/* object address of AuditStmt-&gt;object_name */</comment>
}</block></struct></type> <name>AuditStmtContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AuditStmtRecord</name>
<block>{
    <decl_stmt><decl><type><name>AuditStmtMap</name>    <modifier>*</modifier></type><name>action_item</name></decl>;</decl_stmt>                        <comment type="block">/* action items expanded from AuditStmt-&gt;action_list */</comment>
    <decl_stmt><decl><type><name>ObjectAddress</name></type>    <name>obj_address</name></decl>;</decl_stmt>                        <comment type="block">/* if this record is type of AuditType_Object,
                                                         *         then refer to object address of AuditStmt-&gt;object_name 
                                                         * if this recore is type of AuditType_User
                                                         *        then refer to user address of AuditStmt-&gt;user_list
                                                         * else refer to InvalidObjectAddress
                                                         */</comment>
}</block></struct></type> <name>AuditStmtRecord</name>;</typedef>

<typedef>typedef <type><name><name>enum</name> <name>SysCacheIdentifier</name></name></type> <name>SysCacheIdentifier</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>AuditRecordWriter</name></name></type> <name>AuditRecordWriter</name>;</typedef>
<typedef>typedef <type><struct>struct <name>AuditRecordWriter</name>
<block>{
    <decl_stmt><decl><type><name>Oid</name></type>                    <name>sysrel_oid</name></decl>;</decl_stmt>                        <comment type="block">/* where to store those audit records,
                                                         * PgAuditStmtConfRelationId: Audit xxx
                                                         * PgAuditUserConfRelationId: Audit xxx By xxx
                                                         * PgAuditObjConfRelationId: Audit xxx ON xxx
                                                         * PgAuditObjDefOptsRelationId: Audit xxx ON DEFAULT
                                                         */</comment>
    <decl_stmt><decl><type><name>SysCacheIdentifier</name></type>    <name>syscache_id</name></decl>;</decl_stmt>                    <comment type="block">/* SysCache id for sysrel_oid,
                                                         * PgAuditStmtConfRelationId: AUDITSTMTCONF
                                                         * PgAuditUserConfRelationId: AUDITUSERCONF
                                                         * PgAuditObjConfRelationId: AUDITOBJCONF
                                                         * PgAuditObjDefOptsRelationId: AUDITOBJDEFAULT
                                                         */</comment>
    <function_decl><type><name>void</name></type>                 (<modifier>*</modifier><name>writer_fn</name>)<parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type></decl></parameter>,
                                     <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type></decl></parameter>,
                                      <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type></decl></parameter>,
                                     <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type></decl></parameter>,
                                     <parameter><decl><type><name>Relation</name></type></decl></parameter>)</parameter_list>;</function_decl>            <comment type="block">/* which function to insert or update this a record
                                                         * into sysrel,
                                                         * PgAuditStmtConfRelationId: audit_write_sysrel_stmt_conf
                                                         * PgAuditUserConfRelationId: audit_write_sysrel_user_conf
                                                         * PgAuditObjConfRelationId: audit_write_sysrel_obj_conf
                                                         * PgAuditObjDefOptsRelationId: audit_write_sysrel_obj_def_opts
                                                         */</comment>
}</block></struct></type> <name>AuditRecordWriter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CleanAuditStmtContext</name>
<block>{
    <decl_stmt><decl><type><name>StringInfo</name></type>         <name>clean_str</name></decl>;</decl_stmt>                            <comment type="block">/* transform CleanAuditStmt to SQL text string */</comment>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>l_user_oids</name></decl>;</decl_stmt>                        <comment type="block">/* user ids expanded from CleanAuditStmt-&gt;user_list */</comment>
    <decl_stmt><decl><type><name>ObjectAddress</name></type>    <name>object_address</name></decl>;</decl_stmt>                        <comment type="block">/* object address of CleanAuditStmt-&gt;object_name */</comment>
}</block></struct></type> <name>CleanAuditStmtContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AuditHitInfo</name>
<block>{
    <decl_stmt><decl><type><name>NodeTag</name></type>            <name>stmt_tag</name></decl>;</decl_stmt>                            <comment type="block">/* statement tag read from Query */</comment>
    <decl_stmt><decl><type><name>ObjectAddress</name></type>    <name>obj_addr</name></decl>;</decl_stmt>                            <comment type="block">/* object address read from Query */</comment>
    <decl_stmt><decl><type><name>ObjectType</name></type>        <name>obj_type</name></decl>;</decl_stmt>                            <comment type="block">/* object type read from Query */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>obj_name</name></decl>;</decl_stmt>                            <comment type="block">/* name of obj read from Query */</comment>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>l_hit_index</name></decl>;</decl_stmt>                        <comment type="block">/* index found in gAuditStmtActionMap by stmt_type and obj_type */</comment> 
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>l_hit_action</name></decl>;</decl_stmt>                        <comment type="block">/* action items found in gAuditStmtActionMap by stmt_type and obj_type */</comment>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>l_hit_match</name></decl>;</decl_stmt>                        <comment type="block">/* is this hit match AuditConf in pg catalog tables */</comment>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>l_hit_audit</name></decl>;</decl_stmt>                        <comment type="block">/* Object Audit/Object Default Audit/User Audit/Statement Audit */</comment>
    <decl_stmt><decl><type><name>bool</name></type>            <name>is_success</name></decl>;</decl_stmt>                            <comment type="block">/* this sql exec successfull ?*/</comment>
}</block></struct></type> <name>AuditHitInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AuditResultInfo</name>
<block>{
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>qry_string</name></decl>;</decl_stmt>                        <comment type="block">/* query_string from exec_simple_query */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>cmd_tag</name></decl>;</decl_stmt>                            <comment type="block">/* tag of query created by CreateCommandTag */</comment>
    <decl_stmt><decl><type><name>List</name>            <modifier>*</modifier></type><name>l_hit_info</name></decl>;</decl_stmt>                        <comment type="block">/* list of AuditHitInfo read from Query after pg_parse_query */</comment>
    <decl_stmt><decl><type><name>Oid</name></type>                <name>db_id</name></decl>;</decl_stmt>                                <comment type="block">/* where to execute this query */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>db_name</name></decl>;</decl_stmt>                            <comment type="block">/* where to execute this query */</comment>
    <decl_stmt><decl><type><name>Oid</name></type>                <name>db_user_id</name></decl>;</decl_stmt>                            <comment type="block">/* who execute this query */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>db_user_name</name></decl>;</decl_stmt>                        <comment type="block">/* who execute this query */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>node_name</name></decl>;</decl_stmt>                            <comment type="block">/* node name */</comment>
    <decl_stmt><decl><type><name>Oid</name></type>                <name>node_oid</name></decl>;</decl_stmt>                            <comment type="block">/* node oid in pgxc_node */</comment>
    <decl_stmt><decl><type><name>char</name></type>            <name>node_type</name></decl>;</decl_stmt>                            <comment type="block">/* coord or datanode ? */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>node_osuser</name></decl>;</decl_stmt>                        <comment type="block">/* current os user name */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>node_host</name></decl>;</decl_stmt>                            <comment type="block">/* node host address */</comment>
    <decl_stmt><decl><type><name>int</name></type>                <name>node_port</name></decl>;</decl_stmt>                            <comment type="block">/* node port */</comment>
    <decl_stmt><decl><type><name>pid_t</name></type>            <name>proc_pid</name></decl>;</decl_stmt>                            <comment type="block">/* postgres pid */</comment>
    <decl_stmt><decl><type><name>pid_t</name></type>            <name>proc_ppid</name></decl>;</decl_stmt>                            <comment type="block">/* postmaster pid */</comment>
    <decl_stmt><decl><type><name>pg_time_t</name></type>        <name>proc_start_time</name></decl>;</decl_stmt>                    <comment type="block">/* postgres start time */</comment>
    <decl_stmt><decl><type><name>pg_time_t</name></type>         <name>qry_begin_time</name></decl>;</decl_stmt>                        <comment type="block">/* gegin time of QueryDesc */</comment>
    <decl_stmt><decl><type><name>pg_time_t</name></type>         <name>qry_end_time</name></decl>;</decl_stmt>                        <comment type="block">/* end time of QueryDesc*/</comment>
    <decl_stmt><decl><type><name>bool</name></type>            <name>is_success</name></decl>;</decl_stmt>                            <comment type="block">/* is this xact success ? */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>error_msg</name></decl>;</decl_stmt>                            <comment type="block">/* why this xact failed ? */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>client_host</name></decl>;</decl_stmt>                        <comment type="block">/* client ip of conn */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>client_hostname</name></decl>;</decl_stmt>                    <comment type="block">/* client ip of conn */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>client_port</name></decl>;</decl_stmt>                        <comment type="block">/* client port of conn */</comment>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>app_name</name></decl>;</decl_stmt>                            <comment type="block">/* client app name */</comment>
}</block></struct></type> <name>AuditResultInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AuditHitFindObjectContext</name>
<block>{
    <decl_stmt><decl><type><name>NodeTag</name></type>        <name>stmt_tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type>         <name>l_hit_info</name></decl>;</decl_stmt>
}</block></struct></type> <name>AuditHitFindObjectContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>AuditResultInfo</name> <modifier>*</modifier></type> <name>gAuditResultInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Use_Audit_Assert</name></cpp:ifdef>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Trap</name></cpp:ifdef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Trap</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Trap</name><parameter_list>(<parameter><type><name>condition</name></type></parameter>, <parameter><type><name>errorType</name></type></parameter>)</parameter_list></cpp:macro> \
            <cpp:value>do { \
                if (condition) \
                    ExceptionalCondition(CppAsString(condition), (errorType), \
                                         __FILE__, __LINE__); \
            } while (0)</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Assert</name></cpp:ifdef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Assert</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Assert</name><parameter_list>(<parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro> \
            <cpp:value>Trap(!(condition), "FailedAssertion")</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_001_For_Input</name></cpp:ifdef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_valid_enum</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_shortcut_audit_stmt</name><parameter_list>(<parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_statement_action_id</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_user_action_id</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_object_action_id</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_statement_audit_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_user_audit_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isa_object_audit_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_audit_environment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_audit_enable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_o</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_d</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_u</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_s</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>audit_get_type_string</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>audit_get_mode_string</name><parameter_list>(<parameter><decl><type><name>AuditMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Size</name></type> <name>audit_get_stmt_map_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>AuditStmtMap</name> <modifier>*</modifier></type> <name>audit_get_stmt_map_by_action</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>AuditStmtMap</name> <modifier>*</modifier></type> <name>audit_get_stmt_map_by_index</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_build_idx_for_stmt_action_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>audit_check_action_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>audit_type</name></decl></parameter>, 
                                    <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_expand_AuditSql_All</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>audit_check_relkind</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>,
                                <parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>object_name</name></decl></parameter>,
                                <parameter><decl><type><name>ObjectType</name></type> <name>object_type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_check_connection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_free_stmt_context</name><parameter_list>(<parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_free_stmt_context</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>AuditModeMi</name></type> <name>audit_mode_minus</name><parameter_list>(<parameter><decl><type><name>AuditMode</name></type> <name>first</name></decl></parameter>,
                                    <parameter><decl><type><name>AuditMode</name></type> <name>second</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_append_unique_action_item</name><parameter_list>(<parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                            <parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_action_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_user_list_internal</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>user_list</name></decl></parameter>,
                                             <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type> <name>l_user_oids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_user_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                    <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_process_user_list</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                          <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_object_internal</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>object_name</name></decl></parameter>, 
                                           <parameter><decl><type><name>ObjectType</name></type> <name>object_type</name></decl></parameter>,
                                           <parameter><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type> <name>object_address</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_object</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                 <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_process_object</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                        <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>audit_object_type_string</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>object_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>report_error</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_final_to_string</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                  <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_generate_one_record</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>,
                                      <parameter><decl><type><name>Oid</name></type> <name>user_id</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier><modifier>*</modifier></type> <name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_generate_record_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                       <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                       <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type> <name>lrecord</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_stmt_conf</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                         <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_user_conf</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                         <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_obj_conf</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                        <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                        <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                        <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                        <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_obj_def_opts</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                            <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                            <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                            <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                            <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_record_writer</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                    <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_recod_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                   <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                   <parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>lrecord</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_002_For_Clean</name></cpp:ifdef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_remove_tuple_by_oid</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>cacheid</name></decl></parameter>,
                                      <parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_statement</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                        <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_user_by_oids</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_user_oids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_user</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                 <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_object</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                      <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_object_default</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                                <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_unknown</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                      <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_process_delete</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                         <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_003_For_Hit</name></cpp:ifdef>

<function_decl><type><specifier>static</specifier> <name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_hit_init_result_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_free_result_info</name><parameter_list>(<parameter><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_hit_get_result_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_set_result_info</name><parameter_list>(<parameter><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_find_action_index</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_free_hit_info</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit_make_hit_info</name><parameter_list>(<parameter><decl><type><name>NodeTag</name></type> <name>stmt_tag</name></decl></parameter>,
                                              <parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>,
                                              <parameter><decl><type><name>Oid</name></type> <name>object_id</name></decl></parameter>,
                                              <parameter><decl><type><name>int32</name></type> <name>object_sub_id</name></decl></parameter>,
                                              <parameter><decl><type><name>ObjectType</name></type> <name>obj_type</name></decl></parameter>,
                                              <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>obj_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit_make_hit_info_2</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>id</name></decl></parameter>,
                                                <parameter><decl><type><name>NodeTag</name></type> <name>stmt_tag</name></decl></parameter>,
                                                <parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>,
                                                <parameter><decl><type><name>Oid</name></type> <name>object_id</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type> <name>object_sub_id</name></decl></parameter>,
                                                <parameter><decl><type><name>ObjectType</name></type> <name>obj_type</name></decl></parameter>,
                                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>obj_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_find_seq_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>audit_hit_find_object_info</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type> <name>audit_query</name></decl></parameter>, 
                                         <parameter><decl><type><name>NodeTag</name></type> <name>stmt_tag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>audit_hit_object_missing_ok</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>src_missing_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>audit_hit_read_query_utility</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type> <name>audit_query</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>audit_hit_read_query_tree</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type> <name>audit_query</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_remove_dup_object</name><parameter_list>(<parameter><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_read_query_list</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type> <name>port</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>query_sring</name></decl></parameter>,
                                      <parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_parsetree</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_o</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_d</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_u</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_s</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_rebuild_hit_info</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>hit_index</name></decl></parameter>,
                                       <parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>hit_action</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>hit_match</name></decl></parameter>,
                                       <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>hit_audit</name></decl></parameter>,
                                       <parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_match_in_catalog</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                       <parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_print_result_log</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_process_result_info</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_004_For_Log</name></cpp:ifdef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>AuditStmtMap</name></type> <name><name>gAuditStmtActionMap</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><name>AuditSql_All</name></expr>,
        <expr><literal type="string">"ALL"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,

    <comment type="block">/* SQL Statement Shortcuts for Auditing */</comment>
    <expr><block>{
        <expr><name>AuditSql_ShortcutBegin</name></expr>,
        <expr><literal type="string">"ShortcutBegin"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_AlterSystem</name></expr>,
        <expr><literal type="string">"Alter System"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_AlterSystemStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Database</name></expr>,
        <expr><literal type="string">"Database"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Database_Alter</name></expr>, 
            <expr><name>AuditSql_Database_Create</name></expr>,
            <expr><name>AuditSql_Database_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_DATABASE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Database_Alter</name></expr>,
        <expr><literal type="string">"Alter Database"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_DATABASE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterDatabaseSetStmt</name></expr>,
            <expr><name>T_AlterDatabaseStmt</name></expr>,
            <expr><name>T_AlterOwnerStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Database_Create</name></expr>,
        <expr><literal type="string">"Create Database"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_DATABASE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreatedbStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Database_Drop</name></expr>,
        <expr><literal type="string">"Drop Database"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_DATABASE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DropdbStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Extension</name></expr>,
        <expr><literal type="string">"Extension"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Extension_Alter</name></expr>, 
            <expr><name>AuditSql_Extension_Create</name></expr>,
            <expr><name>AuditSql_Extension_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_EXTENSION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Extension_Alter</name></expr>,
        <expr><literal type="string">"Alter Extension"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_EXTENSION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterExtensionContentsStmt</name></expr>,
            <expr><name>T_AlterExtensionStmt</name></expr>,
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Extension_Create</name></expr>,
        <expr><literal type="string">"Create Extension"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_EXTENSION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateExtensionStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Extension_Drop</name></expr>,
        <expr><literal type="string">"Drop Extension"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_EXTENSION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Function</name></expr>,
        <expr><literal type="string">"Function"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Function_Alter</name></expr>,
            <expr><name>AuditSql_Function_Create</name></expr>,
            <expr><name>AuditSql_Function_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_FUNCTION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Function_Alter</name></expr>,
        <expr><literal type="string">"Alter Function"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_FUNCTION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterFunctionStmt</name></expr>,
            <expr><name>T_AlterObjectDependsStmt</name></expr>,
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>T_AlterOwnerStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Function_Create</name></expr>,
        <expr><literal type="string">"Create Function"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_FUNCTION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateFunctionStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Function_Drop</name></expr>,
        <expr><literal type="string">"Drop Function"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_FUNCTION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterExtensionContentsStmt</name></expr>,
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Group</name></expr>,
        <expr><literal type="string">"Group"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Group_CreateNodeGroup</name></expr>,
            <expr><name>AuditSql_Group_CreateShardingGroup</name></expr>,
            <expr><name>AuditSql_Group_DropNodeGroup</name></expr>,
            <expr><name>AuditSql_Group_DropShardingInGroup</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Group_CreateNodeGroup</name></expr>,
        <expr><literal type="string">"Create Node Group"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_CreateGroupStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Group_CreateShardingGroup</name></expr>,
        <expr><literal type="string">"Create Sharding Group"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_CreateShardStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Group_DropNodeGroup</name></expr>,
        <expr><literal type="string">"Drop Node Group"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_DropGroupStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Group_DropShardingInGroup</name></expr>,
        <expr><literal type="string">"Drop Sharding in Group"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_DropShardStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Index</name></expr>,
        <expr><literal type="string">"Index"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Index_Alter</name></expr>,
            <expr><name>AuditSql_Index_Create</name></expr>,
            <expr><name>AuditSql_Index_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_INDEX</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Index_Alter</name></expr>,
        <expr><literal type="string">"Alter Index"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_INDEX</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterTableStmt</name></expr>,
            <expr><name>T_AlterTableMoveAllStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>T_AlterObjectDependsStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Index_Create</name></expr>,
        <expr><literal type="string">"Create Index"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_INDEX</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_IndexStmt</name></expr>,
            <expr><name>T_ReindexStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Index_Drop</name></expr>,
        <expr><literal type="string">"Drop Index"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_INDEX</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_MaterializedView</name></expr>,
        <expr><literal type="string">"Materialized View"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_MaterializedView_Alter</name></expr>,
            <expr><name>AuditSql_MaterializedView_Create</name></expr>,
            <expr><name>AuditSql_MaterializedView_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_MaterializedView_Alter</name></expr>,
        <expr><literal type="string">"Alter Materialized View"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterTableStmt</name></expr>,
            <expr><name>T_AlterTableMoveAllStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>T_AlterObjectDependsStmt</name></expr>,
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_MaterializedView_Create</name></expr>,
        <expr><literal type="string">"Create Materialized View"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateTableAsStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_MaterializedView_Drop</name></expr>,
        <expr><literal type="string">"Drop Materialized View"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterExtensionContentsStmt</name></expr>,
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Node</name></expr>,
        <expr><literal type="string">"Node"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Node_Alter</name></expr>,
            <expr><name>AuditSql_Node_Create</name></expr>,
            <expr><name>AuditSql_Node_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Node_Alter</name></expr>,
        <expr><literal type="string">"Alter Node"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_AlterNodeStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Node_Create</name></expr>,
        <expr><literal type="string">"Create Node"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_CreateNodeStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Node_Drop</name></expr>,
        <expr><literal type="string">"Drop Node"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_DropNodeStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Partition</name></expr>,
        <expr><literal type="string">"Partition"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Partition_AddPartitions</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Partition_AddPartitions</name></expr>,
        <expr><literal type="string">"Add Partitions"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_AlterTableCmd</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Role</name></expr>,
        <expr><literal type="string">"Role"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Role_Alter</name></expr>,
            <expr><name>AuditSql_Role_Create</name></expr>,
            <expr><name>AuditSql_Role_Drop</name></expr>,
            <expr><name>AuditSql_Role_Set</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_ROLE */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Role_Alter</name></expr>,
        <expr><literal type="string">"Alter Role"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_ROLE */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterRoleStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Role_Create</name></expr>,
        <expr><literal type="string">"Create Role"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_ROLE */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateRoleStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Role_Drop</name></expr>,
        <expr><literal type="string">"Drop Role"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_ROLE */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DropRoleStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Role_Set</name></expr>,
        <expr><literal type="string">"Set Role"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_ROLE */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterRoleSetStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Schema</name></expr>,
        <expr><literal type="string">"Schema"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Schema_Alter</name></expr>, 
            <expr><name>AuditSql_Schema_Create</name></expr>,
            <expr><name>AuditSql_Schema_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SCHEMA</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Schema_Alter</name></expr>,
        <expr><literal type="string">"Alter Schema"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SCHEMA</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterOwnerStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Schema_Create</name></expr>,
        <expr><literal type="string">"Create Schema"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SCHEMA</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateSchemaStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Schema_Drop</name></expr>,
        <expr><literal type="string">"Drop Schema"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SCHEMA</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Sequence</name></expr>,
        <expr><literal type="string">"Sequence"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Sequence_Create</name></expr>,
            <expr><name>AuditSql_Sequence_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Sequence_Create</name></expr>,
        <expr><literal type="string">"Create Sequence"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateSeqStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Sequence_Drop</name></expr>,
        <expr><literal type="string">"Drop Sequence"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterExtensionContentsStmt</name></expr>,
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Table</name></expr>,
        <expr><literal type="string">"Table"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Table_Create</name></expr>,
            <expr><name>AuditSql_Table_Drop</name></expr>,
            <expr><name>AuditSql_Table_Truncate</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Table_Create</name></expr>,
        <expr><literal type="string">"Create Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateStmt</name></expr>,
            <expr><name>T_CreateTableAsStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Table_Drop</name></expr>,
        <expr><literal type="string">"Drop Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterExtensionContentsStmt</name></expr>,
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Table_Truncate</name></expr>,
        <expr><literal type="string">"Truncate Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_TruncateStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Tablespace</name></expr>,
        <expr><literal type="string">"Tablespace"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Tablespace_Alter</name></expr>,
            <expr><name>AuditSql_Tablespace_Create</name></expr>,
            <expr><name>AuditSql_Tablespace_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLESPACE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Tablespace_Alter</name></expr>,
        <expr><literal type="string">"Alter Tablespace"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLESPACE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterOwnerStmt</name></expr>,
            <expr><name>T_AlterTableSpaceOptionsStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Tablespace_Create</name></expr>,
        <expr><literal type="string">"Create Tablespace"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLESPACE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateTableSpaceStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Tablespace_Drop</name></expr>,
        <expr><literal type="string">"Drop Tablespace"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLESPACE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DropTableSpaceStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Trigger</name></expr>,
        <expr><literal type="string">"Trigger"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Trigger_Alter</name></expr>,
            <expr><name>AuditSql_Trigger_Create</name></expr>,
            <expr><name>AuditSql_Trigger_Drop</name></expr>,
            <expr><name>AuditSql_Trigger_Disable</name></expr>,
            <expr><name>AuditSql_Trigger_Enable</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TRIGGER</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Trigger_Alter</name></expr>,
        <expr><literal type="string">"Alter Trigger"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TRIGGER</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>T_AlterObjectDependsStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Trigger_Create</name></expr>,
        <expr><literal type="string">"Create Trigger"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TRIGGER</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateTrigStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Trigger_Drop</name></expr>,
        <expr><literal type="string">"Drop Trigger"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TRIGGER</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Trigger_Disable</name></expr>,
        <expr><literal type="string">"Disable Trigger"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TRIGGER</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterTableCmd</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Trigger_Enable</name></expr>,
        <expr><literal type="string">"Enable Trigger"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TRIGGER</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterTableCmd</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Type</name></expr>,
        <expr><literal type="string">"Type"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_Type_Alter</name></expr>,
            <expr><name>AuditSql_Type_Create</name></expr>,
            <expr><name>AuditSql_Type_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TYPE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Type_Alter</name></expr>,
        <expr><literal type="string">"Alter Type"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TYPE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>T_AlterOwnerStmt</name></expr>,
            <expr><name>T_AlterTableStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Type_Create</name></expr>,
        <expr><literal type="string">"Create Type"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TYPE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DefineStmt</name></expr>,
            <expr><name>T_CompositeTypeStmt</name></expr>,
            <expr><name>T_CreateEnumStmt</name></expr>,
            <expr><name>T_CreateRangeStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Type_Drop</name></expr>,
        <expr><literal type="string">"Drop Type"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TYPE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterExtensionContentsStmt</name></expr>,
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_User</name></expr>,
        <expr><literal type="string">"User"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_User_Alter</name></expr>,
            <expr><name>AuditSql_User_Create</name></expr>,
            <expr><name>AuditSql_User_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_USER */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_User_Alter</name></expr>,
        <expr><literal type="string">"Alter User"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_USER */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterRoleSetStmt</name></expr>,
            <expr><name>T_AlterRoleStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_User_Create</name></expr>,
        <expr><literal type="string">"Create User"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_USER */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CreateRoleStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_User_Drop</name></expr>,
        <expr><literal type="string">"Drop User"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_ROLE</name></expr>,            <comment type="block">/* ROLESTMT_USER */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterRoleStmt</name></expr>,
            <expr><name>T_DropRoleStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_View</name></expr>,
        <expr><literal type="string">"View"</literal></expr>,
        <expr><block>{
            <expr><name>AuditSql_View_Alter</name></expr>,
            <expr><name>AuditSql_View_Create</name></expr>,
            <expr><name>AuditSql_View_Drop</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_View_Alter</name></expr>,
        <expr><literal type="string">"Alter View"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>T_AlterTableStmt</name></expr>,
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_View_Create</name></expr>,
        <expr><literal type="string">"Create View"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_ViewStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_View_Drop</name></expr>,
        <expr><literal type="string">"Drop View"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterExtensionContentsStmt</name></expr>,
            <expr><name>T_DropStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,

    <comment type="block">/* Add SQL Statement Shortcuts for Auditing    before AuditSql_ShortcutEnd */</comment>
    <expr><block>{
        <expr><name>AuditSql_ShortcutEnd</name></expr>,
        <expr><literal type="string">"ShortcutEnd"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,

    <comment type="block">/* Additional SQL Statement Shortcuts for Auditing */</comment>
    <expr><block>{
        <expr><name>AuditSql_AdditionalBegin</name></expr>,
        <expr><literal type="string">"AdditionalBegin"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_AlterSequence</name></expr>,
        <expr><literal type="string">"Alter Sequence"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterTableStmt</name></expr>,
            <expr><name>T_AlterSeqStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_AlterTable</name></expr>,
        <expr><literal type="string">"Alter Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterTableStmt</name></expr>,
            <expr><name>T_AlterTableMoveAllStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_CommentTable</name></expr>,
        <expr><literal type="string">"Comment Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>OBJECT_COLUMN</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CommentStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_DeleteTable</name></expr>,
        <expr><literal type="string">"Delete Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,            <comment type="block">/* cannot change (perform delete on) materialized view */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DeleteStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_GrantFunction</name></expr>,
        <expr><literal type="string">"Grant Function"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_FUNCTION</name></expr>,        <comment type="block">/* ACL_OBJECT_FUNCTION */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_GrantStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_GrantSequence</name></expr>,
        <expr><literal type="string">"Grant Sequence"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SEQUENCE</name></expr>,        <comment type="block">/* ACL_OBJECT_SEQUENCE */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_GrantStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_GrantTable</name></expr>,
        <expr><literal type="string">"Grant Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,            <comment type="block">/* ACL_OBJECT_RELATION */</comment>
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_GrantStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_GrantType</name></expr>,
        <expr><literal type="string">"Grant Type"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TYPE</name></expr>,            <comment type="block">/* ACL_OBJECT_TYPE */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_GrantStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_InsertTable</name></expr>,
        <expr><literal type="string">"Insert Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,            <comment type="block">/* cannot change (perform insert into) materialized view */</comment>            
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_InsertStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_LockTable</name></expr>,
        <expr><literal type="string">"Lock Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,            <comment type="block">/* can not lock on view and materialized view */</comment>            
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_LockStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_SelectSequence</name></expr>,
        <expr><literal type="string">"Select Sequence"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_SelectStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_SelectTable</name></expr>,
        <expr><literal type="string">"Select Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_SelectStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_SystemAudit</name></expr>,
        <expr><literal type="string">"System Audit"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_AuditStmt</name></expr>,
            <expr><name>T_CleanAuditStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_SystemGrant</name></expr>,
        <expr><literal type="string">"System Grant"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>T_GrantStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_UpdateTable</name></expr>,
        <expr><literal type="string">"Update Table"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,            <comment type="block">/* cannot change (perform update on) materialized view */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_UpdateStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,

    <comment type="block">/* Add Additional SQL Statement Shortcuts for Auditing before AuditSql_AdditionalEnd */</comment>
    <expr><block>{
        <expr><name>AuditSql_AdditionalEnd</name></expr>,
        <expr><literal type="string">"AdditionalEnd"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,

    <comment type="block">/* Schema Object Auditing Options */</comment>
    <expr><block>{
        <expr><name>AuditSql_SchemaObjectBegin</name></expr>,
        <expr><literal type="string">"SchemaObjectBegin"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Alter</name></expr>,
        <expr><literal type="string">"Alter"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <comment type="block">/* OBJECT_INDEX, */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AlterObjectDependsStmt</name></expr>,
            <expr><name>T_AlterObjectSchemaStmt</name></expr>,
            <expr><name>T_AlterSeqStmt</name></expr>,
            <expr><name>T_AlterTableStmt</name></expr>,
            <expr><name>T_AlterTableMoveAllStmt</name></expr>,
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Audit</name></expr>,
        <expr><literal type="string">"Audit"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>OBJECT_FUNCTION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_AuditStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Comment</name></expr>,
        <expr><literal type="string">"Comment"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>OBJECT_TYPE</name></expr>,
            <expr><name>OBJECT_FUNCTION</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_CommentStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Delete</name></expr>,
        <expr><literal type="string">"Delete"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,            <comment type="block">/* cannot change (perform delete on) materialized view */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_DeleteStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Grant</name></expr>,
        <expr><literal type="string">"Grant"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,            <comment type="block">/* ACL_OBJECT_RELATION */</comment>
            <expr><name>OBJECT_VIEW</name></expr>,            <comment type="block">/* ACL_OBJECT_RELATION */</comment>
            <expr><name>OBJECT_MATVIEW</name></expr>,            <comment type="block">/* ACL_OBJECT_RELATION */</comment>
            <expr><name>OBJECT_SEQUENCE</name></expr>,        <comment type="block">/* ACL_OBJECT_SEQUENCE */</comment>
            <expr><name>OBJECT_FUNCTION</name></expr>,        <comment type="block">/* ACL_OBJECT_FUNCTION */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_GrantStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
<comment type="block">/*    {
 *        AuditSql_Index,                // Audit/NoAudit Index On Table/MView is not supported in current version
 *        "Index",
 *        {Audit_InvalidEnum},
 *        {
 *            OBJECT_TABLE,
 *            OBJECT_MATVIEW,
 *            Audit_InvalidEnum
 *        },
 *        {
 *            T_IndexStmt,            // Create Index on Table
 *            T_DropStmt,                // Drop Index
 *            Audit_InvalidEnum
 *        },
 *    },
 */</comment> <expr><block>{
        <expr><name>AuditSql_Insert</name></expr>,
        <expr><literal type="string">"Insert"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,            <comment type="block">/* can perform insert on materialized view */</comment>        
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_InsertStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,    
     <expr><block>{
        <expr><name>AuditSql_Lock</name></expr>,
        <expr><literal type="string">"Lock"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,            <comment type="block">/* can not lock on view and materialized view */</comment>
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_LockStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Rename</name></expr>,
        <expr><literal type="string">"Rename"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <comment type="block">/* OBJECT_INDEX, */</comment>
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <comment type="block">/* OBJECT_COLUMN, */</comment>
            <expr><name>OBJECT_TYPE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_RenameStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Select</name></expr>,
        <expr><literal type="string">"Select"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>OBJECT_SEQUENCE</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_SelectStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><name>AuditSql_Update</name></expr>,
        <expr><literal type="string">"Update"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{
            <expr><name>OBJECT_TABLE</name></expr>,
            <expr><name>OBJECT_VIEW</name></expr>,
            <expr><name>OBJECT_MATVIEW</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
        <expr><block>{
            <expr><name>T_UpdateStmt</name></expr>,
            <expr><name>Audit_InvalidEnum</name></expr>
        }</block></expr>,
    }</block></expr>,

    <comment type="block">/* Add Schema Object Auditing Options before AuditSql_SchemaObjectEnd */</comment>
    <expr><block>{
        <expr><name>AuditSql_SchemaObjectEnd</name></expr>,
        <expr><literal type="string">"SchemaObjectEnd"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>,

    <expr><block>{
        <expr><name>AuditSQL_Ivalid</name></expr>,
        <expr><literal type="string">"InvalidAuditSQL"</literal></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
        <expr><block>{<expr><name>Audit_InvalidEnum</name></expr>}</block></expr>,
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct 
<block>{
    <decl_stmt><decl><type><name>AuditSQL</name></type>    <name>action_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>action_index</name></decl>;</decl_stmt>
}</block> <decl><name><name>gAuditStmtActionIndexMap</name> <index>[<expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>gAuditStmtActionMap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>gAuditStmtActionMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr> }</block></expr></init></decl>;</struct>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_001_For_Input</name></cpp:ifdef> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_build_idx_for_stmt_action_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>gAuditStmtActionIndexMap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>gAuditStmtActionIndexMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>gAuditStmtActionMap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>gAuditStmtActionMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>audit_get_stmt_map_size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>gAuditStmtActionIndexMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action_id</name> <operator>=</operator> <name><name>gAuditStmtActionMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gAuditStmtActionIndexMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>audit_get_type_string</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>type_str</name> <init>= <expr><literal type="string">"Invalid Audit Type"</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditType_Statement</name></expr>:</case>
            <expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Statement Audit"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditType_User</name></expr>:</case>
            <expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"User Audit"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditType_Object</name></expr>:</case>
            <expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Object Audit"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>type_str</name> <operator>=</operator> <literal type="string">"Invalid Audit Type"</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>type_str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type> <name>audit_get_mode_string</name><parameter_list>(<parameter><decl><type><name>AuditMode</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>mode_str</name> <init>= <expr><literal type="string">"Invalid Audit Mode"</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditMode_All</name></expr>:</case>
            <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"Audit Always"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditMode_Success</name></expr>:</case>
            <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"Audit When Success"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditMode_Fail</name></expr>:</case>
            <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"Audit When Not Success"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditMode_None</name></expr>:</case>
            <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"Audit Never"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>mode_str</name> <operator>=</operator> <literal type="string">"Invalid Audit Mode"</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>mode_str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Size</name></type> <name>audit_get_stmt_map_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>gAuditStmtActionMap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>gAuditStmtActionMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>audit_get_stmt_map_by_action</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>gAuditStmtActionIndexMap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>gAuditStmtActionIndexMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>gAuditStmtActionMap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>gAuditStmtActionMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* first get index from gAuditStmtActionIndexMap */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>audit_get_stmt_map_size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>gAuditStmtActionIndexMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action_id</name> <operator>==</operator> <name>action_id</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>gAuditStmtActionIndexMap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>action_index</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* not find index in gAuditStmtActionIndexMap */</comment>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&gt;=</operator> <operator>(</operator><name>int32</name><operator>)</operator><call><name>audit_get_stmt_map_size</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>audit_get_stmt_map_by_index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>stmt</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>stmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>audit_get_stmt_map_by_index</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>int32</name><operator>)</operator><call><name>audit_get_stmt_map_size</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>gAuditStmtActionMap</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>audituser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>audituser_arg</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>audituser_arg</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>roleid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><name>roleid</name> <operator>==</operator> <name>DEFAULT_ROLE_AUDIT_SYS_USERID</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>pg_get_audit_action_name</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>action_id</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>action_name</name> <init>= <expr><literal type="string">"InvalidStmt"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><operator>(</operator><name>AuditSQL</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>action_name</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>action_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>pg_get_audit_action_mode</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>action_mode</name> <init>= <expr><call><name>PG_GETARG_CHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>mode_str</name> <init>= <expr><call><name>audit_get_mode_string</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator> <name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_valid_enum</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>Audit_InvalidEnum</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
 * check whether an AuditStmtMap item is a shortcut AuditSQL,
 * such as: AuditSql_Extension, AuditSql_Function, and so on ...
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_shortcut_audit_stmt</name><parameter_list>(<parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name>AuditSQL_Ivalid</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>action_id</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

    <comment type="block">/* shortcut is only defined between AuditSql_ShortcutBegin and AuditSql_ShortcutEnd */</comment>    
    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_ShortcutBegin</name> <operator>&amp;&amp;</operator>
        <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_ShortcutEnd</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isa_valid_enum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>sub_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Audit xxx */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_statement_action_id</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_ShortcutBegin</name> <operator>&amp;&amp;</operator>
        <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_ShortcutEnd</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_AdditionalBegin</name> <operator>&amp;&amp;</operator>
        <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_AdditionalEnd</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>AuditSql_All</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Audit xxx BY xxx */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_user_action_id</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_ShortcutBegin</name> <operator>&amp;&amp;</operator>
        <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_ShortcutEnd</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_AdditionalBegin</name> <operator>&amp;&amp;</operator>
        <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_AdditionalEnd</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>AuditSql_All</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Audit xxx ON xxx */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_object_action_id</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_SchemaObjectBegin</name> <operator>&amp;&amp;</operator>
        <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_SchemaObjectEnd</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>AuditSql_All</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_statement_audit_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AuditType_Statement</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_user_audit_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AuditType_User</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isa_object_audit_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AuditType_Object</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_audit_environment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IsNormalProcessingMode</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <name>IsPostmasterEnvironment</name> <operator>&amp;&amp;</operator>
        <name>IsUnderPostmaster</name> <operator>&amp;&amp;</operator>
        <name>IsBackendPostgres</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_audit_enable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>enable_audit</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_o</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rel_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rel_cacheid</name> <operator>=</operator> <name>AUDITOBJCONF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>oid_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>oid_cacheid</name> <operator>=</operator> <name>AUDITOBJCONFOID</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_d</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rel_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rel_cacheid</name> <operator>=</operator> <name>AUDITOBJDEFAULT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>oid_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>oid_cacheid</name> <operator>=</operator> <name>AUDITOBJDEFAULTOID</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_u</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rel_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rel_cacheid</name> <operator>=</operator> <name>AUDITUSERCONF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>oid_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>oid_cacheid</name> <operator>=</operator> <name>AUDITUSERCONFOID</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_cacheid_pg_audit_s</name><parameter_list>(<parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>rel_cacheid</name></decl></parameter>, 
                                           <parameter><decl><type><name>int32</name> <modifier>*</modifier></type> <name>oid_cacheid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rel_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rel_cacheid</name> <operator>=</operator> <name>AUDITSTMTCONF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>oid_cacheid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>oid_cacheid</name> <operator>=</operator> <name>AUDITSTMTCONFOID</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether AuditSQL is valid for AuditType
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>audit_check_action_type</name><parameter_list>(<parameter><decl><type><name>AuditType</name></type> <name>audit_type</name></decl></parameter>, 
                                      <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>audit_type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditType_Statement</name></expr>:</case>
            <return>return <expr><call><name>isa_statement_action_id</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>AuditType_User</name></expr>:</case>
            <return>return <expr><call><name>isa_user_action_id</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>AuditType_Object</name></expr>:</case>
            <return>return <expr><call><name>isa_object_action_id</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>;</return>
            <break>break;</break>
        <default>default:</default>
            <return>return <expr><name>false</name></expr>;</return>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get all action_id list for AuditSql_All
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_expand_AuditSql_All</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Size</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name>AuditSQL_Ivalid</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditType_Statement</name></expr>:</case>
        <case>case <expr><name>AuditType_User</name></expr>:</case>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>audit_get_stmt_map_size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>audit_get_stmt_map_by_index</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>action_id</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

                <comment type="block">/* process SQL Statement Shortcuts */</comment>
                <if_stmt><if>if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_ShortcutBegin</name> <operator>&amp;&amp;</operator>
                    <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_ShortcutEnd</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isa_shortcut_audit_stmt</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>audit_append_unique_action_item</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>action_id</name> <operator>&gt;</operator> <name>AuditSql_AdditionalBegin</name> <operator>&amp;&amp;</operator>
                         <name>action_id</name> <operator>&lt;</operator> <name>AuditSql_AdditionalEnd</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* process for Additional SQL Statement */</comment>
                    <expr_stmt><expr><call><name>audit_append_unique_action_item</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>action_id</name> <operator>&gt;=</operator> <name>AuditSql_SchemaObjectBegin</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* stop loop at AuditSql_SchemaObjectBegin */</comment>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return;</return>
            <break>break;</break>
        <case>case <expr><name>AuditType_Object</name></expr>:</case>
            <for>for <control>(<init><expr><name>action_id</name> <operator>=</operator> <name>AuditSql_SchemaObjectBegin</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> 
                 <condition><expr><name>action_id</name> <operator>&lt;</operator> <name>AuditSql_SchemaObjectEnd</name></expr>;</condition>
                 <incr><expr><name>action_id</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* iterate to the end of gAuditStmtActionMap, so just break */</comment>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Audit ALL on DEFAULT */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* Assert(ctxt-&gt;object_address == InvalidObjectAddress); */</comment>
                    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsValidObjectAddress</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>audit_append_unique_action_item</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* Audit ALL on TABLE TEST */</comment>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Audit_MaxObjectTypePerStmt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>ObjectType</name></type> <name>obj_type</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>obj_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isa_valid_enum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>obj_type</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>obj_type</name> <operator>==</operator> <name><name>stmt</name><operator>-&gt;</operator><name>object_type</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>audit_append_unique_action_item</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <return>return;</return>
            <break>break;</break>
        <default>default:</default>
            <return>return;</return>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audit_check_relkind</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>,
                                <parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>object_name</name></decl></parameter>,
                                <parameter><decl><type><name>ObjectType</name></type> <name>object_type</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Form_pg_class</name></type> <name>classForm</name> <init>= <expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>relkind</name> <init>= <expr><name><name>classForm</name><operator>-&gt;</operator><name>relkind</name></name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>object_type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_INDEX</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">" \"%s\" is no an index"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_SEQUENCE</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">" \"%s\" is no a sequence"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_RELATION</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">" \"%s\" is no a table"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_VIEW</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">" \"%s\" is no a view"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_MATVIEW</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">" \"%s\" is no a materialized view"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_RELATION</name> <operator>&amp;&amp;</operator>
                <name>relkind</name> <operator>!=</operator> <name>RELKIND_VIEW</name> <operator>&amp;&amp;</operator>
                <name>relkind</name> <operator>!=</operator> <name>RELKIND_MATVIEW</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">" \"%s\" is no a relation's column"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported relkind of \"%s\" to audit"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_object_internal</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>object_name</name></decl></parameter>, 
                                           <parameter><decl><type><name>ObjectType</name></type> <name>object_type</name></decl></parameter>,
                                           <parameter><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type> <name>object_address</name></decl></parameter>)</parameter_list>

<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>object_name</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type> <name>obj_nspoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>object_type</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
            <case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
            <case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
            <case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
            <case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
            <case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name>object_type</name></expr></argument>,
                                             <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>object_name</name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>,
                                             <argument><expr><name>AccessShareLock</name></expr></argument>,
                                             <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>audit_check_relkind</name><argument_list>(<argument><expr><name>relation</name></expr></argument>,
                                    <argument><expr><name>object_name</name></expr></argument>,
                                    <argument><expr><name>object_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>lfoid</name> <init>= <expr><call><name>FunctionGetOidsByName</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block">/* noly supported the first function in current version */</comment>
                <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>ProcedureRelationId</name></expr></argument>, <argument><expr><call><name>linitial_oid</name><argument_list>(<argument><expr><name>lfoid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>lfoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TypeName</name> <modifier>*</modifier></type> <name>type_name</name> <init>= <expr><call><name>makeTypeNameFromNameList</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name>object_type</name></expr></argument>,
                                             <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>type_name</name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>,
                                             <argument><expr><name>AccessShareLock</name></expr></argument>,
                                             <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <default>default:</default>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported object \"%s\" to audit"</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>obj_nspoid</name> <operator>=</operator> <call><name>get_object_namespace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IsSystemNamespace</name><argument_list>(<argument><expr><name>obj_nspoid</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>IsToastNamespace</name><argument_list>(<argument><expr><name>obj_nspoid</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can not perform audit on system object \"%s\""</literal></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>object_address</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>object_address</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_object</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                 <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>

<block>{<block_content>
    <expr_stmt><expr><call><name>audit_process_object_internal</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>,
                                  <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_type</name></name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>isa_object_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_process_object</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                        <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>audit_process_object_internal</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>,
                                  <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_type</name></name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_check_connection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_DATANODE</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsConnFromCoord</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can not execute audit statement directly on datanode"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsConnFromCoord</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>!</operator><call><name>IsConnFromApp</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid connection to execute audit statement on coordinator"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_free_stmt_context</name><parameter_list>(<parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ctxt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_action_items</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_action_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_action_items</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_free_stmt_context</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ctxt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AuditModeMi</name></type> <name>audit_mode_minus</name><parameter_list>(<parameter><decl><type><name>AuditMode</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>AuditMode</name></type> <name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>second</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>AuditModeMi_Equal</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>second</name> <operator>==</operator> <name>AuditMode_All</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>AuditModeMi_Overtop</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>first</name> <operator>==</operator> <name>AuditMode_All</name> <operator>&amp;&amp;</operator> <name>second</name> <operator>==</operator> <name>AuditMode_Fail</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>AuditModeMi_Success</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>first</name> <operator>==</operator> <name>AuditMode_All</name> <operator>&amp;&amp;</operator> <name>second</name> <operator>==</operator> <name>AuditMode_Success</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>AuditModeMi_Fail</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>first</name> <operator>==</operator> <name>AuditMode_Success</name> <operator>&amp;&amp;</operator> <name>second</name> <operator>==</operator> <name>AuditMode_Fail</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>AuditModeMi_Mutex</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>first</name> <operator>==</operator> <name>AuditMode_Fail</name> <operator>&amp;&amp;</operator> <name>second</name> <operator>==</operator> <name>AuditMode_Success</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>AuditModeMi_Mutex</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>AuditModeMi_Ivalid</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>AuditModeMi_Ivalid</name></expr>;</return>    
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_append_unique_action_item</name><parameter_list>(<parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                            <parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>action_item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_action_items</name></name> <operator>=</operator> <call><name>list_append_unique_ptr</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_action_items</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>action_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_action_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>action_list</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>action_list</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"none statement to audit"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stmt-&gt;action_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><operator>(</operator><name>AuditSQL</name><operator>)</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>action_item</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can not found \"%d\" in action stmt map"</literal></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>action_id</name> <operator>==</operator> <name><name>action_item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <call><name>list_tail</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>action_list</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/*
         *    isa_statement_action_id ?
         *    isa_user_action_id ?
         *    isa_object_action_id ?
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>audit_check_action_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" can not be used for \"%s\""</literal></expr></argument>,
                            <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                            <argument><expr><call><name>audit_get_type_string</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* check if this object can be audit by this action */</comment>
        <comment type="block">/* Audit ALL on TABLE TEST */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isa_object_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>!=</operator> <name>NIL</name> <operator>&amp;&amp;</operator>
            <name>action_id</name> <operator>!=</operator> <name>AuditSql_All</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>action_can_audit_on_object</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Audit_MaxObjectTypePerStmt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ObjectType</name></type> <name>obj_type</name> <init>= <expr><name><name>action_item</name><operator>-&gt;</operator><name>obj_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isa_valid_enum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>obj_type</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>obj_type</name> <operator>==</operator> <name><name>stmt</name><operator>-&gt;</operator><name>object_type</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>action_can_audit_on_object</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>action_can_audit_on_object</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can not audit \"%s\" on \"%s\""</literal></expr></argument>,
                             <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* add sub_id of shortcut into lid */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isa_shortcut_audit_stmt</name><argument_list>(<argument><expr><name>action_item</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Audit_MaxStmtPerShortcut</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditSQL</name></type> <name>sub_action_id</name> <init>= <expr><name><name>action_item</name><operator>-&gt;</operator><name>sub_id</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>isa_valid_enum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>sub_action_id</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>sub_action_item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><name>sub_action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>sub_action_id</name> <operator>==</operator> <name><name>sub_action_item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>audit_append_unique_action_item</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>sub_action_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>action_id</name> <operator>==</operator> <name>AuditSql_All</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_expand_AuditSql_All</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>action_id</name> <operator>==</operator> <name><name>action_item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>audit_append_unique_action_item</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>action_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_user_list_internal</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>user_list</name></decl></parameter>,
                                             <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type> <name>l_user_oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>luid</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>user_list</name> <operator>==</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>user_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Oid</name></type> <name>user_id</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>user_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>user_name</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>user_id</name> <operator>=</operator> <call><name>get_role_oid</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ROLE_SPECIFICATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"user \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>luid</name> <operator>=</operator> <call><name>list_append_unique_oid</name><argument_list>(<argument><expr><name>luid</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>luid</name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>l_user_oids</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>l_user_oids</name> <operator>=</operator> <name>luid</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_process_user_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                    <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isa_user_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>audit_process_user_list_internal</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_process_user_list</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                          <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>

<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>audit_process_user_list_internal</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>audit_object_type_string</name><parameter_list>(<parameter><decl><type><name>ObjectType</name></type> <name>object_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>report_error</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>object_type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
            <return>return <expr><literal type="string">"Index"</literal></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
            <return>return <expr><literal type="string">"Sequence"</literal></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
            <return>return <expr><literal type="string">"Table"</literal></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
            <return>return <expr><literal type="string">"View"</literal></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
            <return>return <expr><literal type="string">"Materialized View"</literal></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
            <return>return <expr><literal type="string">"Column"</literal></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
            <return>return <expr><literal type="string">"Function"</literal></expr>;</return>
            <break>break;</break>
        <case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
            <return>return <expr><literal type="string">"Type"</literal></expr>;</return>
            <break>break;</break>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><name>report_error</name> <operator>==</operator> <name>true</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported object type %d "</literal></expr></argument>, <argument><expr><name>object_type</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="string">"UnknownObjectType"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_final_to_string</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                  <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditType_Statement</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/*Audit xxx, so do nothing here */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>isa_statement_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* do nothing */</comment>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AuditType_User</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"BY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stmt-&gt;user_list</argument>)</argument_list></macro>
            <block>{<block_content>    
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <call><name>list_tail</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AuditType_Object</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"ON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Audit xxx ON DEFAULT */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"DEFAULT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s "</literal></expr></argument>,
                                 <argument><expr><call><name>audit_object_type_string</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_type</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsurpported audit type"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_mode</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditMode_All</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditMode_Success</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"WHENEVER SUCCESSFUL; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditMode_Fail</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"WHENEVER NOT SUCCESSFUL; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>AuditMode_None</name></expr>:</case>
            <comment type="block">/* do nothing */</comment>
            <break>break;</break>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsurpported audit mode"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_generate_one_record</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name></decl></parameter>,
                                      <parameter><decl><type><name>Oid</name></type> <name>user_id</name></decl></parameter>,
                                      <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier><modifier>*</modifier></type> <name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>rcd</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AuditStmtRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rcd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rcd</name><operator>-&gt;</operator><name>action_item</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditType_Statement</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name><name>rcd</name><operator>-&gt;</operator><name>obj_address</name></name> <operator>=</operator> <name>InvalidObjectAddress</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AuditType_User</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name><name>rcd</name><operator>-&gt;</operator><name>obj_address</name></name></expr></argument>, <argument><expr><name>AuthIdRelationId</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AuditType_Object</name></expr>:</case>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>rcd</name><operator>-&gt;</operator><name>obj_address</name></name> <operator>=</operator> <name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name></name></expr>;</expr_stmt>
                <comment type="block">/* Assert(rcd-&gt;obj_address != InvalidObjectAddress); */</comment>
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsValidObjectAddress</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>rcd</name><operator>-&gt;</operator><name>obj_address</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>rcd</name><operator>-&gt;</operator><name>obj_address</name></name> <operator>=</operator> <name>InvalidObjectAddress</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsurpported audit type"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>record</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>record</name> <operator>=</operator> <name>rcd</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_generate_record_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                       <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                       <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type> <name>lrecord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>lresult</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>ctxt-&gt;l_action_items</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><operator>(</operator><name>AuditStmtMap</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <macro><name>foreach</name><argument_list>(<argument>lu</argument>, <argument>ctxt-&gt;l_user_oids</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Oid</name></type> <name>user_id</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>isa_user_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>isa_user_action_id</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>audit_generate_one_record</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>record</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>lresult</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>lresult</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>isa_object_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> 
                   <call><name>isa_statement_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>isa_object_action_id</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
                   <call><name>isa_statement_action_id</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>audit_generate_one_record</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>record</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>lresult</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>lresult</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>lrecord</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>lrecord</name> <operator>=</operator> <name>lresult</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_stmt_conf</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                         <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_pg_audit_s</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>replaces</name><index>[<expr><name>Natts_pg_audit_s</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_pg_audit_s</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>newtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name>AuditSQL_Ivalid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>action_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditMode</name></type> <name>action_mode</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_mode</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>auditor_id</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>    <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * initialize arrays needed for heap_form_tuple or heap_modify_tuple
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Natts_pg_audit_s</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>action_item</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>action_id</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>action_name</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>syscache_id</name></name></expr></argument>, <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* already exists this action record, maybe update, 
         * maybe ignoe when the same case 
         */</comment>
        <decl_stmt><decl><type><name>Form_audit_stmt_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_stmt_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>should_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* action_mode and action_ison are both differ */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator>
            <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Ivalid</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"001. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"002. attempt to close audit configuration \"%s\" more than exists "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* attempt to noaudit a subset of tup */</comment>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>==</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_ison equal but action_mode differs */</comment>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>mode_mi</name> <operator>=</operator> <name>AuditModeMi_All</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"003. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"004. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_mode equal while action_ison differs */</comment>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_stmt_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"005. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"006. ignore to reclose a canceled audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* do update catalog systable */</comment>
        <if_stmt><if>if <condition>(<expr><name>should_update</name> <operator>==</operator> <name>true</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>,
                                       <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>values</name></expr></argument>,
                                       <argument><expr><name>nulls</name></expr></argument>,
                                       <argument><expr><name>replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* not exists this action record */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* noaudit a none action record */</comment>
            <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"007. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* should insert new audit configuration */</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_stmt_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>values</name></expr></argument>,
                                 <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>newtup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_user_conf</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                         <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                         <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_pg_audit_u</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>replaces</name><index>[<expr><name>Natts_pg_audit_u</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_pg_audit_u</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>newtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name>AuditSQL_Ivalid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>action_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditMode</name></type> <name>action_mode</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_mode</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>auditor_id</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>user_addr</name> <init>= <expr><name><name>record</name><operator>-&gt;</operator><name>obj_address</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>    <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * initialize arrays needed for heap_form_tuple or heap_modify_tuple
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Natts_pg_audit_u</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>action_item</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>action_id</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>action_name</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>SearchSysCache2</name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>syscache_id</name></name></expr></argument>, 
                             <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>user_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>, 
                             <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* already exists this action record, maybe update, 
         * maybe ignoe when the same case 
         */</comment>
        <decl_stmt><decl><type><name>Form_audit_user_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_user_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>should_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* action_mode and action_ison are both differ */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator>
            <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Ivalid</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"001. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"002. attempt to close audit configuration \"%s\" more than exists "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* attempt to noaudit a subset of tup */</comment>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>==</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_ison equal but action_mode differs */</comment>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>mode_mi</name> <operator>=</operator> <name>AuditModeMi_All</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"003. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"004. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_mode equal while action_ison differs */</comment>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_user_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"005. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"006. ignore to reclose a canceled audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* do update catalog systable */</comment>
        <if_stmt><if>if <condition>(<expr><name>should_update</name> <operator>==</operator> <name>true</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>,
                                       <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>values</name></expr></argument>,
                                       <argument><expr><name>nulls</name></expr></argument>,
                                       <argument><expr><name>replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>myself</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* not exists this action record */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* noaudit a none action record */</comment>
            <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"007. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* should insert new audit configuration */</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_user_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>user_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_user_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>values</name></expr></argument>,
                                 <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>myself</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name><name>writer</name><operator>-&gt;</operator><name>sysrel_oid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myself</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myself</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>enable_audit_depend</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>recordSharedDependencyOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>myself</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user_addr</name></expr></argument>, <argument><expr><name>SHARED_DEPENDENCY_POLICY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>newtup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_obj_conf</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                        <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                        <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                        <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                        <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_pg_audit_o</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>replaces</name><index>[<expr><name>Natts_pg_audit_o</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_pg_audit_o</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>newtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name>AuditSQL_Ivalid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>action_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditMode</name></type> <name>action_mode</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_mode</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>auditor_id</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>obj_addr</name> <init>= <expr><name><name>record</name><operator>-&gt;</operator><name>obj_address</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>    <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * initialize arrays needed for heap_form_tuple or heap_modify_tuple
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Natts_pg_audit_o</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>action_item</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>action_id</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>action_name</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>SearchSysCache4</name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>syscache_id</name></name></expr></argument>,
                             <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>obj_addr</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>obj_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>obj_addr</name><operator>.</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* already exists this action record, maybe update, 
         * maybe ignoe when the same case 
         */</comment>
        <decl_stmt><decl><type><name>Form_audit_obj_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_obj_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>should_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* action_mode and action_ison are both differ */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator>
            <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Ivalid</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"001. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"002. attempt to close audit configuration \"%s\" more than exists "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* attempt to noaudit a subset of tup */</comment>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>==</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_ison equal but action_mode differs */</comment>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>mode_mi</name> <operator>=</operator> <name>AuditModeMi_All</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"003. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"004. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_mode equal while action_ison differs */</comment>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"005. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"006. ignore to reclose a canceled audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* do update catalog systable */</comment>
        <if_stmt><if>if <condition>(<expr><name>should_update</name> <operator>==</operator> <name>true</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>,
                                       <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>values</name></expr></argument>,
                                       <argument><expr><name>nulls</name></expr></argument>,
                                       <argument><expr><name>replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>myself</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* not exists this action record */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* noaudit a none action record */</comment>
            <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"007. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* should insert new audit configuration */</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_class_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>obj_addr</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_object_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>obj_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_object_sub_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>obj_addr</name><operator>.</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_conf_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>values</name></expr></argument>,
                                 <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>myself</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name><name>writer</name><operator>-&gt;</operator><name>sysrel_oid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myself</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myself</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>enable_audit_depend</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>recordDependencyOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>myself</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_addr</name></expr></argument>, <argument><expr><name>DEPENDENCY_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>newtup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_sysrel_obj_def_opts</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name></decl></parameter>,
                                             <parameter><decl><type><name>Relation</name></type> <name>pg_sysrel</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_pg_audit_d</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>replaces</name><index>[<expr><name>Natts_pg_audit_d</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_pg_audit_d</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>oldtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>newtup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name>AuditSQL_Ivalid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>action_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditMode</name></type> <name>action_mode</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_mode</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>auditor_id</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type>    <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * initialize arrays needed for heap_form_tuple or heap_modify_tuple
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Natts_pg_audit_d</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>action_item</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>action_id</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>action_name</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name><name>writer</name><operator>-&gt;</operator><name>syscache_id</name></name></expr></argument>, <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* already exists this action record, maybe update, 
         * maybe ignoe when the same case 
         */</comment>
        <decl_stmt><decl><type><name>Form_audit_obj_def_opts</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_obj_def_opts</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>should_update</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* action_mode and action_ison are both differ */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator>
            <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Ivalid</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"001. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"002. attempt to close audit configuration \"%s\" more than exists "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* attempt to noaudit a subset of tup */</comment>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>!=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>==</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_ison equal but action_mode differs */</comment>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditModeMi</name></type> <name>mode_mi</name> <init>= <expr><call><name>audit_mode_minus</name><argument_list>(<argument><expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></argument>, <argument><expr><name>action_mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Overtop</name> <operator>||</operator> <name>mode_mi</name> <operator>==</operator> <name>AuditModeMi_Mutex</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>mode_mi</name> <operator>=</operator> <name>AuditModeMi_All</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>mode_mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"003. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"004. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name> <operator>==</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>action_mode</name> <operator>&amp;&amp;</operator> 
                 <name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name> <operator>!=</operator> <name>action_ison</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* action_mode equal while action_ison differs */</comment>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_audit_obj_def_opts_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>should_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action_ison</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"005. ignore to redefine an existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"006. ignore to reclose a canceled audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* do update catalog systable */</comment>
        <if_stmt><if>if <condition>(<expr><name>should_update</name> <operator>==</operator> <name>true</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>,
                                       <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>values</name></expr></argument>,
                                       <argument><expr><name>nulls</name></expr></argument>,
                                       <argument><expr><name>replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>newtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* not exists this action record */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* noaudit a none action record */</comment>
            <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"007. ignore to close a non-existent audit configuration \"%s\" "</literal></expr></argument>, <argument><expr><name>action_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* should insert new audit configuration */</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_auditor_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>auditor_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_mode</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>action_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_audit_obj_def_opts_action_ison</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>action_ison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>newtup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>values</name></expr></argument>,
                                 <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>newtup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_get_record_writer</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                    <parameter><decl><type><name>AuditRecordWriter</name> <modifier>*</modifier></type> <name>writer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AuditRecordWriter</name></type> <name>wr</name> <init>= <expr><block>{<expr><name>InvalidOid</name></expr>, <expr><name>InvalidSysCacheID</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>AuditType_Statement</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_s</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>syscache_id</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Audit xxx */</comment>
            <expr_stmt><expr><name><name>wr</name><operator>.</operator><name>writer_fn</name></name> <operator>=</operator> <name>audit_write_sysrel_stmt_conf</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name><name>wr</name><operator>.</operator><name>syscache_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>sysrel_oid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AuditType_User</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_u</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>syscache_id</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* Audit xxx By xxx */</comment>
            <expr_stmt><expr><name><name>wr</name><operator>.</operator><name>writer_fn</name></name> <operator>=</operator> <name>audit_write_sysrel_user_conf</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name><name>wr</name><operator>.</operator><name>syscache_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>sysrel_oid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>AuditType_Object</name></expr>:</case>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_o</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>syscache_id</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* Audit xxx ON xxx */</comment>
                <expr_stmt><expr><name><name>wr</name><operator>.</operator><name>writer_fn</name></name> <operator>=</operator> <name>audit_write_sysrel_obj_conf</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name><name>wr</name><operator>.</operator><name>syscache_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>sysrel_oid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_d</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>syscache_id</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Audit xxx ON DEFAULT */</comment>
                <expr_stmt><expr><name><name>wr</name><operator>.</operator><name>writer_fn</name></name> <operator>=</operator> <name>audit_write_sysrel_obj_def_opts</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name><name>wr</name><operator>.</operator><name>syscache_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>wr</name><operator>.</operator><name>sysrel_oid</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsurpported audit type"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>writer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>writer</name> <operator>=</operator> <name>wr</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_write_recod_list</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>,
                                   <parameter><decl><type><name>AuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>,
                                   <parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>lrecord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AuditRecordWriter</name></type> <name>writer</name> <init>= <expr><block>{<expr><name>InvalidOid</name></expr>, <expr><name>InvalidSysCacheID</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type> <name>pg_sysrel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>audit_get_record_writer</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>sysrel_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>syscache_id</name></name> <operator>!=</operator> <name>InvalidSysCacheID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>writer_fn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pg_sysrel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name><name>writer</name><operator>.</operator><name>sysrel_oid</name></name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>lrecord</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditStmtRecord</name> <modifier>*</modifier></type> <name>record</name> <init>= <expr><operator>(</operator><name>AuditStmtRecord</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>writer</name><operator>.</operator><name>writer_fn</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>stmt</name><operator>,</operator> 
                              <name>ctxt</name><operator>,</operator>
                              <operator>&amp;</operator><name>writer</name><operator>,</operator>
                              <name>record</name><operator>,</operator>
                              <name>pg_sysrel</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>CacheInvalidateRelcache</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_sysrel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_002_For_Clean</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_remove_tuple_by_oid</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>cacheid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>cacheid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_indoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Relation</name></type> <name>sys_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><name>NoLock</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sys_nkeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><name>Audit_nSysScanKeys</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>sys_reloid</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>sys_indoid</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>lockmode</name> <operator>=</operator> <name>RowExclusiveLock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                    <argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/* index scan */</comment>
        <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                                <argument><expr><name>sys_indoid</name></expr></argument>,
                                <argument><expr><name>true</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>, 
                                <argument><expr><name>sys_nkeys</name></expr></argument>,
                                <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>lockmode</name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                    <argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
                    <argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDGT</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/* seq scan */</comment>
        <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                                <argument><expr><name>sys_indoid</name></expr></argument>,
                                <argument><expr><name>false</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>, 
                                <argument><expr><name>sys_nkeys</name></expr></argument>,
                                <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CatalogTupleDelete</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CacheInvalidateRelcache</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_statement</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                        <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_Statement</name><operator>||</operator>
           <name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_All</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RemoveStmtAuditById</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_user_by_oids</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_user_oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_indoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Relation</name></type> <name>sys_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ObjectAddresses</name> <modifier>*</modifier></type> <name>objects</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_u</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>sys_reloid</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>sys_indoid</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>new_object_addresses</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>l_user_oids</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Oid</name></type> <name>user_id</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><name>Audit_nSysScanKeys</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sys_nkeys</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                        <argument><expr><name>Anum_audit_user_conf_user_id</name></expr></argument>,
                        <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                        <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

            <comment type="block">/* index scan */</comment>
            <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                                    <argument><expr><name>sys_indoid</name></expr></argument>,
                                    <argument><expr><name>true</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>, 
                                    <argument><expr><name>sys_nkeys</name></expr></argument>,
                                    <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                        <argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
                        <argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDGT</name></expr></argument>,
                        <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

            <comment type="block">/* seq scan */</comment>
            <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                                    <argument><expr><name>sys_indoid</name></expr></argument>,
                                    <argument><expr><name>false</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>, 
                                    <argument><expr><name>sys_nkeys</name></expr></argument>,
                                    <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Oid</name></type> <name>tupoid</name> <init>= <expr><call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>enable_audit_depend</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>obj</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>tupoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add_exact_object_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>CatalogTupleDelete</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>CacheInvalidateRelcache</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* perform delete depend tupe */</comment>
    <expr_stmt><expr><call><name>performMultipleDeletions</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name>DROP_RESTRICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* PERFORM_DELETION_INTERNAL */</comment>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free_object_addresses</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_user</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                 <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_ByUser</name> <operator>||</operator>
               <name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_All</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>audit_clean_for_user_by_oids</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>l_user_oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name> <operator>==</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_User</name> <operator>||</operator>
               <name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_All</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>audit_clean_for_user_by_oids</name><argument_list>(<argument><expr><call><name>list_make1_oid</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_object</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                      <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_indoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><name>NoLock</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type> <name>sys_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sys_nkeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><name>Audit_nSysScanKeys</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ObjectAddresses</name> <modifier>*</modifier></type> <name>objects</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_All</name> <operator>||</operator>
           <name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_Object</name> <operator>||</operator>
           <name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_OnObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_o</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>sys_reloid</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>sys_indoid</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>new_object_addresses</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if (ctxt-&gt;object_address == InvalidObjectAddress) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidObjectAddress</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>lockmode</name> <operator>=</operator> <name>AccessExclusiveLock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                    <argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
                    <argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDGT</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/* seq scan */</comment>
        <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                                <argument><expr><name>sys_indoid</name></expr></argument>,
                                <argument><expr><name>false</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>, 
                                <argument><expr><name>sys_nkeys</name></expr></argument>,
                                <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>lockmode</name> <operator>=</operator> <name>RowExclusiveLock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                    <argument><expr><name>Anum_audit_obj_conf_class_id</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                    <argument><expr><name>Anum_audit_obj_conf_object_id</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                    <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                    <argument><expr><name>Anum_audit_obj_conf_object_sub_id</name></expr></argument>,
                    <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                    <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>object_address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/* index scan */</comment>
        <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                                <argument><expr><name>sys_indoid</name></expr></argument>,
                                <argument><expr><name>true</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>, 
                                <argument><expr><name>sys_nkeys</name></expr></argument>,
                                <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Oid</name></type> <name>tupoid</name> <init>= <expr><call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>enable_audit_depend</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>obj</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>tupoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add_exact_object_address</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>CatalogTupleDelete</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CacheInvalidateRelcache</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* perform delete depend tupe */</comment>
    <expr_stmt><expr><call><name>performMultipleDeletions</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name>DROP_RESTRICT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* PERFORM_DELETION_INTERNAL */</comment>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free_object_addresses</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_object_default</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                                <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_All</name> <operator>||</operator>
           <name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_OnDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RemoveObjectDefaultAuditById</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_for_unknown</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                    <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>StringInfo</name></type> <name>clean_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>SPI_OK_DELETE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name> <operator>==</operator> <name>CleanAuditType_Unknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI connect failure on node '%s', returned %d"</literal></expr></argument>,
                        <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* delete unknown user audit, user mabye droped */</comment>
    <expr_stmt><expr><name>clean_str</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>, <argument><expr><literal type="string">"delete from pg_catalog.pg_audit_user_conf"</literal>
                                             <literal type="string">" where pg_catalog.pg_audit_user_conf.user_id not in (select pg_catalog.pg_authid.oid from pg_catalog.pg_authid); "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SPI_OK_DELETE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to execute '%s' on node '%s'"</literal></expr></argument>,
                        <argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* delete unknown sequence/index/table/view/matview, rel mabye droped  */</comment>
    <expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>, <argument><expr><literal type="string">"delete from pg_catalog.pg_audit_obj_conf"</literal>
                                      <literal type="string">" where pg_catalog.pg_audit_obj_conf.class_id = %d"</literal>
                                            <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_id not in (select pg_catalog.pg_class.oid from pg_catalog.pg_class); "</literal></expr></argument>,
                              <argument><expr><name>RelationRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SPI_OK_DELETE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to execute '%s' on node '%s'"</literal></expr></argument>,
                        <argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* delete unknown Column, column mabye droped */</comment>
    <expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>, <argument><expr><literal type="string">"delete from pg_catalog.pg_audit_obj_conf"</literal>
                                       <literal type="string">" where pg_catalog.pg_audit_obj_conf.class_id = %d"</literal>
                                             <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_id in (select pg_catalog.pg_class.oid from pg_catalog.pg_class)"</literal>
                                             <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_sub_id != 0"</literal>
                                             <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_sub_id not in (select pg_catalog.pg_attribute.attnum"</literal>
                                                                                                           <literal type="string">" from pg_catalog.pg_attribute"</literal>
                                                                                                           <literal type="string">" where pg_catalog.pg_attribute.attrelid = pg_catalog.pg_audit_obj_conf.object_id"</literal>
                                                                                                    <literal type="string">"); "</literal></expr></argument>,
                                 <argument><expr><name>RelationRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SPI_OK_DELETE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to execute '%s' on node '%s'"</literal></expr></argument>,
                        <argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* delete unknown Function, func mabye droped */</comment>
    <expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>, <argument><expr><literal type="string">"delete from pg_catalog.pg_audit_obj_conf"</literal>
                                       <literal type="string">" where pg_catalog.pg_audit_obj_conf.class_id = %d"</literal>
                                             <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_id not in (select pg_catalog.pg_proc.oid from pg_catalog.pg_proc)"</literal>
                                             <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_sub_id = 0; "</literal></expr></argument>,
                                 <argument><expr><name>ProcedureRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SPI_OK_DELETE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to execute '%s' on node '%s'"</literal></expr></argument>,
                        <argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* delete unknown type, type mabye droped */</comment>
    <expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>, <argument><expr><literal type="string">"delete from pg_catalog.pg_audit_obj_conf"</literal>
                                       <literal type="string">" where pg_catalog.pg_audit_obj_conf.class_id = %d"</literal>
                                             <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_id not in (select pg_catalog.pg_type.oid from pg_catalog.pg_type)"</literal>
                                             <literal type="string">" and pg_catalog.pg_audit_obj_conf.object_sub_id = 0; "</literal></expr></argument>,
                                <argument><expr><name>TypeRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SPI_OK_DELETE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to execute '%s' on node '%s'"</literal></expr></argument>,
                        <argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>clean_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SPI_finish</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_FINISH</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI_finish() failed on node '%s'"</literal></expr></argument>,
                        <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_clean_process_delete</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, 
                                         <parameter><decl><type><name>CleanAuditStmtContext</name> <modifier>*</modifier></type> <name>ctxt</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>clean_type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>CleanAuditType_All</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_clean_for_statement</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>audit_clean_for_user</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>audit_clean_for_object</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>audit_clean_for_object_default</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean All Audit ; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CleanAuditType_Statement</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_clean_for_statement</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean Statement Audit ; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CleanAuditType_User</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_clean_for_user</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean User Audit ; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CleanAuditType_ByUser</name></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>audit_clean_for_user</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean User Audit By "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stmt-&gt;user_list</argument>)</argument_list></macro>
            <block>{<block_content>    
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <call><name>list_tail</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>user_list</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"%s ; "</literal></expr></argument>, <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CleanAuditType_Object</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_clean_for_object</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean Object Audit ; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CleanAuditType_OnObject</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>audit_clean_for_object</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean Object Audit On %s %s ; "</literal></expr></argument>,
                             <argument><expr><call><name>audit_object_type_string</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_type</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CleanAuditType_OnDefault</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_clean_for_object_default</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean Object Audit On Default ; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CleanAuditType_Unknown</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_clean_for_unknown</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>ctxt</name><operator>-&gt;</operator><name>clean_str</name></name></expr></argument>, <argument><expr><literal type="string">"Clean Unknown Audit ; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsurpported clean audit type"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RemoveStmtAuditById</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_s</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_remove_tuple_by_oid</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RemoveUserAuditById</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_u</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_remove_tuple_by_oid</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RemoveObjectAuditById</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_o</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_remove_tuple_by_oid</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RemoveObjectDefaultAuditById</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_d</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_remove_tuple_by_oid</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* "statement audit %s" */</comment>
<function><type><name>char</name> <modifier>*</modifier></type> <name>get_stmt_audit_desc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>just_identity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>str_desc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>just_identity</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"statement audit "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_s</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_stmt_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_stmt_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>action_id</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><operator>(</operator><name>AuditSQL</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>action_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name><name>str_desc</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* "user audit %s by %s" */</comment>
<function><type><name>char</name> <modifier>*</modifier></type> <name>get_user_audit_desc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>just_identity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>str_desc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>just_identity</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"user audit "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_u</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_user_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_user_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>action_id</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>obj_address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><operator>(</operator><name>AuditSQL</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>obj_address</name></expr></argument>, 
                         <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                         <argument><expr><name><name>pg_struct</name><operator>-&gt;</operator><name>user_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>action_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s by %s"</literal></expr></argument>,
                             <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                             <argument><expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s by %s"</literal></expr></argument>, 
                             <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>, 
                             <argument><expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s by %s"</literal></expr></argument>, <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>, <argument><expr><literal type="string">"InvalidUser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name><name>str_desc</name><operator>.</operator><name>data</name></name></expr>;</return>    
</block_content>}</block></function>

<comment type="block">/* "object audit %s on %s" */</comment>
<function><type><name>char</name> <modifier>*</modifier></type> <name>get_obj_audit_desc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>just_identity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>str_desc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>just_identity</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"object audit "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_o</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_obj_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_obj_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>action_id</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>obj_address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><operator>(</operator><name>AuditSQL</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>obj_address</name></expr></argument>,
                            <argument><expr><name><name>pg_struct</name><operator>-&gt;</operator><name>class_id</name></name></expr></argument>,
                            <argument><expr><name><name>pg_struct</name><operator>-&gt;</operator><name>object_id</name></name></expr></argument>,
                            <argument><expr><name><name>pg_struct</name><operator>-&gt;</operator><name>object_sub_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>action_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s on %s"</literal></expr></argument>,
                             <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                             <argument><expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s on %s"</literal></expr></argument>, 
                             <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>, 
                             <argument><expr><call><name>getObjectDescription</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj_address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s on %s"</literal></expr></argument>, <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>, <argument><expr><literal type="string">"InvalidObject"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name><name>str_desc</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* object default audit %s */</comment>
<function><type><name>char</name> <modifier>*</modifier></type> <name>get_obj_default_audit_desc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>audit_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>just_identity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>str_desc</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>just_identity</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"object default audit "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_d</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>audit_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_obj_def_opts</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_obj_def_opts</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>action_id</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><call><name>audit_get_stmt_map_by_action</name><argument_list>(<argument><expr><operator>(</operator><name>AuditSQL</name><operator>)</operator><name>action_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>action_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>action_item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str_desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"InvaldStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name><name>str_desc</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>AuditInitEnv</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* first build index for gAuditStmtActionMap 
     * to make it faster when call audit_get_stmt_map_by_action
     */</comment>
    <expr_stmt><expr><call><name>audit_build_idx_for_stmt_action_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AuditDefine</name><parameter_list>(<parameter><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>queryString</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>auditString</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AuditStmtContext</name></type> <name>stmt_ctx</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NIL</name></expr>, <expr><name>NIL</name></expr>, <expr><name>InvalidObjectAddress</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>laudit_record</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>audituser</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be audituser to define audit configuration"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_audit_environment</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must in NormalProcessing to define audit configuration"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_check_connection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stmt_ctx</name><operator>.</operator><name>action_str</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_ison</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>stmt_ctx</name><operator>.</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"AUDIT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>stmt_ctx</name><operator>.</operator><name>action_str</name></name></expr></argument>, <argument><expr><literal type="string">"NOAUDIT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>audit_process_object</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_process_user_list</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_process_action_list</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_final_to_string</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_generate_record_list</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>laudit_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_write_recod_list</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>, <argument><expr><name>laudit_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AuditDefine Rcv: %s "</literal></expr></argument>, <argument><expr><name>queryString</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"AuditDefine Snd: %s "</literal></expr></argument>, <argument><expr><name><name>stmt_ctx</name><operator>.</operator><name>action_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>auditString</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>auditString</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>stmt_ctx</name><operator>.</operator><name>action_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_free_stmt_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>laudit_record</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free_deep</name><argument_list>(<argument><expr><name>laudit_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AuditClean</name><parameter_list>(<parameter><decl><type><name>CleanAuditStmt</name> <modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>queryString</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>cleanString</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CleanAuditStmtContext</name></type> <name>stmt_ctx</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NIL</name></expr>, <expr><name>InvalidObjectAddress</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>audituser</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be audituser to clean audit configuration"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_audit_environment</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must in NormalProcessing to clean audit configuration"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_check_connection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stmt_ctx</name><operator>.</operator><name>clean_str</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>audit_clean_process_object</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_clean_process_user_list</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_clean_process_delete</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>enable_audit_warning</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"CleanAudit Rcv: %s "</literal></expr></argument>, <argument><expr><name>queryString</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"CleanAudit Snd: %s "</literal></expr></argument>, <argument><expr><name><name>stmt_ctx</name><operator>.</operator><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cleanString</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>cleanString</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>stmt_ctx</name><operator>.</operator><name>clean_str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>audit_clean_free_stmt_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AuditClearResultInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>is_audit_environment</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>audit_hit_set_result_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AuditReadQueryList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>query_sring</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_parsetree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Only audit sql from outside
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsConnFromApp</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>is_audit_enable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> 
        <call><name>is_audit_environment</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <name>l_parsetree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>AuditContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>audit_hit_read_query_list</name><argument_list>(<argument><expr><name>MyProcPort</name></expr></argument>, <argument><expr><name>query_sring</name></expr></argument>, <argument><expr><name>l_parsetree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AuditProcessResultInfo</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>is_audit_enable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> 
        <call><name>is_audit_environment</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>AuditContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>audit_hit_process_result_info</name><argument_list>(<argument><expr><name>is_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>audit_hit_set_result_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AuditCheckPerms</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>table_oid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>roleid</name></decl></parameter>, <parameter><decl><type><name>AclMode</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_INSERT</name> <operator>|</operator> <name>ACL_UPDATE</name> <operator>|</operator> <name>ACL_TRUNCATE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
        <call><name>IsAuditClass</name><argument_list>(<argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NO_PRIV</name></expr></argument>, <argument><expr><name>ACL_KIND_CLASS</name></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_003_For_Hit</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_hit_init_result_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>audit_ret</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AuditResultInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>cmd_tag</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_id</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>db_name</name> <init>= <expr><call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>db_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>db_name</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_user_id</name></name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>db_user_name</name> <init>= <expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_user_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>db_user_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>db_user_name</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_user_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>db_user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>PGXCNodeName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>PGXCNodeName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>PGXCNodeName</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_oid</name></name> <operator>=</operator> <call><name>get_pgxc_nodeoid</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <call><name>get_pgxc_nodetype</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <name>PGXC_NODE_NONE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>IS_PGXC_DATANODE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <name>PGXC_NODE_DATANODE</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_type</name></name> <operator>=</operator> <name>PGXC_NODE_COORDINATOR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>errstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>node_osuser</name> <init>= <expr><call><name>get_user_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>node_osuser</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>node_osuser</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_osuser</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>node_osuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_host</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>get_pgxc_nodehost</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_port</name></name> <operator>=</operator> <call><name>get_pgxc_nodeport</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_host</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_port</name></name> <operator>=</operator> <name>PostPortNumber</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>proc_pid</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>proc_ppid</name></name> <operator>=</operator> <call><name>getppid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>proc_start_time</name></name> <operator>=</operator> <name>MyStartTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_begin_time</name></name> <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_end_time</name></name> <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>is_success</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>error_msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_host</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>MyProcPort</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_host</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_host</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_hostname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>MyProcPort</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_hostname</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_hostname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_hostname</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_port</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>MyProcPort</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_port</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>remote_port</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>app_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>application_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>application_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>application_name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>audit_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_free_result_info</name><parameter_list>(<parameter><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name>audit_ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_string</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>cmd_tag</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>cmd_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>audit_ret-&gt;l_hit_info</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><operator>(</operator><name>AuditHitInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>audit_hit_free_hit_info</name><argument_list>(<argument><expr><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_user_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_user_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_osuser</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_osuser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_host</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>error_msg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>error_msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_host</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_hostname</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_port</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>app_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>audit_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_hit_get_result_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>gAuditResultInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_set_result_info</name><parameter_list>(<parameter><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>gAuditResultInfo</name> <operator>=</operator> <name>audit_ret</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_find_action_index</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>audit_get_stmt_map_size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>audit_get_stmt_map_by_index</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>is_object_type_hit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>is_node_tag_hit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>Audit_MaxObjectTypePerStmt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ObjectType</name></type> <name>obj_type</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>obj_type</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj_type</name> <operator>==</operator> <name><name>hit_info</name><operator>-&gt;</operator><name>obj_type</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>is_object_type_hit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>obj_type</name> <operator>==</operator> <name>Audit_InvalidEnum</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>is_object_type_hit</name> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>Audit_MaxNodeTagPerStmt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>NodeTag</name></type> <name>stmt_tag</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>stmt_tag</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>stmt_tag</name> <operator>==</operator> <name><name>hit_info</name><operator>-&gt;</operator><name>stmt_tag</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>is_node_tag_hit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>stmt_tag</name> <operator>==</operator> <name>Audit_InvalidEnum</name></expr>)</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>is_object_type_hit</name> <operator>&amp;&amp;</operator>
            <name>is_node_tag_hit</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>=</operator> <call><name>list_append_unique_int</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>=</operator> <call><name>list_append_unique_ptr</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_free_hit_info</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free_deep</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit_make_hit_info</name><parameter_list>(<parameter><decl><type><name>NodeTag</name></type> <name>stmt_tag</name></decl></parameter>,
                                              <parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>,
                                              <parameter><decl><type><name>Oid</name></type> <name>object_id</name></decl></parameter>,
                                              <parameter><decl><type><name>int32</name></type> <name>object_sub_id</name></decl></parameter>,
                                              <parameter><decl><type><name>ObjectType</name></type> <name>obj_type</name></decl></parameter>,
                                              <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>obj_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AuditHitInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>stmt_tag</name></name> <operator>=</operator> <name>stmt_tag</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_addr</name></name></expr></argument>, 
                        <argument><expr><name>class_id</name></expr></argument>,
                        <argument><expr><name>object_id</name></expr></argument>,
                        <argument><expr><name>object_sub_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_type</name></name> <operator>=</operator> <name>obj_type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>obj_name</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>obj_name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>is_success</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>audit_hit_find_action_index</name><argument_list>(<argument><expr><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>audit_hit_free_hit_info</name><argument_list>(<argument><expr><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>hit_info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit_make_hit_info_2</name><parameter_list>(<parameter><decl><type><name>AuditSQL</name></type> <name>id</name></decl></parameter>,
                                                <parameter><decl><type><name>NodeTag</name></type> <name>stmt_tag</name></decl></parameter>,
                                                <parameter><decl><type><name>Oid</name></type> <name>class_id</name></decl></parameter>,
                                                <parameter><decl><type><name>Oid</name></type> <name>object_id</name></decl></parameter>,
                                                <parameter><decl><type><name>int32</name></type> <name>object_sub_id</name></decl></parameter>,
                                                <parameter><decl><type><name>ObjectType</name></type> <name>obj_type</name></decl></parameter>,
                                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>obj_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AuditHitInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>stmt_tag</name></name> <operator>=</operator> <name>stmt_tag</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_addr</name></name></expr></argument>, 
                        <argument><expr><name>class_id</name></expr></argument>,
                        <argument><expr><name>object_id</name></expr></argument>,
                        <argument><expr><name>object_sub_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_type</name></name> <operator>=</operator> <name>obj_type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>obj_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>obj_name</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>obj_name</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>is_success</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>audit_get_stmt_map_size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>audit_get_stmt_map_by_index</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>=</operator> <call><name>list_append_unique_int</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>=</operator> <call><name>list_append_unique_ptr</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>audit_hit_free_hit_info</name><argument_list>(<argument><expr><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>hit_info</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_find_seq_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>AuditHitFindObjectContext</name> <modifier>*</modifier></type> <name>hit_ctxt</name> <init>= <expr><operator>(</operator><name>AuditHitFindObjectContext</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>context</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type> <name>func_expr</name> <init>= <expr><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type> <name>func_oid</name> <init>= <expr><name><name>func_expr</name><operator>-&gt;</operator><name>funcid</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>func_oid</name> <operator>==</operator> <name>F_NEXTVAL_OID</name> <operator>||</operator>
            <name>func_oid</name> <operator>==</operator> <name>F_CURRVAL_OID</name> <operator>||</operator>
            <name>func_oid</name> <operator>==</operator> <name>F_SETVAL_OID</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type> <name>func_arg</name> <init>= <expr><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>func_expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>func_arg</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
                <name><name>func_arg</name><operator>-&gt;</operator><name>consttype</name></name> <operator>==</operator> <name>REGCLASSOID</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Oid</name></type> <name>seqrel_oid</name> <init>= <expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>func_arg</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tp</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>seqrel_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Form_pg_class</name></type> <name>reltup</name> <init>= <expr><operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>reltup</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_SEQUENCE</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="block">/* do nothing */</comment>
                        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>reltup</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>-&gt;</operator><name>stmt_tag</name></name></expr></argument>,
                                                                          <argument><expr><name>RelationRelationId</name></expr></argument>,
                                                                          <argument><expr><name>seqrel_oid</name></expr></argument>,
                                                                          <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                          <argument><expr><name>OBJECT_SEQUENCE</name></expr></argument>,
                                                                          <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>reltup</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>hit_ctxt</name><operator>-&gt;</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>-&gt;</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>

                    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* do nothing*/</comment>
                    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>audit_hit_find_seq_walker</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>audit_hit_find_object_info</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type> <name>audit_query</name></decl></parameter>, 
                                         <parameter><decl><type><name>NodeTag</name></type> <name>stmt_tag</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditHitFindObjectContext</name></type> <name>hit_ctxt</name> <init>= <expr><block>{ <expr><name>T_Invalid</name></expr>, <expr><name>NIL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name> <operator>=</operator> <name>stmt_tag</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>audit_query-&gt;rtable</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type> <name>rte</name> <init>= <expr><operator>(</operator><name>RangeTblEntry</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RTEKind</name></type> <name>rtekind</name> <init>= <expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>rtekind</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>RTE_RELATION</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Oid</name></type> <name>rel_oid</name> <init>= <expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>rel_kind</name> <init>= <expr><name><name>rte</name><operator>-&gt;</operator><name>relkind</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>rel_name</name> <init>= <expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int32</name></type> <name>rel_type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>rel_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cache lookup failed for relation %u"</literal></expr></argument>, <argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>rel_kind</name> <operator>==</operator> <name>RELKIND_RELATION</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>rel_type</name> <operator>=</operator> <name>OBJECT_TABLE</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>rel_kind</name> <operator>==</operator> <name>RELKIND_VIEW</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>rel_type</name> <operator>=</operator> <name>OBJECT_VIEW</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>rel_kind</name> <operator>==</operator> <name>RELKIND_MATVIEW</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>rel_type</name> <operator>=</operator> <name>OBJECT_MATVIEW</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>rel_type</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                      <argument><expr><name>RelationRelationId</name></expr></argument>,
                                                                      <argument><expr><name>rel_oid</name></expr></argument>,
                                                                      <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                      <argument><expr><name>rel_type</name></expr></argument>,
                                                                      <argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>RTE_SUBQUERY</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type> <name>subquery</name> <init>= <expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_hit_info</name> <init>= <expr><call><name>audit_hit_read_query_tree</name><argument_list>(<argument><expr><name>subquery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>l_hit_info</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><name>l_hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>RTE_JOIN</name></expr>:</case>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>RTE_FUNCTION</name></expr>:</case>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>RTE_CTE</name></expr>:</case>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>ctename</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>audit_query-&gt;cteList</argument>)</argument_list></macro>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>CommonTableExpr</name> <modifier>*</modifier></type> <name>cte</name> <init>= <expr><operator>(</operator><name>CommonTableExpr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>cte</name></expr></argument>, <argument><expr><name>CommonTableExpr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>cte</name><operator>-&gt;</operator><name>ctename</name></name></expr></argument>, <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>ctename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type> <name>ctequery</name> <init>= <expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>cte</name><operator>-&gt;</operator><name>ctequery</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_hit_info</name> <init>= <expr><call><name>audit_hit_read_query_tree</name><argument_list>(<argument><expr><name>ctequery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>l_hit_info</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><name>l_hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <default>default:</default>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block>

    <expr_stmt><expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>, <argument><expr><name>audit_hit_find_seq_walker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hit_ctxt</name></expr></argument>, <argument><expr><name>QTW_IGNORE_RANGE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>    <name>audit_hit_object_missing_ok</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>src_missing_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>use_object_missok</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>src_missing_ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>audit_hit_read_query_utility</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type> <name>audit_query</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type> <name>audit_stmt</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>audit_query</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditHitFindObjectContext</name></type> <name>hit_ctxt</name> <init>= <expr><block>{ <expr><name>T_Invalid</name></expr>, <expr><name>NIL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>audit_query</name><operator>-&gt;</operator><name>utilityStmt</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NIL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name> <operator>=</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>audit_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>audit_stmt</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>T_AlterDatabaseSetStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterDatabaseSet */</comment>
            <comment type="block">/*
             * ALTER DATABASE database_name SetResetClause
             */</comment>
            <decl_stmt><decl><type><name>AlterDatabaseSetStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterDatabaseSetStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>dbname</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>DatabaseRelationId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_database_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER DATABASE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>OBJECT_DATABASE</name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterDatabaseStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterDatabase */</comment>
            <comment type="block">/*
             * ALTER DATABASE database_name WITH createdb_opt_list
             * ALTER DATABASE database_name createdb_opt_list
             * ALTER DATABASE database_name SET TABLESPACE name
             */</comment>
            <decl_stmt><decl><type><name>AlterDatabaseStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterDatabaseStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>dbname</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>DatabaseRelationId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_database_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER DATABASE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>OBJECT_DATABASE</name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterExtensionContentsStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecAlterExtensionContentsStmt */</comment>
            <comment type="block">/*
             * ALTER EXTENSION name add_drop FUNCTION function_with_argtypes
             * ALTER EXTENSION name add_drop TABLE any_name
             * ALTER EXTENSION name add_drop SEQUENCE any_name
             * ALTER EXTENSION name add_drop VIEW any_name
             * ALTER EXTENSION name add_drop MATERIALIZED VIEW any_name
             * ALTER EXTENSION name add_drop TYPE_P Typename
             */</comment>
            <decl_stmt><decl><type><name>AlterExtensionContentsStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterExtensionContentsStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>extension</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>object</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>extension</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ExtensionRelationId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>extension</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>extname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>extension</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></argument>, 
                                        <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>,
                                        <argument><expr><name>AccessShareLock</name></expr></argument>, 
                                        <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>false</name> <operator>&amp;&amp;</operator> <name><name>stmt</name><operator>-&gt;</operator><name>action</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// audit for DROP xxx</comment>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>obj_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>obj_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                    <argument><expr><name><name>object</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                                    <argument><expr><name><name>object</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                                    <argument><expr><name><name>object</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                                    <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></argument>,
                                                    <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// audit for ALTER EXTENSION</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>extension</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>extension</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>extension</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>OBJECT_EXTENSION</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>extname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterExtensionStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecAlterExtensionStmt */</comment>
            <comment type="block">/*
             * ALTER EXTENSION name UPDATE alter_extension_opt_list
             */</comment>
            <decl_stmt><decl><type><name>AlterExtensionStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterExtensionStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>extension</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>extension</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ExtensionRelationId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>extension</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>extname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>extension</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER EXTENSION</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>extension</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>extension</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>extension</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>OBJECT_EXTENSION</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>extname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterFunctionStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterFunction */</comment>
            <comment type="block">/*
             * ALTER FUNCTION function_with_argtypes alterfunc_opt_list opt_restrict
             */</comment>
            <decl_stmt><decl><type><name>AlterFunctionStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterFunctionStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Oid</name></type> <name>funcOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>funcName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>funcOid</name> <operator>=</operator> <call><name>LookupFuncWithArgs</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>func</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>funcName</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name>OBJECT_FUNCTION</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>stmt</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER FUNCTION</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>ProcedureRelationId</name></expr></argument>,
                                               <argument><expr><name>funcOid</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>OBJECT_FUNCTION</name></expr></argument>,
                                               <argument><expr><name>funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterNodeStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* PgxcNodeAlter */</comment>
            <comment type="block">/*
             * ALTER CLUSTER NODE pgxcnode_name OptWith
             * ALTER NODE pgxcnode_name OptWith
             */</comment>
            <decl_stmt><decl><type><name>AlterNodeStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterNodeStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for ALTER NODE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>PgxcNodeRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterObjectDependsStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecAlterObjectDependsStmt */</comment>
            <comment type="block">/* 
             * ALTER FUNCTION function_with_argtypes DEPENDS ON EXTENSION name
             * ALTER TRIGGER name ON qualified_name DEPENDS ON EXTENSION name
             * ALTER MATERIALIZED VIEW qualified_name DEPENDS ON EXTENSION name
             * ALTER INDEX qualified_name DEPENDS ON EXTENSION name
             */</comment>
            <decl_stmt><decl><type><name>AlterObjectDependsStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterObjectDependsStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name> <operator>==</operator> <name>OBJECT_FUNCTION</name> <operator>||</operator>
                <name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name> <operator>==</operator> <name>OBJECT_TRIGGER</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name> <operator>==</operator> <name>OBJECT_MATVIEW</name> <operator>||</operator>
                     <name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name> <operator>==</operator> <name>OBJECT_INDEX</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address_rv</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                                            <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// audit for ALTER xxx </comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterObjectSchemaStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecAlterObjectSchemaStmt */</comment>
            <comment type="block">/*
             * ALTER EXTENSION name SET SCHEMA name
             * ALTER FUNCTION function_with_argtypes SET SCHEMA name
             * ALTER TABLE relation_expr SET SCHEMA name
             * ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name
             * ALTER SEQUENCE qualified_name SET SCHEMA name
             * ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name
             * ALTER VIEW qualified_name SET SCHEMA name
             * ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name
             * ALTER MATERIALIZED VIEW qualified_name SET SCHEMA name
             * ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name SET SCHEMA name
             * ALTER TYPE_P any_name SET SCHEMA name
             */</comment>
            <decl_stmt><decl><type><name>AlterObjectSchemaStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterObjectSchemaStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>OBJECT_EXTENSION</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ExtensionRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_FOREIGN_TABLE</name></expr>:</case>
                <case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
                <case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
                <case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
                <case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_DOMAIN</name></expr>:</case>
                <case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>names</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TypeName</name> <modifier>*</modifier></type> <name>typename</name> <init>= <expr><call><name>makeTypeNameFromNameList</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TypeRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <comment type="block">/* generic code path */</comment>
                <case>case <expr><name>OBJECT_AGGREGATE</name></expr>:</case>
                <case>case <expr><name>OBJECT_COLLATION</name></expr>:</case>
                <case>case <expr><name>OBJECT_CONVERSION</name></expr>:</case>
                <case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPERATOR</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
                <case>case <expr><name>OBJECT_STATISTIC_EXT</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSCONFIGURATION</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSDICTIONARY</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSPARSER</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSTEMPLATE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>,
                                                  <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                                                  <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>,
                                                 <argument><expr><name>AccessShareLock</name></expr></argument>,
                                                 <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>rel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized AlterObjectSchemaStmt type: %d"</literal></expr></argument>,
                             <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>

            <comment type="line">// audit for ALTER xxx </comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterOwnerStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecAlterOwnerStmt */</comment>
            <comment type="block">/*
             * ALTER AGGREGATE aggregate_with_argtypes OWNER TO RoleSpec
               * ALTER COLLATION any_name OWNER TO RoleSpec
               * ALTER CONVERSION_P any_name OWNER TO RoleSpec
               * ALTER DATABASE database_name OWNER TO RoleSpec
               * ALTER DOMAIN_P any_name OWNER TO RoleSpec
               * ALTER FUNCTION function_with_argtypes OWNER TO RoleSpec
               * ALTER opt_procedural LANGUAGE name OWNER TO RoleSpec
               * ALTER LARGE_P OBJECT_P NumericOnly OWNER TO RoleSpec
               * ALTER OPERATOR operator_with_argtypes OWNER TO RoleSpec
               * ALTER OPERATOR CLASS any_name USING access_method OWNER TO RoleSpec
               * ALTER OPERATOR FAMILY any_name USING access_method OWNER TO RoleSpec
               * ALTER SCHEMA name OWNER TO RoleSpec
               * ALTER TYPE_P any_name OWNER TO RoleSpec
               * ALTER TABLESPACE name OWNER TO RoleSpec
               * ALTER STATISTICS any_name OWNER TO RoleSpec
               * ALTER TEXT_P SEARCH DICTIONARY any_name OWNER TO RoleSpec
               * ALTER TEXT_P SEARCH CONFIGURATION any_name OWNER TO RoleSpec
               * ALTER FOREIGN DATA_P WRAPPER name OWNER TO RoleSpec
               * ALTER SERVER name OWNER TO RoleSpec
               * ALTER EVENT TRIGGER name OWNER TO RoleSpec
               * ALTER PUBLICATION name OWNER TO RoleSpec
               * ALTER SUBSCRIPTION name OWNER TO RoleSpec
             */</comment>
            <decl_stmt><decl><type><name>AlterOwnerStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterOwnerStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>OBJECT_DATABASE</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>DatabaseRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_database_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_SCHEMA</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>NamespaceRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
                <case>case <expr><name>OBJECT_DOMAIN</name></expr>:</case>        <comment type="block">/* same as TYPE */</comment>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>names</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TypeName</name> <modifier>*</modifier></type> <name>typename</name> <init>= <expr><call><name>makeTypeNameFromNameList</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TypeRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_FDW</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ForeignDataWrapperRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_foreign_data_wrapper_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_FOREIGN_SERVER</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ForeignServerRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_foreign_server_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_EVENT_TRIGGER</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>EventTriggerRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_event_trigger_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_PUBLICATION</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>PublicationRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_publication_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_SUBSCRIPTION</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>SubscriptionRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_subscription_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <comment type="block">/* Generic cases */</comment>
                <case>case <expr><name>OBJECT_AGGREGATE</name></expr>:</case>
                <case>case <expr><name>OBJECT_COLLATION</name></expr>:</case>
                <case>case <expr><name>OBJECT_CONVERSION</name></expr>:</case>
                <case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
                <case>case <expr><name>OBJECT_LANGUAGE</name></expr>:</case>
                <case>case <expr><name>OBJECT_LARGEOBJECT</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPERATOR</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
                <case>case <expr><name>OBJECT_STATISTIC_EXT</name></expr>:</case>
                <case>case <expr><name>OBJECT_TABLESPACE</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSDICTIONARY</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSCONFIGURATION</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>,
                                                  <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                                                  <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>,
                                                 <argument><expr><name>AccessShareLock</name></expr></argument>,
                                                 <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>rel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>==</operator> <name>LargeObjectRelationId</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>LargeObjectMetadataRelationId</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized AlterOwnerStmt type: %d"</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>

            <comment type="line">// audit for ALTER xxx </comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterRoleSetStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterRoleSet */</comment>
            <comment type="block">/*
             * ALTER ROLE RoleSpec opt_in_database SetResetClause
             * ALTER ROLE ALL opt_in_database SetResetClause
             * ALTER USER RoleSpec opt_in_database SetResetClause
             * ALTER USER ALL opt_in_database SetResetClause
             */</comment>
            <decl_stmt><decl><type><name>AlterRoleSetStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterRoleSetStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>role_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>role</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>role_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>role</name><operator>-&gt;</operator><name>rolename</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_ROLE</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// audit for ALTER ROLE</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Role_Alter</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                        <argument><expr><name>role_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_USER</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// audit for ALTER USER</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_User_Alter</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                        <argument><expr><name>role_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterRoleStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterRole */</comment>
            <comment type="block">/*
             * ALTER ROLE RoleSpec opt_with AlterOptRoleList
             * ALTER USER RoleSpec opt_with AlterOptRoleList
             * ALTER GROUP_P RoleSpec add_drop USER role_list
             */</comment>
            <decl_stmt><decl><type><name>AlterRoleStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterRoleStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>role_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>role</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>role_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>role</name><operator>-&gt;</operator><name>rolename</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_ROLE</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// audit for ALTER ROLE</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Role_Alter</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                        <argument><expr><name>role_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_USER</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// audit for ALTER USER</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_User_Alter</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                        <argument><expr><name>role_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_GROUP</name> <operator>&amp;&amp;</operator>
                     <name><name>stmt</name><operator>-&gt;</operator><name>action</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// audit for ALTER GROUP_P RoleSpec DROP USER role_list</comment>
                <decl_stmt><decl><type><name>DefElem</name>  <modifier>*</modifier></type> <name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>List</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>roles</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator><name><name>defel</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>cell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>roles</argument>)</argument_list></macro>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>RoleSpec</name> <modifier>*</modifier></type> <name>rolespec</name> <init>= <expr><operator>(</operator><name>RoleSpec</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                        <comment type="line">// audit for ALTER GROUP_P RoleSpec DROP USER role_list</comment>
                        <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                           <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                           <argument><expr><name>InvalidOid</name></expr></argument>,
                                                           <argument><expr><name>InvalidOid</name></expr></argument>,
                                                           <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                           <argument><expr><name><name>rolespec</name><operator>-&gt;</operator><name>rolename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterSeqStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterSequence */</comment>
            <comment type="block">/* 
             * ALTER SEQUENCE qualified_name SeqOptList
             * ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList
             */</comment>
            <decl_stmt><decl><type><name>AlterSeqStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterSeqStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Oid</name></type> <name>seq_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>seq_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>seq_oid</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>sequence</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>seq_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER SEQUENCE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>RelationRelationId</name></expr></argument>,
                                               <argument><expr><name>seq_oid</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>OBJECT_SEQUENCE</name></expr></argument>,
                                               <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterSystemStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterSystemSetConfigFile */</comment>
            <comment type="block">/*
             * ALTER SYSTEM_P SET generic_set
             * ALTER SYSTEM_P RESET generic_reset
             */</comment>
            <decl_stmt><decl><type><name>AlterSystemStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterSystemStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for ALTER SYSTEM</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>setstmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterTableMoveAllStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterTableMoveAll */</comment>
            <comment type="block">/*
             * ALTER TABLE ALL IN_P TABLESPACE name SET TABLESPACE name opt_nowait
             * ALTER TABLE ALL IN_P TABLESPACE name OWNED BY role_list SET TABLESPACE name opt_nowait
             * ALTER INDEX ALL IN_P TABLESPACE name SET TABLESPACE name opt_nowait
             * ALTER INDEX ALL IN_P TABLESPACE name OWNED BY role_list SET TABLESPACE name opt_nowait
             * ALTER MATERIALIZED VIEW ALL IN_P TABLESPACE name SET TABLESPACE name opt_nowait
             * ALTER MATERIALIZED VIEW ALL IN_P TABLESPACE name OWNED BY role_list SET TABLESPACE name opt_nowait
             */</comment>
            <decl_stmt><decl><type><name>AlterTableMoveAllStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterTableMoveAllStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Oid</name></type> <name>nsp_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringInfo</name></type> <name>nsp_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>nsp_oid</name> <operator>=</operator> <call><name>get_tablespace_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>orig_tablespacename</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>nsp_name</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>nsp_name</name></expr></argument>, <argument><expr><literal type="string">"from %s -&gt; to %s"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>orig_tablespacename</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>new_tablespacename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER xxx</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>NamespaceRelationId</name></expr></argument>,
                                               <argument><expr><name>nsp_oid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></argument>,
                                               <argument><expr><name><name>nsp_name</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterTableSpaceOptionsStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterTableSpaceOptions */</comment>
            <comment type="block">/*
             * ALTER TABLESPACE name SET reloptions
             * ALTER TABLESPACE name RESET reloptions
             */</comment>
            <decl_stmt><decl><type><name>AlterTableSpaceOptionsStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterTableSpaceOptionsStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Oid</name></type> <name>tablespace_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>tablespace_oid</name> <operator>=</operator> <call><name>get_tablespace_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>tablespacename</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER TABLESPACE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>TableSpaceRelationId</name></expr></argument>,
                                               <argument><expr><name>tablespace_oid</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>OBJECT_TABLESPACE</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>tablespacename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AlterTableStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AlterTable */</comment>
            <comment type="block">/*
             * ALTER TABLE relation_expr alter_table_cmds
             * ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds
             * ALTER TABLE relation_expr partition_cmd
             * ALTER TABLE IF_P EXISTS relation_expr partition_cmd
             * ALTER INDEX qualified_name alter_table_cmds
             * ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds
             * ALTER SEQUENCE qualified_name alter_table_cmds
             * ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds
             * ALTER VIEW qualified_name alter_table_cmds
             * ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds
             * ALTER MATERIALIZED VIEW qualified_name alter_table_cmds
             * ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name alter_table_cmds
             * ALTER TYPE_P any_name alter_type_cmds
             * ALTER FOREIGN TABLE relation_expr alter_table_cmds
             * ALTER FOREIGN TABLE IF_P EXISTS relation_expr alter_table_cmds
             */</comment>
            <decl_stmt><decl><type><name>AlterTableStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AlterTableStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Oid</name></type> <name>object_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_oid</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for ALTER xxx</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>RelationRelationId</name></expr></argument>,
                                               <argument><expr><name>object_oid</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* 
             * process for T_AlterTableCmd
             * Add Partitions
             * Enable Trigger
             * Disable Trigger
             */</comment>
            <macro><name>foreach</name><argument_list>(<argument>lcmd</argument>, <argument>stmt-&gt;cmds</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><name>AlterTableCmd</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lcmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <switch>switch <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>AT_AddPartitions</name></expr>:</case>    <comment type="block">/* Partitions variants */</comment>
                    <block>{<block_content>
                        <comment type="line">// audit for Add Partitions</comment>
                        <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Partition_AddPartitions</name></expr></argument>,
                                                             <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>,
                                                                <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>AT_EnableTrig</name></expr>:</case>        <comment type="block">/* ENABLE TRIGGER variants */</comment>
                    <case>case <expr><name>AT_EnableAlwaysTrig</name></expr>:</case>
                    <case>case <expr><name>AT_EnableReplicaTrig</name></expr>:</case>
                    <case>case <expr><name>AT_EnableTrigAll</name></expr>:</case>
                    <case>case <expr><name>AT_EnableTrigUser</name></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// audit for ENABLE TRIGGER</comment>
                        <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Trigger_Enable</name></expr></argument>,
                                                             <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>,
                                                                <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>AT_DisableTrig</name></expr>:</case>    <comment type="block">/* DISABLE TRIGGER variants */</comment>
                    <case>case <expr><name>AT_DisableTrigAll</name></expr>:</case>
                    <case>case <expr><name>AT_DisableTrigUser</name></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// audit for DISABLE TRIGGER</comment>
                        <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Trigger_Disable</name></expr></argument>,
                                                             <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name>InvalidOid</name></expr></argument>,
                                                                <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>,
                                                                <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <default>default:</default>
                    <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block>
                </block_content>}</block></switch>

                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_AuditStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AuditDefine */</comment>
            <comment type="block">/*
             * audit_or_noaudit audit_stmt_list opt_when_success_or_not
             * audit_or_noaudit audit_stmt_list BY audit_user_list opt_when_success_or_not
             * audit_or_noaudit audit_stmt_list ON audit_obj_type audit_obj opt_when_success_or_not
             * audit_or_noaudit audit_stmt_list ON audit_obj opt_when_success_or_not
             */</comment>
            <decl_stmt><decl><type><name>AuditStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>AuditStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>isa_object_audit_type</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>audit_type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>object_address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ObjectType</name></type> <name>object_type</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>object_type</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <switch>switch <condition>(<expr><name>object_type</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
                    <case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
                    <case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
                    <case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
                    <case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
                    <case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
                    <block>{<block_content>
                        <expr_stmt><expr><name>object_address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name>object_type</name></expr></argument>,
                                                             <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>,
                                                             <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>,
                                                             <argument><expr><name>AccessShareLock</name></expr></argument>,
                                                             <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>lfoid</name> <init>= <expr><call><name>FunctionGetOidsByName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="block">/* noly supported the first function in current version */</comment>
                        <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>object_address</name></expr></argument>, <argument><expr><name>ProcedureRelationId</name></expr></argument>, <argument><expr><call><name>linitial_oid</name><argument_list>(<argument><expr><name>lfoid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>lfoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>TypeName</name> <modifier>*</modifier></type> <name>type_name</name> <init>= <expr><call><name>makeTypeNameFromNameList</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>object_address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name>object_type</name></expr></argument>,
                                                             <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>type_name</name></expr></argument>,
                                                             <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>,
                                                             <argument><expr><name>AccessShareLock</name></expr></argument>,
                                                             <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                    <default>default:</default>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported object \"%s\" to audit"</literal></expr></argument>,
                                     <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block>
                </block_content>}</block></switch>

                <comment type="line">// audit for Audit/NoAudit xxx</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Audit</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name><name>object_address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                                        <argument><expr><name><name>object_address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                                        <argument><expr><name><name>object_address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                                        <argument><expr><name>object_type</name></expr></argument>,
                                                        <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// audit for Audit/NoAudit xxx</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemAudit</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name><name>object_address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                                        <argument><expr><name><name>object_address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                                        <argument><expr><name><name>object_address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                                        <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                        <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// audit for Audit/NoAudit xxx</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemAudit</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CleanAuditStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* AuditClean */</comment>
            <comment type="block">/*
             * CLEAN ALL AUDIT
             * CLEAN STATEMENT AUDIT
             * CLEAN USER AUDIT
             * CLEAN USER AUDIT BY audit_user_list
             * CLEAN OBJECT_P AUDIT
             * CLEAN OBJECT_P AUDIT ON audit_obj_type audit_obj
             * CLEAN OBJECT_P AUDIT ON audit_obj
             * CLEAN UNKNOWN AUDIT
             */</comment>
            <comment type="line">// CleanAuditStmt * stmt = (CleanAuditStmt *) audit_stmt;</comment>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for CLEAN xxx</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemAudit</name></expr></argument>,
                                                 <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                    <argument><expr><name>InvalidOid</name></expr></argument>,
                                                    <argument><expr><name>InvalidOid</name></expr></argument>,
                                                    <argument><expr><name>InvalidOid</name></expr></argument>,
                                                    <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CommentStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* CommentObject */</comment>
            <comment type="block">/*
             * COMMENT ON comment_type_any_name any_name IS comment_text
             * COMMENT ON comment_type_name name IS comment_text
             * COMMENT ON TYPE_P Typename IS comment_text
             * COMMENT ON FUNCTION function_with_argtypes IS comment_text
             * COMMENT ON TRIGGER name ON any_name IS comment_text
             */</comment>
            <decl_stmt><decl><type><name>CommentStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CommentStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectType</name></type> <name>objtype</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, 
                                          <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name> <operator>==</operator> <name>OBJECT_COLUMN</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>list_name</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block">/* column not exists */</comment>
                <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>list_name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>relname</name> <init>= <expr><call><name>list_truncate</name><argument_list>(<argument><expr><call><name>list_copy</name><argument_list>(<argument><expr><name>list_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>list_name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>relation_openrv_extended</name><argument_list>(<argument><expr><call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><name>AccessShareLock</name></expr></argument>, 
                                                        <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <switch>switch <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
                            <block>{<block_content>
                                <expr_stmt><expr><name>objtype</name> <operator>=</operator> <name>OBJECT_TABLE</name></expr>;</expr_stmt>
                                <break>break;</break>
                            </block_content>}</block>
                            <case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
                            <block>{<block_content>
                                <expr_stmt><expr><name>objtype</name> <operator>=</operator> <name>OBJECT_VIEW</name></expr>;</expr_stmt>
                                <break>break;</break>
                            </block_content>}</block>
                            <case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
                            <block>{<block_content>
                                <expr_stmt><expr><name>objtype</name> <operator>=</operator> <name>OBJECT_MATVIEW</name></expr>;</expr_stmt>
                                <break>break;</break>
                            </block_content>}</block>
                            <default>default:</default>
                            <block>{<block_content>
                                <break>break;</break>
                            </block_content>}</block>
                        </block_content>}</block></switch>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// audit for COMMENT ON xxx</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>objtype</name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CompositeTypeStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineCompositeType */</comment>
            <comment type="block">/*
             * CREATE TYPE_P any_name AS '(' OptTableFuncElementList ')'
             */</comment>
            <decl_stmt><decl><type><name>CompositeTypeStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CompositeTypeStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>type_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>type_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>typevar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE TYPE_P</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>TypeRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_TYPE</name></expr></argument>,
                                               <argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreatedbStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* createdb */</comment>
            <comment type="block">/*
             * CREATE DATABASE database_name opt_with createdb_opt_list
             */</comment>
            <decl_stmt><decl><type><name>CreatedbStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreatedbStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>dbname</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>DatabaseRelationId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE DATABASE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>OBJECT_DATABASE</name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateEnumStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineEnum */</comment>
            <comment type="block">/*
             * CREATE TYPE_P any_name AS ENUM_P '(' opt_enum_val_list ')'
             */</comment>
            <decl_stmt><decl><type><name>CreateEnumStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateEnumStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>enum_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>enum_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>typeName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE TYPE_P</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>TypeRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_TYPE</name></expr></argument>,
                                               <argument><expr><name>enum_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateExtensionStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* CreateExtension */</comment>
            <comment type="block">/*
             * CREATE EXTENSION name opt_with create_extension_opt_list
             * CREATE EXTENSION IF_P NOT EXISTS name opt_with create_extension_opt_list
             */</comment>
            <decl_stmt><decl><type><name>CreateExtensionStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateExtensionStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for CREATE EXTENSION</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>ExtensionRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_EXTENSION</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>extname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateFunctionStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* CreateFunction */</comment>
            <comment type="block">/*
             * CREATE opt_or_replace FUNCTION func_name func_args_with_defaults            RETURNS func_return createfunc_opt_list opt_definition
             * CREATE opt_or_replace FUNCTION func_name func_args_with_defaults              RETURNS TABLE '(' table_func_column_list ')' createfunc_opt_list opt_definition
             * CREATE opt_or_replace FUNCTION func_name func_args_with_defaults              createfunc_opt_list opt_definition
             */</comment>
            <decl_stmt><decl><type><name>CreateFunctionStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateFunctionStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>func_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>func_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE FUNCTION</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>ProcedureRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_FUNCTION</name></expr></argument>,
                                               <argument><expr><name>func_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateGroupStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* PgxcGroupCreate */</comment>
            <comment type="block">/*
             * CREATE NODE GROUP_P pgxcgroup_name WITH pgxcnodes
             * CREATE DEFAULT NODE GROUP_P pgxcgroup_name WITH pgxcnodes
             */</comment>
            <decl_stmt><decl><type><name>CreateGroupStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateGroupStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for CREATE NODE GROUP</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>PgxcGroupRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateNodeStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* PgxcNodeCreate */</comment>
            <comment type="block">/*
             * CREATE NODE pgxcnode_name OptWith
             */</comment>
            <decl_stmt><decl><type><name>CreateNodeStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateNodeStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for CREATE NODE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>PgxcNodeRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateRangeStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineRange */</comment>
            <comment type="block">/*
             * CREATE TYPE_P any_name AS RANGE definition
             */</comment>
            <decl_stmt><decl><type><name>CreateRangeStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateRangeStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>range_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>range_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>typeName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE TYPE_P</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>TypeRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_TYPE</name></expr></argument>,
                                               <argument><expr><name>range_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateRoleStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* CreateRole */</comment>
            <comment type="block">/*
             * CREATE ROLE RoleId opt_with OptRoleList
             * CREATE USER RoleId opt_with OptRoleList
             * CREATE GROUP_P RoleId opt_with OptRoleList
             */</comment>
            <decl_stmt><decl><type><name>CreateRoleStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateRoleStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_ROLE</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// audit for CREATE ROLE</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Role_Create</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                        <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>role</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_USER</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// audit for CREATE USER</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_User_Create</name></expr></argument>,
                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                        <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>InvalidOid</name></expr></argument>,
                                                        <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                        <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>role</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// audit for CREATE GROUP</comment>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateSchemaStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* CreateSchemaCommand */</comment>
            <comment type="block">/*
             * CREATE SCHEMA OptSchemaName AUTHORIZATION RoleSpec OptSchemaEltList
             * CREATE SCHEMA ColId OptSchemaEltList
             * CREATE SCHEMA IF_P NOT EXISTS OptSchemaName AUTHORIZATION RoleSpec OptSchemaEltList
             * CREATE SCHEMA IF_P NOT EXISTS ColId OptSchemaEltList
             */</comment>
            <decl_stmt><decl><type><name>CreateSchemaStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateSchemaStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>schemaname</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>NamespaceRelationId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE SCHEMA</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>OBJECT_SCHEMA</name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateSeqStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineSequence */</comment>
            <comment type="block">/*
             * CREATE OptTemp SEQUENCE qualified_name OptSeqOptList
             * CREATE OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList
             */</comment>
            <decl_stmt><decl><type><name>CreateSeqStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateSeqStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>seq_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>seq_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>sequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE SEQUENCE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>RelationRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_SEQUENCE</name></expr></argument>,
                                               <argument><expr><name>seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateShardStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* InitShardMap */</comment>
            <comment type="block">/*
             * CREATE SHARDING GROUP_P Iconst IN_P Iconst
             * CREATE EXTENSION SHARDING GROUP_P Iconst IN_P Iconst
             * CREATE SHARDING  GROUP_P TO GROUP_P pgxcgroup_name
             * CREATE EXTENSION SHARDING GROUP_P TO GROUP_P pgxcgroup_name
             */</comment>
            <decl_stmt><decl><type><name>CreateShardStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateShardStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>shard_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>members</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>shard_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// audit for CREATE SHARDING GROUP</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>PgxcShardMapRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name>shard_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineRelation */</comment>
            <comment type="block">/*
             * CREATE OptTemp TABLE qualified_name '(' OptTableElementList ')'            OptInherit OptPartitionSpec OptWith OnCommitOption OptTableSpace OptDistributeBy OptSubCluster
             * CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name '('            OptTableElementList ')' OptInherit OptPartitionSpec OptWith            OnCommitOption OptTableSpace OptDistributeBy OptSubCluster
             * CREATE OptTemp TABLE qualified_name OF any_name            OptTypedTableElementList OptPartitionSpec OptWith OnCommitOption            OptTableSpace OptDistributeBy OptSubCluster
             * CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name OF any_name            OptTypedTableElementList OptPartitionSpec OptWith OnCommitOption            OptTableSpace OptDistributeBy OptSubCluster
             * CREATE OptTemp TABLE qualified_name PARTITION OF qualified_name            OptTypedTableElementList ForValues OptPartitionSpec OptWith            OnCommitOption OptTableSpace
             * CREATE OptTemp TABLE IF_P NOT EXISTS qualified_name PARTITION OF            qualified_name OptTypedTableElementList ForValues OptPartitionSpec            OptWith OnCommitOption OptTableSpace
             */</comment>
            <decl_stmt><decl><type><name>CreateStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>tbl_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>tbl_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE TABLE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>RelationRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_TABLE</name></expr></argument>,
                                               <argument><expr><name>tbl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateTableAsStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecCreateTableAs */</comment>
            <comment type="block">/*
             * CREATE OptTemp TABLE create_as_target AS SelectStmt opt_with_data
             * CREATE OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data
             * CREATE OptNoLog MATERIALIZED VIEW create_mv_target AS SelectStmt opt_with_data
             * CREATE OptNoLog MATERIALIZED VIEW IF_P NOT EXISTS create_mv_target AS SelectStmt opt_with_data
             * CREATE OptTemp TABLE create_as_target AS                EXECUTE name execute_param_clause opt_with_data
             */</comment>
            <decl_stmt><decl><type><name>CreateTableAsStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateTableAsStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>rel_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>rel_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>into</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE AS</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>RelationRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>,
                                               <argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateTableSpaceStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* CreateTableSpace */</comment>
            <comment type="block">/*
             * CREATE TABLESPACE name OptTableSpaceOwner LOCATION Sconst opt_reloptions
             */</comment>
            <decl_stmt><decl><type><name>CreateTableSpaceStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateTableSpaceStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for CREATE TABLESPACE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>TableSpaceRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>OBJECT_TABLESPACE</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>tablespacename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_CreateTrigStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* CreateTrigger */</comment>
            <comment type="block">/*
             * CREATE TRIGGER name TriggerActionTime TriggerEvents ON            qualified_name TriggerReferencing TriggerForSpec TriggerWhen            EXECUTE PROCEDURE func_name '(' TriggerFuncArgs ')'
             * CREATE CONSTRAINT TRIGGER name AFTER TriggerEvents ON            qualified_name OptConstrFromTable ConstraintAttributeSpec            FOR EACH ROW TriggerWhen            EXECUTE PROCEDURE func_name '(' TriggerFuncArgs ')'
             * CREATE ASSERTION name CHECK '(' a_expr ')'            ConstraintAttributeSpec
             */</comment>
            <decl_stmt><decl><type><name>CreateTrigStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>CreateTrigStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for CREATE TRIGGER</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>TriggerRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_TRIGGER</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>trigname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DefineStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineAggregate/DefineOperator/DefineType/DefineTSParser/DefineTSDictionary/DefineTSTemplate/DefineTSConfiguration/DefineCollation */</comment>
            <comment type="block">/*
             * CREATE TYPE_P any_name definition
             * CREATE TYPE_P any_name
             * CREATE TYPE_P any_name AS '(' OptTableFuncElementList ')'
             * CREATE TYPE_P any_name AS ENUM_P '(' opt_enum_val_list ')'
             * CREATE TYPE_P any_name AS RANGE definition
             */</comment>
            <decl_stmt><decl><type><name>DefineStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>DefineStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>OBJECT_AGGREGATE</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>OBJECT_OPERATOR</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>type_name</name> <init>= <expr><call><name>NameListToString</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>defnames</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <comment type="line">// audit for CREATE TYPE_P any_name</comment>
                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                       <argument><expr><name>TypeRelationId</name></expr></argument>,
                                                       <argument><expr><name>InvalidOid</name></expr></argument>,
                                                       <argument><expr><name>InvalidOid</name></expr></argument>,
                                                       <argument><expr><name>OBJECT_TYPE</name></expr></argument>,
                                                       <argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_TSPARSER</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>OBJECT_TSDICTIONARY</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>OBJECT_TSTEMPLATE</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>OBJECT_TSCONFIGURATION</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>OBJECT_COLLATION</name></expr>:</case>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized define stmt type: %d"</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DropdbStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* dropdb */</comment>
            <comment type="block">/*
             * DROP DATABASE database_name
             * DROP DATABASE IF_P EXISTS database_name
             */</comment>
            <decl_stmt><decl><type><name>DropdbStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>DropdbStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>dbname</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>DatabaseRelationId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_database_oid</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

            <comment type="line">// audit for DROP DATABASE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>OBJECT_DATABASE</name></expr></argument>,
                                               <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DropGroupStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* PgxcGroupRemove */</comment>
            <comment type="block">/*
             * DROP NODE GROUP_P pgxcgroup_name
             */</comment>
            <decl_stmt><decl><type><name>DropGroupStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>DropGroupStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for DROP NODE GROUP</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>PgxcGroupRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DropNodeStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* PgxcNodeRemove */</comment>
            <comment type="block">/*
             * DROP NODE pgxcnode_name
             */</comment>
            <decl_stmt><decl><type><name>DropNodeStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>DropNodeStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for DROP NODE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>PgxcNodeRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DropRoleStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DropRole */</comment>
            <comment type="block">/*
             * DROP ROLE role_list
             * DROP ROLE IF_P EXISTS role_list
             * DROP USER role_list
             * DROP USER IF_P EXISTS role_list
             * DROP GROUP_P role_list
             * DROP GROUP_P IF_P EXISTS role_list
             */</comment>
            <decl_stmt><decl><type><name>DropRoleStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>DropRoleStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>stmt-&gt;roles</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>RoleSpec</name> <modifier>*</modifier></type> <name>rolspec</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>rolspec</name><operator>-&gt;</operator><name>roletype</name></name> <operator>!=</operator> <name>ROLESPEC_CSTRING</name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_ROLE</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// audit for DROP ROLE</comment>
                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Role_Drop</name></expr></argument>,
                                                         <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                            <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                            <argument><expr><name>InvalidOid</name></expr></argument>,
                                                            <argument><expr><name>InvalidOid</name></expr></argument>,
                                                            <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                            <argument><expr><name><name>rolspec</name><operator>-&gt;</operator><name>rolename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_USER</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// audit for DROP USER</comment>
                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_User_Drop</name></expr></argument>,
                                                         <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                            <argument><expr><name>AuthIdRelationId</name></expr></argument>,
                                                            <argument><expr><name>InvalidOid</name></expr></argument>,
                                                            <argument><expr><name>InvalidOid</name></expr></argument>,
                                                            <argument><expr><name>OBJECT_ROLE</name></expr></argument>,
                                                            <argument><expr><name><name>rolspec</name><operator>-&gt;</operator><name>rolename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// audit for DROP GROUP</comment>
                    <continue>continue;</continue>
                </block_content>}</block></else></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DropShardStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DropShardMap_Node */</comment>
            <comment type="block">/*
             * DROP SHARDING IN_P GROUP_P pgxcgroup_name
             */</comment>
            <decl_stmt><decl><type><name>DropShardStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>DropShardStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// audit for DROP SHARDING IN GROUP</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>PgxcShardMapRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DropStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecDropStmt */</comment>
            <comment type="block">/*
             * DROP ASSERTION name opt_drop_behavior
             * DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior
             * DROP drop_type_any_name any_name_list opt_drop_behavior
             * DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior
             * DROP drop_type_name name_list opt_drop_behavior
             * DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior
             * DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior
             * DROP TYPE_P type_name_list opt_drop_behavior
             * DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior
             * DROP INDEX CONCURRENTLY any_name_list opt_drop_behavior
             * DROP INDEX CONCURRENTLY IF_P EXISTS any_name_list opt_drop_behavior
             * DROP FUNCTION function_with_argtypes_list opt_drop_behavior
             * DROP FUNCTION IF_P EXISTS function_with_argtypes_list opt_drop_behavior
             */</comment>
            <decl_stmt><decl><type><name>DropStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>cell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>stmt-&gt;objects</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type> <name>object</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>object_address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>removeType</name></name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>object_address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>removeType</name></name></expr></argument>,
                                                    <argument><expr><name>object</name></expr></argument>,
                                                    <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, 
                                                    <argument><expr><name>AccessShareLock</name></expr></argument>,
                                                    <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                   <argument><expr><name><name>object_address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                                   <argument><expr><name><name>object_address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                                   <argument><expr><name><name>object_address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                                   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>removeType</name></name></expr></argument>,
                                                   <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_DropTableSpaceStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DropTableSpace */</comment>
            <comment type="block">/*
             * DROP TABLESPACE name
             * DROP TABLESPACE IF_P EXISTS name
             */</comment>
            <decl_stmt><decl><type><name>DropTableSpaceStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>DropTableSpaceStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Oid</name></type> <name>tablespace_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>tablespace_oid</name> <operator>=</operator> <call><name>get_tablespace_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>tablespacename</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for DROP TABLESPACE</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>TableSpaceRelationId</name></expr></argument>,
                                               <argument><expr><name>tablespace_oid</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>OBJECT_TABLESPACE</name></expr></argument>,
                                               <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>tablespacename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_GrantStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecuteGrantStmt */</comment>
            <comment type="block">/*
             * GRANT privileges ON privilege_target TO grantee_list            opt_grant_grant_option
             * REVOKE privileges ON privilege_target            FROM grantee_list opt_drop_behavior
             * REVOKE GRANT OPTION FOR privileges ON privilege_target            FROM grantee_list opt_drop_behavior
             * ALTER DEFAULT PRIVILEGES DefACLOptionList DefACLAction
             * GRANT privileges ON defacl_privilege_target TO grantee_list            opt_grant_grant_option
             * REVOKE privileges ON defacl_privilege_target            FROM grantee_list opt_drop_behavior
             * REVOKE GRANT OPTION FOR privileges ON defacl_privilege_target            FROM grantee_list opt_drop_behavior
             */</comment>
            <decl_stmt><decl><type><name>GrantStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>GrantStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>targtype</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>ACL_TARGET_OBJECT</name></expr>:</case>
                <block>{<block_content>
                    <comment type="line">// istmt.objects = objectNamesToOids(stmt-&gt;objtype, stmt-&gt;objects);</comment>
                    <decl_stmt><decl><type><name>GrantObjectType</name></type> <name>objtype</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>objtype</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>objnames</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>objects</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>cell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>objnames</name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch>switch <condition>(<expr><name>objtype</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>ACL_OBJECT_RELATION</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>RangeVar</name>     <modifier>*</modifier></type> <name>relvar</name> <init>= <expr><operator>(</operator><name>RangeVar</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>char</name>          <modifier>*</modifier></type> <name>relname</name> <init>= <expr><call><name>RangeVarGetName</name><argument_list>(<argument><expr><name>relvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>               <name>relOid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>relvar</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>char</name></type>           <name>relkind</name> <init>= <expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>ObjectType</name></type>     <name>reltype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <switch>switch <condition>(<expr><name>relkind</name></expr>)</condition>
                                <block>{<block_content>
                                    <case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>reltype</name> <operator>=</operator> <name>OBJECT_TABLE</name></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </block_content>}</block>
                                    <case>case <expr><name>RELKIND_SEQUENCE</name></expr>:</case>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>reltype</name> <operator>=</operator> <name>OBJECT_SEQUENCE</name></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </block_content>}</block>
                                    <case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>reltype</name> <operator>=</operator> <name>OBJECT_VIEW</name></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </block_content>}</block>
                                    <case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>reltype</name> <operator>=</operator> <name>OBJECT_MATVIEW</name></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </block_content>}</block>
                                    <case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>reltype</name> <operator>=</operator> <name>OBJECT_TABLE</name></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </block_content>}</block>
                                    <default>default:</default>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name>reltype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                        <break>break;</break>
                                    </block_content>}</block>
                                </block_content>}</block></switch>

                                <if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                       <argument><expr><name>RelationRelationId</name></expr></argument>,
                                                                       <argument><expr><name>relOid</name></expr></argument>,
                                                                       <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                       <argument><expr><name>reltype</name></expr></argument>,
                                                                       <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                         <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                         <argument><expr><name>RelationRelationId</name></expr></argument>,
                                                                         <argument><expr><name>relOid</name></expr></argument>,
                                                                         <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                         <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                         <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>

                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_SEQUENCE</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>RangeVar</name>   <modifier>*</modifier></type><name>relvar</name> <init>= <expr><operator>(</operator><name>RangeVar</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>relname</name> <init>= <expr><call><name>RangeVarGetName</name><argument_list>(<argument><expr><name>relvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>relOid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>relvar</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                   <argument><expr><name>RelationRelationId</name></expr></argument>,
                                                                   <argument><expr><name>relOid</name></expr></argument>,
                                                                   <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                   <argument><expr><name>OBJECT_SEQUENCE</name></expr></argument>,
                                                                   <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_DATABASE</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>dbname</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>dbid</name> <init>= <expr><call><name>get_database_oid</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                     <argument><expr><name>DatabaseRelationId</name></expr></argument>,
                                                                     <argument><expr><name>dbid</name></expr></argument>,
                                                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                     <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                     <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_DOMAIN</name></expr>:</case>
                        <case>case <expr><name>ACL_OBJECT_TYPE</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>typname</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>oid</name> <init>= <expr><call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>makeTypeNameFromNameList</name><argument_list>(<argument><expr><name>typname</name></expr></argument>)</argument_list></call></expr></argument>, 
                                                                    <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                   <argument><expr><name>TypeRelationId</name></expr></argument>,
                                                                   <argument><expr><name>oid</name></expr></argument>,
                                                                   <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                   <argument><expr><name>OBJECT_TYPE</name></expr></argument>,
                                                                   <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>typname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_FUNCTION</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>ObjectWithArgs</name>     <modifier>*</modifier></type> <name>func</name> <init>= <expr><operator>(</operator><name>ObjectWithArgs</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>char</name>             <modifier>*</modifier></type> <name>funcname</name> <init>= <expr><call><name>get_object_name</name><argument_list>(<argument><expr><name>OBJECT_FUNCTION</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>func</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>                  <name>funcid</name> <init>= <expr><call><name>LookupFuncWithArgs</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                   <argument><expr><name>ProcedureRelationId</name></expr></argument>,
                                                                   <argument><expr><name>funcid</name></expr></argument>,
                                                                   <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                   <argument><expr><name>OBJECT_FUNCTION</name></expr></argument>,
                                                                   <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_LANGUAGE</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>langname</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>oid</name> <init>= <expr><call><name>get_language_oid</name><argument_list>(<argument><expr><name>langname</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                     <argument><expr><name>LanguageRelationId</name></expr></argument>,
                                                                     <argument><expr><name>oid</name></expr></argument>,
                                                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                     <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                     <argument><expr><name>langname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_LARGEOBJECT</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>lobjOid</name> <init>= <expr><call><name>oidparse</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>char</name></type>        <name><name>lobName</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <if_stmt><if>if <condition>(<expr><name>false</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>LargeObjectExists</name><argument_list>(<argument><expr><name>lobjOid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
                                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"large object %u does not exist"</literal></expr></argument>,
                                                    <argument><expr><name>lobjOid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>lobName</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>lobjOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                     <argument><expr><name>LargeObjectMetadataRelationId</name></expr></argument>,
                                                                     <argument><expr><name>lobjOid</name></expr></argument>,
                                                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                     <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                     <argument><expr><name>lobName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_NAMESPACE</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>nspname</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>oid</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                     <argument><expr><name>NamespaceRelationId</name></expr></argument>,
                                                                     <argument><expr><name>oid</name></expr></argument>,
                                                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                     <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                     <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_TABLESPACE</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>spcname</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>spcoid</name> <init>= <expr><call><name>get_tablespace_oid</name><argument_list>(<argument><expr><name>spcname</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                     <argument><expr><name>TableSpaceRelationId</name></expr></argument>,
                                                                     <argument><expr><name>spcoid</name></expr></argument>,
                                                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                     <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                     <argument><expr><name>spcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_FDW</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>fdwname</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>fdwid</name> <init>= <expr><call><name>get_foreign_data_wrapper_oid</name><argument_list>(<argument><expr><name>fdwname</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                     <argument><expr><name>ForeignDataWrapperRelationId</name></expr></argument>,
                                                                     <argument><expr><name>fdwid</name></expr></argument>,
                                                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                     <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                     <argument><expr><name>fdwname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <case>case <expr><name>ACL_OBJECT_FOREIGN_SERVER</name></expr>:</case>
                        <block>{<block_content>
                            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>objnames</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>srvname</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>Oid</name></type>            <name>srvid</name> <init>= <expr><call><name>get_foreign_server_oid</name><argument_list>(<argument><expr><name>srvname</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                                     <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                                     <argument><expr><name>ForeignServerRelationId</name></expr></argument>,
                                                                     <argument><expr><name>srvid</name></expr></argument>,
                                                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                                                     <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                                     <argument><expr><name>srvname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block>
                            <break>break;</break>
                        </block_content>}</block>
                        <default>default:</default>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized GrantStmt.objtype: %d"</literal></expr></argument>,
                                 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block>
                    </block_content>}</block></switch>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>ACL_TARGET_ALL_IN_SCHEMA</name></expr>:</case>
                <block>{<block_content>
                    <comment type="line">// istmt.objects = objectsInSchemaToOids(stmt-&gt;objtype, stmt-&gt;objects);</comment>
                    <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_SystemGrant</name></expr></argument>,
                                                         <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                         <argument><expr><name>InvalidOid</name></expr></argument>,
                                                         <argument><expr><name>InvalidOid</name></expr></argument>,
                                                         <argument><expr><name>InvalidOid</name></expr></argument>,
                                                         <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                                         <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// audit for GRANT/REVOKE xxx ON ALL xxx IN SCHEMA xxx TO ...</comment>
                    <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <comment type="block">/* ACL_TARGET_DEFAULTS should not be seen here */</comment>
                <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized GrantStmt.targtype: %d"</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>targtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_IndexStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineIndex */</comment>
            <comment type="block">/*
             * CREATE opt_unique INDEX opt_concurrently opt_index_name            ON qualified_name access_method_clause '(' index_params ')'            opt_reloptions OptTableSpace where_clause
             * CREATE opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name            ON qualified_name access_method_clause '(' index_params ')'            opt_reloptions OptTableSpace where_clause
             */</comment>
            <decl_stmt><decl><type><name>IndexStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>IndexStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>rel_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Oid</name></type> <name>rel_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>rel_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rel_oid</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE INDEX xxx ON xxx</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>RelationRelationId</name></expr></argument>,
                                               <argument><expr><name>rel_oid</name></expr></argument>,
                                               <argument><expr><literal type="number">0</literal></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name>rel_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_LockStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* LockTableCommand */</comment>
            <comment type="block">/*
             * LOCK_P opt_table relation_expr_list opt_lock opt_nowait
             */</comment>
            <decl_stmt><decl><type><name>LockStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>LockStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <macro><name>foreach</name><argument_list>(<argument>p</argument>, <argument>stmt-&gt;relations</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type> <name>rv</name> <init>= <expr><operator>(</operator><name>RangeVar</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>relname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>     
                <decl_stmt><decl><type><name>Oid</name></type> <name>reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>reloid</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// audit for LOCK</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                   <argument><expr><name>RelationRelationId</name></expr></argument>,
                                                   <argument><expr><name>reloid</name></expr></argument>,
                                                   <argument><expr><literal type="number">0</literal></expr></argument>,
                                                   <argument><expr><name>OBJECT_TABLE</name></expr></argument>,
                                                   <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_ReindexStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ReindexIndex/ReindexTable/ReindexMultipleTables */</comment>
            <comment type="block">/*
             * REINDEX reindex_target_type qualified_name
             * REINDEX reindex_target_multitable name
             * REINDEX '(' reindex_option_list ')' reindex_target_type qualified_name
             * REINDEX '(' reindex_option_list ')' reindex_target_multitable name
             */</comment>
            <decl_stmt><decl><type><name>ReindexStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>ReindexStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StringInfo</name></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>REINDEX_OBJECT_INDEX</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>objectOid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><literal type="string">"Index -&gt; %s"</literal></expr></argument>, <argument><expr><call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>objectOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>REINDEX_OBJECT_TABLE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>objectOid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><literal type="string">"Table -&gt; %s"</literal></expr></argument>, <argument><expr><call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>objectOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>REINDEX_OBJECT_SCHEMA</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>objectOid</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><literal type="string">"Schema -&gt; %s"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>NamespaceRelationId</name></expr></argument>, <argument><expr><name>objectOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>REINDEX_OBJECT_SYSTEM</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>objectOid</name> <init>= <expr><name>MyDatabaseId</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><literal type="string">"System -&gt; %s"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>DatabaseRelationId</name></expr></argument>, <argument><expr><name>objectOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>REINDEX_OBJECT_DATABASE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>objectOid</name> <init>= <expr><name>MyDatabaseId</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>object_name</name></expr></argument>, <argument><expr><literal type="string">"Database -&gt; %s"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>DatabaseRelationId</name></expr></argument>, <argument><expr><name>objectOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized object type: %d"</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>

            <comment type="line">// audit for REINDEX</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                               <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                               <argument><expr><name>Audit_InvalidEnum</name></expr></argument>,
                                               <argument><expr><name><name>object_name</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_RenameStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecRenameStmt */</comment>
            <comment type="block">/*
             * ALTER DATABASE database_name RENAME TO database_name
             * ALTER FUNCTION function_with_argtypes RENAME TO name
             * ALTER GROUP_P RoleId RENAME TO RoleId
             * ALTER SCHEMA name RENAME TO name
             * ALTER TABLE relation_expr RENAME TO name
             * ALTER TABLE IF_P EXISTS relation_expr RENAME TO name
             * ALTER SEQUENCE qualified_name RENAME TO name
             * ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name
             * ALTER VIEW qualified_name RENAME TO name
             * ALTER VIEW IF_P EXISTS qualified_name RENAME TO name
             * ALTER MATERIALIZED VIEW qualified_name RENAME TO name
             * ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name RENAME TO name
             * ALTER INDEX qualified_name RENAME TO name
             * ALTER INDEX IF_P EXISTS qualified_name RENAME TO name
             * ALTER TABLE relation_expr RENAME opt_column name TO name
             * ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name
             * ALTER MATERIALIZED VIEW qualified_name RENAME opt_column name TO name
             * ALTER MATERIALIZED VIEW IF_P EXISTS qualified_name RENAME opt_column name TO name
             * ALTER TRIGGER name ON qualified_name RENAME TO name
             * ALTER ROLE RoleId RENAME TO RoleId
             * ALTER USER RoleId RENAME TO RoleId
             * ALTER TABLESPACE name RENAME TO name
             * ALTER TYPE_P any_name RENAME TO name
             * ALTER TYPE_P any_name RENAME ATTRIBUTE name TO name opt_drop_behavior
             */</comment>
            <decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>RenameStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>object_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>OBJECT_TABCONSTRAINT</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_DOMCONSTRAINT</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TypeName</name> <modifier>*</modifier></type> <name>typename</name> <init>= <expr><call><name>makeTypeNameFromNameList</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TypeRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_DATABASE</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>DatabaseRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_database_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_ROLE</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>AuthIdRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_role_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_SCHEMA</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>NamespaceRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_TABLESPACE</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TableSpaceRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>get_tablespace_oid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
                <case>case <expr><name>OBJECT_SEQUENCE</name></expr>:</case>
                <case>case <expr><name>OBJECT_VIEW</name></expr>:</case>
                <case>case <expr><name>OBJECT_MATVIEW</name></expr>:</case>
                <case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
                <case>case <expr><name>OBJECT_FOREIGN_TABLE</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
                <case>case <expr><name>OBJECT_ATTRIBUTE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>StringInfo</name></type> <name>col_name</name> <init>=  <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AttrNumber</name></type> <name>attnum</name> <init>= <expr><call><name>get_attnum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>col_name</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>col_name</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_RULE</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RewriteRelationId</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_TRIGGER</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Oid</name></type>    <name>tgoid</name> <init>= <expr><call><name>get_trigger_oid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>TriggerRelationId</name></expr></argument>, <argument><expr><name>tgoid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_POLICY</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Oid</name></type>    <name>pooid</name> <init>= <expr><call><name>get_relation_policy_oid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>PolicyRelationId</name></expr></argument>, <argument><expr><name>pooid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_DOMAIN</name></expr>:</case>
                <case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>names</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TypeName</name> <modifier>*</modifier></type> <name>typename</name> <init>= <expr><call><name>makeTypeNameFromNameList</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Oid</name></type> <name>typeOid</name> <init>= <expr><call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>NameListToString</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ObjectAddressSubSet</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>TypeRelationId</name></expr></argument>, <argument><expr><name>typeOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>OBJECT_AGGREGATE</name></expr>:</case>
                <case>case <expr><name>OBJECT_COLLATION</name></expr>:</case>
                <case>case <expr><name>OBJECT_CONVERSION</name></expr>:</case>
                <case>case <expr><name>OBJECT_EVENT_TRIGGER</name></expr>:</case>
                <case>case <expr><name>OBJECT_FDW</name></expr>:</case>
                <case>case <expr><name>OBJECT_FOREIGN_SERVER</name></expr>:</case>
                <case>case <expr><name>OBJECT_FUNCTION</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPCLASS</name></expr>:</case>
                <case>case <expr><name>OBJECT_OPFAMILY</name></expr>:</case>
                <case>case <expr><name>OBJECT_LANGUAGE</name></expr>:</case>
                <case>case <expr><name>OBJECT_STATISTIC_EXT</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSCONFIGURATION</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSDICTIONARY</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSPARSER</name></expr>:</case>
                <case>case <expr><name>OBJECT_TSTEMPLATE</name></expr>:</case>
                <case>case <expr><name>OBJECT_PUBLICATION</name></expr>:</case>
                <case>case <expr><name>OBJECT_SUBSCRIPTION</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
                    <expr_stmt><expr><name>object_name</name> <operator>=</operator> <call><name>get_object_name</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name></expr></argument>,
                                                 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>object</name></name></expr></argument>,
                                                 <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>,
                                                 <argument><expr><name>AccessShareLock</name></expr></argument>,
                                                 <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized rename stmt type: %d"</literal></expr></argument>,
                             <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_ROLE</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_ROLE</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// audit for ALTER ROLE</comment>
                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_Role_Alter</name></expr></argument>,
                                                         <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                         <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                                         <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                                         <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                                         <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name></expr></argument>,
                                                         <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt_type</name></name> <operator>==</operator> <name>ROLESTMT_USER</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// audit for ALTER USER</comment>
                    <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info_2</name><argument_list>(<argument><expr><name>AuditSql_User_Alter</name></expr></argument>,
                                                         <argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                         <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                                         <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                                         <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                                         <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name></expr></argument>,
                                                         <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// audit for ALTER GROUP</comment>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// audit for ALTER xxx RENAME</comment>
                <decl_stmt><decl><type><name>ObjectType</name></type> <name>obj_type</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>obj_type</name> <operator>==</operator> <name>OBJECT_COLUMN</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>obj_type</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>relationType</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                   <argument><expr><name><name>address</name><operator>.</operator><name>classId</name></name></expr></argument>,
                                                   <argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
                                                   <argument><expr><name><name>address</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,
                                                   <argument><expr><name>obj_type</name></expr></argument>,
                                                   <argument><expr><name>object_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_TruncateStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* ExecuteTruncate */</comment>
            <comment type="block">/*
             * TRUNCATE opt_table relation_expr_list opt_restart_seqs opt_drop_behavior
             */</comment>
            <decl_stmt><decl><type><name>TruncateStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>TruncateStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>cell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>stmt-&gt;relations</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type> <name>rv</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>rname</name> <init>= <expr><call><name>RangeVarGetName</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Oid</name></type> <name>roid</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><call><name>audit_hit_object_missing_ok</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                
                <comment type="line">// audit for TRUNCATE TABLE</comment>
                <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                                   <argument><expr><name>RelationRelationId</name></expr></argument>,
                                                   <argument><expr><name>roid</name></expr></argument>,
                                                   <argument><expr><literal type="number">0</literal></expr></argument>,
                                                   <argument><expr><name>OBJECT_TABLE</name></expr></argument>,
                                                   <argument><expr><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>

            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>T_ViewStmt</name></expr>:</case>
        <block>{<block_content>
            <comment type="block">/* DefineView */</comment>
            <comment type="block">/*
             * CREATE OptTemp VIEW qualified_name opt_column_list opt_reloptions                AS SelectStmt opt_check_option
             * CREATE OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions                AS SelectStmt opt_check_option
             * CREATE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions                AS SelectStmt opt_check_option
             * CREATE OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions                AS SelectStmt opt_check_option
             */</comment>
            <decl_stmt><decl><type><name>ViewStmt</name> <modifier>*</modifier></type> <name>stmt</name> <init>= <expr><operator>(</operator><name>ViewStmt</name> <operator>*</operator><operator>)</operator> <name>audit_stmt</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>view_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>view_name</name> <operator>=</operator> <call><name>RangeVarGetName</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// audit for CREATE VIEW</comment>
            <expr_stmt><expr><name>hit_info</name> <operator>=</operator> <call><name>audit_hit_make_hit_info</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>stmt_tag</name></name></expr></argument>,
                                               <argument><expr><name>RelationRelationId</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>InvalidOid</name></expr></argument>,
                                               <argument><expr><name>OBJECT_VIEW</name></expr></argument>,
                                               <argument><expr><name>view_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <return>return <expr><name><name>hit_ctxt</name><operator>.</operator><name>l_hit_info</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>audit_hit_read_query_tree</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type> <name>audit_query</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_hit_info</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>audit_query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NIL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>audit_query</name><operator>-&gt;</operator><name>commandType</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>CMD_SELECT</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>l_hit_info</name> <operator>=</operator> <call><name>audit_hit_find_object_info</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>, <argument><expr><name>T_SelectStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CMD_UPDATE</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>l_hit_info</name> <operator>=</operator> <call><name>audit_hit_find_object_info</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>, <argument><expr><name>T_UpdateStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CMD_INSERT</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>l_hit_info</name> <operator>=</operator> <call><name>audit_hit_find_object_info</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>, <argument><expr><name>T_InsertStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CMD_DELETE</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>l_hit_info</name> <operator>=</operator> <call><name>audit_hit_find_object_info</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>, <argument><expr><name>T_DeleteStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CMD_UTILITY</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name>l_hit_info</name> <operator>=</operator> <call><name>audit_hit_read_query_utility</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>CMD_UNKNOWN</name></expr>:</case>
        <case>case <expr><name>CMD_NOTHING</name></expr>:</case>
        <block>{<block_content>
            <return>return <expr><name>NIL</name></expr>;</return>
            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <return>return <expr><name>l_hit_info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_remove_dup_object</name><parameter_list>(<parameter><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_src</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_des</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc_src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc_des</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>audit_ret</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>l_src</name> <operator>=</operator> <name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name></expr>;</expr_stmt>

    <macro><name>foreach</name><argument_list>(<argument>lc_src</argument>, <argument>l_src</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info_src</name> <init>= <expr><operator>(</operator><name>AuditHitInfo</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>should_remove</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <macro><name>foreach</name><argument_list>(<argument>lc_des</argument>, <argument>l_des</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info_des</name> <init>= <expr><operator>(</operator><name>AuditHitInfo</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc_des</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>hit_info_src</name><operator>-&gt;</operator><name>stmt_tag</name></name> <operator>==</operator> <name><name>hit_info_des</name><operator>-&gt;</operator><name>stmt_tag</name></name> <operator>&amp;&amp;</operator>
                <call><name>IsSameObjectAddress</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hit_info_src</name><operator>-&gt;</operator><name>obj_addr</name></name><operator>)</operator></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>hit_info_des</name><operator>-&gt;</operator><name>obj_addr</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <name><name>hit_info_src</name><operator>-&gt;</operator><name>obj_type</name></name> <operator>==</operator> <name><name>hit_info_des</name><operator>-&gt;</operator><name>obj_type</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>hit_info_src</name><operator>-&gt;</operator><name>obj_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
                    <name><name>hit_info_des</name><operator>-&gt;</operator><name>obj_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
                    <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>hit_info_src</name><operator>-&gt;</operator><name>obj_name</name></name></expr></argument>,
                                  <argument><expr><name><name>hit_info_des</name><operator>-&gt;</operator><name>obj_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>should_remove</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name><name>hit_info_src</name><operator>-&gt;</operator><name>obj_name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
                         <name><name>hit_info_des</name><operator>-&gt;</operator><name>obj_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>should_remove</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>

        <if_stmt><if>if <condition>(<expr><name>should_remove</name> <operator>==</operator> <name>false</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>l_des</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>l_des</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>hit_info_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_hit_free_hit_info</name><argument_list>(<argument><expr><name>hit_info_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>l_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name> <operator>=</operator> <name>l_des</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_read_query_list</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type> <name>port</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>query_sring</name></decl></parameter>,
                                      <parameter><decl><type><name>List</name> <modifier>*</modifier></type> <name>l_parsetree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>audit_hit_get_result_info</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name> <init>= <expr><call><name>audit_hit_init_result_info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type> <name>audit_query</name> <init>=  <expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator><call><name>linitial</name><argument_list>(<argument><expr><name>l_parsetree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                 <comment type="block">/* only audit first query tree */</comment>    

        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_string</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>query_sring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>cmd_tag</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>CreateCommandTag</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>audit_query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name> <operator>=</operator> <call><name>audit_hit_read_query_tree</name><argument_list>(<argument><expr><name>audit_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>audit_hit_remove_dup_object</name><argument_list>(<argument><expr><name>audit_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>audit_ret</name><operator>-&gt;</operator><name>l_hit_info</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_hit_free_result_info</name><argument_list>(<argument><expr><name>audit_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>audit_hit_set_result_info</name><argument_list>(<argument><expr><name>audit_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AuditMode</name></type> <name>audit_hit_get_reverse_mode</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>is_success</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>AuditMode_Fail</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>AuditMode_Success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_o</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_indoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sys_nkeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><name>Audit_nSysScanKeys</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Relation</name></type> <name>sys_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><name>AccessShareLock</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>is_match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_o</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>sys_reloid</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>sys_indoid</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_obj_conf_class_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_addr</name><operator>.</operator><name>classId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_obj_conf_object_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_obj_conf_object_sub_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_addr</name><operator>.</operator><name>objectSubId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_obj_conf_action_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                            <argument><expr><name>sys_indoid</name></expr></argument>,
                            <argument><expr><name>true</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, 
                            <argument><expr><name>sys_nkeys</name></expr></argument>,
                            <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_obj_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_obj_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditMode</name></type> <name>audit_mode</name> <init>= <expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>action_ison</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> 
            <name>audit_mode</name> <operator>!=</operator> <name>reverse_mode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>is_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>is_match</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_d</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_indoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sys_nkeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><name>Audit_nSysScanKeys</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Relation</name></type> <name>sys_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><name>AccessShareLock</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>is_match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_d</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>sys_reloid</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>sys_indoid</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_obj_def_opts_action_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                            <argument><expr><name>sys_indoid</name></expr></argument>,
                            <argument><expr><name>true</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, 
                            <argument><expr><name>sys_nkeys</name></expr></argument>,
                            <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_obj_def_opts</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_obj_def_opts</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditMode</name></type> <name>audit_mode</name> <init>= <expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>action_ison</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> 
            <name>audit_mode</name> <operator>!=</operator> <name>reverse_mode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>is_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>is_match</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_u</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_indoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sys_nkeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><name>Audit_nSysScanKeys</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Relation</name></type> <name>sys_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><name>AccessShareLock</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>is_match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_u</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>sys_reloid</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>sys_indoid</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_user_conf_user_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
                <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_user_conf_action_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                            <argument><expr><name>sys_indoid</name></expr></argument>,
                            <argument><expr><name>true</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, 
                            <argument><expr><name>sys_nkeys</name></expr></argument>,
                            <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_user_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_user_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditMode</name></type> <name>audit_mode</name> <init>= <expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>action_ison</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> 
            <name>audit_mode</name> <operator>!=</operator> <name>reverse_mode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>is_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>is_match</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>audit_hit_match_in_pg_audit_s</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditSQL</name></type> <name>action_id</name></decl></parameter>,
                                             <parameter><decl><type><name>AuditMode</name></type> <name>reverse_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type> <name>sys_cacheid</name> <init>= <expr><name>InvalidSysCacheID</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_reloid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>sys_indoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sys_nkeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>skey</name><index>[<expr><name>Audit_nSysScanKeys</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Relation</name></type> <name>sys_rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><name>AccessShareLock</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>sd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>is_match</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>audit_get_cacheid_pg_audit_s</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>sys_cacheid</name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetSysCacheInfo</name><argument_list>(<argument><expr><name>sys_cacheid</name></expr></argument>, 
                    <argument><expr><operator>&amp;</operator><name>sys_reloid</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>sys_indoid</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><index>[<expr><name>sys_nkeys</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><name>Anum_audit_stmt_conf_action_id</name></expr></argument>,
                <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT4EQ</name></expr></argument>,
                <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>sys_nkeys</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>sys_rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>sys_reloid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, 
                            <argument><expr><name>sys_indoid</name></expr></argument>,
                            <argument><expr><name>true</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, 
                            <argument><expr><name>sys_nkeys</name></expr></argument>,
                            <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_audit_stmt_conf</name></type> <name>pg_struct</name> <init>= <expr><operator>(</operator><name>Form_audit_stmt_conf</name><operator>)</operator><operator>(</operator><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditMode</name></type> <name>audit_mode</name> <init>= <expr><operator>(</operator><name>AuditMode</name><operator>)</operator><name><name>pg_struct</name><operator>-&gt;</operator><name>action_mode</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>action_ison</name> <init>= <expr><name><name>pg_struct</name><operator>-&gt;</operator><name>action_ison</name></name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>action_ison</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> 
            <name>audit_mode</name> <operator>!=</operator> <name>reverse_mode</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>is_match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>sys_rel</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>is_match</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_rebuild_hit_info</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>hit_info</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>hit_index</name></decl></parameter>,
                                       <parameter><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>hit_action</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>hit_match</name></decl></parameter>,
                                       <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>hit_audit</name></decl></parameter>,
                                       <parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name>hit_info</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>hit_action</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>hit_audit</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>list_free_deep</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>, <argument><expr><name>hit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hit_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name></expr></argument>, <argument><expr><name>hit_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>pstrdup</name><argument_list>(<argument><expr><name>hit_audit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hit_info</name><operator>-&gt;</operator><name>is_success</name></name> <operator>=</operator> <name>is_success</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_match</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>hit_info</name><operator>-&gt;</operator><name>l_hit_audit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_match_in_catalog</name><parameter_list>(<parameter><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name></decl></parameter>,
                                       <parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AuditMode</name></type> <name>reverse_mode</name> <init>= <expr><call><name>audit_hit_get_reverse_mode</name><argument_list>(<argument><expr><name>is_success</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>forboth</name><argument_list>(<argument>lc1</argument>, <argument>audit_hit-&gt;l_hit_index</argument>, <argument>lc2</argument>, <argument>audit_hit-&gt;l_hit_action</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>    <name>action_index</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><operator>(</operator><name>AuditStmtMap</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name><name>action_item</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>audit_type</name> <init>= <expr><literal type="string">"Unkown Audit"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>is_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isa_object_action_id</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>audit_hit_match_in_pg_audit_o</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>, <argument><expr><name>reverse_mode</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>is_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>audit_type</name> <operator>=</operator> <literal type="string">"Object Audit"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>audit_hit_rebuild_hit_info</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_index</name></expr></argument>, <argument><expr><name>action_item</name></expr></argument>, <argument><expr><name>is_match</name></expr></argument>, <argument><expr><name>audit_type</name></expr></argument>, <argument><expr><name>is_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
                
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>is_match</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>forboth</name><argument_list>(<argument>lc1</argument>, <argument>audit_hit-&gt;l_hit_index</argument>, <argument>lc2</argument>, <argument>audit_hit-&gt;l_hit_action</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>    <name>action_index</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><operator>(</operator><name>AuditStmtMap</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name><name>action_item</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>audit_type</name> <init>= <expr><literal type="string">"Unkown Audit"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>is_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isa_object_action_id</name><argument_list>(<argument><expr><name>action_id</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>audit_hit_match_in_pg_audit_d</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>, <argument><expr><name>reverse_mode</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>is_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>audit_type</name> <operator>=</operator> <literal type="string">"Object Default Audit"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>audit_hit_rebuild_hit_info</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_index</name></expr></argument>, <argument><expr><name>action_item</name></expr></argument>, <argument><expr><name>is_match</name></expr></argument>, <argument><expr><name>audit_type</name></expr></argument>, <argument><expr><name>is_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>is_match</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>forboth</name><argument_list>(<argument>lc1</argument>, <argument>audit_hit-&gt;l_hit_index</argument>, <argument>lc2</argument>, <argument>audit_hit-&gt;l_hit_action</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>    <name>action_index</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><operator>(</operator><name>AuditStmtMap</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name><name>action_item</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>audit_type</name> <init>= <expr><literal type="string">"Unkown Audit"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>is_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>audituser</name><argument_list>()</argument_list></call> <operator>||</operator> <comment type="block">/* audit all sql executed by audit_admin */</comment>
            <call><name>audit_hit_match_in_pg_audit_u</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>, <argument><expr><name>reverse_mode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>is_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>audit_type</name> <operator>=</operator> <literal type="string">"User Audit"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>audit_hit_rebuild_hit_info</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_index</name></expr></argument>, <argument><expr><name>action_item</name></expr></argument>, <argument><expr><name>is_match</name></expr></argument>, <argument><expr><name>audit_type</name></expr></argument>, <argument><expr><name>is_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>is_match</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>forboth</name><argument_list>(<argument>lc1</argument>, <argument>audit_hit-&gt;l_hit_index</argument>, <argument>lc2</argument>, <argument>audit_hit-&gt;l_hit_action</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>    <name>action_index</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>action_item</name> <init>= <expr><operator>(</operator><name>AuditStmtMap</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AuditSQL</name></type> <name>action_id</name> <init>= <expr><name><name>action_item</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>audit_type</name> <init>= <expr><literal type="string">"Unkown Audit"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>is_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>audit_hit_match_in_pg_audit_s</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_id</name></expr></argument>, <argument><expr><name>reverse_mode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>is_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>audit_type</name> <operator>=</operator> <literal type="string">"Statement Audit"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>audit_hit_rebuild_hit_info</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>action_index</name></expr></argument>, <argument><expr><name>action_item</name></expr></argument>, <argument><expr><name>is_match</name></expr></argument>, <argument><expr><name>audit_type</name></expr></argument>, <argument><expr><name>is_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>is_match</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_match</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_match</name></name></expr></argument>, <argument><expr><name>is_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_audit</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_audit</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>pstrdup</name><argument_list>(<argument><expr><name>audit_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_match</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_audit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_print_result_log</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name> <init>= <expr><call><name>audit_hit_get_result_info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>start_time</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>begin_time</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>end_time</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ignore_others</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pg_strftime</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_time</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S %Z"</literal></expr></argument>,
                <argument><expr><call><name>pg_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>audit_ret</name><operator>-&gt;</operator><name>proc_start_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>log_timezone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pg_strftime</name><argument_list>(<argument><expr><name>begin_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>begin_time</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S %Z"</literal></expr></argument>,
                <argument><expr><call><name>pg_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_begin_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>log_timezone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pg_strftime</name><argument_list>(<argument><expr><name>end_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>end_time</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S %Z"</literal></expr></argument>,
                <argument><expr><call><name>pg_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_end_time</name></name><operator>)</operator></expr></argument>, <argument><expr><name>log_timezone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>audit_ret-&gt;l_hit_info</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name> <init>= <expr><operator>(</operator><name>AuditHitInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>lc3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_action</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_match</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_index</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>l_hit_audit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>forthree</name><argument_list>(<argument>lc1</argument>, <argument>audit_hit-&gt;l_hit_action</argument>, <argument>lc2</argument>, <argument>audit_hit-&gt;l_hit_match</argument>, <argument>lc3</argument>, <argument>audit_hit-&gt;l_hit_audit</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>AuditStmtMap</name> <modifier>*</modifier></type> <name>hit_aciton</name> <init>= <expr><operator>(</operator><name>AuditStmtMap</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>hit_match</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>hit_audit</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>exec_status</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>audit_hit</name><operator>-&gt;</operator><name>is_success</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Exec Successfull"</literal></expr> </then><else>: <expr><literal type="string">"Exec Not Successfull"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hit_match</name></expr>)</condition>
            <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * when hit both user audit and statement audit,
             * only print the first audit log, and ignore others
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>hit_audit</name></expr></argument>, <argument><expr><literal type="string">"User Audit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>strcmp</name><argument_list>(<argument><expr><name>hit_audit</name></expr></argument>, <argument><expr><literal type="string">"Statement Audit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>ignore_others</name> <operator>==</operator> <name>true</name></expr>)</condition>
                <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* print the first, ignore others behind */</comment>
                    <expr_stmt><expr><name>ignore_others</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>audit_log</name><argument_list>(
                <argument><expr><literal type="string">"AuditOutMessage: "</literal>
                <literal type="string">"AuditType: \"%s\", "</literal>                        <comment type="line">// audit type</comment>
                <literal type="string">"QueryString: \"%s\", "</literal>                        <comment type="line">// qry_string</comment>
                <literal type="string">"TopCommandTag: \"%s\", "</literal>                    <comment type="line">// cmd_tag</comment>
                <literal type="string">"DatabaseID: %u, "</literal>                            <comment type="line">// db_id</comment>
                <literal type="string">"DatabaseName: \"%s\", "</literal>                    <comment type="line">// db_name</comment>
                <literal type="string">"DatabaseUserID: %u, "</literal>                        <comment type="line">// db_user_id</comment>
                <literal type="string">"DatabaseUserName: \"%s\", "</literal>                <comment type="line">// db_user_name</comment>
                <literal type="string">"NodeOid: %u, "</literal>                                <comment type="line">// node_oid</comment>
                <literal type="string">"NodeName: \"%s\", "</literal>                        <comment type="line">// node_name</comment>
                <literal type="string">"NodeType: \"%s\", "</literal>                        <comment type="line">// node_type</comment>
                <literal type="string">"NodeHost: \"%s\", "</literal>                        <comment type="line">// node_host</comment>
                <literal type="string">"NodePort: %d, "</literal>                            <comment type="line">// node_port</comment>
                <literal type="string">"NodeOSUser: \"%s\", "</literal>                        <comment type="line">// node_osuser</comment>
                <literal type="string">"PostgresPID: %u, "</literal>                            <comment type="line">// proc_pid</comment>
                <literal type="string">"PostmasterPID: %u, "</literal>                        <comment type="line">// proc_ppid,</comment>
                <literal type="string">"BackendStartTime: \"%s\", "</literal>                <comment type="line">// proc_start_time</comment>
                <literal type="string">"QueryBeginTime: \"%s\", "</literal>                    <comment type="line">// qry_start_time</comment>
                <literal type="string">"QueryEndTime: \"%s\", "</literal>                    <comment type="line">// qry_end_time</comment>
                <literal type="string">"QueryIsSuccess: %d, "</literal>                        <comment type="line">// is_success</comment>
                <literal type="string">"ClientHost: \"%s\", "</literal>                        <comment type="line">// client_host</comment>
                <literal type="string">"ClientHostname: \"%s\", "</literal>                    <comment type="line">// client_hostname</comment>
                <literal type="string">"ClientPort: \"%s\", "</literal>                        <comment type="line">// client_port</comment>
                <literal type="string">"AppName: \"%s\", "</literal>                            <comment type="line">// app_name,</comment>
                <literal type="string">"ObjectClassID: %u, "</literal>                        <comment type="line">// obj_addr.classId,</comment>
                <literal type="string">"ObjectId: %u, "</literal>                            <comment type="line">// obj_addr.objectId</comment>
                <literal type="string">"ObjectSubId: %d, "</literal>                            <comment type="line">// obj_addr.objectSubId</comment>
                <literal type="string">"ObjectType: \"%s\", "</literal>                        <comment type="line">// obj_type</comment>
                <literal type="string">"ObjectName: \"%s\", "</literal>                        <comment type="line">// obj_name</comment>
                <literal type="string">"ActionID: %d, "</literal>                            <comment type="line">// action_id</comment>
                <literal type="string">"ActionName: \"%s\", "</literal>                        <comment type="line">// action_name</comment>
                <literal type="string">"ExecStatus: \"%s\" "</literal></expr></argument>,                        <comment type="line">// exec_status</comment>

                <argument><expr><name>hit_audit</name></expr></argument>,                                    <comment type="line">// audit type</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_string</name></name></expr></argument>,                        <comment type="line">// qry_string</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>cmd_tag</name></name></expr></argument>,                            <comment type="line">// cmd_tag</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_id</name></name></expr></argument>,                            <comment type="line">// db_id</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>,                            <comment type="line">// db_name</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_user_id</name></name></expr></argument>,                        <comment type="line">// db_user_id</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>db_user_name</name></name></expr></argument>,                    <comment type="line">// db_user_name</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_oid</name></name></expr></argument>,                        <comment type="line">// node_oid</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_name</name></name></expr></argument>,                        <comment type="line">// node_name</comment>
                <argument><expr><call><name>PGXCNodeTypeString</name><argument_list>(<argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_type</name></name></expr></argument>)</argument_list></call></expr></argument>,    <comment type="line">// node_type</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_host</name></name></expr></argument>,                        <comment type="line">// node_host</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_port</name></name></expr></argument>,                        <comment type="line">// node_port</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>node_osuser</name></name></expr></argument>,                        <comment type="line">// node_osuser</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>proc_pid</name></name></expr></argument>,                        <comment type="line">// proc_pid</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>proc_ppid</name></name></expr></argument>,                        <comment type="line">// proc_ppid,</comment>
                <argument><expr><name>start_time</name></expr></argument>,                                    <comment type="line">// proc_start_time</comment>
                <argument><expr><name>begin_time</name></expr></argument>,                                    <comment type="line">// qry_start_time</comment>
                <argument><expr><name>end_time</name></expr></argument>,                                    <comment type="line">// qry_end_time</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>is_success</name></name></expr></argument>,                        <comment type="line">// is_success</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_host</name></name></expr></argument>,                        <comment type="line">// client_host</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_hostname</name></name></expr></argument>,                    <comment type="line">// client_hostname</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>client_port</name></name></expr></argument>,                        <comment type="line">// client_port</comment>
                <argument><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>app_name</name></name></expr></argument>,                        <comment type="line">// app_name,</comment>
                <argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_addr</name><operator>.</operator><name>classId</name></name></expr></argument>,                <comment type="line">// obj_addr.classId,</comment>
                <argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>,                <comment type="line">// obj_addr.objectId</comment>
                <argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_addr</name><operator>.</operator><name>objectSubId</name></name></expr></argument>,            <comment type="line">// obj_addr.objectSubId</comment>
                <argument><expr><call><name>audit_object_type_string</name><argument_list>(<argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_type</name></name></expr></argument>,
                                         <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,             <comment type="line">// obj_type</comment>
                <argument><expr><name><name>audit_hit</name><operator>-&gt;</operator><name>obj_name</name></name></expr></argument>,                        <comment type="line">// obj_name</comment>
                <argument><expr><name><name>hit_aciton</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,                                <comment type="line">// action_id</comment>
                <argument><expr><name><name>hit_aciton</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,                            <comment type="line">// action_name</comment>
                <argument><expr><name>exec_status</name></expr></argument>                                    <comment type="line">// exec_status</comment>
                )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audit_hit_process_result_info</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type> <name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AuditResultInfo</name> <modifier>*</modifier></type> <name>audit_ret</name> <init>= <expr><call><name>audit_hit_get_result_info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>audit_ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>audit_ret-&gt;l_hit_info</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditHitInfo</name> <modifier>*</modifier></type> <name>audit_hit</name> <init>= <expr><operator>(</operator><name>AuditHitInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>audit_hit_match_in_catalog</name><argument_list>(<argument><expr><name>audit_hit</name></expr></argument>, <argument><expr><name>is_success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>is_success</name></name> <operator>=</operator> <name>is_success</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>audit_ret</name><operator>-&gt;</operator><name>qry_end_time</name></name> <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>audit_hit_print_result_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Audit_004_For_Log</name></cpp:ifdef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
