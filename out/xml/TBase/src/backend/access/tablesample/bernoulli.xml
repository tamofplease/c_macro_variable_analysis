<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/tablesample/bernoulli.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * bernoulli.c
 *      support routines for BERNOULLI tablesample method
 *
 * To ensure repeatability of samples, it is necessary that selection of a
 * given tuple be history-independent; otherwise syncscanning would break
 * repeatability, to say nothing of logically-irrelevant maintenance such
 * as physical extension or shortening of the relation.
 *
 * To achieve that, we proceed by hashing each candidate TID together with
 * the active seed, and then selecting it if the hash is less than the
 * cutoff value computed from the selection probability by BeginSampleScan.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/backend/access/tablesample/bernoulli.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>                <comment type="block">/* for _isnan */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tsmapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<comment type="block">/* Private state */</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>uint64</name></type>        <name>cutoff</name></decl>;</decl_stmt>            <comment type="block">/* select tuples with hash less than this */</comment>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>seed</name></decl>;</decl_stmt>            <comment type="block">/* random seed */</comment>
    <decl_stmt><decl><type><name>OffsetNumber</name></type> <name>lt</name></decl>;</decl_stmt>            <comment type="block">/* last tuple returned from current block */</comment>
}</block></struct></type> <name>BernoulliSamplerData</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bernoulli_samplescangetsamplesize</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
                                  <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>,
                                  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paramexprs</name></decl></parameter>,
                                  <parameter><decl><type><name>BlockNumber</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>,
                                  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tuples</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bernoulli_initsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bernoulli_beginsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                          <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>nparams</name></decl></parameter>,
                          <parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OffsetNumber</name></type> <name>bernoulli_nextsampletuple</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                          <parameter><decl><type><name>BlockNumber</name></type> <name>blockno</name></decl></parameter>,
                          <parameter><decl><type><name>OffsetNumber</name></type> <name>maxoffset</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Create a TsmRoutine descriptor for the BERNOULLI method.
 */</comment>
<function><type><name>Datum</name></type>
<name>tsm_bernoulli_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TsmRoutine</name> <modifier>*</modifier></type><name>tsm</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TsmRoutine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>parameterTypes</name></name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>repeatable_across_queries</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>repeatable_across_scans</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>SampleScanGetSampleSize</name></name> <operator>=</operator> <name>bernoulli_samplescangetsamplesize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>InitSampleScan</name></name> <operator>=</operator> <name>bernoulli_initsamplescan</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>BeginSampleScan</name></name> <operator>=</operator> <name>bernoulli_beginsamplescan</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>NextSampleBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>NextSampleTuple</name></name> <operator>=</operator> <name>bernoulli_nextsampletuple</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tsm</name><operator>-&gt;</operator><name>EndSampleScan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>tsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sample size estimation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bernoulli_samplescangetsamplesize</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
                                  <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>,
                                  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>paramexprs</name></decl></parameter>,
                                  <parameter><decl><type><name>BlockNumber</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>,
                                  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tuples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Node</name>       <modifier>*</modifier></type><name>pctnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float4</name></type>        <name>samplefract</name></decl>;</decl_stmt>

    <comment type="block">/* Try to extract an estimate for the sample percentage */</comment>
    <expr_stmt><expr><name>pctnode</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>paramexprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pctnode</name> <operator>=</operator> <call><name>estimate_expression_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>pctnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>pctnode</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>pctnode</name><operator>)</operator><operator>-&gt;</operator><name>constisnull</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>samplefract</name> <operator>=</operator> <call><name>DatumGetFloat4</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>pctnode</name><operator>)</operator><operator>-&gt;</operator><name>constvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>samplefract</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>samplefract</name> <operator>&lt;=</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>samplefract</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>samplefract</name> <operator>/=</operator> <literal type="number">100.0f</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* Default samplefract if the value is bogus */</comment>
            <expr_stmt><expr><name>samplefract</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Default samplefract if we didn't obtain a non-null Const */</comment>
        <expr_stmt><expr><name>samplefract</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* We'll visit all pages of the baserel */</comment>
    <expr_stmt><expr><operator>*</operator><name>pages</name> <operator>=</operator> <name><name>baserel</name><operator>-&gt;</operator><name>pages</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>tuples</name> <operator>=</operator> <call><name>clamp_row_est</name><argument_list>(<argument><expr><name><name>baserel</name><operator>-&gt;</operator><name>tuples</name></name> <operator>*</operator> <name>samplefract</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize during executor setup.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bernoulli_initsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tsm_state</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BernoulliSamplerData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Examine parameters and prepare for a sample scan.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bernoulli_beginsamplescan</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                          <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>nparams</name></decl></parameter>,
                          <parameter><decl><type><name>uint32</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BernoulliSamplerData</name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><operator>(</operator><name>BernoulliSamplerData</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>tsm_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>percent</name> <init>= <expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>dcutoff</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>percent</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>percent</name></expr></argument> &gt;</argument_list></name> <literal type="number">100</literal> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TABLESAMPLE_ARGUMENT</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"sample percentage must be between 0 and 100"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * The cutoff is sample probability times (PG_UINT32_MAX + 1); we have to
     * store that as a uint64, of course.  Note that this gives strictly
     * correct behavior at the limits of zero or one probability.
     */</comment>
    <expr_stmt><expr><name>dcutoff</name> <operator>=</operator> <call><name>rint</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>PG_UINT32_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>percent</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>=</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <name>dcutoff</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>lt</name></name> <operator>=</operator> <name>InvalidOffsetNumber</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Use bulkread, since we're scanning all pages.  But pagemode visibility
     * checking is a win only at larger sampling fractions.  The 25% cutoff
     * here is based on very limited experimentation.
     */</comment>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>use_bulkread</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>use_pagemode</name></name> <operator>=</operator> <operator>(</operator><name>percent</name> <operator>&gt;=</operator> <literal type="number">25</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Select next sampled tuple in current block.
 *
 * It is OK here to return an offset without knowing if the tuple is visible
 * (or even exists).  The reason is that we do the coinflip for every tuple
 * offset in the table.  Since all tuples have the same probability of being
 * returned, it doesn't matter if we do extra coinflips for invisible tuples.
 *
 * When we reach end of the block, return InvalidOffsetNumber which tells
 * SampleScan to go to next block.
 */</comment>
<function><type><specifier>static</specifier> <name>OffsetNumber</name></type>
<name>bernoulli_nextsampletuple</name><parameter_list>(<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                          <parameter><decl><type><name>BlockNumber</name></type> <name>blockno</name></decl></parameter>,
                          <parameter><decl><type><name>OffsetNumber</name></type> <name>maxoffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BernoulliSamplerData</name> <modifier>*</modifier></type><name>sampler</name> <init>= <expr><operator>(</operator><name>BernoulliSamplerData</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>tsm_state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OffsetNumber</name></type> <name>tupoffset</name> <init>= <expr><name><name>sampler</name><operator>-&gt;</operator><name>lt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name><name>hashinput</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Advance to first/next tuple in block */</comment>
    <if_stmt><if>if <condition>(<expr><name>tupoffset</name> <operator>==</operator> <name>InvalidOffsetNumber</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tupoffset</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>tupoffset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * We compute the hash by applying hash_any to an array of 3 uint32's
     * containing the block, offset, and seed.  This is efficient to set up,
     * and with the current implementation of hash_any, it gives
     * machine-independent results, which is a nice property for regression
     * testing.
     *
     * These words in the hash input are the same throughout the block:
     */</comment>
    <expr_stmt><expr><name><name>hashinput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>blockno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashinput</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sampler</name><operator>-&gt;</operator><name>seed</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Loop over tuple offsets until finding suitable TID or reaching end of
     * block.
     */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>tupoffset</name> <operator>&lt;=</operator> <name>maxoffset</name></expr>;</condition> <incr><expr><name>tupoffset</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32</name></type>        <name>hash</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>hashinput</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tupoffset</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>hashinput</name></expr></argument>,
                                       <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hashinput</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&lt;</operator> <name><name>sampler</name><operator>-&gt;</operator><name>cutoff</name></name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>tupoffset</name> <operator>&gt;</operator> <name>maxoffset</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tupoffset</name> <operator>=</operator> <name>InvalidOffsetNumber</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>sampler</name><operator>-&gt;</operator><name>lt</name></name> <operator>=</operator> <name>tupoffset</name></expr>;</expr_stmt>

    <return>return <expr><name>tupoffset</name></expr>;</return>
</block_content>}</block></function>
</unit>
