<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/common/tupconvert.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tupconvert.c
 *      Tuple conversion support.
 *
 * These functions provide conversion between rowtypes that are logically
 * equivalent but might have columns in a different order or different sets
 * of dropped columns.  There is some overlap of functionality with the
 * executor's "junkfilter" routines, but these functions work on bare
 * HeapTuples rather than TupleTableSlots.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/access/common/tupconvert.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupconvert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<comment type="block">/*
 * The conversion setup routines have the following common API:
 *
 * The setup routine checks whether the given source and destination tuple
 * descriptors are logically compatible.  If not, it throws an error.
 * If so, it returns NULL if they are physically compatible (ie, no conversion
 * is needed), else a TupleConversionMap that can be used by do_convert_tuple
 * to perform the conversion.
 *
 * The TupleConversionMap, if needed, is palloc'd in the caller's memory
 * context.  Also, the given tuple descriptors are referenced by the map,
 * so they must survive as long as the map is needed.
 *
 * The caller must supply a suitable primary error message to be used if
 * a compatibility error is thrown.  Recommended coding practice is to use
 * gettext_noop() on this string, so that it is translatable but won't
 * actually be translated unless the error gets thrown.
 *
 *
 * Implementation notes:
 *
 * The key component of a TupleConversionMap is an attrMap[] array with
 * one entry per output column.  This entry contains the 1-based index of
 * the corresponding input column, or zero to force a NULL value (for
 * a dropped output column).  The TupleConversionMap also contains workspace
 * arrays.
 */</comment>


<comment type="block">/*
 * Set up for tuple conversion, matching input and output columns by
 * position.  (Dropped columns are ignored in both input and output.)
 *
 * Note: the errdetail messages speak of indesc as the "returned" rowtype,
 * outdesc as the "expected" rowtype.  This is okay for current uses but
 * might need generalization in future.
 */</comment>
<function><type><name>TupleConversionMap</name> <modifier>*</modifier></type>
<name>convert_tuples_by_position</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
                           <parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>TupleConversionMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attrMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nincols</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>noutcols</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>same</name></decl>;</decl_stmt>

    <comment type="block">/* Verify compatibility and prepare attribute-number map */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>attrMap</name> <operator>=</operator> <operator>(</operator><name>AttrNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                        <comment type="block">/* j is next physical input attribute */</comment>
    <expr_stmt><expr><name>nincols</name> <operator>=</operator> <name>noutcols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>        <comment type="block">/* these count non-dropped attributes */</comment>
    <expr_stmt><expr><name>same</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><name><name>outdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>atttypid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type>        <name>atttypmod</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>            <comment type="block">/* attrMap[i] is already 0 */</comment>
        <expr_stmt><expr><name>noutcols</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>atttypid</name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>atttypmod</name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>;</expr_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>att</name> <operator>=</operator> <name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nincols</name><operator>++</operator></expr>;</expr_stmt>
            <comment type="block">/* Found matching column, check type */</comment>
            <if_stmt><if>if <condition>(<expr><name>atttypid</name> <operator>!=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>||</operator>
                <operator>(</operator><name>atttypmod</name> <operator>!=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name> <operator>&amp;&amp;</operator> <name>atttypmod</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Returned type %s does not match expected type %s in column %d."</literal></expr></argument>,
                                   <argument><expr><call><name>format_type_with_typemod</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
                                                            <argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>format_type_with_typemod</name><argument_list>(<argument><expr><name>atttypid</name></expr></argument>,
                                                            <argument><expr><name>atttypmod</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>noutcols</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AttrNumber</name><operator>)</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>        <comment type="block">/* we'll complain below */</comment>
    </block_content>}</block></for>

    <comment type="block">/* Check for unused input columns */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nincols</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>            <comment type="block">/* we'll complain below */</comment>
    </block_content>}</block></for>

    <comment type="block">/* Report column count mismatch using the non-dropped-column counts */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>same</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Number of returned columns (%d) does not match "</literal>
                           <literal type="string">"expected column count (%d)."</literal></expr></argument>,
                           <argument><expr><name>nincols</name></expr></argument>, <argument><expr><name>noutcols</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Check to see if the map is one-to-one, in which case we need not do a
     * tuple conversion.  We must also insist that both tupdescs either
     * specify or don't specify an OID column, else we need a conversion to
     * add/remove space for that.  (For some callers, presence or absence of
     * an OID column perhaps would not really matter, but let's be safe.)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&amp;&amp;</operator>
        <name><name>indesc</name><operator>-&gt;</operator><name>tdhasoid</name></name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>tdhasoid</name></name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>    
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * If it's a dropped column and the corresponding input column is
             * also dropped, we needn't convert.  However, attlen and attalign
             * must agree.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name> <operator>&amp;&amp;</operator>
                <name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attlen</name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attlen</name> <operator>&amp;&amp;</operator>
                <name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attalign</name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attalign</name></expr>)</condition>
            <block>{<block_content>  
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>same</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Runtime conversion is not needed */</comment>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Prepare the map structure */</comment>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>TupleConversionMap</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleConversionMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>attrMap</name></name> <operator>=</operator> <name>attrMap</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>indesc</name></name> <operator>=</operator> <name>indesc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>outdesc</name></name> <operator>=</operator> <name>outdesc</name></expr>;</expr_stmt>
    <comment type="block">/* preallocate workspace for Datum arrays */</comment>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>outisnull</name></name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>outvalues</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>        <comment type="block">/* +1 for NULL */</comment>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>invalues</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>inisnull</name></name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>inisnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>invalues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="block">/* set up the NULL entry */</comment>

    <return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set up for tuple conversion, matching input and output columns by name.
 * (Dropped columns are ignored in both input and output.)    This is intended
 * for use when the rowtypes are related by inheritance, so we expect an exact
 * match of both type and typmod.  The error messages will be a bit unhelpful
 * unless both rowtypes are named composite types.
 */</comment>
<function><type><name>TupleConversionMap</name> <modifier>*</modifier></type>
<name>convert_tuples_by_name</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
                       <parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>TupleConversionMap</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attrMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>n</name> <init>= <expr><name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>same</name></decl>;</decl_stmt>

    <comment type="block">/* Verify compatibility and prepare attribute-number map */</comment>
    <expr_stmt><expr><name>attrMap</name> <operator>=</operator> <call><name>convert_tuples_by_name_map</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>outdesc</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check to see if the map is one-to-one, in which case we need not do a
     * tuple conversion.  We must also insist that both tupdescs either
     * specify or don't specify an OID column, else we need a conversion to
     * add/remove space for that.  (For some callers, presence or absence of
     * an OID column perhaps would not really matter, but let's be safe.)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&amp;&amp;</operator>
        <name><name>indesc</name><operator>-&gt;</operator><name>tdhasoid</name></name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>tdhasoid</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>same</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <comment type="block">/*
             * If it's a dropped column and the corresponding input column is
             * also dropped, we needn't convert.  However, attlen and attalign
             * must agree.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name> <operator>&amp;&amp;</operator>
                <name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attlen</name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attlen</name> <operator>&amp;&amp;</operator>
                <name><name>indesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attalign</name> <operator>==</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attalign</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>same</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>same</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Runtime conversion is not needed */</comment>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>attrMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Prepare the map structure */</comment>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>TupleConversionMap</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleConversionMap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>indesc</name></name> <operator>=</operator> <name>indesc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>outdesc</name></name> <operator>=</operator> <name>outdesc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>attrMap</name></name> <operator>=</operator> <name>attrMap</name></expr>;</expr_stmt>
    <comment type="block">/* preallocate workspace for Datum arrays */</comment>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>outvalues</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>outisnull</name></name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>        <comment type="block">/* +1 for NULL */</comment>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>invalues</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>inisnull</name></name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>invalues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>    <comment type="block">/* set up the NULL entry */</comment>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>inisnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return a palloc'd bare attribute map for tuple conversion, matching input
 * and output columns by name.  (Dropped columns are ignored in both input and
 * output.)  This is normally a subroutine for convert_tuples_by_name, but can
 * be used standalone.
 */</comment>
<function><type><name>AttrNumber</name> <modifier>*</modifier></type>
<name>convert_tuples_by_name_map</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>indesc</name></decl></parameter>,
                           <parameter><decl><type><name>TupleDesc</name></type> <name>outdesc</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attrMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>outnatts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>innatts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>nextindesc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>outnatts</name> <operator>=</operator> <name><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>innatts</name> <operator>=</operator> <name><name>indesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>attrMap</name> <operator>=</operator> <operator>(</operator><name>AttrNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>outnatts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>outnatts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>outatt</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>outdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>attname</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>atttypid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type>        <name>atttypmod</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>j</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>outatt</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>            <comment type="block">/* attrMap[i] is already 0 */</comment>
		<expr_stmt><expr><name>attname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>outatt</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>atttypid</name> <operator>=</operator> <name><name>outatt</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>atttypmod</name> <operator>=</operator> <name><name>outatt</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		* Now search for an attribute with the same name in the indesc. It
		* seems likely that a partitioned table will have the attributes in
		* the same order as the partition, so the search below is optimized
		* for that case.  It is possible that columns are dropped in one of
		* the relations, but not the other, so we use the 'nextindesc'
		* counter to track the starting point of the search.  If the inner
		* loop encounters dropped columns then it will have to skip over
		* them, but it should leave 'nextindesc' at the correct position for
		* the next outer loop.
		*/</comment>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>innatts</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>inatt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>nextindesc</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nextindesc</name> <operator>&gt;=</operator> <name>innatts</name></expr>)</condition><block type="pseudo"><block_content>
			   <expr_stmt><expr><name>nextindesc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>inatt</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>indesc</name></expr></argument>, <argument><expr><name>nextindesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>inatt</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>attname</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>inatt</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* Found it, check type */</comment>
				<if_stmt><if>if <condition>(<expr><name>atttypid</name> <operator>!=</operator> <name><name>inatt</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>||</operator> <name>atttypmod</name> <operator>!=</operator> <name><name>inatt</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Attribute \"%s\" of type %s does not match corresponding attribute of type %s."</literal></expr></argument>,
                                       <argument><expr><name>attname</name></expr></argument>,
                                       <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>outdesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>indesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>inatt</name><operator>-&gt;</operator><name>attnum</name></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Attribute \"%s\" of type %s does not exist in type %s."</literal></expr></argument>,
                               <argument><expr><name>attname</name></expr></argument>,
                               <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>outdesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>indesc</name><operator>-&gt;</operator><name>tdtypeid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>attrMap</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform conversion of a tuple according to the map.
 */</comment>
<function><type><name>HeapTuple</name></type>
<name>do_convert_tuple</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>TupleConversionMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>attrMap</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>attrMap</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>invalues</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>invalues</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>       <modifier>*</modifier></type><name>inisnull</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>inisnull</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>outvalues</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>outvalues</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name>       <modifier>*</modifier></type><name>outisnull</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>outisnull</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>outnatts</name> <init>= <expr><name><name>map</name><operator>-&gt;</operator><name>outdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>hasshard</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttrNumber</name></type>  <name>diskey</name> <init>= <expr><name>InvalidAttrNumber</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttrNumber</name></type>  <name>secdiskey</name> <init>= <expr><name>InvalidAttrNumber</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Extract all the values of the old tuple, offsetting the arrays so that
     * invalues[0] is left NULL and invalues[1] is the first source attribute;
     * this exactly matches the numbering convention in attrMap.
     */</comment>
    <expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>indesc</name></name></expr></argument>, <argument><expr><name>invalues</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inisnull</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Transpose into proper fields of the new tuple.
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>outnatts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>j</name> <init>= <expr><name><name>attrMap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>outvalues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>invalues</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>outisnull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>inisnull</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>hasshard</name> <operator>=</operator> <call><name>RelationIsSharded</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if<condition>(<expr><name>hasshard</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>diskey</name> <operator>=</operator> <call><name>RelationGetDisKey</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>secdiskey</name> <operator>=</operator> <call><name>RelationGetSecDisKey</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Now form the new tuple.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>hasshard</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><call><name>heap_form_tuple_plain</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>outdesc</name></name></expr></argument>,
                           <argument><expr><name>outvalues</name></expr></argument>,
                           <argument><expr><name>outisnull</name></expr></argument>,
                           <argument><expr><name>diskey</name></expr></argument>, <argument><expr><name>secdiskey</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>outdesc</name></name></expr></argument>, <argument><expr><name>outvalues</name></expr></argument>, <argument><expr><name>outisnull</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free a TupleConversionMap structure.
 */</comment>
<function><type><name>void</name></type>
<name>free_conversion_map</name><parameter_list>(<parameter><decl><type><name>TupleConversionMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* indesc and outdesc are not ours to free */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>attrMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>invalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>inisnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>outvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>outisnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
