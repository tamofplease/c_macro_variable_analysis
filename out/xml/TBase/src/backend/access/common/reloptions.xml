<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/common/reloptions.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * reloptions.c
 *      Core support for relation options (pg_class.reloptions)
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/access/common/reloptions.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gist_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/spgist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/attoptcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Contents of pg_class.reloptions
 *
 * To add an option:
 *
 * (i) decide on a type (integer, real, bool, string), name, default value,
 * upper and lower bounds (if applicable); for strings, consider a validation
 * routine.
 * (ii) add a record below (or use add_&lt;type&gt;_reloption).
 * (iii) add it to the appropriate options struct (perhaps StdRdOptions)
 * (iv) add it to the appropriate handling routine (perhaps
 * default_reloptions)
 * (v) make sure the lock level is set correctly for that operation
 * (vi) don't forget to document the option
 *
 * Note that we don't handle "oids" in relOpts because it is handled by
 * interpretOidsOption().
 *
 * The default choice for any new option should be AccessExclusiveLock.
 * In some cases the lock level can be reduced from there, but the lock
 * level chosen should always conflict with itself to ensure that multiple
 * changes aren't lost when we attempt concurrent changes.
 * The choice of lock level depends completely upon how that parameter
 * is used within the server, not upon how and when you'd like to change it.
 * Safety first. Existing choices are documented here, and elsewhere in
 * backend code where the parameters are used.
 *
 * In general, anything that affects the results obtained from a SELECT must be
 * protected by AccessExclusiveLock.
 *
 * Autovacuum related parameters can be set at ShareUpdateExclusiveLock
 * since they are only used by the AV procs and don't change anything
 * currently executing.
 *
 * Fillfactor can be set because it applies only to subsequent changes made to
 * data blocks, as documented in heapio.c
 *
 * n_distinct options can be set at ShareUpdateExclusiveLock because they
 * are only used during ANALYZE, which uses a ShareUpdateExclusiveLock,
 * so the ANALYZE will not be affected by in-flight changes. Changing those
 * values has no affect until the next ANALYZE, so no need for stronger lock.
 *
 * Planner-related parameters can be set with ShareUpdateExclusiveLock because
 * they only affect planning and not the correctness of the execution. Plans
 * cannot be changed in mid-flight, so changes here could not easily result in
 * new improved plans in any case. So we allow existing queries to continue
 * and existing plans to survive, a small price to pay for allowing better
 * plans to be introduced concurrently without interfering with users.
 *
 * Setting parallel_workers is safe, since it acts the same as
 * max_parallel_workers_per_gather which is a USERSET parameter that doesn't
 * affect existing plans or queries.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_bool</name></type> <name><name>boolRelOpts</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autosummarize"</literal></expr>,
            <expr><literal type="string">"Enables automatic summarization on this BRIN index"</literal></expr>,
            <expr><name>RELOPT_KIND_BRIN</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><name>false</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_enabled"</literal></expr>,
            <expr><literal type="string">"Enables autovacuum in this relation"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><name>true</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"user_catalog_table"</literal></expr>,
            <expr><literal type="string">"Declare a table as an additional catalog table, e.g. for the purpose of logical replication"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><name>false</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"fastupdate"</literal></expr>,
            <expr><literal type="string">"Enables \"fast update\" feature for this GIN index"</literal></expr>,
            <expr><name>RELOPT_KIND_GIN</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><name>true</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"security_barrier"</literal></expr>,
            <expr><literal type="string">"View acts as a row security barrier"</literal></expr>,
            <expr><name>RELOPT_KIND_VIEW</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><name>false</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"extent"</literal></expr>,
            <expr><literal type="string">"enable a table orginized with extent."</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><name>false</name></expr>
    }</block></expr>,
    <comment type="block">/* list terminator */</comment>
    <expr><block>{<expr><block>{<expr><name>NULL</name></expr>}</block></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_int</name></type> <name><name>intRelOpts</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"fillfactor"</literal></expr>,
            <expr><literal type="string">"Packs table pages only to this percentage"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>    <comment type="block">/* since it applies only to later
                                         * inserts */</comment>
        }</block></expr>,
        <expr><name>HEAP_DEFAULT_FILLFACTOR</name></expr>, <expr><name>HEAP_MIN_FILLFACTOR</name></expr>, <expr><literal type="number">100</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"fillfactor"</literal></expr>,
            <expr><literal type="string">"Packs btree index pages only to this percentage"</literal></expr>,
            <expr><name>RELOPT_KIND_BTREE</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>    <comment type="block">/* since it applies only to later
                                         * inserts */</comment>
        }</block></expr>,
        <expr><name>BTREE_DEFAULT_FILLFACTOR</name></expr>, <expr><name>BTREE_MIN_FILLFACTOR</name></expr>, <expr><literal type="number">100</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"fillfactor"</literal></expr>,
            <expr><literal type="string">"Packs hash index pages only to this percentage"</literal></expr>,
            <expr><name>RELOPT_KIND_HASH</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>    <comment type="block">/* since it applies only to later
                                         * inserts */</comment>
        }</block></expr>,
        <expr><name>HASH_DEFAULT_FILLFACTOR</name></expr>, <expr><name>HASH_MIN_FILLFACTOR</name></expr>, <expr><literal type="number">100</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"fillfactor"</literal></expr>,
            <expr><literal type="string">"Packs gist index pages only to this percentage"</literal></expr>,
            <expr><name>RELOPT_KIND_GIST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>    <comment type="block">/* since it applies only to later
                                         * inserts */</comment>
        }</block></expr>,
        <expr><name>GIST_DEFAULT_FILLFACTOR</name></expr>, <expr><name>GIST_MIN_FILLFACTOR</name></expr>, <expr><literal type="number">100</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"fillfactor"</literal></expr>,
            <expr><literal type="string">"Packs spgist index pages only to this percentage"</literal></expr>,
            <expr><name>RELOPT_KIND_SPGIST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>    <comment type="block">/* since it applies only to later
                                         * inserts */</comment>
        }</block></expr>,
        <expr><name>SPGIST_DEFAULT_FILLFACTOR</name></expr>, <expr><name>SPGIST_MIN_FILLFACTOR</name></expr>, <expr><literal type="number">100</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_vacuum_threshold"</literal></expr>,
            <expr><literal type="string">"Minimum number of tuple updates or deletes prior to vacuum"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_analyze_threshold"</literal></expr>,
            <expr><literal type="string">"Minimum number of tuple inserts, updates or deletes prior to analyze"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_vacuum_cost_delay"</literal></expr>,
            <expr><literal type="string">"Vacuum cost delay in milliseconds, for autovacuum"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_vacuum_cost_limit"</literal></expr>,
            <expr><literal type="string">"Vacuum cost amount available before napping, for autovacuum"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10000</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_freeze_min_age"</literal></expr>,
            <expr><literal type="string">"Minimum age at which VACUUM should freeze a table row, for autovacuum"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000000000</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_multixact_freeze_min_age"</literal></expr>,
            <expr><literal type="string">"Minimum multixact age at which VACUUM should freeze a row multixact's, for autovacuum"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000000000</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_freeze_max_age"</literal></expr>,
            <expr><literal type="string">"Age at which to autovacuum a table to prevent transaction ID wraparound"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">100000</literal></expr>, <expr><literal type="number">2000000000</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_multixact_freeze_max_age"</literal></expr>,
            <expr><literal type="string">"Multixact age at which to autovacuum a table to prevent multixact wraparound"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">2000000000</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_freeze_table_age"</literal></expr>,
            <expr><literal type="string">"Age at which VACUUM should perform a full table sweep to freeze row versions"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000000000</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_multixact_freeze_table_age"</literal></expr>,
            <expr><literal type="string">"Age of multixact at which VACUUM should perform a full table sweep to freeze row versions"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2000000000</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"log_autovacuum_min_duration"</literal></expr>,
            <expr><literal type="string">"Sets the minimum execution time above which autovacuum actions will be logged"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"pages_per_range"</literal></expr>,
            <expr><literal type="string">"Number of pages that each page range covers in a BRIN index"</literal></expr>,
            <expr><name>RELOPT_KIND_BRIN</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">131072</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"gin_pending_list_limit"</literal></expr>,
            <expr><literal type="string">"Maximum size of the pending list for this GIN index, in kilobytes."</literal></expr>,
            <expr><name>RELOPT_KIND_GIN</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>MAX_KILOBYTES</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"effective_io_concurrency"</literal></expr>,
            <expr><literal type="string">"Number of simultaneous requests that can be handled efficiently by the disk subsystem."</literal></expr>,
            <expr><name>RELOPT_KIND_TABLESPACE</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PREFETCH</name></cpp:ifdef>
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_IO_CONCURRENCY</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"parallel_workers"</literal></expr>,
            <expr><literal type="string">"Number of parallel processes that can be used per executor node for this relation."</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1024</literal></expr>
    }</block></expr>,

    <comment type="block">/* list terminator */</comment>
    <expr><block>{<expr><block>{<expr><name>NULL</name></expr>}</block></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_real</name></type> <name><name>realRelOpts</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_vacuum_scale_factor"</literal></expr>,
            <expr><literal type="string">"Number of tuple updates or deletes prior to vacuum as a fraction of reltuples"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name> <operator>|</operator> <name>RELOPT_KIND_TOAST</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">100.0</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"autovacuum_analyze_scale_factor"</literal></expr>,
            <expr><literal type="string">"Number of tuple inserts, updates or deletes prior to analyze as a fraction of reltuples"</literal></expr>,
            <expr><name>RELOPT_KIND_HEAP</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">100.0</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"seq_page_cost"</literal></expr>,
            <expr><literal type="string">"Sets the planner's estimate of the cost of a sequentially fetched disk page."</literal></expr>,
            <expr><name>RELOPT_KIND_TABLESPACE</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"random_page_cost"</literal></expr>,
            <expr><literal type="string">"Sets the planner's estimate of the cost of a nonsequentially fetched disk page."</literal></expr>,
            <expr><name>RELOPT_KIND_TABLESPACE</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"n_distinct"</literal></expr>,
            <expr><literal type="string">"Sets the planner's estimate of the number of distinct values appearing in a column (excluding child relations)."</literal></expr>,
            <expr><name>RELOPT_KIND_ATTRIBUTE</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><name>DBL_MAX</name></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"n_distinct_inherited"</literal></expr>,
            <expr><literal type="string">"Sets the planner's estimate of the number of distinct values appearing in a column (including child relations)."</literal></expr>,
            <expr><name>RELOPT_KIND_ATTRIBUTE</name></expr>,
            <expr><name>ShareUpdateExclusiveLock</name></expr>
        }</block></expr>,
        <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><name>DBL_MAX</name></expr>
    }</block></expr>,
    <comment type="block">/* list terminator */</comment>
    <expr><block>{<expr><block>{<expr><name>NULL</name></expr>}</block></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_string</name></type> <name><name>stringRelOpts</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"buffering"</literal></expr>,
            <expr><literal type="string">"Enables buffering build for this GiST index"</literal></expr>,
            <expr><name>RELOPT_KIND_GIST</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><literal type="number">4</literal></expr>,
        <expr><name>false</name></expr>,
        <expr><name>gistValidateBufferingOption</name></expr>,
        <expr><literal type="string">"auto"</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{
            <expr><literal type="string">"check_option"</literal></expr>,
            <expr><literal type="string">"View has WITH CHECK OPTION defined (local or cascaded)."</literal></expr>,
            <expr><name>RELOPT_KIND_VIEW</name></expr>,
            <expr><name>AccessExclusiveLock</name></expr>
        }</block></expr>,
        <expr><literal type="number">0</literal></expr>,
        <expr><name>true</name></expr>,
        <expr><name>validateWithCheckOption</name></expr>,
        <expr><name>NULL</name></expr>
    }</block></expr>,
    <comment type="block">/* list terminator */</comment>
    <expr><block>{<expr><block>{<expr><name>NULL</name></expr>}</block></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_gen</name> <modifier>*</modifier><modifier>*</modifier></type><name>relOpts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bits32</name></type> <name>last_assigned_kind</name> <init>= <expr><name>RELOPT_KIND_LAST_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>num_custom_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>relopt_gen</name> <modifier>*</modifier><modifier>*</modifier></type><name>custom_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>need_initialization</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initialize_reloptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parse_one_reloption</name><parameter_list>(<parameter><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text_str</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>text_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * initialize_reloptions
 *        initialization routine, must be called before parsing
 *
 * Initialize the relOpts array and fill each variable's type and name length.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>initialize_reloptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>boolRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DoLockModesConflict</name><argument_list>(<argument><expr><name><name>boolRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>,
                                   <argument><expr><name><name>boolRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>intRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DoLockModesConflict</name><argument_list>(<argument><expr><name><name>intRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>,
                                   <argument><expr><name><name>intRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>realRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DoLockModesConflict</name><argument_list>(<argument><expr><name><name>realRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>,
                                   <argument><expr><name><name>realRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>stringRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DoLockModesConflict</name><argument_list>(<argument><expr><name><name>stringRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>,
                                   <argument><expr><name><name>stringRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>lockmode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>num_custom_options</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>relOpts</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>relOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>relOpts</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
                                 <argument><expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_gen</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>boolRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>boolRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name>RELOPT_TYPE_BOOL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>intRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>intRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name>RELOPT_TYPE_INT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>realRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>realRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name>RELOPT_TYPE_REAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>stringRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>.</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>stringRelOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name>RELOPT_TYPE_STRING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_custom_options</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>custom_options</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* add a list terminator */</comment>
    <expr_stmt><expr><name><name>relOpts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* flag the work is complete */</comment>
    <expr_stmt><expr><name>need_initialization</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * add_reloption_kind
 *        Create a new relopt_kind value, to be used in custom reloptions by
 *        user-defined AMs.
 */</comment>
<function><type><name>relopt_kind</name></type>
<name>add_reloption_kind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* don't hand out the last bit so that the enum's behavior is portable */</comment>
    <if_stmt><if>if <condition>(<expr><name>last_assigned_kind</name> <operator>&gt;=</operator> <name>RELOPT_KIND_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"user-defined relation parameter types limit exceeded"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>last_assigned_kind</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>relopt_kind</name><operator>)</operator> <name>last_assigned_kind</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * add_reloption
 *        Add an already-created custom reloption to the list, and recompute the
 *        main parser table.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_reloption</name><parameter_list>(<parameter><decl><type><name>relopt_gen</name> <modifier>*</modifier></type><name>newoption</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>    <name>max_custom_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>num_custom_options</name> <operator>&gt;=</operator> <name>max_custom_options</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>max_custom_options</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>max_custom_options</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>custom_options</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>max_custom_options</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_gen</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>max_custom_options</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>custom_options</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>custom_options</name></expr></argument>,
                                      <argument><expr><name>max_custom_options</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_gen</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>custom_options</name><index>[<expr><name>num_custom_options</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>newoption</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>need_initialization</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * allocate_reloption
 *        Allocate a new reloption and initialize the type-agnostic fields
 *        (for types other than string)
 */</comment>
<function><type><specifier>static</specifier> <name>relopt_gen</name> <modifier>*</modifier></type>
<name>allocate_reloption</name><parameter_list>(<parameter><decl><type><name>bits32</name></type> <name>kinds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>relopt_gen</name> <modifier>*</modifier></type><name>newoption</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>RELOPT_TYPE_BOOL</name></expr>:</case>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELOPT_TYPE_INT</name></expr>:</case>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELOPT_TYPE_REAL</name></expr>:</case>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_real</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELOPT_TYPE_STRING</name></expr>:</case>
            <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_string</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported reloption type %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>        <comment type="block">/* keep compiler quiet */</comment>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>newoption</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>kinds</name></name> <operator>=</operator> <name>kinds</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>namelen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>newoption</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * add_bool_reloption
 *        Add a new boolean reloption
 */</comment>
<function><type><name>void</name></type>
<name>add_bool_reloption</name><parameter_list>(<parameter><decl><type><name>bits32</name></type> <name>kinds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>default_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_bool</name> <modifier>*</modifier></type><name>newoption</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>newoption</name> <operator>=</operator> <operator>(</operator><name>relopt_bool</name> <operator>*</operator><operator>)</operator> <call><name>allocate_reloption</name><argument_list>(<argument><expr><name>kinds</name></expr></argument>, <argument><expr><name>RELOPT_TYPE_BOOL</name></expr></argument>,
                                                   <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_val</name></name> <operator>=</operator> <name>default_val</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>add_reloption</name><argument_list>(<argument><expr><operator>(</operator><name>relopt_gen</name> <operator>*</operator><operator>)</operator> <name>newoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * add_int_reloption
 *        Add a new integer reloption
 */</comment>
<function><type><name>void</name></type>
<name>add_int_reloption</name><parameter_list>(<parameter><decl><type><name>bits32</name></type> <name>kinds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_val</name></decl></parameter>,
                  <parameter><decl><type><name>int</name></type> <name>min_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_int</name> <modifier>*</modifier></type><name>newoption</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>newoption</name> <operator>=</operator> <operator>(</operator><name>relopt_int</name> <operator>*</operator><operator>)</operator> <call><name>allocate_reloption</name><argument_list>(<argument><expr><name>kinds</name></expr></argument>, <argument><expr><name>RELOPT_TYPE_INT</name></expr></argument>,
                                                  <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_val</name></name> <operator>=</operator> <name>default_val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min_val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max_val</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>add_reloption</name><argument_list>(<argument><expr><operator>(</operator><name>relopt_gen</name> <operator>*</operator><operator>)</operator> <name>newoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * add_real_reloption
 *        Add a new float reloption
 */</comment>
<function><type><name>void</name></type>
<name>add_real_reloption</name><parameter_list>(<parameter><decl><type><name>bits32</name></type> <name>kinds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>default_val</name></decl></parameter>,
                   <parameter><decl><type><name>double</name></type> <name>min_val</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_real</name> <modifier>*</modifier></type><name>newoption</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>newoption</name> <operator>=</operator> <operator>(</operator><name>relopt_real</name> <operator>*</operator><operator>)</operator> <call><name>allocate_reloption</name><argument_list>(<argument><expr><name>kinds</name></expr></argument>, <argument><expr><name>RELOPT_TYPE_REAL</name></expr></argument>,
                                                   <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_val</name></name> <operator>=</operator> <name>default_val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name>min_val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name>max_val</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>add_reloption</name><argument_list>(<argument><expr><operator>(</operator><name>relopt_gen</name> <operator>*</operator><operator>)</operator> <name>newoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * add_string_reloption
 *        Add a new string reloption
 *
 * "validator" is an optional function pointer that can be used to test the
 * validity of the values.  It must elog(ERROR) when the argument string is
 * not acceptable for the variable.  Note that the default value must pass
 * the validation.
 */</comment>
<function><type><name>void</name></type>
<name>add_string_reloption</name><parameter_list>(<parameter><decl><type><name>bits32</name></type> <name>kinds</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>default_val</name></decl></parameter>,
                     <parameter><decl><type><name>validate_string_relopt</name></type> <name>validator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_string</name> <modifier>*</modifier></type><name>newoption</name></decl>;</decl_stmt>

    <comment type="block">/* make sure the validator/default combination is sane */</comment>
    <if_stmt><if>if <condition>(<expr><name>validator</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>(</operator><name>validator</name><operator>)</operator> <operator>(</operator><name>default_val</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>newoption</name> <operator>=</operator> <operator>(</operator><name>relopt_string</name> <operator>*</operator><operator>)</operator> <call><name>allocate_reloption</name><argument_list>(<argument><expr><name>kinds</name></expr></argument>, <argument><expr><name>RELOPT_TYPE_STRING</name></expr></argument>,
                                                     <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>validate_cb</name></name> <operator>=</operator> <name>validator</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>default_val</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_val</name></name> <operator>=</operator> <call><name>MemoryContextStrdup</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
                                                     <argument><expr><name>default_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>default_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_isnull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_val</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>newoption</name><operator>-&gt;</operator><name>default_isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>add_reloption</name><argument_list>(<argument><expr><operator>(</operator><name>relopt_gen</name> <operator>*</operator><operator>)</operator> <name>newoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Transform a relation options list (list of DefElem) into the text array
 * format that is kept in pg_class.reloptions, including only those options
 * that are in the passed namespace.  The output values do not include the
 * namespace.
 *
 * This is used for three cases: CREATE TABLE/INDEX, ALTER TABLE SET, and
 * ALTER TABLE RESET.  In the ALTER cases, oldOptions is the existing
 * reloptions value (possibly NULL), and we replace or remove entries
 * as needed.
 *
 * If ignoreOids is true, then we should ignore any occurrence of "oids"
 * in the list (it will be or has been handled by interpretOidsOption()).
 *
 * Note that this is not responsible for determining whether the options
 * are valid, but it does check that namespaces for all the options given are
 * listed in validnsps.  The NULL namespace is always valid and need not be
 * explicitly listed.  Passing a NULL pointer means that only the NULL
 * namespace is valid.
 *
 * Both oldOptions and the result are text arrays (or NULL for "default"),
 * but we declare them as Datums to avoid including array.h in reloptions.h.
 */</comment>
<function><type><name>Datum</name></type>
<name>transformRelOptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>oldOptions</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>defList</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>namspace</name></decl></parameter>,
                    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>validnsps</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreOids</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isReset</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

    <comment type="block">/* no change if empty list */</comment>
    <if_stmt><if>if <condition>(<expr><name>defList</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>oldOptions</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* We build new array using accumArrayResult */</comment>
    <expr_stmt><expr><name>astate</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Copy any oldOptions that aren't to be replaced */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PointerIsValid</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>oldOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>oldOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>oldoptions</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>noldoptions</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name>oldoptions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noldoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>noldoptions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>text_str</name> <init>= <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>oldoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>            <name>text_len</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>oldoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Search for a match in defList */</comment>
            <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>defList</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type>            <name>kw_len</name></decl>;</decl_stmt>

                <comment type="block">/* ignore if not in the same namespace */</comment>
                <if_stmt><if>if <condition>(<expr><name>namspace</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name></expr></argument>, <argument><expr><name>namspace</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>kw_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>text_len</name> <operator>&gt;</operator> <name>kw_len</name> <operator>&amp;&amp;</operator> <name><name>text_str</name><index>[<expr><name>kw_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator>
                    <call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>text_str</name></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><name>kw_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cell</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* No match, so keep old option */</comment>
                <expr_stmt><expr><name>astate</name> <operator>=</operator> <call><name>accumArrayResult</name><argument_list>(<argument><expr><name>astate</name></expr></argument>, <argument><expr><name><name>oldoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                          <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>,
                                          <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If CREATE/SET, add new options to array; if RESET, just check that the
     * user didn't say RESET (option=val).  (Must do this because the grammar
     * doesn't enforce it.)
     */</comment>
    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>defList</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>isReset</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RESET must not include values for parameters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size</name></type>        <name>len</name></decl>;</decl_stmt>

            <comment type="block">/*
             * Error out if the namespace is not valid.  A NULL namespace is
             * always valid.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type>        <name>valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>validnsps</name></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>validnsps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name></expr></argument>,
                                          <argument><expr><name><name>validnsps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized parameter namespace \"%s\""</literal></expr></argument>,
                                    <argument><expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ignoreOids</name> <operator>&amp;&amp;</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"oids"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <comment type="block">/* ignore if not in the same namespace */</comment>
            <if_stmt><if>if <condition>(<expr><name>namspace</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defnamespace</name></name></expr></argument>, <argument><expr><name>namspace</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Flatten the DefElem into a text string like "name=arg". If we
             * have just "name", assume "name=true" is meant.  Note: the
             * namespace is not output.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>arg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>defGetString</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>VARHDRSZ</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* +1 leaves room for sprintf's trailing null */</comment>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>astate</name> <operator>=</operator> <call><name>accumArrayResult</name><argument_list>(<argument><expr><name>astate</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>,
                                      <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>astate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>makeArrayResult</name><argument_list>(<argument><expr><name>astate</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Convert the text-array format of reloptions into a List of DefElem.
 * This is the inverse of transformRelOptions().
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>untransformRelOptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>optiondatums</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>noptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Nothing to do if no options */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PointerIsValid</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
                      <argument><expr><operator>&amp;</operator><name>optiondatums</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>noptions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name>       <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>optiondatums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Extract and parse reloptions from a pg_class tuple.
 *
 * This is a low-level routine, expected to be used by relcache code and
 * callers that do not have a table's relcache entry (e.g. autovacuum).  For
 * other uses, consider grabbing the rd_options pointer from the relcache entry
 * instead.
 *
 * tupdesc is pg_class' tuple descriptor.  amoptions is a pointer to the index
 * AM's options parser function in the case of a tuple corresponding to an
 * index, or NULL otherwise.
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>extractRelOptions</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>,
                  <parameter><decl><type><name>amoptions_function</name></type> <name>amoptions</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bytea</name>       <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>datum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pg_class</name></type> <name>classForm</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
                        <argument><expr><name>Anum_pg_class_reloptions</name></expr></argument>,
                        <argument><expr><name>tupdesc</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>classForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Parse into appropriate format; don't error out here */</comment>
    <switch>switch <condition>(<expr><name><name>classForm</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
        <case>case <expr><name>RELKIND_TOASTVALUE</name></expr>:</case>
        <case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
        <case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>heap_reloptions</name><argument_list>(<argument><expr><name><name>classForm</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>view_reloptions</name><argument_list>(<argument><expr><name>datum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELKIND_INDEX</name></expr>:</case>
		<case>case <expr><name>RELKIND_PARTITIONED_INDEX</name></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>index_reloptions</name><argument_list>(<argument><expr><name>amoptions</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RELKIND_FOREIGN_TABLE</name></expr>:</case>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* can't get here */</comment>
            <expr_stmt><expr><name>options</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>        <comment type="block">/* keep compiler quiet */</comment>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Interpret reloptions that are given in text-array format.
 *
 * options is a reloption text array as constructed by transformRelOptions.
 * kind specifies the family of options to be processed.
 *
 * The return value is a relopt_value * array on which the options actually
 * set in the options array are marked with isset=true.  The length of this
 * array is returned in *numrelopts.  Options not set are also present in the
 * array; this is so that the caller can easily locate the default values.
 *
 * If there are no options of the given kind, numrelopts is set to 0 and NULL
 * is returned (unless options are illegally supplied despite none being
 * defined, in which case an error occurs).
 *
 * Note: values of type int, bool and real are allocated as part of the
 * returned array.  Values of type string are allocated separately and must
 * be freed by the caller.
 */</comment>
<function><type><name>relopt_value</name> <modifier>*</modifier></type>
<name>parseRelOptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>, <parameter><decl><type><name>relopt_kind</name></type> <name>kind</name></decl></parameter>,
                <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numrelopts</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>reloptions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>numoptions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>need_initialization</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>initialize_reloptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Build a list of expected options, based on kind */</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>kinds</name> <operator>&amp;</operator> <name>kind</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>numoptions</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><name>numoptions</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>reloptions</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>numoptions</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>relopt_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>kinds</name> <operator>&amp;</operator> <name>kind</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>reloptions</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>gen</name> <operator>=</operator> <name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>reloptions</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>isset</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Done if no options */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PointerIsValid</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>optiondatums</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>noptions</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name>optiondatums</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>noptions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>text_str</name> <init>= <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>optiondatums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>            <name>text_len</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>optiondatums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>            <name>j</name></decl>;</decl_stmt>

            <comment type="block">/* Search for a match in reloptions */</comment>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numoptions</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type>            <name>kw_len</name> <init>= <expr><name><name>reloptions</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>namelen</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>text_len</name> <operator>&gt;</operator> <name>kw_len</name> <operator>&amp;&amp;</operator> <name><name>text_str</name><index>[<expr><name>kw_len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator>
                    <call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>text_str</name></expr></argument>, <argument><expr><name><name>reloptions</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                                   <argument><expr><name>kw_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>parse_one_reloption</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reloptions</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>text_str</name></expr></argument>, <argument><expr><name>text_len</name></expr></argument>,
                                        <argument><expr><name>validate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>numoptions</name> <operator>&amp;&amp;</operator> <name>validate</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>optiondatums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized parameter \"%s\""</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="block">/* It's worth avoiding memory leaks in this function */</comment>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>optiondatums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>array</name><operator>)</operator> <operator>!=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>numrelopts</name> <operator>=</operator> <name>numoptions</name></expr>;</expr_stmt>
    <return>return <expr><name>reloptions</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Subroutine for parseRelOptions, to parse and validate a single option's
 * value
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_one_reloption</name><parameter_list>(<parameter><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>text_len</name></decl></parameter>,
                    <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>value_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>parsed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>nofree</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>isset</name></name> <operator>&amp;&amp;</operator> <name>validate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"parameter \"%s\" specified more than once"</literal></expr></argument>,
                        <argument><expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>value_len</name> <operator>=</operator> <name>text_len</name> <operator>-</operator> <name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>namelen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>value_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>text_str</name> <operator>+</operator> <name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>namelen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>value_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>RELOPT_TYPE_BOOL</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><name>parsed</name> <operator>=</operator> <call><name>parse_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>bool_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>validate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>parsed</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid value for boolean option \"%s\": %s"</literal></expr></argument>,
                                    <argument><expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><name>RELOPT_TYPE_INT</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>relopt_int</name> <modifier>*</modifier></type><name>optint</name> <init>= <expr><operator>(</operator><name>relopt_int</name> <operator>*</operator><operator>)</operator> <name><name>option</name><operator>-&gt;</operator><name>gen</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>parsed</name> <operator>=</operator> <call><name>parse_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>int_val</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>validate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>parsed</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid value for integer option \"%s\": %s"</literal></expr></argument>,
                                    <argument><expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>validate</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>int_val</name></name> <operator>&lt;</operator> <name><name>optint</name><operator>-&gt;</operator><name>min</name></name> <operator>||</operator>
                                 <name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>int_val</name></name> <operator>&gt;</operator> <name><name>optint</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value %s out of bounds for option \"%s\""</literal></expr></argument>,
                                    <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Valid values are between \"%d\" and \"%d\"."</literal></expr></argument>,
                                       <argument><expr><name><name>optint</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>optint</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><name>RELOPT_TYPE_REAL</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>relopt_real</name> <modifier>*</modifier></type><name>optreal</name> <init>= <expr><operator>(</operator><name>relopt_real</name> <operator>*</operator><operator>)</operator> <name><name>option</name><operator>-&gt;</operator><name>gen</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>parsed</name> <operator>=</operator> <call><name>parse_real</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>real_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>validate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>parsed</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid value for floating point option \"%s\": %s"</literal></expr></argument>,
                                    <argument><expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>validate</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>real_val</name></name> <operator>&lt;</operator> <name><name>optreal</name><operator>-&gt;</operator><name>min</name></name> <operator>||</operator>
                                 <name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>real_val</name></name> <operator>&gt;</operator> <name><name>optreal</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value %s out of bounds for option \"%s\""</literal></expr></argument>,
                                    <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Valid values are between \"%f\" and \"%f\"."</literal></expr></argument>,
                                       <argument><expr><name><name>optreal</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>optreal</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><name>RELOPT_TYPE_STRING</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>relopt_string</name> <modifier>*</modifier></type><name>optstring</name> <init>= <expr><operator>(</operator><name>relopt_string</name> <operator>*</operator><operator>)</operator> <name><name>option</name><operator>-&gt;</operator><name>gen</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>values</name><operator>.</operator><name>string_val</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>nofree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>validate</name> <operator>&amp;&amp;</operator> <name><name>optstring</name><operator>-&gt;</operator><name>validate_cb</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><operator>(</operator><name><name>optstring</name><operator>-&gt;</operator><name>validate_cb</name></name><operator>)</operator> <operator>(</operator><name>value</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>parsed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported reloption type %d"</literal></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>gen</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>parsed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>        <comment type="block">/* quiet compiler */</comment>
            <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>parsed</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>isset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nofree</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Given the result from parseRelOptions, allocate a struct that's of the
 * specified base size plus any extra space that's needed for string variables.
 *
 * "base" should be sizeof(struct) of the reloptions struct (StdRdOptions or
 * equivalent).
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>allocateReloptStruct</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numoptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Size</name></type>        <name>size</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numoptions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RELOPT_TYPE_STRING</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>GET_STRING_RELOPTION_LEN</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <return>return <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given the result of parseRelOptions and a parsing table, fill in the
 * struct (previously allocated with allocateReloptStruct) with the parsed
 * values.
 *
 * rdopts is the pointer to the allocated struct to be filled.
 * basesize is the sizeof(struct) that was passed to allocateReloptStruct.
 * options, of length numoptions, is parseRelOptions' output.
 * elems, of length numelems, is the table describing the allowed options.
 * When validate is true, it is expected that all options appear in elems.
 */</comment>
<function><type><name>void</name></type>
<name>fillRelOptions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rdopts</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>basesize</name></decl></parameter>,
               <parameter><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numoptions</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>,
               <parameter><decl><type><specifier>const</specifier> <name>relopt_parse_elt</name> <modifier>*</modifier></type><name>elems</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numelems</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>offset</name> <init>= <expr><name>basesize</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numoptions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_SHARDING_</name></cpp:ifdef>
        <if_stmt><if>if<condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"extent"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numelems</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>optname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>relopt_string</name> <modifier>*</modifier></type><name>optstring</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>itempos</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>rdopts</name><operator>)</operator> <operator>+</operator> <name><name>elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>string_val</name></decl>;</decl_stmt>

                <switch>switch <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>RELOPT_TYPE_BOOL</name></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <name>itempos</name> <operator>=</operator> <ternary><condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isset</name></expr> ?</condition><then>
                            <expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>values</name><operator>.</operator><name>bool_val</name></name></expr> </then><else>:
                            <expr><operator>(</operator><operator>(</operator><name>relopt_bool</name> <operator>*</operator><operator>)</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name><operator>)</operator><operator>-&gt;</operator><name>default_val</name></expr></else></ternary></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>RELOPT_TYPE_INT</name></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>itempos</name> <operator>=</operator> <ternary><condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isset</name></expr> ?</condition><then>
                            <expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>values</name><operator>.</operator><name>int_val</name></name></expr> </then><else>:
                            <expr><operator>(</operator><operator>(</operator><name>relopt_int</name> <operator>*</operator><operator>)</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name><operator>)</operator><operator>-&gt;</operator><name>default_val</name></expr></else></ternary></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>RELOPT_TYPE_REAL</name></expr>:</case>
                        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>itempos</name> <operator>=</operator> <ternary><condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isset</name></expr> ?</condition><then>
                            <expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>values</name><operator>.</operator><name>real_val</name></name></expr> </then><else>:
                            <expr><operator>(</operator><operator>(</operator><name>relopt_real</name> <operator>*</operator><operator>)</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name><operator>)</operator><operator>-&gt;</operator><name>default_val</name></expr></else></ternary></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name>RELOPT_TYPE_STRING</name></expr>:</case>
                        <expr_stmt><expr><name>optstring</name> <operator>=</operator> <operator>(</operator><name>relopt_string</name> <operator>*</operator><operator>)</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gen</name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isset</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>string_val</name> <operator>=</operator> <name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>values</name><operator>.</operator><name>string_val</name></name></expr>;</expr_stmt></block_content></block></if>
                        <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>optstring</name><operator>-&gt;</operator><name>default_isnull</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>string_val</name> <operator>=</operator> <name><name>optstring</name><operator>-&gt;</operator><name>default_val</name></name></expr>;</expr_stmt></block_content></block></if>
                        <else>else<block type="pseudo"><block_content>
                            <expr_stmt><expr><name>string_val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <if_stmt><if>if <condition>(<expr><name>string_val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>itempos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>rdopts</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>string_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>itempos</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string_val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported reloption type %d"</literal></expr></argument>,
                             <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>validate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"reloption \"%s\" not found in parse table"</literal></expr></argument>,
                 <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>rdopts</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Option parser for anything that uses StdRdOptions.
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>default_reloptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>, <parameter><decl><type><name>relopt_kind</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StdRdOptions</name> <modifier>*</modifier></type><name>rdopts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>numoptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>relopt_parse_elt</name></type> <name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"fillfactor"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>StdRdOptions</argument>, <argument>fillfactor</argument>)</argument_list></macro>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_enabled"</literal></expr>, <expr><name>RELOPT_TYPE_BOOL</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>enabled</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_vacuum_threshold"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>vacuum_threshold</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_analyze_threshold"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>analyze_threshold</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_vacuum_cost_delay"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>vacuum_cost_delay</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_vacuum_cost_limit"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>vacuum_cost_limit</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_freeze_min_age"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>freeze_min_age</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_freeze_max_age"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>freeze_max_age</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_freeze_table_age"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>freeze_table_age</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_multixact_freeze_min_age"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>multixact_freeze_min_age</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_multixact_freeze_max_age"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>multixact_freeze_max_age</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_multixact_freeze_table_age"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>multixact_freeze_table_age</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"log_autovacuum_min_duration"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>log_min_duration</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_vacuum_scale_factor"</literal></expr>, <expr><name>RELOPT_TYPE_REAL</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>vacuum_scale_factor</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"autovacuum_analyze_scale_factor"</literal></expr>, <expr><name>RELOPT_TYPE_REAL</name></expr>,
        <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>, <argument><expr><name>autovacuum</name></expr></argument>)</argument_list></call> <operator>+</operator> <macro><name>offsetof</name><argument_list>(<argument>AutoVacOpts</argument>, <argument>analyze_scale_factor</argument>)</argument_list></macro></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"user_catalog_table"</literal></expr>, <expr><name>RELOPT_TYPE_BOOL</name></expr>,
        <macro><name>offsetof</name><argument_list>(<argument>StdRdOptions</argument>, <argument>user_catalog_table</argument>)</argument_list></macro>}</block></expr>,
        <expr><block>{<expr><literal type="string">"parallel_workers"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>,
        <macro><name>offsetof</name><argument_list>(<argument>StdRdOptions</argument>, <argument>parallel_workers</argument>)</argument_list></macro>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parseRelOptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if none set, we're done */</comment>
    <if_stmt><if>if <condition>(<expr><name>numoptions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rdopts</name> <operator>=</operator> <call><name>allocateReloptStruct</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fillRelOptions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>rdopts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StdRdOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>,
                   <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <name>rdopts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Option parser for views
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>view_reloptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ViewOptions</name> <modifier>*</modifier></type><name>vopts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>numoptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>relopt_parse_elt</name></type> <name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"security_barrier"</literal></expr>, <expr><name>RELOPT_TYPE_BOOL</name></expr>,
        <macro><name>offsetof</name><argument_list>(<argument>ViewOptions</argument>, <argument>security_barrier</argument>)</argument_list></macro>}</block></expr>,
        <expr><block>{<expr><literal type="string">"check_option"</literal></expr>, <expr><name>RELOPT_TYPE_STRING</name></expr>,
        <macro><name>offsetof</name><argument_list>(<argument>ViewOptions</argument>, <argument>check_option_offset</argument>)</argument_list></macro>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parseRelOptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>RELOPT_KIND_VIEW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if none set, we're done */</comment>
    <if_stmt><if>if <condition>(<expr><name>numoptions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>vopts</name> <operator>=</operator> <call><name>allocateReloptStruct</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ViewOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fillRelOptions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>vopts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ViewOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>,
                   <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <name>vopts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse options for heaps, views and toast tables.
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>heap_reloptions</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>relkind</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StdRdOptions</name> <modifier>*</modifier></type><name>rdopts</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>relkind</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>RELKIND_TOASTVALUE</name></expr>:</case>
            <expr_stmt><expr><name>rdopts</name> <operator>=</operator> <operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator>
                <call><name>default_reloptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>RELOPT_KIND_TOAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rdopts</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* adjust default-only parameters for TOAST relations */</comment>
                <expr_stmt><expr><name><name>rdopts</name><operator>-&gt;</operator><name>fillfactor</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>rdopts</name><operator>-&gt;</operator><name>autovacuum</name><operator>.</operator><name>analyze_threshold</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>rdopts</name><operator>-&gt;</operator><name>autovacuum</name><operator>.</operator><name>analyze_scale_factor</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <name>rdopts</name></expr>;</return>
        <case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
        <case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
            <return>return <expr><call><name>default_reloptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>RELOPT_KIND_HEAP</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
            <return>return <expr><call><name>default_reloptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>,
                                      <argument><expr><name>RELOPT_KIND_PARTITIONED</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <comment type="block">/* other relkinds are not supported */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
 * Parse options for indexes.
 *
 *    amoptions    index AM's option parser function
 *    reloptions    options as text[] datum
 *    validate    error flag
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>index_reloptions</name><parameter_list>(<parameter><decl><type><name>amoptions_function</name></type> <name>amoptions</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>amoptions</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Assume function is strict */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PointerIsValid</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>amoptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Option parser for attribute reloptions
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>attribute_reloptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttributeOpts</name> <modifier>*</modifier></type><name>aopts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>numoptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>relopt_parse_elt</name></type> <name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"n_distinct"</literal></expr>, <expr><name>RELOPT_TYPE_REAL</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>AttributeOpts</argument>, <argument>n_distinct</argument>)</argument_list></macro>}</block></expr>,
        <expr><block>{<expr><literal type="string">"n_distinct_inherited"</literal></expr>, <expr><name>RELOPT_TYPE_REAL</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>AttributeOpts</argument>, <argument>n_distinct_inherited</argument>)</argument_list></macro>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parseRelOptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>RELOPT_KIND_ATTRIBUTE</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if none set, we're done */</comment>
    <if_stmt><if>if <condition>(<expr><name>numoptions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>aopts</name> <operator>=</operator> <call><name>allocateReloptStruct</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttributeOpts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fillRelOptions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>aopts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttributeOpts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>,
                   <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <name>aopts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Option parser for tablespace reloptions
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>tablespace_reloptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TableSpaceOpts</name> <modifier>*</modifier></type><name>tsopts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>numoptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>relopt_parse_elt</name></type> <name><name>tab</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"random_page_cost"</literal></expr>, <expr><name>RELOPT_TYPE_REAL</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>TableSpaceOpts</argument>, <argument>random_page_cost</argument>)</argument_list></macro>}</block></expr>,
        <expr><block>{<expr><literal type="string">"seq_page_cost"</literal></expr>, <expr><name>RELOPT_TYPE_REAL</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>TableSpaceOpts</argument>, <argument>seq_page_cost</argument>)</argument_list></macro>}</block></expr>,
        <expr><block>{<expr><literal type="string">"effective_io_concurrency"</literal></expr>, <expr><name>RELOPT_TYPE_INT</name></expr>, <macro><name>offsetof</name><argument_list>(<argument>TableSpaceOpts</argument>, <argument>effective_io_concurrency</argument>)</argument_list></macro>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parseRelOptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>RELOPT_KIND_TABLESPACE</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if none set, we're done */</comment>
    <if_stmt><if>if <condition>(<expr><name>numoptions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>tsopts</name> <operator>=</operator> <call><name>allocateReloptStruct</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TableSpaceOpts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fillRelOptions</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>tsopts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TableSpaceOpts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>numoptions</name></expr></argument>,
                   <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <name>tsopts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Determine the required LOCKMODE from an option list.
 *
 * Called from AlterTableGetLockLevel(), see that function
 * for a longer explanation of how this works.
 */</comment>
<function><type><name>LOCKMODE</name></type>
<name>AlterTableGetRelOptionsLockLevel</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>defList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>LOCKMODE</name></type>    <name>lockmode</name> <init>= <expr><name>NoLock</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>defList</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>AccessExclusiveLock</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>need_initialization</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>initialize_reloptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>defList</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>,
                               <argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>,
                               <argument><expr><name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>namelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>lockmode</name> <operator>&lt;</operator> <name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lockmode</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>lockmode</name> <operator>=</operator> <name><name>relOpts</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>lockmode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <return>return <expr><name>lockmode</name></expr>;</return>
</block_content>}</block></function>
</unit>
