<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/rmgrdesc/gindesc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gindesc.c
 *      rmgr descriptor routines for access/transam/gin/ginxlog.c
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/access/rmgrdesc/gindesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/ginxlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/relfilenode.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>desc_recompress_leaf</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>ginxlogRecompressDataLeaf</name> <modifier>*</modifier></type><name>insertData</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>walbuf</name> <init>= <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>insertData</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ginxlogRecompressDataLeaf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d segments:"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>insertData</name><operator>-&gt;</operator><name>nactions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>insertData</name><operator>-&gt;</operator><name>nactions</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint8</name></type>        <name>a_segno</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>walbuf</name><operator>++</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8</name></type>        <name>a_action</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>walbuf</name><operator>++</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint16</name></type>        <name>nitems</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>newsegsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>a_action</name> <operator>==</operator> <name>GIN_SEGMENT_INSERT</name> <operator>||</operator>
            <name>a_action</name> <operator>==</operator> <name>GIN_SEGMENT_REPLACE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>newsegsize</name> <operator>=</operator> <call><name>SizeOfGinPostingList</name><argument_list>(<argument><expr><operator>(</operator><name>GinPostingList</name> <operator>*</operator><operator>)</operator> <name>walbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>walbuf</name> <operator>+=</operator> <call><name>SHORTALIGN</name><argument_list>(<argument><expr><name>newsegsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>a_action</name> <operator>==</operator> <name>GIN_SEGMENT_ADDITEMS</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nitems</name></expr></argument>, <argument><expr><name>walbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>walbuf</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name>walbuf</name> <operator>+=</operator> <name>nitems</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name>a_action</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GIN_SEGMENT_ADDITEMS</name></expr>:</case>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d (add %d items)"</literal></expr></argument>, <argument><expr><name>a_segno</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GIN_SEGMENT_DELETE</name></expr>:</case>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d (delete)"</literal></expr></argument>, <argument><expr><name>a_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GIN_SEGMENT_INSERT</name></expr>:</case>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d (insert)"</literal></expr></argument>, <argument><expr><name>a_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>GIN_SEGMENT_REPLACE</name></expr>:</case>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d (replace)"</literal></expr></argument>, <argument><expr><name>a_segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d unknown action %d ???"</literal></expr></argument>, <argument><expr><name>a_segno</name></expr></argument>, <argument><expr><name>a_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* cannot decode unrecognized actions further */</comment>
                <return>return;</return>
        </block_content>}</block></switch>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gin_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>info</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>XLOG_GIN_CREATE_INDEX</name></expr>:</case>
            <comment type="block">/* no further information */</comment>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_CREATE_PTREE</name></expr>:</case>
            <comment type="block">/* no further information */</comment>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_INSERT</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ginxlogInsert</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>ginxlogInsert</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"isdata: %c isleaf: %c"</literal></expr></argument>,
                                 <argument><expr><ternary><condition><expr><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GIN_INSERT_ISDATA</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>,
                                 <argument><expr><ternary><condition><expr><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GIN_INSERT_ISLEAF</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GIN_INSERT_ISLEAF</name><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>payload</name> <init>= <expr><name>rec</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ginxlogInsert</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>leftChildBlkno</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>BlockNumber</name></type> <name>rightChildBlkno</name></decl>;</decl_stmt>

                    <expr_stmt><expr><name>leftChildBlkno</name> <operator>=</operator> <call><name>BlockIdGetBlockNumber</name><argument_list>(<argument><expr><operator>(</operator><name>BlockId</name><operator>)</operator> <name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>payload</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BlockIdData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rightChildBlkno</name> <operator>=</operator> <call><name>BlockIdGetBlockNumber</name><argument_list>(<argument><expr><operator>(</operator><name>BlockId</name><operator>)</operator> <name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>payload</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BlockNumber</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" children: %u/%u"</literal></expr></argument>,
                                     <argument><expr><name>leftChildBlkno</name></expr></argument>, <argument><expr><name>rightChildBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>XLogRecHasBlockImage</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>XLogRecBlockImageApply</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (full page image)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (full page image, for WAL verification)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>payload</name> <init>= <expr><call><name>XLogRecGetBlockData</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GIN_INSERT_ISDATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" isdelete: %c"</literal></expr></argument>,
                                         <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ginxlogInsertEntry</name> <operator>*</operator><operator>)</operator> <name>payload</name><operator>)</operator><operator>-&gt;</operator><name>isDelete</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GIN_INSERT_ISLEAF</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>desc_recompress_leaf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>ginxlogRecompressDataLeaf</name> <operator>*</operator><operator>)</operator> <name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>ginxlogInsertDataInternal</name> <modifier>*</modifier></type><name>insertData</name> <init>=
                        <expr><operator>(</operator><name>ginxlogInsertDataInternal</name> <operator>*</operator><operator>)</operator> <name>payload</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" pitem: %u-%u/%u"</literal></expr></argument>,
                                         <argument><expr><call><name>PostingItemGetBlockNumber</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>insertData</name><operator>-&gt;</operator><name>newitem</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>ItemPointerGetBlockNumber</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>insertData</name><operator>-&gt;</operator><name>newitem</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>ItemPointerGetOffsetNumber</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>insertData</name><operator>-&gt;</operator><name>newitem</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_SPLIT</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ginxlogSplit</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>ginxlogSplit</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"isrootsplit: %c"</literal></expr></argument>,
                                 <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ginxlogSplit</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>GIN_SPLIT_ROOT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" isdata: %c isleaf: %c"</literal></expr></argument>,
                                 <argument><expr><ternary><condition><expr><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GIN_INSERT_ISDATA</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>,
                                 <argument><expr><ternary><condition><expr><operator>(</operator><name><name>xlrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>GIN_INSERT_ISLEAF</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_VACUUM_PAGE</name></expr>:</case>
            <comment type="block">/* no further information */</comment>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_VACUUM_DATA_LEAF_PAGE</name></expr>:</case>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>XLogRecHasBlockImage</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>XLogRecBlockImageApply</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (full page image)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (full page image, for WAL verification)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ginxlogVacuumDataLeafPage</name> <modifier>*</modifier></type><name>xlrec</name> <init>=
                    <expr><operator>(</operator><name>ginxlogVacuumDataLeafPage</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetBlockData</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>desc_recompress_leaf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xlrec</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_DELETE_PAGE</name></expr>:</case>
            <comment type="block">/* no further information */</comment>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_UPDATE_META_PAGE</name></expr>:</case>
            <comment type="block">/* no further information */</comment>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_INSERT_LISTPAGE</name></expr>:</case>
            <comment type="block">/* no further information */</comment>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_DELETE_LISTPAGE</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ndeleted: %d"</literal></expr></argument>,
                             <argument><expr><operator>(</operator><operator>(</operator><name>ginxlogDeleteListPages</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>ndeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>gin_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>XLOG_GIN_CREATE_INDEX</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CREATE_INDEX"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_CREATE_PTREE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CREATE_PTREE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_INSERT</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"INSERT"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_SPLIT</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"SPLIT"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_VACUUM_PAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"VACUUM_PAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_VACUUM_DATA_LEAF_PAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"VACUUM_DATA_LEAF_PAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_DELETE_PAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"DELETE_PAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_UPDATE_META_PAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"UPDATE_META_PAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_INSERT_LISTPAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"INSERT_LISTPAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_GIN_DELETE_LISTPAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"DELETE_LISTPAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
