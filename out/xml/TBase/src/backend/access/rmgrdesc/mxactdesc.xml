<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/rmgrdesc/mxactdesc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * mxactdesc.c
 *      rmgr descriptor routines for access/transam/multixact.c
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/access/rmgrdesc/mxactdesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/multixact.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>out_member</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>MultiXactMember</name> <modifier>*</modifier></type><name>member</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name><name>member</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>member</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>MultiXactStatusForKeyShare</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(keysh) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MultiXactStatusForShare</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(sh) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MultiXactStatusForNoKeyUpdate</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(fornokeyupd) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MultiXactStatusForUpdate</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(forupd) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MultiXactStatusNoKeyUpdate</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(nokeyupd) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>MultiXactStatusUpdate</name></expr>:</case>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(upd) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(unk) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>multixact_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_MULTIXACT_ZERO_OFF_PAGE</name> <operator>||</operator>
        <name>info</name> <operator>==</operator> <name>XLOG_MULTIXACT_ZERO_MEM_PAGE</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>pageno</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pageno</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_MULTIXACT_CREATE_ID</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>xl_multixact_create</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_multixact_create</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u offset %u nmembers %d: "</literal></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>mid</name></name></expr></argument>,
                         <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>moff</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nmembers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>xlrec</name><operator>-&gt;</operator><name>nmembers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>out_member</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xlrec</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_MULTIXACT_TRUNCATE_ID</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>xl_multixact_truncate</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_multixact_truncate</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"offsets [%u, %u), members [%u, %u)"</literal></expr></argument>,
                         <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>startTruncOff</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>endTruncOff</name></name></expr></argument>,
                         <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>startTruncMemb</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>endTruncMemb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>multixact_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>XLOG_MULTIXACT_ZERO_OFF_PAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ZERO_OFF_PAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_MULTIXACT_ZERO_MEM_PAGE</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ZERO_MEM_PAGE"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_MULTIXACT_CREATE_ID</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CREATE_ID"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_MULTIXACT_TRUNCATE_ID</name></expr>:</case>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"TRUNCATE_ID"</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
