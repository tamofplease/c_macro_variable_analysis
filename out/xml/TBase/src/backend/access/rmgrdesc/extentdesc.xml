<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/rmgrdesc/extentdesc.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * heapdesc.c
 *      rmgr descriptor routines for access/heap/heapam.c
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/access/rmgrdesc/heapdesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/extentmapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/extent_xlog.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_seteob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_extendeob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_seteme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_extendeme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_initeme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_setesa</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_cleaneme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_truncate</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_trunceob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_cleaneob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_truncema</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_cleanema</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>extent_xlog_frag_ele</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type>        <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EmaPageType</name></type>    <name>page_type</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type>    (<modifier>*</modifier><name>redo_fn</name>)<parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>    (<modifier>*</modifier><name>desc_fn</name>)<parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type><name>extent_xlog_frag_ele</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>extent_xlog_frag_ele</name></type> <name><name>e_redomgr</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>EmaPageType_EOB</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <comment type="block">/*0 is not used */</comment>
    <expr><block>{<expr><name>SizeOfSetEOB</name></expr>, <expr><name>EmaPageType_EOB</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_seteob</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfExtendEOB</name></expr>, <expr><name>EmaPageType_EOB</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_extendeob</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfSetEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_seteme</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfExtendEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_extendeme</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfInitEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_initeme</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfCleanEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_cleaneme</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfSetESA</name></expr>, <expr><name>EmaPageType_ESA</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_setesa</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfTruncateExtentSeg</name></expr>, <expr><name>EmaPageType_EOB</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_truncate</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfTruncEOB</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_trunceob</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfCleanEOB</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_cleaneob</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfTruncEMA</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_truncema</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfCleanEMA</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>extent_desc_cleanema</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>extent_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>block_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>main_data_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>main_xlog_cursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>main_xlog_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>main_xlog_cursor</name> <operator>=</operator> <name><name>record</name><operator>-&gt;</operator><name>main_data</name></name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>main_xlog_cursor</name> <operator>-</operator> <name><name>record</name><operator>-&gt;</operator><name>main_data</name></name> <operator>&lt;</operator> <name><name>record</name><operator>-&gt;</operator><name>main_data_len</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int8</name></type>     <name>xlogtag</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xlogtag</name></expr></argument>, <argument><expr><name>main_xlog_cursor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//xlog_cursor += sizeof(int8);</comment>

            <expr_stmt><expr><name>main_xlog_buf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>main_xlog_buf</name></expr></argument>, <argument><expr><name>main_xlog_cursor</name></expr></argument>, <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>main_xlog_cursor</name> <operator>+=</operator> <name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>(<expr><name>main_xlog_cursor</name> <operator>-</operator> <name><name>record</name><operator>-&gt;</operator><name>main_data</name></name> <operator>&gt;</operator> <name><name>record</name><operator>-&gt;</operator><name>main_data_len</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\nextent xlog of main data is invalid. %d bytes is expected, but only %d bytes remained."</literal></expr></argument>,
                            <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>main_data_len</name></name> <operator>-</operator> <operator>(</operator><name>main_xlog_cursor</name> <operator>-</operator> <name><name>record</name><operator>-&gt;</operator><name>main_data</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>(<expr><name>xlogtag</name> <operator>&gt;</operator> <name>FragTag_EXTENT_XLOG_CLEANEMA</name> <operator>||</operator> <name>xlogtag</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"extent xlog tag of main data is invalid:%d"</literal></expr></argument>, <argument><expr><name>xlogtag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            
            <comment type="block">/* desc extent xlog record */</comment>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><call><name>desc_fn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>main_xlog_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>main_xlog_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>main_xlog_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    
    <for>for<control>(<init><expr><name>block_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>block_idx</name> <operator>&lt;=</operator> <name><name>record</name><operator>-&gt;</operator><name>max_block_id</name></name></expr>;</condition> <incr><expr><name>block_idx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <comment type="block">/* read record */</comment>
        <decl_stmt><decl><type><name>DecodedBkpBlock</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xlog_cursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xlog_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>blk</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>blk</name><operator>-&gt;</operator><name>has_data</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        if(blk-&gt;forknum != EXTENT_FORKNUM)
        {
            elog(ERROR, "forknum %d is not extent fork.", blk-&gt;forknum);
        }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n\tblk %u"</literal></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xlog_cursor</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

        <while>while<condition>(<expr><name>xlog_cursor</name> <operator>-</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name> <operator>&lt;</operator> <name><name>blk</name><operator>-&gt;</operator><name>data_len</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int8</name></type>     <name>xlogtag</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type>    <name>pgtype_invalid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xlogtag</name></expr></argument>, <argument><expr><name>xlog_cursor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//xlog_cursor += sizeof(int8);</comment>

            <expr_stmt><expr><name>xlog_buf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xlog_buf</name></expr></argument>, <argument><expr><name>xlog_cursor</name></expr></argument>, <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xlog_cursor</name> <operator>+=</operator> <name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>(<expr><name>xlog_cursor</name> <operator>-</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name> <operator>&gt;</operator> <name><name>blk</name><operator>-&gt;</operator><name>data_len</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\nextent xlog is invalid. %d bytes is expected, but only %d bytes remained."</literal></expr></argument>,
                            <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator><operator>(</operator><name><name>blk</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <operator>(</operator><name>xlog_cursor</name> <operator>-</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/*
             * validate page type
             */</comment>
            
            <switch>switch<condition>(<expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>page_type</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>EmaPageType_EOB</name></expr>:</case>
                    <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&gt;=</operator> <name>ESAPAGE_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>pgtype_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>EmaPageType_ESA</name></expr>:</case>
                    <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&lt;</operator> <name>ESAPAGE_OFFSET</name> <operator>||</operator> <name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&gt;=</operator> <name>EMAPAGE_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>pgtype_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>EmaPageType_EMA</name></expr>:</case>
                    <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&gt;=</operator> <name>EMA_FORK_BLOCKS</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>pgtype_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>EmaPageType_NONE</name></expr>:</case>
                    <break>break;</break>
            </block_content>}</block></switch>
            <if_stmt><if>if<condition>(<expr><name>pgtype_invalid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n\textent xlog is applied to a wrong extent page. "</literal>
                            <literal type="string">"extent xlogtype:%d, block number:%d"</literal></expr></argument>,
                            <argument><expr><name>xlogtag</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* desc extent xlog record */</comment>
            <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><call><name>desc_fn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>xlog_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xlog_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xlog_buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_seteob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_seteob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_seteob</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [seteob]slot %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_extendeob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_extendeob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_extendeob</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [extenteob]slot %u, n_bits %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>n_eobs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXTEND_EOB_FLAGS_SETFREE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [setfree]from %u, to %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_start</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_seteme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>xl_extent_seteme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_seteme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [seteme]slot %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_SHARDID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",sid %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>shardid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_FREESPACE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",freespace %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>max_freespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_HWM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",hwm %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>hwm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_OCCUPIED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",is_occupied %d"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>is_occupied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_SCANPREV</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",scanprev %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>scan_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_SCANNEXT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",scannext %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>scan_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_ALLOCPREV</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",allocprev %u"</literal></expr></argument>, <argument><expr><call><name>EMEGetAllocPrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_ALLOCNEXT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",allocnext %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>alloc_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>==</operator> <name>EMA_SETFLAG_INIT</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",initeme sid %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>shardid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>==</operator> <name>EMA_SETFLAG_CLEAN</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",clean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_EXTENDHEAP</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",extend heap:rnode %d/%d/%d eid=%d"</literal></expr></argument>,
            <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
            <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>extentid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_extendeme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>    
    <decl_stmt><decl><type><name>xl_extent_extendeme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_extendeme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [extendeme]n_emes: %d, flags: %x"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>n_emes</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXTEND_EME_FLAGS_SETFREE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [cleanpointer]from %u, to %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_start</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_initeme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_initeme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_initeme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [initeme]slot %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_cleaneme</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_cleaneme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_cleaneme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [cleaneme]slot %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_setesa</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_setesa</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_setesa</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [setesa]slot %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>ESA_SETFLAG_SCANHEAD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",scanhead %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>scan_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>ESA_SETFLAG_SCANTAIL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",scantail %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>scan_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>ESA_SETFLAG_ALLOCHEAD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",allochead %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>alloc_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>ESA_SETFLAG_ALLOCTAIL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",alloctail %u"</literal></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>alloc_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_truncate</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_truncate</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_truncate</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [truncate extent file]%d/%d/%d"</literal></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_trunceob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_trunceob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_trunceob</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [truncate eob page]%d/%d/%d, pageno:%d, offset:%d"</literal></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>,
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_cleaneob</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_cleaneob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_cleaneob</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [clean eob page]%d/%d/%d, pageno:%d"</literal></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_truncema</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_truncema</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_truncema</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [truncate ema page]%d/%d/%d, pageno:%d, offset:%d"</literal></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>,
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_desc_cleanema</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_cleanema</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_cleanema</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" [clean ema page]%d/%d/%d, pageno:%d"</literal></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, 
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>,
                        <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>extent_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <name>XLOG_EXTENT_OPMASK</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>XLOG_EXTENT_NEW_EXTENT</name></expr>:</case>
            <return>return <expr><literal type="string">"New Extent"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_UPDATE_EME</name></expr>:</case>
            <return>return <expr><literal type="string">"Update EME"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_APPEND_EXTENT</name></expr>:</case>
            <return>return <expr><literal type="string">"Append Extent"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_ATTACH_EXTENT</name></expr>:</case>    
            <return>return <expr><literal type="string">"Attach Extent"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_DETACH_EXTENT</name></expr>:</case>
            <return>return <expr><literal type="string">"Detach Extent"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_MAKE_FULL</name></expr>:</case>
            <return>return <expr><literal type="string">"Make Extent Full"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_MAKE_AVAIL</name></expr>:</case>
            <return>return <expr><literal type="string">"Make Extent Available"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_FREE_DISK</name></expr>:</case>
            <return>return <expr><literal type="string">"Free Extent Data"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_TRUNCATE</name></expr>:</case>
            <return>return <expr><literal type="string">"Truncate Extent File Tile"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_COMMON</name></expr>:</case>
            <return>return <expr><literal type="string">"Common Extent Ops"</literal></expr>;</return>
        <case>case <expr><name>XLOG_EXTENT_EXTEND</name></expr>:</case>
            <return>return <expr><literal type="string">"Extend Extents"</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="string">"Extent ERROR"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>


</unit>
