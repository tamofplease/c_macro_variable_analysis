<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/hash/hashfunc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * hashfunc.c
 *      Support functions for hash access method.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/access/hash/hashfunc.c
 *
 * NOTES
 *      These functions are stored in pg_amproc.  For each operator class
 *      defined for hash indexes, they compute the hash value of the argument.
 *
 *      Additional hash functions appear in /utils/adt/ files for various
 *      specialized datatypes.
 *
 *      It is expected that every bit of a hash function's 32-bit result is
 *      as random as every other; failure to ensure this is likely to lead
 *      to poor performance of hash joins, for example.  In most cases a hash
 *      function should use hash_any() or its variant hash_uint32().
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PGXC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/nabstime.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Datatype-specific hash functions.
 *
 * These support both hash indexes and hash joins.
 *
 * NOTE: some of these are also used by catcache operations, without
 * any direct connection to hash indexes.  Also, the common hash_any
 * routine is also used by dynahash tables.
 */</comment>

<comment type="block">/* Note: this is used for both "char" and boolean datatypes */</comment>
<function><type><name>Datum</name></type>
<name>hashchar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>PG_GETARG_CHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashcharextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>hash_uint32_extended</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>PG_GETARG_CHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashint2</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashint2extended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>hash_uint32_extended</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashint4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashint4extended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>hash_uint32_extended</name><argument_list>(<argument><expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashint8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * The idea here is to produce a hash value compatible with the values
     * produced by hashint4 and hashint2 for logically equal inputs; this is
     * necessary to support cross-type hash joins across these input types.
     * Since all three types are signed, we can xor the high half of the int8
     * value if the sign is positive, or the complement of the high half when
     * the sign is negative.
     */</comment>
    <decl_stmt><decl><type><name>int64</name></type>        <name>val</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>lohalf</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>val</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>hihalf</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>lohalf</name> <operator>^=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>hihalf</name></expr> </then><else>: <expr><operator>~</operator><name>hihalf</name></expr></else></ternary></expr>;</expr_stmt>

    <return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><name>lohalf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashint8extended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Same approach as hashint8 */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>lohalf</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>val</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hihalf</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>lohalf</name> <operator>^=</operator> <ternary><condition><expr><operator>(</operator><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>hihalf</name></expr> </then><else>: <expr><operator>~</operator><name>hihalf</name></expr></else></ternary></expr>;</expr_stmt>

	<return>return <expr><call><name>hash_uint32_extended</name><argument_list>(<argument><expr><name>lohalf</name></expr></argument>, <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashoid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashoidextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>hash_uint32_extended</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashenum</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashenumextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>hash_uint32_extended</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashfloat4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>float4</name></type>        <name>key</name> <init>= <expr><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float8</name></type>        <name>key8</name></decl>;</decl_stmt>

    <comment type="block">/*
     * On IEEE-float machines, minus zero and zero have different bit patterns
     * but should compare as equal.  We must ensure that they have the same
     * hash value, which is most reliably done this way:
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <operator>(</operator><name>float4</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * To support cross-type hashing of float8 and float4, we want to return
     * the same hash value hashfloat8 would produce for an equal float8 value.
     * So, widen the value to float8 and hash that.  (We must do this rather
     * than have hashfloat8 try to narrow its value to float4; that could fail
     * on overflow.)
     */</comment>
    <expr_stmt><expr><name>key8</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

    <return>return <expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key8</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashfloat4extended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float4</name></type>		<name>key</name> <init>= <expr><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>seed</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type>		<name>key8</name></decl>;</decl_stmt>

	<comment type="block">/* Same approach as hashfloat4 */</comment>
	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <operator>(</operator><name>float4</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_UINT64</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>key8</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

	<return>return <expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key8</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashfloat8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>float8</name></type>        <name>key</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * On IEEE-float machines, minus zero and zero have different bit patterns
     * but should compare as equal.  We must ensure that they have the same
     * hash value, which is most reliably done this way:
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <operator>(</operator><name>float8</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashfloat8extended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type>		<name>key</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>seed</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Same approach as hashfloat8 */</comment>
	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <operator>(</operator><name>float8</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_UINT64</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashoidvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>oidvector</name>  <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dim1</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashoidvectorextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>oidvector</name>  <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>values</name></name></expr></argument>,
							 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dim1</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashname</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashnameextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashtext</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>text</name>       <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Note: this is currently identical in behavior to hashvarlena, but keep
     * it as a separate function in case we someday want to do something
     * different in non-C locales.  (See also hashbpchar, if so.)
     */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Avoid leaking memory for toasted inputs */</comment>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashtextextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Same approach as hashtext */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hashvarlena() can be used for any varlena datatype in which there are
 * no non-significant bits, ie, distinct bitpatterns never compare as equal.
 */</comment>
<function><type><name>Datum</name></type>
<name>hashvarlena</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_VARLENA_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Avoid leaking memory for toasted inputs */</comment>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>hashcustomtype</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type> <name>type</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>value</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>			<name>typsend</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>		<name>typisvarlena</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>outputbytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Convert the column value to binary
     */</comment>
    <expr_stmt><expr><call><name>getTypeBinaryOutputInfo</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typsend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typisvarlena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>outputbytes</name> <operator>=</operator> <call><name>OidSendFunctionCall</name><argument_list>(<argument><expr><name>typsend</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Compute hash
     */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>outputbytes</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>outputbytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>outputbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>Datum</name></type>
<name>hashvarlenaextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_VARLENA_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This hash function was written by Bob Jenkins
 * (bob_jenkins@burtleburtle.net), and superficially adapted
 * for PostgreSQL by Neil Conway. For more information on this
 * hash function, see http://burtleburtle.net/bob/hash/doobs.html,
 * or Bob's article in Dr. Dobb's Journal, Sept. 1997.
 *
 * In the current code, we have adopted Bob's 2006 update of his hash
 * function to fetch the data a word at a time when it is suitably aligned.
 * This makes for a useful speedup, at the cost of having to maintain
 * four code paths (aligned vs unaligned, and little-endian vs big-endian).
 * It also uses two separate mixing functions mix() and final(), instead
 * of a slower multi-purpose function.
 */</comment>

<comment type="block">/* Get a bit mask of the bits set in non-uint32 aligned addresses */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_ALIGN_MASK</name></cpp:macro> <cpp:value>(sizeof(uint32) - 1)</cpp:value></cpp:define>

<comment type="block">/* Rotate a uint32 value left by k bits - note multiple evaluation! */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rot</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&lt;&lt;(k)) | ((x)&gt;&gt;(32-(k))))</cpp:value></cpp:define>

<comment type="block">/*----------
 * mix -- mix 3 32-bit values reversibly.
 *
 * This is reversible, so any information in (a,b,c) before mix() is
 * still in (a,b,c) after mix().
 *
 * If four pairs of (a,b,c) inputs are run through mix(), or through
 * mix() in reverse, there are at least 32 bits of the output that
 * are sometimes the same for one pair and different for another pair.
 * This was tested for:
 * * pairs that differed by one bit, by two bits, in any combination
 *     of top bits of (a,b,c), or in any combination of bottom bits of
 *     (a,b,c).
 * * "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
 *     the output delta to a Gray code (a^(a&gt;&gt;1)) so a string of 1's (as
 *     is commonly produced by subtraction) look like a single 1-bit
 *     difference.
 * * the base values were pseudorandom, all zero but one bit set, or
 *     all zero plus a counter that starts at zero.
 *
 * This does not achieve avalanche.  There are input bits of (a,b,c)
 * that fail to affect some output bits of (a,b,c), especially of a.  The
 * most thoroughly mixed value is c, but it doesn't really even achieve
 * avalanche in c.
 *
 * This allows some parallelism.  Read-after-writes are good at doubling
 * the number of bits affected, so the goal of mixing pulls in the opposite
 * direction from the goal of parallelism.  I did what I could.  Rotates
 * seem to cost as much as shifts on every machine I could lay my hands on,
 * and rotates are much kinder to the top and bottom bits, so I used rotates.
 *----------
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{ \
  a -= c;  a ^= rot(c, 4);    c += b; \
  b -= a;  b ^= rot(a, 6);    a += c; \
  c -= b;  c ^= rot(b, 8);    b += a; \
  a -= c;  a ^= rot(c,16);    c += b; \
  b -= a;  b ^= rot(a,19);    a += c; \
  c -= b;  c ^= rot(b, 4);    b += a; \
}</cpp:value></cpp:define>

<comment type="block">/*----------
 * final -- final mixing of 3 32-bit values (a,b,c) into c
 *
 * Pairs of (a,b,c) values differing in only a few bits will usually
 * produce values of c that look totally different.  This was tested for
 * * pairs that differed by one bit, by two bits, in any combination
 *     of top bits of (a,b,c), or in any combination of bottom bits of
 *     (a,b,c).
 * * "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
 *     the output delta to a Gray code (a^(a&gt;&gt;1)) so a string of 1's (as
 *     is commonly produced by subtraction) look like a single 1-bit
 *     difference.
 * * the base values were pseudorandom, all zero but one bit set, or
 *     all zero plus a counter that starts at zero.
 *
 * The use of separate functions for mix() and final() allow for a
 * substantial performance increase since final() does not need to
 * do well in reverse, but is does need to affect all output bits.
 * mix(), on the other hand, does not need to affect all output
 * bits (affecting 32 bits is enough).  The original hash function had
 * a single mixing operation that had to satisfy both sets of requirements
 * and was slower as a result.
 *----------
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>final</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{ \
  c ^= b; c -= rot(b,14); \
  a ^= c; a -= rot(c,11); \
  b ^= a; b -= rot(a,25); \
  c ^= b; c -= rot(b,16); \
  a ^= c; a -= rot(c, 4); \
  b ^= a; b -= rot(a,14); \
  c ^= b; c -= rot(b,24); \
}</cpp:value></cpp:define>

<comment type="block">/*
 * hash_any() -- hash a variable-length key into a 32-bit value
 *        k        : the key (the unaligned variable-length array of bytes)
 *        len        : the length of the key, counting by bytes
 *
 * Returns a uint32 value.  Every bit of the key affects every bit of
 * the return value.  Every 1-bit and 2-bit delta achieves avalanche.
 * About 6*len+35 instructions. The best hash table sizes are powers
 * of 2.  There is no need to do mod a prime (mod is sooo slow!).
 * If you need less than 32 bits, use a bitmask.
 *
 * This procedure must never throw elog(ERROR); the ResourceOwner code
 * relies on this not to fail.
 *
 * Note: we could easily change this function to return a 64-bit hash value
 * by using the final values of both b and c.  b is perhaps a little less
 * well mixed than c, however.
 */</comment>
<function><type><name>Datum</name></type>
<name>hash_any</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>,
                <decl><type ref="prev"/><name>b</name></decl>,
                <decl><type ref="prev"/><name>c</name></decl>,
                <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

    <comment type="block">/* Set up the internal state */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

    <comment type="block">/* If the source pointer is word-aligned, we use word-wide fetches */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>k</name> <operator>&amp;</operator> <name>UINT32_ALIGN_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Code path for aligned source data */</comment>
        <decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>k</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* handle most of the key */</comment>
        <while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ka</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* handle the last 11 bytes */</comment>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ka</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
        <switch>switch <condition>(<expr><name>len</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="number">11</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">10</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">9</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* the lowest byte of c is reserved for the length */</comment>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">8</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">7</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">6</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* case 0: nothing left to add */</comment>
        </block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                            <comment type="block">/* !WORDS_BIGENDIAN */</comment>
        <switch>switch <condition>(<expr><name>len</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="number">11</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">10</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">9</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* the lowest byte of c is reserved for the length */</comment>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">8</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">7</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">6</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* fall through */</comment>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="block">/* case 0: nothing left to add */</comment>
        </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* WORDS_BIGENDIAN */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Code path for non-aligned source data */</comment>

        <comment type="block">/* handle most of the key */</comment>
        <while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
        <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
            <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                            <comment type="block">/* !WORDS_BIGENDIAN */</comment>
            <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* WORDS_BIGENDIAN */</comment>
            <expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* handle the last 11 bytes */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
        <switch>switch <condition>(<expr><name>len</name></expr>)</condition>            <comment type="block">/* all the case statements fall through */</comment>
        <block>{<block_content>
            <case>case <expr><literal type="number">11</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">10</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">9</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* the lowest byte of c is reserved for the length */</comment>
            <case>case <expr><literal type="number">8</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">7</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">6</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* case 0: nothing left to add */</comment>
        </block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                            <comment type="block">/* !WORDS_BIGENDIAN */</comment>
        <switch>switch <condition>(<expr><name>len</name></expr>)</condition>            <comment type="block">/* all the case statements fall through */</comment>
        <block>{<block_content>
            <case>case <expr><literal type="number">11</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">10</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">9</literal></expr>:</case>
                <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <comment type="block">/* the lowest byte of c is reserved for the length */</comment>
            <case>case <expr><literal type="number">8</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">7</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">6</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="block">/* case 0: nothing left to add */</comment>
        </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* WORDS_BIGENDIAN */</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* report the result */</comment>
    <return>return <expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hash_any_extended() -- hash into a 64-bit value, using an optional seed
 *		k		: the key (the unaligned variable-length array of bytes)
 *		len		: the length of the key, counting by bytes
 *		seed	: a 64-bit seed (0 means no seed)
 *
 * Returns a uint64 value.  Otherwise similar to hash_any.
 */</comment>
<function><type><name>Datum</name></type>
<name>hash_any_extended</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>keylen</name></decl></parameter>,
				  <parameter><decl><type><name>uint64</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<comment type="block">/* Set up the internal state */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

	<comment type="block">/* If the seed is non-zero, use it to perturb the internal state. */</comment>
	<if_stmt><if>if <condition>(<expr><name>seed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * In essence, the seed is treated as part of the data being hashed,
		 * but for simplicity, we pretend that it's padded with four bytes of
		 * zeroes so that the seed constitutes a 12-byte chunk.
		 */</comment>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>seed</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If the source pointer is word-aligned, we use word-wide fetches */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>k</name> <operator>&amp;</operator> <name>UINT32_ALIGN_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Code path for aligned source data */</comment>
		<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ka</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ka</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Code path for non-aligned source data */</comment>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>			<comment type="block">/* all the case statements fall through */</comment>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>			<comment type="block">/* all the case statements fall through */</comment>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* report the result */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_UINT64</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * hash_uint32() -- hash a 32-bit value to a 32-bit value
 *
 * This has the same result as
 *        hash_any(&amp;k, sizeof(uint32))
 * but is faster and doesn't force the caller to store k into memory.
 */</comment>
<function><type><name>Datum</name></type>
<name>hash_uint32</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>,
                <decl><type ref="prev"/><name>b</name></decl>,
                <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* report the result */</comment>
    <return>return <expr><call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hash_uint32_extended() -- hash a 32-bit value to a 64-bit value, with a seed
 *
 * Like hash_uint32, this is a convenience function.
 */</comment>
<function><type><name>Datum</name></type>
<name>hash_uint32_extended</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>,
               <decl><type ref="prev"/><name>b</name></decl>,
               <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

   <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

   <if_stmt><if>if <condition>(<expr><name>seed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
   <block>{<block_content>
       <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
       <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>seed</name></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></if></if_stmt>

   <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>

   <expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <comment type="block">/* report the result */</comment>
   <expr_stmt><expr><call><name>PG_RETURN_UINT64</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PGXC</name></cpp:ifdef>
<comment type="block">/*
 * compute_hash()
 * Generic hash function for all datatypes
 */</comment>
<function><type><name>Datum</name></type>
<name>compute_hash</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>locator</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int16</name></type>    <name>tmp16</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>    <name>tmp32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type>    <name>tmp64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>        <name>tmpoid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name>tmpch</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>INT8OID</name></expr>:</case>
            <comment type="block">/* This gives added advantage that
             *    a = 8446744073709551359
             * and    a = 8446744073709551359::int8 both work*/</comment>
            <expr_stmt><expr><name>tmp64</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashint8</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmp64</name></expr>;</return>
        <case>case <expr><name>INT2OID</name></expr>:</case>
            <expr_stmt><expr><name>tmp16</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>            
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashint2</name></expr></argument>, <argument><expr><name>tmp16</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmp16</name></expr>;</return>
        <case>case <expr><name>OIDOID</name></expr>:</case>
            <expr_stmt><expr><name>tmpoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>            
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashoid</name></expr></argument>, <argument><expr><name>tmpoid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmpoid</name></expr>;</return>
        <case>case <expr><name>INT4OID</name></expr>:</case>
            <expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>            
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashint4</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmp32</name></expr>;</return>
        <case>case <expr><name>BOOLOID</name></expr>:</case>
            <expr_stmt><expr><name>tmpch</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>            
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashchar</name></expr></argument>, <argument><expr><name>tmpch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmpch</name></expr>;</return>

        <case>case <expr><name>CHAROID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashchar</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>NAMEOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>VARCHAROID</name></expr>:</case>
        <case>case <expr><name>TEXTOID</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
        <case>case <expr><name>VARCHAR2OID</name></expr>:</case>
        <case>case <expr><name>NVARCHAR2OID</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashtext</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>OIDVECTOROID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashoidvector</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>FLOAT4OID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashfloat4</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>FLOAT8OID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashfloat8</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>ABSTIMEOID</name></expr>:</case>
            <expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>DatumGetAbsoluteTime</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>            
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashint4</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmp32</name></expr>;</return>
        <case>case <expr><name>RELTIMEOID</name></expr>:</case>
            <expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>DatumGetRelativeTime</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>            
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashint4</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmp32</name></expr>;</return>
        <case>case <expr><name>CASHOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashint8</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>BPCHAROID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashbpchar</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>BYTEAOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashvarlena</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>DATEOID</name></expr>:</case>
            <expr_stmt><expr><name>tmp32</name> <operator>=</operator> <call><name>DatumGetDateADT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MIGRATE_</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name> <operator>||</operator> <name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>            
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hashint4</name></expr></argument>, <argument><expr><name>tmp32</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>tmp32</name></expr>;</return>
        <case>case <expr><name>TIMEOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>time_hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamp_hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamp_hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>INTERVALOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>interval_hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIMETZOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timetz_hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>NUMERICOID</name></expr>:</case>
            <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>hash_numeric</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
		<case>case <expr><name>JSONBOID</name></expr>:</case>
		    <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>jsonb_hash</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_SHARD</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hashcustomtype</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unhandled datatype:%d for modulo or hash distribution in compute_hash"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <comment type="block">/* Control should not come here. */</comment>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unhandled datatype for modulo or hash distribution\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Keep compiler silent */</comment>
    <return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * get_compute_hash_function
 * Get hash function name depending on the hash type.
 * For some cases of hash or modulo distribution, a function might
 * be required or not.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_compute_hash_function</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>locator</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>INT8OID</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="string">"hashint8"</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        <case>case <expr><name>INT2OID</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="string">"hashint2"</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        <case>case <expr><name>OIDOID</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="string">"hashoid"</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        <case>case <expr><name>DATEOID</name></expr>:</case>
        <case>case <expr><name>INT4OID</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="string">"hashint4"</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        <case>case <expr><name>BOOLOID</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="string">"hashchar"</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        <case>case <expr><name>CHAROID</name></expr>:</case>
            <return>return <expr><literal type="string">"hashchar"</literal></expr>;</return>
        <case>case <expr><name>NAMEOID</name></expr>:</case>
            <return>return <expr><literal type="string">"hashname"</literal></expr>;</return>
        <case>case <expr><name>VARCHAROID</name></expr>:</case>
        <case>case <expr><name>TEXTOID</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
        <case>case <expr><name>VARCHAR2OID</name></expr>:</case>
        <case>case <expr><name>NVARCHAR2OID</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return <expr><literal type="string">"hashtext"</literal></expr>;</return>
        <case>case <expr><name>OIDVECTOROID</name></expr>:</case>
            <return>return <expr><literal type="string">"hashoidvector"</literal></expr>;</return>
        <case>case <expr><name>FLOAT4OID</name></expr>:</case>
            <return>return <expr><literal type="string">"hashfloat4"</literal></expr>;</return>
        <case>case <expr><name>FLOAT8OID</name></expr>:</case>
            <return>return <expr><literal type="string">"hashfloat8"</literal></expr>;</return>
        <case>case <expr><name>RELTIMEOID</name></expr>:</case>
        <case>case <expr><name>ABSTIMEOID</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>locator</name> <operator>==</operator> <name>LOCATOR_TYPE_HASH</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="string">"hashint4"</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        <case>case <expr><name>CASHOID</name></expr>:</case>
                <return>return <expr><literal type="string">"hashint8"</literal></expr>;</return>
        <case>case <expr><name>BPCHAROID</name></expr>:</case>
            <return>return <expr><literal type="string">"hashbpchar"</literal></expr>;</return>
        <case>case <expr><name>BYTEAOID</name></expr>:</case>
            <return>return <expr><literal type="string">"hashvarlena"</literal></expr>;</return>
        <case>case <expr><name>TIMEOID</name></expr>:</case>
            <return>return <expr><literal type="string">"time_hash"</literal></expr>;</return>
        <case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
        <case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
            <return>return <expr><literal type="string">"timestamp_hash"</literal></expr>;</return>
        <case>case <expr><name>INTERVALOID</name></expr>:</case>
            <return>return <expr><literal type="string">"interval_hash"</literal></expr>;</return>
        <case>case <expr><name>TIMETZOID</name></expr>:</case>
            <return>return <expr><literal type="string">"timetz_hash"</literal></expr>;</return>
        <case>case <expr><name>NUMERICOID</name></expr>:</case>
            <return>return <expr><literal type="string">"hash_numeric"</literal></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
		<case>case <expr><name>JSONBOID</name></expr>:</case>
		    <return>return <expr><literal type="string">"jsonb_hash"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unhandled datatype:%d for modulo or hash distribution in get_compute_hash_function"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="block">/* Keep compiler quiet */</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
