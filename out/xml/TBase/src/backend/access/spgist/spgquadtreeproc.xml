<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/spgist/spgquadtreeproc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * spgquadtreeproc.c
 *      implementation of quad tree over points for SP-GiST
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *            src/backend/access/spgist/spgquadtreeproc.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/spgist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/geo_decls.h"</cpp:file></cpp:include>


<function><type><name>Datum</name></type>
<name>spg_quad_config</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* spgConfigIn *cfgin = (spgConfigIn *) PG_GETARG_POINTER(0); */</comment>
    <decl_stmt><decl><type><name>spgConfigOut</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><operator>(</operator><name>spgConfigOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>prefixType</name></name> <operator>=</operator> <name>POINTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>labelType</name></name> <operator>=</operator> <name>VOIDOID</name></expr>;</expr_stmt>    <comment type="block">/* we don't need node labels */</comment>
    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>canReturnData</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name><operator>-&gt;</operator><name>longValuesOK</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPTEST</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>DatumGetBool(DirectFunctionCall2(f, PointPGetDatum(x), PointPGetDatum(y)))</cpp:value></cpp:define>

<comment type="block">/*
 * Determine which quadrant a point falls into, relative to the centroid.
 *
 * Quadrants are identified like this:
 *
 *     4    |  1
 *    ----+-----
 *     3    |  2
 *
 * Points on one of the axes are taken to lie in the lowest-numbered
 * adjacent quadrant.
 */</comment>
<function><type><specifier>static</specifier> <name>int16</name></type>
<name>getQuadrant</name><parameter_list>(<parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>centroid</name></decl></parameter>, <parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>tst</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_above</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_horiz</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_right</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_vert</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_below</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_right</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_vert</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_below</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_horiz</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
        <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_left</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_above</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_left</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"getQuadrant: impossible case"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>spg_quad_choose</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>spgChooseIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgChooseIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgChooseOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgChooseOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>inPoint</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datum</name></name></expr></argument>)</argument_list></call></expr></init></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>centroid</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>allTheSame</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>resultType</name></name> <operator>=</operator> <name>spgMatchNode</name></expr>;</expr_stmt>
        <comment type="block">/* nodeN will be set by core */</comment>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>levelAdd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>restDatum</name></name> <operator>=</operator> <call><name>PointPGetDatum</name><argument_list>(<argument><expr><name>inPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>hasPrefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>centroid</name> <operator>=</operator> <call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>prefixDatum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>resultType</name></name> <operator>=</operator> <name>spgMatchNode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>nodeN</name></name> <operator>=</operator> <call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>inPoint</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>levelAdd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>matchNode</name><operator>.</operator><name>restDatum</name></name> <operator>=</operator> <call><name>PointPGetDatum</name><argument_list>(<argument><expr><name>inPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MEDIAN</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>x_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>*</operator><operator>(</operator><name>Point</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>*</operator><operator>(</operator><name>Point</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pa</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name><name>pb</name><operator>-&gt;</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pa</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;</operator> <name><name>pb</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>y_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>*</operator><operator>(</operator><name>Point</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>*</operator><operator>(</operator><name>Point</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pa</name><operator>-&gt;</operator><name>y</name></name> <operator>==</operator> <name><name>pb</name><operator>-&gt;</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pa</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;</operator> <name><name>pb</name><operator>-&gt;</operator><name>y</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>Datum</name></type>
<name>spg_quad_picksplit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>spgPickSplitIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgPickSplitIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgPickSplitOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgPickSplitOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>centroid</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MEDIAN</name></cpp:ifdef>
    <comment type="block">/* Use the median values of x and y as the centroid point */</comment>
    <decl_stmt><decl><type><name>Point</name>      <modifier>*</modifier><modifier>*</modifier></type><name>sorted</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sorted</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sorted</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name>centroid</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>centroid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sorted</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>x_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sorted</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>y_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* Use the average values of x and y as the centroid point */</comment>
    <expr_stmt><expr><name>centroid</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>centroid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>y</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>x</name></name> <operator>/=</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>centroid</name><operator>-&gt;</operator><name>y</name></name> <operator>/=</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>hasPrefix</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>prefixDatum</name></name> <operator>=</operator> <call><name>PointPGetDatum</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeLabels</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>        <comment type="block">/* we don't need node labels */</comment>

    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mapTuplesToNodes</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafTupleDatums</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nTuples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>quadrant</name> <init>= <expr><call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafTupleDatums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointPGetDatum</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>mapTuplesToNodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>quadrant</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>spg_quad_inner_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>spgInnerConsistentIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgInnerConsistentIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgInnerConsistentOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgInnerConsistentOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>centroid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>which</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>hasPrefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>centroid</name> <operator>=</operator> <call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>prefixDatum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>allTheSame</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Report that all nodes should be visited */</comment>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* "which" is a bitmask of quadrants that satisfy all constraints */</comment>
    <expr_stmt><expr><name>which</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_argument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BOX</name>           <modifier>*</modifier></type><name>boxQuery</name></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_right</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_left</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>RTBelowStrategyNumber</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_above</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>RTAboveStrategyNumber</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>SPTEST</name><argument_list>(<argument><expr><name>point_below</name></expr></argument>, <argument><expr><name>centroid</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>

                <comment type="block">/*
                 * For this operator, the query is a box not a point.  We
                 * cheat to the extent of assuming that DatumGetPointP won't
                 * do anything that would be bad for a pointer-to-box.
                 */</comment>
                <expr_stmt><expr><name>boxQuery</name> <operator>=</operator> <call><name>DatumGetBoxP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>box_contain_pt</name></expr></argument>,
                                                     <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>boxQuery</name></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/* centroid is in box, so all quadrants are OK */</comment>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="block">/* identify quadrant(s) containing all corners of box */</comment>
                    <decl_stmt><decl><type><name>Point</name></type>        <name>p</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type>            <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>boxQuery</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>boxQuery</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>boxQuery</name><operator>-&gt;</operator><name>high</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>boxQuery</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>getQuadrant</name><argument_list>(<argument><expr><name>centroid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <name>r</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>,
                     <argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>                <comment type="block">/* no need to consider remaining conditions */</comment>
    </block_content>}</block></for>

    <comment type="block">/* We must descend into the quadrant(s) identified by which */</comment>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>which</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nodeNumbers</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>nNodes</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>spg_quad_leaf_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>spgLeafConsistentIn</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>spgLeafConsistentIn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>spgLeafConsistentOut</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>spgLeafConsistentOut</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>datum</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>leafDatum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* all tests are exact */</comment>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>recheck</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/* leafDatum is what it is... */</comment>
    <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>leafValue</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>leafDatum</name></name></expr>;</expr_stmt>

    <comment type="block">/* Perform the required comparison(s) */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Point</name>       <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>DatumGetPointP</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_argument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_left</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_right</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_eq</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>RTBelowStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_below</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>RTAboveStrategyNumber</name></expr>:</case>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPTEST</name><argument_list>(<argument><expr><name>point_above</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>

                <comment type="block">/*
                 * For this operator, the query is a box not a point.  We
                 * cheat to the extent of assuming that DatumGetPointP won't
                 * do anything that would be bad for a pointer-to-box.
                 */</comment>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPTEST</name><argument_list>(<argument><expr><name>box_contain_pt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized strategy number: %d"</literal></expr></argument>,
                     <argument><expr><name><name>in</name><operator>-&gt;</operator><name>scankeys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sk_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
