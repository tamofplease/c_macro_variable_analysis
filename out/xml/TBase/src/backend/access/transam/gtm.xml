<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/access/transam/gtm.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gtm.c
 *
 *      Module interfacing with GTM
 *
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/pgxc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gtm/gtm_c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/autovacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/clean2pc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/clustermon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_rusage.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pgxc_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tqual.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/nodemgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* To access sequences */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetMyCoordName</name></cpp:macro> \
    <cpp:value>OidIsValid(MyCoordId) ? get_pgxc_nodename(MyCoordId) : ""</cpp:value></cpp:define>
<comment type="block">/* Configuration variables */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<comment type="block">/*
 * This two value set while accept create/alter gtm node command
 */</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>NewGtmHost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>      <name>NewGtmPort</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>  <name>g_GTM_skip_catalog</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gtm_unix_socket_directory</name> <init>= <expr><name>DEFAULT_PGSOCKET_DIR</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>reconnect_gtm_retry_times</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reconnect_gtm_retry_interval</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>GtmHost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>GtmPort</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>GtmConnectTimeout</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsXidFromGTM</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>gtm_backup_barrier</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>FirstSnapshotSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>GTMDebugPrint</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GTM_Conn</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<comment type="block">/* Used to check if needed to commit/abort at datanodes */</comment>
<decl_stmt><decl><type><name>GlobalTransactionId</name></type> <name>currentGxid</name> <init>= <expr><name>InvalidGlobalTransactionId</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int</name></type>            <name>currIdx</name></decl>;</decl_stmt>        <comment type="block">/* current PROCLOCK index */</comment>
    <decl_stmt><decl><type><name>int</name></type>         <name>totalIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>PG_Storage_status</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>GTM_CHECK_DELTA</name></cpp:macro>  <cpp:value>(10  * 1000 * 1000)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>g_CreateSeqList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>g_DropSeqList</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>g_AlterSeqList</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* constant postfix for sequence to avoid same name */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GTM_SEQ_POSTFIX</name></cpp:macro> <cpp:value>"_$TBASE$_sequence_temp_54312678712612"</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CheckConnection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResetGTMConnection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetGTMStoreStatus</name><parameter_list>(<parameter><decl><type><name>GTMStorageStatus</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetGTMStoreSequence</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_seq</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetGTMStoreTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_txn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CheckGTMStoreTransaction</name><parameter_list>(<parameter><decl><type><name>GTMStorageTransactionStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_fix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CheckGTMStoreSequence</name><parameter_list>(<parameter><decl><type><name>GTMStorageSequneceStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_seq</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_fix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResetGtmInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>GlobalTimestamp</name></type> <name>GetLatestCommitTS</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* when modify this, had better modify GTMStorageError first*/</comment>
<function><type><name>void</name></type> <name>RestoreSeqCreate</name><parameter_list>(<parameter><decl><type><name>CreateInfo</name> <modifier>*</modifier></type><name>create_info</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* only restore when list is empty */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>g_CreateSeqList</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>RegisterSeqCreate</name><argument_list>(<argument><expr><name><name>create_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>create_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gsk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegisterSeqCreate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name> <modifier>*</modifier></type><name>key</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>          <name>old_cxt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>old_cxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>GTM_SequenceKeyData</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GTM_SequenceKeyData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_keylen</name></name>  <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name>     <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_type</name></name>    <operator>=</operator> <name>type</name></expr>;</expr_stmt>    
    <expr_stmt><expr><name>g_CreateSeqList</name>  <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>g_CreateSeqList</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RestoreSeqDrop</name><parameter_list>(<parameter><decl><type><name>DropInfo</name> <modifier>*</modifier></type><name>drop_info_array</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* only restore when list is empty */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>g_DropSeqList</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryContext</name></type>  <name>old_cxt</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DropInfo</name>      <modifier>*</modifier></type><name>drop_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>old_cxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>drop_info</name> <operator>=</operator> <operator>(</operator><name>DropInfo</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DropInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>drop_info_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>drop_info_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>drop_info</name><operator>-&gt;</operator><name>gsk_type</name></name> <operator>=</operator> <name><name>drop_info_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gsk_type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>g_DropSeqList</name>       <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>g_DropSeqList</name></expr></argument>, <argument><expr><name>drop_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegisterSeqDrop</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DropInfo</name>              <modifier>*</modifier></type><name>drop_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type>         <name>old_cxt</name>   <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>       <name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                 <name><name>temp</name><index>[<expr><name>GTM_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>GTM_SEQ_FULL_NAME</name> <operator>==</operator> <name>type</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Here we can only add postfix for the temp sequence, or drop database will fail. */</comment>
	    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal><name>GTM_SEQ_POSTFIX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>RenameSequenceGTM</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Deletion of sequences on database %s failed when backup old seq"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>    
                                
    <expr_stmt><expr><name>old_cxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>drop_info</name> <operator>=</operator> <operator>(</operator><name>DropInfo</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DropInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>drop_info</name><operator>-&gt;</operator><name>gsk_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_DropSeqList</name>       <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>g_DropSeqList</name></expr></argument>, <argument><expr><name>drop_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RestoreSeqRename</name><parameter_list>(<parameter><decl><type><name>RenameInfo</name> <modifier>*</modifier></type><name>rename_info_array</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* only restore when list is empty */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>g_AlterSeqList</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>RegisterRenameSequence</name><argument_list>(<argument><expr><name><name>rename_info_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>new</name></expr></argument>, <argument><expr><name><name>rename_info_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegisterRenameSequence</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_cxt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RenameInfo</name>    <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>         <modifier>*</modifier></type><name>cell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RenameInfo</name>    <modifier>*</modifier></type><name>rename_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* combine the alter operation of the same sequence in the same transaction .
     * EXAMPLE:
     * RENAME SEQUENCE A TO B --\
     *                           &gt; RENAME SEQUENCE A TO C
     * RENAME SEQUENCE B TO C --/
     */</comment>
    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_AlterSeqList</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>rename_info</name> <operator>=</operator> <operator>(</operator><name>RenameInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>            
             <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Combine requence seq:%s -&gt;:%s, %s-&gt;%s to old:%s latest "</literal>
                                       <literal type="string">"new:%s"</literal></expr></argument>, <argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>old</name></expr></argument>,
                                       <argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block>
    
    <expr_stmt><expr><name>old_cxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RenameInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_AlterSeqList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>g_AlterSeqList</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FinishSeqOp</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>ret</name>           <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>               <modifier>*</modifier></type><name>cell</name>          <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name> <modifier>*</modifier></type><name>key</name>           <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RenameInfo</name>          <modifier>*</modifier></type><name>rename_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DropInfo</name>            <modifier>*</modifier></type><name>drop_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>IS_PGXC_LOCAL_COORDINATOR</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* do nothing for the created list */</comment>

        <comment type="block">/* do the drop for drop list */</comment>
        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_DropSeqList</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>drop_info</name> <operator>=</operator> <operator>(</operator><name>DropInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
            <comment type="block">/* No need to differ the gsk_type here. */</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DropSequenceGTM</name><argument_list>(<argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"DropSequenceGTM failed for seq:%s type:%d commit:%d"</literal></expr></argument>, <argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>

        <comment type="block">/* do the alter for the alter list */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* rollback the created list */</comment>
        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_CreateSeqList</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>GTM_SequenceKeyData</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DropSequenceGTM</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"DropSequenceGTM failed for seq:%s type:%d commit:%d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        
        <comment type="block">/* roll back the drop list */</comment>
        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_DropSeqList</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>drop_info</name> <operator>=</operator> <operator>(</operator><name>DropInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <comment type="block">/* No need to process GTM_SEQ_DB_NAME here. */</comment>
            <if_stmt><if>if <condition>(<expr><name>GTM_SEQ_FULL_NAME</name> <operator>==</operator> <name><name>drop_info</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RenameSequenceGTM</name><argument_list>(<argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"RenameSequenceGTM seq:%s to:%s failed commit:%d"</literal></expr></argument>, <argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name><name>drop_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        
        <comment type="block">/* rollback for the alter list */</comment>
        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_AlterSeqList</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>rename_info</name> <operator>=</operator> <operator>(</operator><name>RenameInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RenameSequenceGTM</name><argument_list>(<argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"RenameSequenceGTM seq:%s to:%s failed commit:%d"</literal></expr></argument>, <argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name><name>rename_info</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Free the memory */</comment>    
    <if_stmt><if>if <condition>(<expr><name>g_CreateSeqList</name></expr>)</condition>
    <block>{<block_content>        
        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_CreateSeqList</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>GTM_SequenceKeyData</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>g_CreateSeqList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_CreateSeqList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>g_DropSeqList</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_DropSeqList</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>drop_info</name> <operator>=</operator> <operator>(</operator><name>DropInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>drop_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>g_DropSeqList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_DropSeqList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>g_AlterSeqList</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_AlterSeqList</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>rename_info</name> <operator>=</operator> <operator>(</operator><name>RenameInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rename_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        </block_content>}</block>
        <expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>g_AlterSeqList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_AlterSeqList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GetGTMCreateSeq</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>create_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>                <name>count</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>               <modifier>*</modifier></type><name>cell</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name> <modifier>*</modifier></type><name>key</name>       <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>CreateInfo</name>             <modifier>*</modifier></type><name>content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>content</name> <operator>=</operator> <operator>(</operator><name>CreateInfo</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CreateInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>g_CreateSeqList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_CreateSeqList</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>GTM_SequenceKeyData</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>content</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>gsk_key</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>content</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>gsk_type</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><operator>*</operator><name>create_info</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>content</name></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GetGTMDropSeq</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>drop_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>            <modifier>*</modifier></type><name>cell</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DropInfo</name>             <modifier>*</modifier></type><name>drop</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>DropInfo</name>            <modifier>*</modifier></type><name>content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>content</name> <operator>=</operator> <operator>(</operator><name>DropInfo</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DropInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>g_DropSeqList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_DropSeqList</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>drop</name> <operator>=</operator> <operator>(</operator><name>DropInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>content</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>new</name></expr></argument>, <argument><expr><name><name>drop</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>content</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>old</name></expr></argument>, <argument><expr><name><name>drop</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>content</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>gsk_type</name> <operator>=</operator> <name><name>drop</name><operator>-&gt;</operator><name>gsk_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><operator>*</operator><name>drop_info</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>content</name></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type> <name>GetGTMRenameSeq</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rename_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32</name></type>                 <name>count</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>            <modifier>*</modifier></type><name>cell</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RenameInfo</name>            <modifier>*</modifier></type><name>rename</name>     <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>RenameInfo</name>            <modifier>*</modifier></type><name>content</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>content</name> <operator>=</operator> <operator>(</operator><name>RenameInfo</name><operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RenameInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>g_AlterSeqList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>g_AlterSeqList</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>rename</name> <operator>=</operator> <operator>(</operator><name>RenameInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>content</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>new</name></expr></argument>, <argument><expr><name><name>rename</name><operator>-&gt;</operator><name>new</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>content</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>old</name></expr></argument>, <argument><expr><name><name>rename</name><operator>-&gt;</operator><name>old</name></name></expr></argument>, <argument><expr><name>GTM_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><operator>*</operator><name>rename_info</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>content</name></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Finish the transaction with gid. */</comment>
<function><type><name>int</name></type> <name>FinishGIDGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finish_gid_gtm</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finish_gid_gtm</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Finish the transaction with gid. */</comment>
<function><type><name>int</name></type> <name>GetGTMStoreStatus</name><parameter_list>(<parameter><decl><type><name>GTMStorageStatus</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_gtm_store_status</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_gtm_store_status</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>GetGTMStoreSequence</name><parameter_list>(<parameter><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_storage_sequence_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_storage_sequence_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>CheckGTMStoreTransaction</name><parameter_list>(<parameter><decl><type><name>GTMStorageTransactionStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_fix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_storage_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_txn</name></expr></argument>, <argument><expr><name>need_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_storage_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_txn</name></expr></argument>, <argument><expr><name>need_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>CheckGTMStoreSequence</name><parameter_list>(<parameter><decl><type><name>GTMStorageSequneceStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_seq</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_fix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_storage_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_seq</name></expr></argument>, <argument><expr><name>need_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_storage_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_seq</name></expr></argument>, <argument><expr><name>need_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>GetGTMStoreTransaction</name><parameter_list>(<parameter><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>store_txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_storage_transaction_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_storage_transaction_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>store_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_list_gtm_store - produce a view with gtm store info.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_list_gtm_store</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>LIST_GTM_STORE_COLUMNS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>int32</name></type>           <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleDesc</name></type>        <name>tupdesc</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GTMStorageStatus</name></type> <name>gtm_status</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>LIST_GTM_STORE_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>LIST_GTM_STORE_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetGTMStoreStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gtm_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"get gtm info from gtm failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
   
    <comment type="block">/* build tupdesc for result tuples */</comment>
    <comment type="block">/* this had better match function's declaration in pg_proc.h */</comment>
    <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>LIST_GTM_STORE_COLUMNS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"system_identifier"</literal></expr></argument>,
                       <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"major_version"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"minor_version"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"gtm_status"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"global_time_stamp"</literal></expr></argument>,
                       <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"global_xmin"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"next_gxid"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"seq_total"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"seq_used"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"seq_freelist"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"txn_total"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"txn_used"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"txn_freelist"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"system_lsn"</literal></expr></argument>,
                       <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"last_update_time"</literal></expr></argument>,
                       <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"crc_check_value"</literal></expr></argument>,
                       <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    <expr_stmt><expr><call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Fill values and NULLs */</comment>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_major_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_minor_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_gtm_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_next_gts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_global_xmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_next_gxid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>seq_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>seq_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_seq_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>txn_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>txn_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_txn_freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_last_update_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>gtm_status</name><operator>.</operator><name>header</name><operator>.</operator><name>m_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* Returns the record as Datum */</comment>
    <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>pg_list_storage_sequence</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SEQ_STATUS_COLUMNS</name></cpp:macro>    <cpp:value>15</cpp:value></cpp:define>
    
    <decl_stmt><decl><type><name>FuncCallContext</name>   <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PG_Storage_status</name> <modifier>*</modifier></type><name>mystatus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>seqs</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TupleDesc</name></type>    <name>tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

        <comment type="block">/* create a function context for cross-call persistence */</comment>
        <expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/*
         * switch to memory context appropriate for multiple function calls
         */</comment>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* build tupdesc for result tuples */</comment>
        <comment type="block">/* this had better match function's declaration in pg_proc.h */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>NUM_SEQ_STATUS_COLUMNS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gsk_key"</literal></expr></argument>,
                           <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"gsk_type"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"gs_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"gs_init_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"gs_increment_by"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"gs_min_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"gs_max_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"gs_cycle"</literal></expr></argument>,
                           <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"gs_called"</literal></expr></argument>,
                           <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"gs_reserved"</literal></expr></argument>,
                           <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"gs_status"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"gti_store_handle"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"last_update_time"</literal></expr></argument>,
                           <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"gs_next"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"gs_crc"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PG_Storage_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>mystatus</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>=</operator> <call><name>GetGTMStoreSequence</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_StoredSeqInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"get sequence info from gtm failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>funcctx</name>  <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>    
    <expr_stmt><expr><name>seqs</name>     <operator>=</operator> <operator>(</operator><name>GTM_StoredSeqInfo</name><operator>*</operator><operator>)</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name> <operator>&lt;</operator> <name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>NUM_SEQ_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>NUM_SEQ_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_StoredSeqInfo</name> <modifier>*</modifier></type><name>instance</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>seqs</name><index>[<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>        

        <comment type="block">/*
         * Form tuple with appropriate data.
         */</comment>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_init_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_increment_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_min_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_max_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_cycle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_called</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_reserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>m_last_update_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            

        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>    
    
    <expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>pg_list_storage_transaction</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_TXN_STATUS_COLUMNS</name></cpp:macro>    <cpp:value>7</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>FuncCallContext</name>   <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PG_Storage_status</name> <modifier>*</modifier></type><name>mystatus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>txns</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TupleDesc</name></type>    <name>tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

        <comment type="block">/* create a function context for cross-call persistence */</comment>
        <expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/*
         * switch to memory context appropriate for multiple function calls
         */</comment>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* build tupdesc for result tuples */</comment>
        <comment type="block">/* this had better match function's declaration in pg_proc.h */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>NUM_TXN_STATUS_COLUMNS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gti_gid"</literal></expr></argument>,
                           <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"node_list"</literal></expr></argument>,
                           <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"gti_state"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"gti_store_handle"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"last_update_time"</literal></expr></argument>,
                           <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"gs_next"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"gs_crc"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PG_Storage_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>mystatus</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>=</operator> <call><name>GetGTMStoreTransaction</name><argument_list>(<argument><expr><operator>(</operator><name>GTM_StoredTransactionInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"get transaction info from gtm failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>funcctx</name>  <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name><operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>    
    <expr_stmt><expr><name>txns</name>     <operator>=</operator> <operator>(</operator><name>GTM_StoredTransactionInfo</name><operator>*</operator><operator>)</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name> <operator>&lt;</operator> <name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>NUM_TXN_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>NUM_TXN_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTM_StoredTransactionInfo</name> <modifier>*</modifier></type><name>instance</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>txns</name><index>[<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>        

        <comment type="block">/*
         * Form tuple with appropriate data.
         */</comment>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gti_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>nodestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gti_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>m_last_update_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>gti_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>    

    <expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>pg_check_storage_sequence</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CHECK_SEQ_STATUS_COLUMNS</name></cpp:macro>    <cpp:value>17</cpp:value></cpp:define>    
    <decl_stmt><decl><type><name>FuncCallContext</name>   <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PG_Storage_status</name> <modifier>*</modifier></type><name>mystatus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageSequneceStatus</name> <modifier>*</modifier></type><name>seqs</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32</name></type>          <name>need_fix</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TupleDesc</name></type>      <name>tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

        <comment type="block">/* create a function context for cross-call persistence */</comment>
        <expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>need_fix</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * switch to memory context appropriate for multiple function calls
         */</comment>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* build tupdesc for result tuples */</comment>
        <comment type="block">/* this had better match function's declaration in pg_proc.h */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>NUM_CHECK_SEQ_STATUS_COLUMNS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gsk_key"</literal></expr></argument>,
                           <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"gsk_type"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"gs_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"gs_init_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"gs_increment_by"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"gs_min_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"gs_max_value"</literal></expr></argument>,
                           <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"gs_cycle"</literal></expr></argument>,
                           <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"gs_called"</literal></expr></argument>,
                           <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"gs_reserved"</literal></expr></argument>,
                           <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"gs_status"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"gti_store_handle"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"last_update_time"</literal></expr></argument>,
                           <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><literal type="string">"gs_next"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"gs_crc"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"error_msg"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><literal type="string">"check_status"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PG_Storage_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>mystatus</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>=</operator> <call><name>CheckGTMStoreSequence</name><argument_list>(<argument><expr><operator>(</operator><name>GTMStorageSequneceStatus</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>need_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"get sequence info from gtm failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>funcctx</name>  <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>    
    <expr_stmt><expr><name>seqs</name>     <operator>=</operator> <operator>(</operator><name>GTMStorageSequneceStatus</name><operator>*</operator><operator>)</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name> <operator>&lt;</operator> <name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>NUM_CHECK_SEQ_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>NUM_CHECK_SEQ_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTMStorageSequneceStatus</name> <modifier>*</modifier></type><name>instance</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>seqs</name><index>[<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>        

        <comment type="block">/*
         * Form tuple with appropriate data.
         */</comment>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_key</name><operator>.</operator><name>gsk_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_key</name><operator>.</operator><name>gsk_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_init_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_increment_by</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_min_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_max_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_cycle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_called</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_reserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>m_last_update_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>UInt32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>sequence</name><operator>.</operator><name>gs_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                        
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>    

    <expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>pg_check_storage_transaction</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CHECK_TXN_STATUS_COLUMNS</name></cpp:macro>    <cpp:value>11</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>FuncCallContext</name>   <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PG_Storage_status</name> <modifier>*</modifier></type><name>mystatus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTMStorageTransactionStatus</name> <modifier>*</modifier></type><name>txns</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TupleDesc</name></type>      <name>tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32</name></type>          <name>need_fix</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>need_fix</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* create a function context for cross-call persistence */</comment>
        <expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/*
         * switch to memory context appropriate for multiple function calls
         */</comment>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* build tupdesc for result tuples */</comment>
        <comment type="block">/* this had better match function's declaration in pg_proc.h */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>NUM_CHECK_TXN_STATUS_COLUMNS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gti_gid"</literal></expr></argument>,
                           <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"node_list"</literal></expr></argument>,
                           <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"gti_state"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"gti_store_handle"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"last_update_time"</literal></expr></argument>,
                           <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"gs_next"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"gs_crc"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"error_msg"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"check_status"</literal></expr></argument>,
                           <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PG_Storage_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>mystatus</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>=</operator> <call><name>CheckGTMStoreTransaction</name><argument_list>(<argument><expr><operator>(</operator><name>GTMStorageTransactionStatus</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>need_fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"get transaction info from gtm failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        </block_content>}</block></if></if_stmt>        
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>funcctx</name>  <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mystatus</name> <operator>=</operator> <operator>(</operator><name>PG_Storage_status</name><operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>    
    <expr_stmt><expr><name>txns</name>     <operator>=</operator> <operator>(</operator><name>GTMStorageTransactionStatus</name><operator>*</operator><operator>)</operator><name><name>mystatus</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name> <operator>&lt;</operator> <name><name>mystatus</name><operator>-&gt;</operator><name>totalIdx</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>NUM_CHECK_TXN_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>NUM_CHECK_TXN_STATUS_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GTMStorageTransactionStatus</name> <modifier>*</modifier></type><name>instance</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>txns</name><index>[<expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>        

        <comment type="block">/*
         * Form tuple with appropriate data.
         */</comment>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>txn</name><operator>.</operator><name>gti_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>txn</name><operator>.</operator><name>nodestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>txn</name><operator>.</operator><name>gti_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>txn</name><operator>.</operator><name>gti_store_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>txn</name><operator>.</operator><name>m_last_update_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>txn</name><operator>.</operator><name>gs_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>txn</name><operator>.</operator><name>gti_crc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>instance</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>mystatus</name><operator>-&gt;</operator><name>currIdx</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>    

    <expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type>
<name>IsGTMConnected</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>conn</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<comment type="block">/*
 * Set gtm info with GtmHost and GtmPort.
 *
 * There are three cases:
 * 1.New gtm info from create/alter gtm node command
 * 2.Gtm info from pgxc_node
 * 3.Gtm info from recovery gtm host
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> 
<name>GetMasterGtmInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Check gtm host and port info */</comment>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>gtmtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pgxc_node</name></type>	<name>nodeForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* reset gtm info */</comment>
	<expr_stmt><expr><call><name>ResetGtmInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If NewGtmHost and NewGtmPort, just use it. */</comment>
	<if_stmt><if>if <condition>(<expr><name>NewGtmHost</name> <operator>&amp;&amp;</operator> <name>NewGtmPort</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><literal type="string">"GetMasterGtmInfo: set master gtm info with NewGtmHost:%s NewGtmPort:%d"</literal></expr></argument>,
			<argument><expr><name>NewGtmHost</name></expr></argument>, <argument><expr><name>NewGtmPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>GtmHost</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>NewGtmHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>GtmPort</name> <operator>=</operator> <name>NewGtmPort</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>NewGtmHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>NewGtmHost</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>NewGtmPort</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* we have no recovery gtm host info, just read from heap. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g_recovery_gtm_host</name><operator>-&gt;</operator><name>need_read</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We must be sure there is no error report, because we may be
		 * in AbortTransaction now.
		 * 1.If we are not in a transaction, we should not open relation.
		 * 2.If we do not get lock, it is ok to try it next time.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IsTransactionState</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>ConditionalLockRelationOid</name><argument_list>(<argument><expr><name>PgxcNodeRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>PgxcNodeRelationId</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>heap_beginscan_catalog</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Only one record will match */</comment>
			<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>gtmtup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nodeForm</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_node</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>gtmtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>PGXC_NODE_GTM</name> <operator>==</operator> <name><name>nodeForm</name><operator>-&gt;</operator><name>node_type</name></name> <operator>&amp;&amp;</operator> <name><name>nodeForm</name><operator>-&gt;</operator><name>nodeis_primary</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>GtmHost</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeForm</name><operator>-&gt;</operator><name>node_host</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>GtmPort</name> <operator>=</operator> <name><name>nodeForm</name><operator>-&gt;</operator><name>node_port</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* get the gtm host info  */</comment>
		<expr_stmt><expr><name>GtmHost</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>g_recovery_gtm_host</name><operator>-&gt;</operator><name>hostdata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>GtmPort</name> <operator>=</operator> <name><name>g_recovery_gtm_host</name><operator>-&gt;</operator><name>port</name></name></expr>;</expr_stmt>	
		<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>	

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><literal type="string">"GetMasterGtmInfo: can not get master gtm info from pgxc_node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>CheckConnection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Be sure that a backend does not use a postmaster connection */</comment>
	<if_stmt><if>if <condition>(<expr><name>IsUnderPostmaster</name> <operator>&amp;&amp;</operator> <call><name>GTMPQispostmaster</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GTMPQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ResetGTMConnection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>gtmtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pgxc_node</name></type> <name>nodeForm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetGtmInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We must be sure there is no error report, because we may be
	 * in AbortTransaction now.
	 * 1.If we are not in a inprogress or commit transaction, we should not open relation.
	 * 2.If we do not get lock, it is ok to try it next time.
	 */</comment>
	<if_stmt><if>if <condition>( <expr><operator>(</operator><call><name>IsTransactionState</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>IsTransactionCommit</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		<call><name>ConditionalLockRelationOid</name><argument_list>(<argument><expr><name>PgxcNodeRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>PgxcNodeRelationId</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>heap_beginscan_catalog</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Only one record will match */</comment>
		<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>gtmtup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nodeForm</name> <operator>=</operator> <operator>(</operator><name>Form_pgxc_node</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>gtmtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>PGXC_NODE_GTM</name> <operator>==</operator> <name><name>nodeForm</name><operator>-&gt;</operator><name>node_type</name></name> <operator>&amp;&amp;</operator> <name><name>nodeForm</name><operator>-&gt;</operator><name>nodeis_primary</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>GtmHost</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>nodeForm</name><operator>-&gt;</operator><name>node_host</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>GtmPort</name> <operator>=</operator> <name><name>nodeForm</name><operator>-&gt;</operator><name>node_port</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"can not get master gtm info from pgxc_node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
<comment type="block">/*
 * gtm_unix_socket_file_exists()
 *
 * Checks whether the gtm unix domain socket file exists.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gtm_unix_socket_file_exists</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXGTMPATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>		<name><name>lockfile</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>UNIXSOCK_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>GtmPort</name></expr></argument>, <argument><expr><name>gtm_unix_socket_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>lockfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lockfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.lock"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>lockfile</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* ENOTDIR means we will throw a more useful error later */</comment>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOTDIR</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not open file \"%s\" for reading: %s\n"</literal></expr></argument>,
                     <argument><expr><name>lockfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>InitGTM</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>CONNECT_STR_LEN</name></cpp:macro>   <cpp:value>256</cpp:value></cpp:define> <comment type="block">/* 256 bytes should be enough */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>conn_str</name><index>[<expr><name>CONNECT_STR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>  <name>try_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_try_cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>  <name>same_host</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Only re-set gtm info in two cases:
	 * 1.No gtm info
	 * 2.New gtm info by create/alter gtm node command
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>GtmHost</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>GtmPort</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
		<operator>(</operator><name>NewGtmHost</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>NewGtmPort</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GetMasterGtmInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>GtmHost</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>GtmPort</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GtmHost and GtmPort are not set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>GtmHost</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>PGXCNodeHost</name></expr></argument>, <argument><expr><name>GtmHost</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>gtm_unix_socket_file_exists</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>same_host</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>try_connect_gtm</name>:</label>
	<comment type="block">/* If this thread is postmaster itself, it contacts gtm identifying itself */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GTM_PGXCNodeType</name></type> <name>remote_type</name> <init>= <expr><name>GTM_NODE_DEFAULT</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>IS_PGXC_COORDINATOR</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>remote_type</name> <operator>=</operator> <name>GTM_NODE_COORDINATOR</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>IS_PGXC_DATANODE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>remote_type</name> <operator>=</operator> <name>GTM_NODE_DATANODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>same_host</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Use 60s as connection timeout */</comment>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>conn_str</name></expr></argument>, <argument><expr><name>CONNECT_STR_LEN</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d postmaster=1 connect_timeout=%d"</literal></expr></argument>,
                     <argument><expr><name>gtm_unix_socket_directory</name></expr></argument>, <argument><expr><name>GtmPort</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><name>remote_type</name></expr></argument>,
                     <argument><expr><ternary><condition><expr><name>tcp_keepalives_idle</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
                     <expr><name>tcp_keepalives_idle</name></expr> </then><else>: <expr><name>GtmConnectTimeout</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
		<comment type="block">/* Use 60s as connection timeout */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>conn_str</name></expr></argument>, <argument><expr><name>CONNECT_STR_LEN</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s remote_type=%d postmaster=1 connect_timeout=%d"</literal></expr></argument>,
								<argument><expr><name>GtmHost</name></expr></argument>, <argument><expr><name>GtmPort</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><name>remote_type</name></expr></argument>,
								<argument><expr><ternary><condition><expr><name>tcp_keepalives_idle</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
								<expr><name>tcp_keepalives_idle</name></expr> </then><else>: <expr><name>GtmConnectTimeout</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

		<comment type="block">/* Log activity of GTM connections */</comment>
		<if_stmt><if>if<condition>(<expr><name>GTMDebugPrint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Postmaster: connection established to GTM with string %s"</literal></expr></argument>, <argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>same_host</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Use 60s as connection timeout */</comment>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>conn_str</name></expr></argument>, <argument><expr><name>CONNECT_STR_LEN</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s connect_timeout=%d"</literal></expr></argument>,
                     <argument><expr><name>gtm_unix_socket_directory</name></expr></argument>, <argument><expr><name>GtmPort</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>,
                     <argument><expr><ternary><condition><expr><name>tcp_keepalives_idle</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
                     <expr><name>tcp_keepalives_idle</name></expr> </then><else>: <expr><name>GtmConnectTimeout</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
		<comment type="block">/* Use 60s as connection timeout */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>conn_str</name></expr></argument>, <argument><expr><name>CONNECT_STR_LEN</name></expr></argument>, <argument><expr><literal type="string">"host=%s port=%d node_name=%s connect_timeout=%d"</literal></expr></argument>,
				<argument><expr><name>GtmHost</name></expr></argument>, <argument><expr><name>GtmPort</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>,
				<argument><expr><ternary><condition><expr><name>tcp_keepalives_idle</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
				<expr><name>tcp_keepalives_idle</name></expr> </then><else>: <expr><name>GtmConnectTimeout</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

		<comment type="block">/* Log activity of GTM connections */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IsAutoVacuumWorkerProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>GTMDebugPrint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Autovacuum worker: connection established to GTM with string %s"</literal></expr></argument>, <argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IsAutoVacuumLauncherProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>GTMDebugPrint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Autovacuum launcher: connection established to GTM with string %s"</literal></expr></argument>, <argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IsClusterMonitorProcess</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>GTMDebugPrint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Cluster monitor: connection established to GTM with string %s"</literal></expr></argument>, <argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IsClean2pcWorker</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>GTMDebugPrint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Clean 2pc worker: connection established to GTM with string %s"</literal></expr></argument>, <argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IsClean2pcLauncher</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>GTMDebugPrint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Clean 2pc launcher: connection established to GTM with string %s"</literal></expr></argument>, <argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><name>GTMDebugPrint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Postmaster child: connection established to GTM with string %s"</literal></expr></argument>, <argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>PQconnectGTM</name><argument_list>(<argument><expr><name>conn_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>GTMPQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>	
		<if_stmt><if>if <condition>(<expr><name>try_cnt</name> <operator>&lt;</operator> <name>max_try_cnt</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* If connect gtm failed, get gtm info from syscache, and try again */</comment>
			<expr_stmt><expr><call><name>GetMasterGtmInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>GtmHost</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>GtmPort</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"[InitGTM] Get GtmHost:%s  GtmPort:%d try_cnt:%d max_try_cnt:%d"</literal></expr></argument>, 
							 <argument><expr><name>GtmHost</name></expr></argument>, <argument><expr><name>GtmPort</name></expr></argument>, <argument><expr><name>try_cnt</name></expr></argument>, <argument><expr><name>max_try_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>try_cnt</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/* if connect with unix domain socket failed */</comment>
			<if_stmt><if>if <condition>(<expr><name>same_host</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>same_host</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
			<goto>goto <name>try_connect_gtm</name>;</goto>
		</block_content>}</block></if>
		<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>		
		<block>{<block_content>
			<expr_stmt><expr><call><name>ResetGtmInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Use LOG instead of ERROR to avoid error stack overflow. */</comment>
			<if_stmt><if>if<condition>(<expr><name>conn</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can not connect to GTM: %s %m"</literal></expr></argument>, <argument><expr><call><name>GTMPQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"connection is null: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GTMSetSockKeepAlive</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>tcp_keepalives_idle</name></expr></argument>,
							<argument><expr><name>tcp_keepalives_interval</name></expr></argument>, <argument><expr><name>tcp_keepalives_count</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GTMSetSockKeepAlive failed: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>IS_PGXC_COORDINATOR</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>register_session</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>, <argument><expr><name>MyBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>CloseGTM</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GTMPQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>conn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Log activity of GTM connections */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Postmaster: connection to GTM closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>IsAutoVacuumWorkerProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Autovacuum worker: connection to GTM closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>IsAutoVacuumLauncherProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Autovacuum launcher: connection to GTM closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>IsClusterMonitorProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Cluster monitor: connection to GTM closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsClean2pcWorker</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Clean 2pc worker: connection to GTM closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsClean2pcLauncher</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Clean 2pc launcher: connection to GTM closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Postmaster child: connection to GTM closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SUPPORT_DISTRIBUTED_TRANSACTION__</name></cpp:ifdef>
<function><type><name>GTM_Timestamp</name></type> 
<name>GetGlobalTimestampGTM</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>start_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>retry_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Get_GTS_Result</name></type> <name>gts_result</name> <init>= <expr><block>{<expr><name>InvalidGlobalTimestamp</name></expr>,<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GTM_Timestamp</name></type>  <name>latest_gts</name> <init>= <expr><name>InvalidGlobalTimestamp</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_set_global_snapshot</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>LocalCommitTimestamp</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ResetUsageCommon</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO Isolation level</comment>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>gts_result</name> <operator>=</operator>  <call><name>get_global_timestamp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>GTMDebugPrint</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"get global timestamp conn is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If something went wrong (timeout), try and reset GTM connection
     * and retry. This is safe at the beginning of a transaction.
     */</comment>
	<while>while <condition>(<expr><operator>!</operator><call><name>GlobalTimestampIsValid</name><argument_list>(<argument><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name>retry_cnt</name> <operator>&lt;</operator> <name>reconnect_gtm_retry_times</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>GTMDebugPrint</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"get global timestamp reconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ResetGTMConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retry_cnt</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"reset gtm connection %d times"</literal></expr></argument>, <argument><expr><name>retry_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>gts_result</name> <operator>=</operator> <call><name>get_global_timestamp</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GlobalTimestampIsValid</name><argument_list>(<argument><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"retry get global timestamp gts "</literal> <name>INT64_FORMAT</name></expr></argument>,
					<argument><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>GTMDebugPrint</name></expr>)</condition>
        <block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"get global timestamp conn is null after retry %d times"</literal></expr></argument>,
				<argument><expr><name>retry_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>retry_cnt</name> <operator>&lt;</operator> <name>reconnect_gtm_retry_times</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>reconnect_gtm_retry_interval</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG7</name></expr></argument>, <argument><expr><literal type="string">"get global timestamp gts "</literal> <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTimestampIsValid</name><argument_list>(<argument><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"retry %d times, get a invalid global timestamp, "</literal>
			<literal type="string">"ResetGTMConnection"</literal></expr></argument>, <argument><expr><name>retry_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetGTMConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ShowUsageCommon</name><argument_list>(<argument><expr><literal type="string">"BeginTranGTM"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>latest_gts</name> <operator>=</operator> <call><name>GetLatestCommitTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name> <operator>!=</operator> <name>InvalidGlobalTimestamp</name> <operator>&amp;&amp;</operator> <name>latest_gts</name> <operator>&gt;</operator> <operator>(</operator><name><name>gts_result</name><operator>.</operator><name>gts</name></name> <operator>+</operator> <name>GTM_CHECK_DELTA</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"global gts:%lu is earlier than local gts:%lu, please check GTM status!"</literal></expr></argument>, <argument><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name> <operator>+</operator> <name>GTM_CHECK_DELTA</name></expr></argument>, <argument><expr><name>latest_gts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* if we are standby, use timestamp subtracting given interval */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsStandbyPostgres</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>query_delay</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GTM_Timestamp</name></type>  <name>interval</name> <init>= <expr><name>query_delay</name> <operator>*</operator> <name>USECS_PER_SEC</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name> <operator>=</operator> <name><name>gts_result</name><operator>.</operator><name>gts</name></name> <operator>-</operator> <name>interval</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name> <operator>&lt;</operator> <name>FirstGlobalTimestamp</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name> <operator>=</operator> <name>FirstGlobalTimestamp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>GTM_ReadOnly</name> <operator>=</operator> <name><name>gts_result</name><operator>.</operator><name>gtm_readonly</name></name></expr>;</expr_stmt>
	
	<return>return <expr><name><name>gts_result</name><operator>.</operator><name>gts</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>GlobalTransactionId</name></type>
<name>BeginTranGTM</name><parameter_list>(<parameter><decl><type><name>GTM_Timestamp</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>globalSession</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type>  <name>xid</name> <init>= <expr><name>InvalidGlobalTransactionId</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>start_r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ResetUsageCommon</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO Isolation level</comment>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xid</name> <operator>=</operator>  <call><name>begin_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>, <argument><expr><name>globalSession</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* If something went wrong (timeout), try and reset GTM connection
     * and retry. This is safe at the beginning of a transaction.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsValid</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xid</name> <operator>=</operator> <call><name>begin_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>, <argument><expr><name>globalSession</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>xid</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>IsXidFromGTM</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>currentGxid</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"BeginTranGTM - session:%s, xid: %d"</literal></expr></argument>, <argument><expr><name>globalSession</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ShowUsageCommon</name><argument_list>(<argument><expr><literal type="string">"BeginTranGTM"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>xid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalTransactionId</name></type>
<name>BeginTranAutovacuumGTM</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GlobalTransactionId</name></type>  <name>xid</name> <init>= <expr><name>InvalidGlobalTransactionId</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO Isolation level</comment>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>xid</name> <operator>=</operator>  <call><name>begin_transaction_autovacuum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection and retry.
     * This is safe at the beginning of a transaction.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsValid</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>xid</name> <operator>=</operator>  <call><name>begin_transaction_autovacuum</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>currentGxid</name> <operator>=</operator> <name>xid</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"BeginTranGTM - %d"</literal></expr></argument>, <argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>CommitTranGTM</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>start_r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ResetUsageCommon</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"CommitTranGTM: %d"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>commit_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><name>waited_xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will close the transaction locally anyway, and closing GTM will force
     * it to be closed on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>commit_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><name>waited_xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Close connection in case commit is done by autovacuum worker or launcher */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsAutoVacuumWorkerProcess</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>IsAutoVacuumLauncherProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>currentGxid</name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ShowUsageCommon</name><argument_list>(<argument><expr><literal type="string">"CommitTranGTM"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * For a prepared transaction, commit the gxid used for PREPARE TRANSACTION
 * and for COMMIT PREPARED.
 */</comment>
<function><type><name>int</name></type>
<name>CommitPreparedTranGTM</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name></type> <name>prepared_gxid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>waited_xid_count</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>waited_xids</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>start_r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>prepared_gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ResetUsageCommon</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"CommitPreparedTranGTM: %d:%d"</literal></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>prepared_gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>commit_prepared_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>prepared_gxid</name></expr></argument>,
            <argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><name>waited_xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will close the transaction locally anyway, and closing GTM will force
     * it to be closed on GTM.
     */</comment>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>commit_prepared_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>prepared_gxid</name></expr></argument>,
                    <argument><expr><name>waited_xid_count</name></expr></argument>, <argument><expr><name>waited_xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>currentGxid</name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ShowUsageCommon</name><argument_list>(<argument><expr><literal type="string">"CommitPreparedTranGTM"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>RollbackTranGTM</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>abort_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>abort_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>currentGxid</name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
 * For CN, these timestamps are global ones issued by GTM
 * and are local timestamps on DNs.
 */</comment>
<function><type><name>int</name></type>
<name>LogCommitTranGTM</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>node_count</name></decl></parameter>,
                     <parameter><decl><type><name>bool</name></type> <name>isGlobal</name></decl></parameter>,
                     <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
                     <parameter><decl><type><name>GlobalTimestamp</name></type> <name>prepare_timestamp</name></decl></parameter>,
                     <parameter><decl><type><name>GlobalTimestamp</name></type> <name>commit_timestamp</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>log_commit_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, 
                                     <argument><expr><name>gxid</name></expr></argument>, 
                                     <argument><expr><name>gid</name></expr></argument>, 
                                     <argument><expr><name>nodestring</name></expr></argument>, 
                                     <argument><expr><name>node_count</name></expr></argument>, 
                                     <argument><expr><name>isGlobal</name></expr></argument>, 
                                     <argument><expr><name>isCommit</name></expr></argument>, 
                                     <argument><expr><name>prepare_timestamp</name></expr></argument>, 
                                     <argument><expr><name>commit_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>log_commit_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, 
                                     <argument><expr><name>gxid</name></expr></argument>, 
                                     <argument><expr><name>gid</name></expr></argument>, 
                                     <argument><expr><name>nodestring</name></expr></argument>, 
                                     <argument><expr><name>node_count</name></expr></argument>, 
                                     <argument><expr><name>isGlobal</name></expr></argument>, 
                                     <argument><expr><name>isCommit</name></expr></argument>, 
                                     <argument><expr><name>prepare_timestamp</name></expr></argument>, 
                                     <argument><expr><name>commit_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>LogScanGTM</name><parameter_list>( <parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, 
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_string</name></decl></parameter>, 
                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>start_ts</name></decl></parameter>,
                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_start_ts</name></decl></parameter>,
                              <parameter><decl><type><name>GlobalTimestamp</name></type>     <name>local_complete_ts</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type>    <name>scan_type</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel_name</name></decl></parameter>,
                             <parameter><decl><type><name>int64</name></type>  <name>scan_number</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>log_scan_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, 
                                     <argument><expr><name>gxid</name></expr></argument>, 
                                     <argument><expr><name>node_string</name></expr></argument>,
                                     <argument><expr><name>start_ts</name></expr></argument>,
                                     <argument><expr><name>local_start_ts</name></expr></argument>,
                                     <argument><expr><name>local_complete_ts</name></expr></argument>,
                                     <argument><expr><name>scan_type</name></expr></argument>,
                                     <argument><expr><name>rel_name</name></expr></argument>,
                                     <argument><expr><name>scan_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>log_scan_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, 
                                     <argument><expr><name>gxid</name></expr></argument>, 
                                     <argument><expr><name>node_string</name></expr></argument>,
                                     <argument><expr><name>start_ts</name></expr></argument>,
                                     <argument><expr><name>local_start_ts</name></expr></argument>,
                                     <argument><expr><name>local_complete_ts</name></expr></argument>,
                                     <argument><expr><name>scan_type</name></expr></argument>,
                                     <argument><expr><name>rel_name</name></expr></argument>,
                                     <argument><expr><name>scan_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>StartPreparedTranGTM</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>,
                     <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
                     <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_prepared_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Here, we should not reconnect, for sometime gtm raise an error, reconnect may skip the error. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__TBASE__</name></cpp:ifndef>
    
    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_prepared_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PrepareTranGTM</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>start_r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalTransactionIdIsValid</name><argument_list>(<argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ResetUsageCommon</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prepare_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will close the transaction locally anyway, and closing GTM will force
     * it to be closed on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prepare_transaction</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>currentGxid</name> <operator>=</operator> <name>InvalidGlobalTransactionId</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ShowUsageCommon</name><argument_list>(<argument><expr><literal type="string">"PrepareTranGTM"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>GetGIDDataGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
              <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>gxid</name></decl></parameter>,
              <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>prepared_gxid</name></decl></parameter>,
              <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodestring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_gid_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>,
                       <argument><expr><name>prepared_gxid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If something went wrong (timeout), try and reset GTM connection.
     * We will abort the transaction locally anyway, and closing GTM will force
     * it to end on GTM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_gid_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GTM_ISOLATION_RC</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>,
                               <argument><expr><name>prepared_gxid</name></expr></argument>, <argument><expr><name>nodestring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GTM_Snapshot</name></type>
<name>GetSnapshotGTM</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>canbe_grouped</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Snapshot</name></type> <name>ret_snapshot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rusage</name></name></type> <name>start_r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ResetUsageCommon</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret_snapshot</name> <operator>=</operator> <call><name>get_snapshot</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>canbe_grouped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret_snapshot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret_snapshot</name> <operator>=</operator> <call><name>get_snapshot</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>canbe_grouped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>log_gtm_stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ShowUsageCommon</name><argument_list>(<argument><expr><literal type="string">"GetSnapshotGTM"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>ret_snapshot</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Create a sequence on the GTM.
 */</comment>
<function><type><name>int</name></type>
<name>CreateSequenceGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seqname</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>,
                  <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>seqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name>    <operator>=</operator> <name>seqname</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_type</name></name>   <operator>=</operator> <name>GTM_SEQ_FULL_NAME</name></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>conn</name></expr> ?</condition><then> <expr><call><name>open_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>,
            <argument><expr><name>startval</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>, <argument><expr><call><name>GetTopTransactionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Alter a sequence on the GTM
 */</comment>
<function><type><name>int</name></type>
<name>AlterSequenceGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seqname</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>increment</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>minval</name></decl></parameter>,
                 <parameter><decl><type><name>GTM_Sequence</name></type> <name>maxval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>startval</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>lastval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cycle</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_restart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>seqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>seqname</name></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>conn</name></expr> ?</condition><then> <expr><call><name>alter_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>minval</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>,
            <argument><expr><name>startval</name></expr></argument>, <argument><expr><name>lastval</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>, <argument><expr><name>is_restart</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get the current sequence value
 */</comment>

<function><type><name>GTM_Sequence</name></type>
<name>GetCurrentValGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seqname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>coordName</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>PGXCNodeName</name></expr> </then><else>: <expr><name>GetMyCoordName</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>coordPid</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>MyProcPid</name></expr> </then><else>: <expr><name>MyCoordPid</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>seqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>seqname</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_current</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coordName</name></expr></argument>, <argument><expr><name>coordPid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* retry once */</comment>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_current</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coordName</name></expr></argument>, <argument><expr><name>coordPid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>GTMPQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the next sequence value
 */</comment>
<function><type><name>GTM_Sequence</name></type>
<name>GetNextValGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seqname</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name> <modifier>*</modifier></type><name>rangemax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_Sequence</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>coordName</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>PGXCNodeName</name></expr> </then><else>: <expr><name>GetMyCoordName</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>coordPid</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>MyProcPid</name></expr> </then><else>: <expr><name>MyCoordPid</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>seqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>seqname</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coordName</name></expr></argument>,
                          <argument><expr><name>coordPid</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>rangemax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* retry once */</comment>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_next</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coordName</name></expr></argument>, <argument><expr><name>coordPid</name></expr></argument>,
                              <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>rangemax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>GTMPQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set values for sequence
 */</comment>
<function><type><name>int</name></type>
<name>SetValGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seqname</name></decl></parameter>, <parameter><decl><type><name>GTM_Sequence</name></type> <name>nextval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>iscalled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>coordName</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>PGXCNodeName</name></expr> </then><else>: <expr><name>GetMyCoordName</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>coordPid</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>MyProcPid</name></expr> </then><else>: <expr><name>MyCoordPid</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>seqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>seqname</name></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>conn</name></expr> ?</condition><then> <expr><call><name>set_val</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><name>coordName</name></expr></argument>, <argument><expr><name>coordPid</name></expr></argument>, <argument><expr><name>nextval</name></expr></argument>, <argument><expr><name>iscalled</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Drop the sequence depending the key type
 *
 * Type of Sequence name use in key;
 *        GTM_SEQ_FULL_NAME, full name of sequence
 *        GTM_SEQ_DB_NAME, DB name part of sequence key
 */</comment>
<function><type><name>int</name></type>
<name>DropSequenceGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>GTM_SequenceKeyType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>conn</name></expr> ?</condition><then> <expr><call><name>close_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><call><name>GetTopTransactionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rename the sequence
 */</comment>
<function><type><name>int</name></type>
<name>RenameSequenceGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seqname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newseqname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>, <decl><type ref="prev"/><name>newseqkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>seqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>seqname</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>newseqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>newseqname</name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>conn</name></expr> ?</condition><then> <expr><call><name>rename_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>,
            <argument><expr><call><name>GetTopTransactionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Copy the database sequences from src database
 */</comment>
<function><type><name>int</name></type>
<name>CopyDataBaseSequenceGTM</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src_dbname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest_dbname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>src_seqkey</name></decl>, <decl><type ref="prev"/><name>dest_seqkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>src_dbname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>src_seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <name>src_dbname</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dest_dbname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dest_seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dest_dbname</name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>conn</name></expr> ?</condition><then> <expr><call><name>copy_database_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dest_seqkey</name></expr></argument>,
                                  <argument><expr><call><name>GetTopTransactionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Register Given Node
 * Connection for registering is just used once then closed
 */</comment>
<function><type><name>int</name></type>
<name>RegisterGTM</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>node_register</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"node register %s"</literal></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* If something went wrong, retry once */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>node_register</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * UnRegister Given Node
 * Connection for registering is just used once then closed
 */</comment>
<function><type><name>int</name></type>
<name>UnregisterGTM</name><parameter_list>(<parameter><decl><type><name>GTM_PGXCNodeType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>node_unregister</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If something went wrong, retry once */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>node_unregister</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If node is unregistered cleanly, cut the connection.
     * and Node shuts down smoothly.
     */</comment>
    <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Report BARRIER
 */</comment>
<function><type><name>int</name></type>
<name>ReportBarrierGTM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>barrier_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gtm_backup_barrier</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator><call><name>report_barrier</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>barrier_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ReportGlobalXmin</name><parameter_list>(<parameter><decl><type><name>GlobalTransactionId</name></type> <name>gxid</name></decl></parameter>, <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>global_xmin</name></decl></parameter>,
        <parameter><decl><type><name>GlobalTransactionId</name> <modifier>*</modifier></type><name>latest_completed_xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>errcode</name> <init>= <expr><name>GTM_ERRCODE_UNKNOWN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>report_global_xmin</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>PGXCNodeName</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then>  <expr><name>GTM_NODE_COORDINATOR</name></expr> </then><else>: <expr><name>GTM_NODE_DATANODE</name></expr></else></ternary></expr></argument>,
            <argument><expr><name>gxid</name></expr></argument>, <argument><expr><name>global_xmin</name></expr></argument>, <argument><expr><name>latest_completed_xid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>errcode</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> 
<name>CleanGTMSeq</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>coordName</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>PGXCNodeName</name></expr> </then><else>: <expr><name>GetMyCoordName</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>coordPid</name> <init>= <expr><ternary><condition><expr><name>IS_PGXC_COORDINATOR</name></expr> ?</condition><then> <expr><name>MyProcPid</name></expr> </then><else>: <expr><name>MyCoordPid</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>        <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>clean_session_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>coordName</name></expr></argument>, <argument><expr><name>coordPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* retry once */</comment>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>GTM_RESULT_COMM_ERROR</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CloseGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitGTM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>clean_session_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>coordName</name></expr></argument>, <argument><expr><name>coordPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>GTM_RESULT_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>GTMPQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ResetGtmInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>GtmHost</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>GtmHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>GtmHost</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>GtmPort</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>CheckGTMConnection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Rename the sequence
 */</comment>
<function><type><name>int</name></type>
<name>RenameDBSequenceGTM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>seqname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newseqname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GTM_SequenceKeyData</name></type> <name>seqkey</name></decl>, <decl><type ref="prev"/><name>newseqkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>seqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>seqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>seqname</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_keylen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>newseqname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newseqkey</name><operator>.</operator><name>gsk_key</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>newseqname</name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>conn</name></expr> ?</condition><then> <expr><call><name>rename_db_sequence</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seqkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newseqkey</name></expr></argument>,
            <argument><expr><call><name>GetTopTransactionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
