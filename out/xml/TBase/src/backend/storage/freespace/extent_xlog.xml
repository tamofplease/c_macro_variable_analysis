<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/storage/freespace/extent_xlog.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * extent_xlog.c
 *      routines to search and manipulate one FSM page.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/backend/storage/freespace/fsmpage.c
 *
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogreader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/bitmapset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/block.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/extentmapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/extent_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relcryptmap.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_xlog_apply_record</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_xlog_apply_truncate</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_xlog_apply_common</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_seteob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_extendeob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_seteme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_extendeme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_initeme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_cleaneme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_setesa</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_trunceob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_cleaneob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_truncema</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_cleanema</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extend_heap</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl></parameter>, <parameter><decl><type><name>xl_extent_seteme</name> <modifier>*</modifier></type><name>xlogrec</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>extent_xlog_frag_ele</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type>        <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EmaPageType</name></type>    <name>page_type</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type>    (<modifier>*</modifier><name>redo_fn</name>)<parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>    (<modifier>*</modifier><name>desc_fn</name>)<parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type><name>extent_xlog_frag_ele</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>extent_xlog_frag_ele</name></type> <name><name>e_redomgr</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>EmaPageType_NONE</name></expr>,<expr><name>NULL</name></expr>,<expr><name>NULL</name></expr>}</block></expr>,    <comment type="block">/* 0 is not used */</comment>
    <expr><block>{<expr><name>SizeOfSetEOB</name></expr>, <expr><name>EmaPageType_EOB</name></expr>, <expr><name>extent_redo_seteob</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfExtendEOB</name></expr>, <expr><name>EmaPageType_EOB</name></expr>, <expr><name>extent_redo_extendeob</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfSetEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>extent_redo_seteme</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfExtendEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>extent_redo_extendeme</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfInitEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>extent_redo_initeme</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfCleanEME</name></expr>, <expr><name>EmaPageType_EMA</name></expr>, <expr><name>extent_redo_cleaneme</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfSetESA</name></expr>, <expr><name>EmaPageType_ESA</name></expr>, <expr><name>extent_redo_setesa</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfTruncateExtentSeg</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfTruncEOB</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>extent_redo_trunceob</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfCleanEOB</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>extent_redo_cleaneob</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfTruncEMA</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>extent_redo_truncema</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>SizeOfCleanEMA</name></expr>, <expr><name>EmaPageType_NONE</name></expr>, <expr><name>extent_redo_cleanema</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>extent_redo</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>uint8</name></type>        <name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <name>XLOG_EXTENT_OPMASK</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>XLOG_EXTENT_NEW_EXTENT</name></expr>:</case>
        <case>case <expr><name>XLOG_EXTENT_UPDATE_EME</name></expr>:</case>
        <case>case <expr><name>XLOG_EXTENT_APPEND_EXTENT</name></expr>:</case>    
        <case>case <expr><name>XLOG_EXTENT_ATTACH_EXTENT</name></expr>:</case>    
        <case>case <expr><name>XLOG_EXTENT_DETACH_EXTENT</name></expr>:</case>    
        <case>case <expr><name>XLOG_EXTENT_MAKE_FULL</name></expr>:</case>        
        <case>case <expr><name>XLOG_EXTENT_MAKE_AVAIL</name></expr>:</case>
        <case>case <expr><name>XLOG_EXTENT_FREE_DISK</name></expr>:</case>
        <case>case <expr><name>XLOG_EXTENT_EXTEND</name></expr>:</case>
            <expr_stmt><expr><call><name>extent_xlog_apply_record</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_EXTENT_TRUNCATE</name></expr>:</case>
            <expr_stmt><expr><call><name>extent_xlog_apply_truncate</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>XLOG_EXTENT_COMMON</name></expr>:</case>
            <expr_stmt><expr><call><name>extent_xlog_apply_common</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <default>default:</default>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXLEN_XLOG_RECORD</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>extent_xlog_apply_record</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>block_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Buffer</name>    <modifier>*</modifier></type><name>bufs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>xlog_buf</name><index>[<expr><name>MAXLEN_XLOG_RECORD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DecodedBkpBlock</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>bufs</name> <operator>=</operator> <operator>(</operator><name>Buffer</name> <operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>record</name><operator>-&gt;</operator><name>max_block_id</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * lock buffer
     */</comment>
    <for>for<control>(<init><expr><name>block_idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block_idx</name> <operator>&lt;=</operator> <name><name>record</name><operator>-&gt;</operator><name>max_block_id</name></name></expr>;</condition> <incr><expr><name>block_idx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>blk</name><operator>-&gt;</operator><name>in_use</name></name> <operator>||</operator> <operator>!</operator><name><name>blk</name><operator>-&gt;</operator><name>has_data</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>=</operator> <name>InvalidBuffer</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>blk</name><operator>-&gt;</operator><name>rnode</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rnode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//XLogReadBufferForRedoExtended(record, block_idx, RBM_ZERO_AND_LOCK, false, &amp;bufs[block_idx]);</comment>
        <comment type="line">//bufs[block_idx] = XLogReadBufferExtended(rnode, EXTENT_FORKNUM, blk-&gt;blkno, RBM_NORMAL);</comment>
        <expr_stmt><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name> <operator>=</operator> <call><name>extent_readbuffer_for_redo</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if<condition>(<expr><call><name>BufferIsInvalid</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"read extent page error when redo extent xlog.rel:%d/%d/%d, blkno:%d"</literal></expr></argument>,
                            <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>PageIsNew</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>EmaPageType</name></type> <name>pagetype</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>         <name>max_eles</name></decl>;</decl_stmt>

            <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&lt;</operator> <name>ESAPAGE_OFFSET</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>pagetype</name> <operator>=</operator> <name>EmaPageType_EOB</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max_eles</name> <operator>=</operator> <name>EOBS_PER_PAGE</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>==</operator> <name>ESAPAGE_OFFSET</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>pagetype</name> <operator>=</operator> <name>EmaPageType_EOB</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max_eles</name> <operator>=</operator> <name>MAX_EXTENTS</name> <operator>%</operator> <name>EOBS_PER_PAGE</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&lt;</operator> <name>EMAPAGE_OFFSET</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>pagetype</name> <operator>=</operator> <name>EmaPageType_ESA</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max_eles</name> <operator>=</operator> <name>ESAS_PER_PAGE</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>==</operator> <name>EMAPAGE_OFFSET</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>pagetype</name> <operator>=</operator> <name>EmaPageType_ESA</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max_eles</name> <operator>=</operator> <name>MAX_EXTENTS</name> <operator>%</operator> <name>ESAS_PER_PAGE</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&lt;</operator> <name>EMA_FORK_BLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>pagetype</name> <operator>=</operator> <name>EmaPageType_EMA</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max_eles</name> <operator>=</operator> <name>EMES_PER_PAGE</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>==</operator> <name>EMA_FORK_BLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>pagetype</name> <operator>=</operator> <name>EmaPageType_EMA</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max_eles</name> <operator>=</operator> <name>MAX_EXTENTS</name> <operator>%</operator> <name>EMES_PER_PAGE</name></expr>;</expr_stmt>
            </block_content>}</block></if>    
            <else>else <comment type="block">/*(blkno &gt;= EMA_FORK_BLOCKS) */</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"blocknumber too larger"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"ema page number cannot be greater than %d"</literal></expr></argument>,
                                       <argument><expr><name>EMA_FORK_BLOCKS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
    
            <expr_stmt><expr><call><name>PageInit_shard</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>InvalidShardID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch>switch<condition>(<expr><name>pagetype</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>EmaPageType_EOB</name></expr>:</case>
                    <expr_stmt><expr><call><name>eob_init_page</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_eles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>EmaPageType_ESA</name></expr>:</case>
                    <expr_stmt><expr><call><name>esa_init_page</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_eles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>EmaPageType_EMA</name></expr>:</case>
                    <expr_stmt><expr><call><name>ema_init_page</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_eles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"page type %d is not supported."</literal></expr></argument>, <argument><expr><name>pagetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>START_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * redo record
     */</comment>
    <for>for<control>(<init><expr><name>block_idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block_idx</name> <operator>&lt;=</operator> <name><name>record</name><operator>-&gt;</operator><name>max_block_id</name></name></expr>;</condition> <incr><expr><name>block_idx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <comment type="block">/* read record */</comment>
        <decl_stmt><decl><type><name>DecodedBkpBlock</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xlog_cursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Page</name></type> <name>pg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>blk</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>blk</name><operator>-&gt;</operator><name>has_data</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>forknum</name></name> <operator>!=</operator> <name>EXTENT_FORKNUM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"forknum %d is not extent fork."</literal></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>forknum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name>pg</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>xlog_cursor</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

        <while>while<condition>(<expr><name>xlog_cursor</name> <operator>-</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name> <operator>&lt;</operator> <name><name>blk</name><operator>-&gt;</operator><name>data_len</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int8</name></type>     <name>xlogtag</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type>    <name>pgtype_invalid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xlogtag</name></expr></argument>, <argument><expr><name>xlog_cursor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <switch>switch<condition>(<expr><name>xlogtag</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>FragTag_EXTENT_XLOG_SETEOB</name></expr>:</case>
                <case>case <expr><name>FragTag_EXTENT_XLOG_EXTENDEOB</name></expr>:</case>
                <case>case <expr><name>FragTag_EXTENT_XLOG_SETEME</name></expr>:</case>
                <case>case <expr><name>FragTag_EXTENT_XLOG_EXTENDEME</name></expr>:</case>
                <case>case <expr><name>FragTag_EXTENT_XLOG_INITEME</name></expr>:</case>
                <case>case <expr><name>FragTag_EXTENT_XLOG_CLEANEME</name></expr>:</case>
                <case>case <expr><name>FragTag_EXTENT_XLOG_SETESA</name></expr>:</case>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized extent xlog:%d"</literal></expr></argument>, <argument><expr><name>xlogtag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>

            <comment type="line">//xlog_buf = palloc(e_redomgr[xlogtag].size);</comment>
            <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>xlog_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXLEN_XLOG_RECORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xlog_buf</name></expr></argument>, <argument><expr><name>xlog_cursor</name></expr></argument>, <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xlog_cursor</name> <operator>+=</operator> <name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>(<expr><name>xlog_cursor</name> <operator>-</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name> <operator>&gt;</operator> <name><name>blk</name><operator>-&gt;</operator><name>data_len</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"extent xlog is invalid. %d bytes is expected, but only %d bytes remained."</literal></expr></argument>,
                            <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator><operator>(</operator><name>xlog_cursor</name> <operator>-</operator> <name><name>blk</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>blk</name><operator>-&gt;</operator><name>data_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/*
             * validate page type
             */</comment>
            <switch>switch<condition>(<expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>page_type</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>EmaPageType_EOB</name></expr>:</case>
                    <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&gt;=</operator> <name>ESAPAGE_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>pgtype_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>EmaPageType_ESA</name></expr>:</case>
                    <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&lt;</operator> <name>ESAPAGE_OFFSET</name> <operator>||</operator> <name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&gt;=</operator> <name>EMAPAGE_OFFSET</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>pgtype_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>EmaPageType_EMA</name></expr>:</case>
                    <if_stmt><if>if<condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name> <operator>&gt;=</operator> <name>EMA_FORK_BLOCKS</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>pgtype_invalid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <break>break;</break>
            </block_content>}</block></switch>
            <if_stmt><if>if<condition>(<expr><name>pgtype_invalid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"extent xlog is applied to a wrong extent page. "</literal>
                            <literal type="string">"extent xlogtype:%d, block number:%d"</literal></expr></argument>,
                            <argument><expr><name>xlogtag</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* redo xlog */</comment>
            <expr_stmt><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><call><name>redo_fn</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name>xlog_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>

    <comment type="block">/*
     * release resource
     */</comment>

    <for>for<control>(<init><expr><name>block_idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>block_idx</name> <operator>&lt;=</operator> <name><name>record</name><operator>-&gt;</operator><name>max_block_id</name></name></expr>;</condition> <incr><expr><name>block_idx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>        
        <if_stmt><if>if<condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>UnlockReleaseBuffer</name><argument_list>(<argument><expr><name><name>bufs</name><index>[<expr><name>block_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>END_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extent_xlog_apply_truncate</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_truncate</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_extent_truncate</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMgrRelation</name></type> <name>reln</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>reln</name> <operator>=</operator> <call><name>smgropen</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smgrdounlinkfork</name><argument_list>(<argument><expr><name>reln</name></expr></argument>, <argument><expr><name>EXTENT_FORKNUM</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MLS_</name></cpp:ifdef>
	<comment type="block">/*
     * clean up the rnode infomation in rel crypt hash table
     */</comment>
	<expr_stmt><expr><call><name>remove_rel_crypt_hash_elem</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>reln</name><operator>-&gt;</operator><name>smgr_relcrypt</name></name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>smgrclose</name><argument_list>(<argument><expr><name>reln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>extent_xlog_apply_common</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8</name></type> <name>xlogtag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>xlog_buf</name><index>[<expr><name>MAXLEN_XLOG_RECORD</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xlog_cursor</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>XLogRecGetDataLen</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>xlog_cursor</name> <operator>-</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xlogtag</name></expr></argument>, <argument><expr><name>xlog_cursor</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xlogtag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>(<expr><name>xlog_cursor</name> <operator>+</operator> <name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>-</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid xlog record length for extent common: logtag: %d, wanted %d, get %ld."</literal></expr></argument>,
                    <argument><expr><name>xlogtag</name></expr></argument>,
                    <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>,
                    <argument><expr><name>len</name> <operator>-</operator> <operator>(</operator><name>xlog_cursor</name> <operator>-</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>xlog_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xlog_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xlog_buf</name></expr></argument>, <argument><expr><name>xlog_cursor</name></expr></argument>, <argument><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xlog_cursor</name> <operator>+=</operator> <name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>e_redomgr</name><index>[<expr><name>xlogtag</name></expr>]</index></name><operator>.</operator><call><name>redo_fn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xlog_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_seteob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>EOBPage</name></type> <name>eob_pg</name> <init>= <expr><operator>(</operator><name>EOBPage</name><operator>)</operator><call><name>PageGetContents</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>xl_extent_seteob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_seteob</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>eob_page_mark_extent</name><argument_list>(<argument><expr><name>eob_pg</name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_extendeob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EOBPage</name></type> <name>eob_pg</name> <init>= <expr><operator>(</operator><name>EOBPage</name><operator>)</operator><call><name>PageGetContents</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>xl_extent_extendeob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_extendeob</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXTEND_EOB_FLAGS_SETFREE</name></expr>)</condition>
    <block>{<block_content>
        <for>for<control>(<init><expr><name>bits</name> <operator>=</operator> <name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_start</name></name></expr>;</init> <condition><expr><name>bits</name> <operator>&lt;=</operator> <name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_end</name></name></expr>;</condition> <incr><expr><name>bits</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>bms_add_member</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eob_pg</name><operator>-&gt;</operator><name>eob_bits</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>eob_pg</name><operator>-&gt;</operator><name>n_bits</name></name> <operator>=</operator> <name><name>xlogrec</name><operator>-&gt;</operator><name>n_eobs</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_seteme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_seteme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_seteme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ema_page_set_eme</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_EXTENDHEAP</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>extend_heap</name><argument_list>(<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name>xlogrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_extendeme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_extendeme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_extendeme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>xlogrec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EXTEND_EME_FLAGS_SETFREE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ema_page_extend_eme</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>n_emes</name></name></expr></argument>, 
                            <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_start</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setfree_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ema_page_extend_eme</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>n_emes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_initeme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_initeme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_initeme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ema_page_init_eme</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>,<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>shardid</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>freespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_cleaneme</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_cleaneme</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_cleaneme</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ema_page_free_eme</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_setesa</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_setesa</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_setesa</name> <operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>esa_page_set_anchor</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><operator>(</operator><name>int32</name><operator>)</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name></expr></argument>,
                <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>scan_head</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>scan_tail</name></name></expr></argument>,
                <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>alloc_head</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>anchor</name><operator>.</operator><name>alloc_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_trunceob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_trunceob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_trunceob</name><operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Buffer</name></type> <name>buf</name> <init>= <expr><call><name>XLogReadBufferExtended</name><argument_list>(<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, 
                            <argument><expr><name>EXTENT_FORKNUM</name></expr></argument>,
                            <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>,
                            <argument><expr><name>RBM_NORMAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>BufferIsInvalid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"truncate eobpage: read pageno %d of extent in relation %d/%d failed."</literal></expr></argument>,
                <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>eob_truncate_page</name><argument_list>(<argument><expr><call><name>BufferGetEOBPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_cleaneob</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_cleaneob</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_cleaneob</name><operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Buffer</name></type> <name>buf</name> <init>= <expr><call><name>XLogReadBufferExtended</name><argument_list>(<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, 
                            <argument><expr><name>EXTENT_FORKNUM</name></expr></argument>,
                            <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>,
                            <argument><expr><name>RBM_NORMAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>BufferIsInvalid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"clean eobpage: read pageno %d of extent in relation %d/%d failed."</literal></expr></argument>,
                <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>eob_clean_page</name><argument_list>(<argument><expr><call><name>BufferGetEOBPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_truncema</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_truncema</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_truncema</name><operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Buffer</name></type> <name>buf</name> <init>= <expr><call><name>XLogReadBufferExtended</name><argument_list>(<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, 
                            <argument><expr><name>EXTENT_FORKNUM</name></expr></argument>,
                            <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>,
                            <argument><expr><name>RBM_NORMAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>BufferIsInvalid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"truncate emapage: read pageno %d of extent in relation %d/%d failed."</literal></expr></argument>,
                <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ema_truncate_page</name><argument_list>(<argument><expr><call><name>BufferGetEMAPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extent_redo_cleanema</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>xl_extent_cleanema</name> <modifier>*</modifier></type><name>xlogrec</name> <init>= <expr><operator>(</operator><name>xl_extent_cleanema</name><operator>*</operator><operator>)</operator><name>record</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Buffer</name></type> <name>buf</name> <init>= <expr><call><name>XLogReadBufferExtended</name><argument_list>(<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, 
                            <argument><expr><name>EXTENT_FORKNUM</name></expr></argument>,
                            <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>,
                            <argument><expr><name>RBM_NORMAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>BufferIsInvalid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"clean emapage: read pageno %d of extent in relation %d/%d failed."</literal></expr></argument>,
                <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ema_clean_page</name><argument_list>(<argument><expr><call><name>BufferGetEMAPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extend_heap</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name></type> <name>rnode</name></decl></parameter>, <parameter><decl><type><name>xl_extent_seteme</name> <modifier>*</modifier></type><name>xlogrec</name></decl></parameter>)</parameter_list>
<block>{<block_content>    
    <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_EXTENDHEAP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ExtentIdIsValid</name><argument_list>(<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>extentid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, 
            <argument><expr><literal type="string">"xlog is invalid. [xl_extent_seteme] has flag to extend heap, but extentid %d is invalid."</literal></expr></argument>,
            <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>extentid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>xlogrec</name><operator>-&gt;</operator><name>setflag</name></name> <operator>&amp;</operator> <name>EMA_SETFLAG_SHARDID</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>ShardIDIsValid</name><argument_list>(<argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>shardid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
            <argument><expr><literal type="string">"xlog is invalid. [xl_extent_seteme] has flag to extend heap, but shardid invalid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RelationExtendHeapForRedo</name><argument_list>(<argument><expr><name>rnode</name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>extentid</name></name></expr></argument>, <argument><expr><name><name>xlogrec</name><operator>-&gt;</operator><name>eme</name><operator>.</operator><name>shardid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


</unit>
