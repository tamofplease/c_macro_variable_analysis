<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/storage/file/buffile.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * buffile.c
 *      Management of large buffered files, primarily temporary files.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/backend/storage/file/buffile.c
 *
 * NOTES:
 *
 * BufFiles provide a very incomplete emulation of stdio atop virtual Files
 * (as managed by fd.c).  Currently, we only support the buffered-I/O
 * aspect of stdio: a read or write of the low-level File occurs only
 * when the buffer is filled or emptied.  This is an even bigger win
 * for virtual Files than for ordinary kernel files, since reducing the
 * frequency with which a virtual File is touched reduces "thrashing"
 * of opening/closing file descriptors.
 *
 * Note that BufFile structs are allocated with palloc(), and therefore
 * will go away automatically at transaction end.  If the underlying
 * virtual File is made with OpenTemporaryFile, then all resources for
 * the file are certain to be cleaned up even if processing is aborted
 * by ereport(ERROR).  The data structures required are made in the
 * palloc context that was current when the BufFile was created, and
 * any external resources such as temp files are owned by the ResourceOwner
 * that was current at that time.
 *
 * BufFile also supports temporary files that exceed the OS file size limit
 * (by opening multiple fd.c temporary files).  This is an essential feature
 * for sorts and hashjoins on large amounts of data.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buffile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We break BufFiles into gigabyte-sized segments, regardless of RELSEG_SIZE.
 * The reason is that we'd like large temporary BufFiles to be spread across
 * multiple tablespaces when available.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PHYSICAL_FILESIZE</name></cpp:macro>    <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFILE_SEG_SIZE</name></cpp:macro>        <cpp:value>(MAX_PHYSICAL_FILESIZE / BLCKSZ)</cpp:value></cpp:define>

<comment type="block">/*
 * This data structure represents a buffered file that consists of one or
 * more physical files (each accessed through a virtual file descriptor
 * managed by fd.c).
 */</comment>
<struct>struct <name>BufFile</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type>            <name>numFiles</name></decl>;</decl_stmt>        <comment type="block">/* number of physical files in set */</comment>
    <comment type="block">/* all files except the last have length exactly MAX_PHYSICAL_FILESIZE */</comment>
    <decl_stmt><decl><type><name>File</name>       <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>            <comment type="block">/* palloc'd array with numFiles entries */</comment>
    <decl_stmt><decl><type><name>off_t</name>       <modifier>*</modifier></type><name>offsets</name></decl>;</decl_stmt>        <comment type="block">/* palloc'd array with numFiles entries */</comment>

    <comment type="block">/*
     * offsets[i] is the current seek position of files[i].  We use this to
     * avoid making redundant FileSeek calls.
     */</comment>

    <decl_stmt><decl><type><name>bool</name></type>        <name>isTemp</name></decl>;</decl_stmt>            <comment type="block">/* can only add files if this is TRUE */</comment>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isInterXact</name></decl>;</decl_stmt>    <comment type="block">/* keep open over transactions? */</comment>
    <decl_stmt><decl><type><name>bool</name></type>        <name>dirty</name></decl>;</decl_stmt>            <comment type="block">/* does buffer need to be written? */</comment>

    <comment type="block">/*
     * resowner is the ResourceOwner to use for underlying temp files.  (We
     * don't need to remember the memory context we're using explicitly,
     * because after creation we only repalloc our arrays larger.)
     */</comment>
    <decl_stmt><decl><type><name>ResourceOwner</name></type> <name>resowner</name></decl>;</decl_stmt>

    <comment type="block">/*
     * "current pos" is position of start of buffer within the logical file.
     * Position as seen by user of BufFile is (curFile, curOffset + pos).
     */</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>curFile</name></decl>;</decl_stmt>        <comment type="block">/* file index (0..n) part of current pos */</comment>
    <decl_stmt><decl><type><name>off_t</name></type>        <name>curOffset</name></decl>;</decl_stmt>        <comment type="block">/* offset part of current pos */</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>pos</name></decl>;</decl_stmt>            <comment type="block">/* next read/write position in buffer */</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>nbytes</name></decl>;</decl_stmt>            <comment type="block">/* total # of valid bytes in buffer */</comment>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>buffer</name><index>[<expr><name>BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>BufFile</name> <modifier>*</modifier></type><name>makeBufFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>firstfile</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extendBufFile</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufFileLoadBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufFileDumpBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>BufFileFlush</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Create a BufFile given the first underlying physical file.
 * NOTE: caller must set isTemp and isInterXact if appropriate.
 */</comment>
<function><type><specifier>static</specifier> <name>BufFile</name> <modifier>*</modifier></type>
<name>makeBufFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>firstfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BufFile</name>    <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator><name>BufFile</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>firstfile</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>resowner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add another component temp file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>extendBufFile</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type>        <name>pfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ResourceOwner</name></type> <name>oldowner</name></decl>;</decl_stmt>

    <comment type="block">/* Be sure to associate the file with the BufFile's resource owner */</comment>
    <expr_stmt><expr><name>oldowner</name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>resowner</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>OpenTemporaryFile</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pfile</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name>oldowner</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name></expr></argument>,
                                    <argument><expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name></expr></argument>,
                                       <argument><expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>]</index></name> <operator>=</operator> <name>pfile</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a BufFile for a new temporary file (which will expand to become
 * multiple temporary files if more than MAX_PHYSICAL_FILESIZE bytes are
 * written to it).
 *
 * If interXact is true, the temp file will not be automatically deleted
 * at end of transaction.
 *
 * Note: if interXact is true, the caller had better be calling us in a
 * memory context, and with a resource owner, that will survive across
 * transaction boundaries.
 */</comment>
<function><type><name>BufFile</name> <modifier>*</modifier></type>
<name>BufFileCreateTemp</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>interXact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BufFile</name>    <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type>        <name>pfile</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>OpenTemporaryFile</name><argument_list>(<argument><expr><name>interXact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pfile</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>makeBufFile</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name> <operator>=</operator> <name>interXact</name></expr>;</expr_stmt>

    <return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
<comment type="block">/*
 * Create a BufFile and attach it to an already-opened virtual File.
 *
 * This is comparable to fdopen() in stdio.  This is the only way at present
 * to attach a BufFile to a non-temporary file.  Note that BufFiles created
 * in this way CANNOT be expanded into multiple files.
 */</comment>
<function><type><name>BufFile</name> <modifier>*</modifier></type>
<name>BufFileCreate</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>makeBufFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Close a BufFile
 *
 * Like fclose(), this also implicitly FileCloses the underlying File.
 */</comment>
<function><type><name>void</name></type>
<name>BufFileClose</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* flush any unwritten data */</comment>
    <expr_stmt><expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* close the underlying file(s) (with delete if it's a temp file) */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <comment type="block">/* release the buffer space */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileLoadBuffer
 *
 * Load some data into buffer, if possible, starting from curOffset.
 * At call, must have dirty = false, pos and nbytes = 0.
 * On exit, nbytes is number of bytes loaded.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileLoadBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>File</name></type>        <name>thisfile</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Advance to next component file if necessary and possible.
     *
     * This path can only be taken if there is more than one component, so it
     * won't interfere with reading a non-temp file that is over
     * MAX_PHYSICAL_FILESIZE.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&gt;=</operator> <name>MAX_PHYSICAL_FILESIZE</name> <operator>&amp;&amp;</operator>
        <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * May need to reposition physical file.
     */</comment>
    <expr_stmt><expr><name>thisfile</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>FileSeek</name><argument_list>(<argument><expr><name>thisfile</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>                <comment type="block">/* seek failed, read nothing */</comment>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Read whatever we can get, up to a full bufferload.
     */</comment>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <call><name>FileRead</name><argument_list>(<argument><expr><name>thisfile</name></expr></argument>,
                            <argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                            <argument><expr><name>WAIT_EVENT_BUFFILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>;</expr_stmt>
    <comment type="block">/* we choose not to advance curOffset here */</comment>

    <expr_stmt><expr><name><name>pgBufferUsage</name><operator>.</operator><name>temp_blks_read</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileDumpBuffer
 *
 * Dump buffer contents starting at curOffset.
 * At call, should have dirty = true, nbytes &gt; 0.
 * On exit, dirty is cleared if successful write, and curOffset is advanced.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileDumpBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>wpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>bytestowrite</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type>        <name>thisfile</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Unlike BufFileLoadBuffer, we must dump the whole buffer even if it
     * crosses a component-file boundary; so we need a loop.
     */</comment>
    <while>while <condition>(<expr><name>wpos</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Advance to next component file if necessary and possible.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&gt;=</operator> <name>MAX_PHYSICAL_FILESIZE</name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name></expr>)</condition>
        <block>{<block_content>
            <while>while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>extendBufFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Enforce per-file size limit only for temp files, else just try to
         * write as much as asked...
         */</comment>
        <expr_stmt><expr><name>bytestowrite</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>-</operator> <name>wpos</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>off_t</name></type>        <name>availbytes</name> <init>= <expr><name>MAX_PHYSICAL_FILESIZE</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>off_t</name><operator>)</operator> <name>bytestowrite</name> <operator>&gt;</operator> <name>availbytes</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>bytestowrite</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>availbytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * May need to reposition physical file.
         */</comment>
        <expr_stmt><expr><name>thisfile</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>FileSeek</name><argument_list>(<argument><expr><name>thisfile</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>            <comment type="block">/* seek failed, give up */</comment>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>bytestowrite</name> <operator>=</operator> <call><name>FileWrite</name><argument_list>(<argument><expr><name>thisfile</name></expr></argument>,
                                 <argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>wpos</name></expr></argument>,
                                 <argument><expr><name>bytestowrite</name></expr></argument>,
                                 <argument><expr><name>WAIT_EVENT_BUFFILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bytestowrite</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>                <comment type="block">/* failed to write */</comment>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name> <operator>+=</operator> <name>bytestowrite</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name>bytestowrite</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>wpos</name> <operator>+=</operator> <name>bytestowrite</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pgBufferUsage</name><operator>.</operator><name>temp_blks_written</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="block">/*
     * At this point, curOffset has been advanced to the end of the buffer,
     * ie, its original value + nbytes.  We need to make it point to the
     * logical file position, ie, original value + pos, in case that is less
     * (as could happen due to a small backwards seek in a dirty buffer!)
     */</comment>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>-=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>    <comment type="block">/* handle possible segment crossing */</comment>
    <block>{<block_content>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Now we can set the buffer empty without changing the logical position
     */</comment>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileRead
 *
 * Like fread() except we assume 1-byte element size.
 */</comment>
<function><type><name>size_t</name></type>
<name>BufFileRead</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>nthistime</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>            <comment type="block">/* could not flush... */</comment>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Try to load more data into buffer. */</comment>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BufFileLoadBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>            <comment type="block">/* no more data available */</comment>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nthistime</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nthistime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>nthistime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name> <operator>+</operator> <name>nthistime</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nthistime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileWrite
 *
 * Like fwrite() except we assume 1-byte element size.
 */</comment>
<function><type><name>size_t</name></type>
<name>BufFileWrite</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>nthistime</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>BLCKSZ</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Buffer full, dump it out */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BufFileDumpBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>        <comment type="block">/* I/O error */</comment>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Hmm, went directly from reading to writing? */</comment>
                <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name>BLCKSZ</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nthistime</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nthistime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nthistime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name> <operator>+</operator> <name>nthistime</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nthistime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileFlush
 *
 * Like fflush()
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BufFileFlush</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BufFileDumpBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileSeek
 *
 * Like fseek(), except that target position needs two values in order to
 * work when logical filesize exceeds maximum value representable by long.
 * We do not support relative seeks across more than LONG_MAX, however.
 *
 * Result is 0 if OK, EOF if not.  Logical position is not moved if an
 * impossible seek is attempted.
 */</comment>
<function><type><name>int</name></type>
<name>BufFileSeek</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileno</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>newFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type>        <name>newOffset</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>whence</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>SEEK_SET</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>fileno</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>newFile</name> <operator>=</operator> <name>fileno</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>newOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SEEK_CUR</name></expr>:</case>

            <comment type="block">/*
             * Relative seek considers only the signed offset, ignoring
             * fileno. Note that large offsets (&gt; 1 gig) risk overflow in this
             * add, unless we have 64-bit off_t.
             */</comment>
            <expr_stmt><expr><name>newFile</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>newOffset</name> <operator>=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
            <break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
        <case>case <expr><name>SEEK_END</name></expr>:</case>
            <comment type="block">/* could be implemented, not needed currently */</comment>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid whence: %d"</literal></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EOF</name></expr>;</return>
    </block_content>}</block></switch>
    <while>while <condition>(<expr><name>newOffset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>--</operator><name>newFile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>newOffset</name> <operator>+=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>newFile</name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>&amp;&amp;</operator>
        <name>newOffset</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&amp;&amp;</operator>
        <name>newOffset</name> <operator>&lt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Seek is to a point within existing buffer; we can just adjust
         * pos-within-buffer, without flushing buffer.  Note this is OK
         * whether reading or writing, but buffer remains dirty if we were
         * writing.
         */</comment>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>newOffset</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Otherwise, must reposition buffer, so flush any dirty data */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * At this point and no sooner, check for seek past last segment. The
     * above flush could have created a new segment, so checking sooner would
     * not work (at least not with this code).
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* convert seek to "start of next seg" to "end of last seg" */</comment>
        <if_stmt><if>if <condition>(<expr><name>newFile</name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>&amp;&amp;</operator> <name>newOffset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>newFile</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>newOffset</name> <operator>=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><name>newOffset</name> <operator>&gt;</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>newFile</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>newOffset</name> <operator>-=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>newFile</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* Seek is OK! */</comment>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <name>newFile</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <name>newOffset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>BufFileTell</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fileno</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>fileno</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileSeekBlock --- block-oriented seek
 *
 * Performs absolute seek to the start of the n'th BLCKSZ-sized block of
 * the file.  Note that users of this interface will fail if their files
 * exceed BLCKSZ * LONG_MAX bytes, but that is quite a lot; we don't work
 * with tables bigger than that, either...
 *
 * Result is 0 if OK, EOF if not.  Logical position is not moved if an
 * impossible seek is attempted.
 */</comment>
<function><type><name>int</name></type>
<name>BufFileSeekBlock</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blknum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>BufFileSeek</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
                       <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>blknum</name> <operator>/</operator> <name>BUFFILE_SEG_SIZE</name><operator>)</operator></expr></argument>,
                       <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <operator>(</operator><name>blknum</name> <operator>%</operator> <name>BUFFILE_SEG_SIZE</name><operator>)</operator> <operator>*</operator> <name>BLCKSZ</name></expr></argument>,
                       <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
<comment type="block">/*
 * BufFileTellBlock --- block-oriented tell
 *
 * Any fractional part of a block in the current seek position is ignored.
 */</comment>
<function><type><name>long</name></type>
<name>BufFileTellBlock</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type>        <name>blknum</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>blknum</name> <operator>=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator> <operator>/</operator> <name>BLCKSZ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>blknum</name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>*</operator> <name>BUFFILE_SEG_SIZE</name></expr>;</expr_stmt>
    <return>return <expr><name>blknum</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><name>int</name></type>
<name>FlushBufFile</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>getBufFileName</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>fileIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>CreateBufFile</name><parameter_list>(<parameter><decl><type><name>dsa_area</name> <modifier>*</modifier></type><name>dsa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileNum</name></decl></parameter>, <parameter><decl><type><name>dsa_pointer</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>BufFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>fileptr</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>*</operator><name>fileptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>fileNum</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>fileName</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BufFile</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>=</operator> <name>fileNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>fileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>fileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>resowner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fileNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>dsa_get_address</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name><name>fileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>, 
                                              <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>,
                                              <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not open file \"%s\":%m for bufFile merging."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><operator>*</operator><name>fileptr</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>oldFileNum</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>+</operator> <name>fileNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name></expr></argument>,
                                <argument><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name> <operator>=</operator> <operator>(</operator><name>off_t</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name></expr></argument>,
                                           <argument><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fileNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>dsa_get_address</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name><name>fileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name> <operator>+</operator> <name>oldFileNum</name></expr>]</index></name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>, 
                                                           <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>,
                                                           <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name> <operator>+</operator> <name>oldFileNum</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not open file \"%s\":%m for bufFile merging."</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <name>oldFileNum</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type>
<name>NumFilesBufFile</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type>
<name>BufFileReadDone</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
    
    <if_stmt><if>if<condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>ReSetBufFile</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FileSeek</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MLS_</name></cpp:ifdef>
<function><type><name>BufFile</name> <modifier>*</modifier></type> <name>BufFileOpen</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileFlags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileMode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>interXact</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>      <name>i</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>      <name>fileNum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BufFile</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name>    <operator>=</operator> <name>fileNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name>       <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>fileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name></name>     <operator>=</operator> <operator>(</operator><name>off_t</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>fileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isTemp</name></name>      <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name> <operator>=</operator> <name>interXact</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name>       <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>resowner</name></name>    <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name>   <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fileNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>fileFlags</name></expr></argument>, <argument><expr><name>fileMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"could not open file \"%s\":%m for bufFile merging."</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
        
    <return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>
    
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
