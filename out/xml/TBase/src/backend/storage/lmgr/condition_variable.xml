<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/storage/lmgr/condition_variable.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * condition_variable.c
 *      Implementation of condition variables.  Condition variables provide
 *      a way for one process to wait until a specific condition occurs,
 *      without needing to know the specific identity of the process for
 *      which they are waiting.  Waits for condition variables can be
 *      interrupted, unlike LWLock waits.  Condition variables are safe
 *      to use within dynamic shared memory segments.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/storage/lmgr/condition_variable.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/condition_variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proclist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/* Initially, we are not prepared to sleep on any condition variable. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ConditionVariable</name> <modifier>*</modifier></type><name>cv_sleep_target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Reusable WaitEventSet. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>WaitEventSet</name> <modifier>*</modifier></type><name>cv_wait_event_set</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initialize a condition variable.
 */</comment>
<function><type><name>void</name></type>
<name>ConditionVariableInit</name><parameter_list>(<parameter><decl><type><name>ConditionVariable</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proclist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare to wait on a given condition variable.  This can optionally be
 * called before entering a test/sleep loop.  Alternatively, the call to
 * ConditionVariablePrepareToSleep can be omitted.  The only advantage of
 * calling ConditionVariablePrepareToSleep is that it avoids an initial
 * double-test of the user's predicate in the case that we need to wait.
 */</comment>
<function><type><name>void</name></type>
<name>ConditionVariablePrepareToSleep</name><parameter_list>(<parameter><decl><type><name>ConditionVariable</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>pgprocno</name> <init>= <expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * It's not legal to prepare a sleep until the previous sleep has been
     * completed or canceled.
     */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cv_sleep_target</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Record the condition variable on which we will sleep. */</comment>
    <expr_stmt><expr><name>cv_sleep_target</name> <operator>=</operator> <name>cv</name></expr>;</expr_stmt>

    <comment type="block">/* Create a reusable WaitEventSet. */</comment>
    <if_stmt><if>if <condition>(<expr><name>cv_wait_event_set</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cv_wait_event_set</name> <operator>=</operator> <call><name>CreateWaitEventSet</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddWaitEventToSet</name><argument_list>(<argument><expr><name>cv_wait_event_set</name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name></expr></argument>, <argument><expr><name>PGINVALID_SOCKET</name></expr></argument>,
                          <argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Reset my latch before adding myself to the queue and before entering
     * the caller's predicate loop.
     */</comment>
    <expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add myself to the wait queue. */</comment>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proclist_contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>, <argument><expr><name>pgprocno</name></expr></argument>, <argument><expr><name>cvWaitLink</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>proclist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>, <argument><expr><name>pgprocno</name></expr></argument>, <argument><expr><name>cvWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*--------------------------------------------------------------------------
 * Wait for the given condition variable to be signaled.  This should be
 * called in a predicate loop that tests for a specific exit condition and
 * otherwise sleeps, like so:
 *
 *     ConditionVariablePrepareToSleep(cv); [optional]
 *     while (condition for which we are waiting is not true)
 *         ConditionVariableSleep(cv, wait_event_info);
 *     ConditionVariableCancelSleep();
 *
 * Supply a value from one of the WaitEventXXX enums defined in pgstat.h to
 * control the contents of pg_stat_activity's wait_event_type and wait_event
 * columns while waiting.
 *-------------------------------------------------------------------------*/</comment>
<function><type><name>void</name></type>
<name>ConditionVariableSleep</name><parameter_list>(<parameter><decl><type><name>ConditionVariable</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>wait_event_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>WaitEvent</name></type>    <name>event</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * If the caller didn't prepare to sleep explicitly, then do so now and
     * return immediately.  The caller's predicate loop should immediately
     * call again if its exit condition is not yet met.  This initial spurious
     * return can be avoided by calling ConditionVariablePrepareToSleep(cv)
     * first.  Whether it's worth doing that depends on whether you expect the
     * condition to be met initially, in which case skipping the prepare
     * allows you to skip manipulation of the wait list, or not met initially,
     * in which case preparing first allows you to skip a spurious test of the
     * caller's exit condition.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>cv_sleep_target</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ConditionVariablePrepareToSleep</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Any earlier condition variable sleep must have been canceled. */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cv_sleep_target</name> <operator>==</operator> <name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Wait for latch to be set.  We don't care about the result because
         * our contract permits spurious returns.
         */</comment>
        <expr_stmt><expr><call><name>WaitEventSetWait</name><argument_list>(<argument><expr><name>cv_wait_event_set</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wait_event_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Reset latch before testing whether we can return. */</comment>
        <expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If this process has been taken out of the wait list, then we know
         * that is has been signaled by ConditionVariableSignal.  We put it
         * back into the wait list, so we don't miss any further signals while
         * the caller's loop checks its condition.  If it hasn't been taken
         * out of the wait list, then the latch must have been set by
         * something other than ConditionVariableSignal; though we don't
         * guarantee not to return spuriously, we'll avoid these obvious
         * cases.
         */</comment>
        <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proclist_contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>, <argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>, <argument><expr><name>cvWaitLink</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>proclist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>, <argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>, <argument><expr><name>cvWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Cancel any pending sleep operation.  We just need to remove ourselves
 * from the wait queue of any condition variable for which we have previously
 * prepared a sleep.
 */</comment>
<function><type><name>void</name></type>
<name>ConditionVariableCancelSleep</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ConditionVariable</name> <modifier>*</modifier></type><name>cv</name> <init>= <expr><name>cv_sleep_target</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>cv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>proclist_contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>, <argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>, <argument><expr><name>cvWaitLink</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>proclist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>, <argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>, <argument><expr><name>cvWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cv_sleep_target</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Wake up one sleeping process, assuming there is at least one.
 *
 * The return value indicates whether or not we woke somebody up.
 */</comment>
<function><type><name>bool</name></type>
<name>ConditionVariableSignal</name><parameter_list>(<parameter><decl><type><name>ConditionVariable</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PGPROC</name>       <modifier>*</modifier></type><name>proc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Remove the first process from the wakeup queue (if any). */</comment>
    <expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proclist_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>proclist_pop_head_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>wakeup</name></name></expr></argument>, <argument><expr><name>cvWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If we found someone sleeping, set their latch to wake them up. */</comment>
    <if_stmt><if>if <condition>(<expr><name>proc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* No sleeping processes. */</comment>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wake up all sleeping processes.
 *
 * The return value indicates the number of processes we woke.
 */</comment>
<function><type><name>int</name></type>
<name>ConditionVariableBroadcast</name><parameter_list>(<parameter><decl><type><name>ConditionVariable</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>nwoken</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Let's just do this the dumbest way possible.  We could try to dequeue
     * all the sleepers at once to save spinlock cycles, but it's a bit hard
     * to get that right in the face of possible sleep cancelations, and we
     * don't want to loop holding the mutex.
     */</comment>
    <while>while <condition>(<expr><call><name>ConditionVariableSignal</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>++</operator><name>nwoken</name></expr>;</expr_stmt></block_content></block></while>

    <return>return <expr><name>nwoken</name></expr>;</return>
</block_content>}</block></function>
</unit>
