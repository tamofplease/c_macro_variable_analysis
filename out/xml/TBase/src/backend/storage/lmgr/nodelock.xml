<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/storage/lmgr/nodelock.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeLock.c
 *     lock node to reject query
 *
 *
 *
 * IDENTIFICATION
 *      src/backend/storage/nodeLock.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/nodelock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>



<comment type="block">/*
  *    lock content : DML/SELECT only
  *   tables are locked for DML/SELECT in table
  *   shards are locked for DML/SELECT in shard
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TABLE_NUM</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SHARD_NUM</name></cpp:macro> <cpp:value>MAX_SHARDS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARD_BITMAP_SIZE</name></cpp:macro> \
    <cpp:value>(BITMAPSET_SIZE(WORDNUM(MAX_SHARDS) + 1))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>DMLLockContent</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nTables</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>table_locks</name><index>[<expr><name>MAX_TABLE_NUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name><name>table</name><index>[<expr><name>MAX_TABLE_NUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>nShards</name><index>[<expr><name>MAX_SHARDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>shard</name><index>[<expr><name>SHARD_BITMAP_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DMLLockContent</name>;</typedef>

<comment type="block">/*
  * flags to indicate which action is not permitted or All is not permitted
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name></cpp:macro>      <cpp:value>((1 &lt;&lt; CMD_NOTHING) - 1)</cpp:value></cpp:define>          <comment type="block">/* we can do nothing */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DDL</name></cpp:macro>      <cpp:value>(1 &lt;&lt; CMD_UTILITY)</cpp:value></cpp:define>          <comment type="block">/* can not do DDL, such create, drop */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE</name></cpp:macro>   <cpp:value>(1 &lt;&lt; CMD_UPDATE)</cpp:value></cpp:define>           <comment type="block">/* update is not permitted */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT</name></cpp:macro>   <cpp:value>(1 &lt;&lt; CMD_INSERT)</cpp:value></cpp:define>           <comment type="block">/* insert is not permitted */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELETE</name></cpp:macro>   <cpp:value>(1 &lt;&lt; CMD_DELETE)</cpp:value></cpp:define>           <comment type="block">/* delete is not permitted */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT</name></cpp:macro>   <cpp:value>(1 &lt;&lt; CMD_SELECT)</cpp:value></cpp:define>           <comment type="block">/* select is not permitted */</comment>

<comment type="block">/* event lock flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_EXTENSION_SOURCE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_EXTENSION_DEST</name></cpp:macro>   <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLD_HOT</name></cpp:macro>                 <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROMOTION</name></cpp:macro>                <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>event_message</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"storage extension source"</literal></expr>,
                                <expr><literal type="string">"storage extension dest"</literal></expr>,
                                <expr><literal type="string">"cold hot"</literal></expr>,
                                <expr><literal type="string">"promotion"</literal></expr>
                                }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HEAVY_LOCK</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_LIGHT_LOCK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>                    
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name></cpp:macro> <cpp:value>CMD_UPDATE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_TABLE</name></cpp:macro> <cpp:value>'T'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_SHARD</name></cpp:macro> <cpp:value>'S'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_EVENT</name></cpp:macro> <cpp:value>'E'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_NONE_OBJECT</name></cpp:macro>  <cpp:value>'N'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_REMOVE_TABLE</name></cpp:macro> <cpp:value>'R'</cpp:value></cpp:define>

<comment type="block">/* file to write node locks information */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>controlFile</name> <init>= <expr><literal type="string">"nodeLock.control"</literal></expr></init></decl>;</decl_stmt>


<comment type="block">/* lock data in share memory */</comment>
<typedef>typedef <type><struct>struct <name>NodeLockData</name>
<block>{
    <decl_stmt><decl><type><name>int16</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16</name></type> <name><name>nHeavyLocks</name><index>[<expr><name>CMD_NOTHING</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16</name></type> <name>eventLocks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16</name></type> <name>nEventLocks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DMLLockContent</name></type> <name><name>lock</name><index>[<expr><name>NUM_LIGHT_LOCK</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>NodeLockData</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>LockMessages</name><index>[<expr><name>NUM_LIGHT_LOCK</name></expr>]</index></name> <init>=    <expr><block>{<expr><literal type="string">"UPDATE"</literal></expr>,
                                                <expr><literal type="string">"INSERT"</literal></expr>,
                                                <expr><literal type="string">"DELETE"</literal></expr>,
                                                <expr><literal type="string">"SELECT"</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* hash search type */</comment>
<typedef>typedef <type><enum>enum <name>hashAction</name>
<block>{
    <decl><name>FIND</name></decl>,
    <decl><name>ENTER</name></decl>
}</block></enum></type>   <name>hashAction</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODELOCKSIZE</name></cpp:macro> <cpp:value>sizeof(NodeLockData)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>NodeLockData</name> <modifier>*</modifier></type><name>nodelock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>NodeLockData</name></type> <name>nodelock_Copy</name></decl>;</decl_stmt>

<function><type><name>Size</name></type> <name>NodeLockShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>NodeLockShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>shardbitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>nodelock</name> <operator>=</operator> <operator>(</operator><name>NodeLockData</name> <operator>*</operator><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Node Locks"</literal></expr></argument>,
                                             <argument><expr><name>NODELOCKSIZE</name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nodelock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* shard bitmap init */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_LIGHT_LOCK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>shardbitmap</name> <operator>=</operator> <operator>(</operator><name>Bitmapset</name> <operator>*</operator><operator>)</operator><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shard</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>shardbitmap</name> <operator>=</operator> <call><name>bms_make</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>shardbitmap</name></expr></argument>, <argument><expr><name>MAX_SHARD_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* write node locks information into file, we can recover from file if crash */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> 
<name>WriteNodeLockFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>BasicOpenFile</name><argument_list>(<argument><expr><name>controlFile</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>   
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not open control file \"%s\""</literal></expr></argument>, <argument><expr><name>controlFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>NODELOCKSIZE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not write into control file \"%s\""</literal></expr></argument>, <argument><expr><name>controlFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* block all ddls/dmls */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>SetHeavyLock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lockActions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIgnored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* loop to set lock actions. if all is specified, set action and return;
     *  else set every legal action
     */</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <switch>switch<condition>(<expr><name><name>lockActions</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'A'</literal></expr>:</case>
            <case>case <expr><literal type="char">'a'</literal></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ALL</name></expr>;</expr_stmt>
						<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_NOTHING -1]++;</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ALL</name></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_NOTHING -1]--;</comment>
							<comment type="line">//if (nodelock-&gt;nHeavyLocks[CMD_NOTHING -1] == 0)</comment>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ALL</name></expr>;</expr_stmt>
                            </block_content>}</block>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <return>return <expr><name>true</name></expr>;</return>
                </block_content>}</block>
            <case>case <expr><literal type="char">'S'</literal></expr>:</case>
            <case>case <expr><literal type="char">'s'</literal></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SELECT</name></expr>;</expr_stmt>
						<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_SELECT - 1]++;</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECT</name></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_SELECT - 1]--;</comment>
							<comment type="line">//if (nodelock-&gt;nHeavyLocks[CMD_SELECT - 1] == 0)</comment>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SELECT</name></expr>;</expr_stmt>
                            </block_content>}</block>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
            <case>case <expr><literal type="char">'U'</literal></expr>:</case>
            <case>case <expr><literal type="char">'u'</literal></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>UPDATE</name></expr>;</expr_stmt>
						<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_UPDATE - 1]++;</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UPDATE</name></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_UPDATE - 1]--;</comment>
							<comment type="line">//if (nodelock-&gt;nHeavyLocks[CMD_UPDATE - 1] == 0)</comment>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>UPDATE</name></expr>;</expr_stmt>
                            </block_content>}</block>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
            <case>case <expr><literal type="char">'I'</literal></expr>:</case>
            <case>case <expr><literal type="char">'i'</literal></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>INSERT</name></expr>;</expr_stmt>
						<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_INSERT - 1]++;</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_INSERT - 1]--;</comment>
							<comment type="line">//if (nodelock-&gt;nHeavyLocks[CMD_INSERT - 1] == 0)</comment>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>INSERT</name></expr>;</expr_stmt>
                            </block_content>}</block>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
            <case>case <expr><literal type="char">'D'</literal></expr>:</case>
            <case>case <expr><literal type="char">'d'</literal></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DELETE</name></expr>;</expr_stmt>
						<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_DELETE - 1]++;</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DELETE</name></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_DELETE - 1]--;</comment>
							<comment type="line">//if (nodelock-&gt;nHeavyLocks[CMD_DELETE - 1] == 0)</comment>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DELETE</name></expr>;</expr_stmt>
                            </block_content>}</block>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
            <case>case <expr><literal type="char">'C'</literal></expr>:</case>
            <case>case <expr><literal type="char">'c'</literal></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DDL</name></expr>;</expr_stmt>
						<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_UTILITY - 1]++;</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DDL</name></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//nodelock-&gt;nHeavyLocks[CMD_UTILITY - 1]--;</comment>
							<comment type="line">//if (nodelock-&gt;nHeavyLocks[CMD_UTILITY - 1] == 0)</comment>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DDL</name></expr>;</expr_stmt>
                            </block_content>}</block>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break;</break>
                </block_content>}</block>
            <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><name>nIgnored</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%c is unknown lock action, ignored here."</literal></expr></argument>, <argument><expr><name><name>lockActions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block></for>

    <comment type="block">/* if all actions are illlegal, set is failure, return false */</comment>
    <if_stmt><if>if<condition>(<expr><name>nIgnored</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"all lock actions %s are illlegal."</literal></expr></argument>, <argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
  * search tableOids to find whether the given Oid is already exist or not.
  */</comment>
<function><type><specifier>static</specifier> <name>int32</name></type> <name>HashSearch</name><parameter_list>(<parameter><decl><type><name>DMLLockContent</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>hashAction</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int32</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>idx2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>end_idx</name></decl>;</decl_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>ENTER</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>nTables</name></name> <operator>&gt;=</operator> <name>MAX_TABLE_NUM</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"exceed max table number, could not lock more tables."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>table</name> <operator>%</operator> <name>MAX_TABLE_NUM</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>FIND</name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>table</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>idx</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if<condition>(<expr><name>action</name> <operator>==</operator> <name>ENTER</name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>table</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>ENTER</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>idx</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>idx2</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>table</name> <operator>%</operator> <operator>(</operator><name>MAX_TABLE_NUM</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>end_idx</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

    <do>do
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>idx</name> <operator>&lt;=</operator> <name>idx2</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>MAX_TABLE_NUM</name> <operator>+</operator> <name>idx</name> <operator>-</operator> <name>idx2</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>idx</name> <operator>-=</operator> <name>idx2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if<condition>(<expr><name>idx</name> <operator>==</operator> <name>end_idx</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>FIND</name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>table</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>idx</name></expr>;</return></block_content></block></if>
            <if type="elseif">else if<condition>(<expr><name>action</name> <operator>==</operator> <name>ENTER</name> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>table</name></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        
    </block_content>}</block>while<condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition>;</do>

    <if_stmt><if>if<condition>(<expr><name>action</name> <operator>==</operator> <name>ENTER</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>idx</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* block dmls on specified table or shard */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>SetLightLock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lockActions</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>objectType</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param2</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>setlock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIgnored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>schema</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>table</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CmdType</name></type> <name>cmd</name> <init>= <expr><name>CMD_NOTHING</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name> <init>= <expr><literal type="string">","</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>shard</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* sanity check */</comment>
    <if_stmt><if>if <condition>(<expr><name>objectType</name> <operator>==</operator> <name>LOCK_TABLE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>param1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name>schema</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_SCHEMA</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"schema \"%s\" does not exist."</literal></expr></argument>, <argument><expr><name>param1</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>param2</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>InvalidOid</name> <operator>==</operator> <name>table</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"table \"%s\" does not exist."</literal></expr></argument>, <argument><expr><name>param2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 
     *    loop to set lock actions. if all is specified, set action and return;
     *    else set every legal action
     */</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>setlock</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <switch>switch<condition>(<expr><name><name>lockActions</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'A'</literal></expr>:</case>
            <case>case <expr><literal type="char">'a'</literal></expr>:</case>
            <case>case <expr><literal type="char">'C'</literal></expr>:</case>
            <case>case <expr><literal type="char">'c'</literal></expr>:</case>
                <break>break;</break>
			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name>setlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>CMD_SELECT</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<break>break;</break>
            <case>case <expr><literal type="char">'U'</literal></expr>:</case>
            <case>case <expr><literal type="char">'u'</literal></expr>:</case>
                <expr_stmt><expr><name>setlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>CMD_UPDATE</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'I'</literal></expr>:</case>
            <case>case <expr><literal type="char">'i'</literal></expr>:</case>
                <expr_stmt><expr><name>setlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>CMD_INSERT</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'D'</literal></expr>:</case>
            <case>case <expr><literal type="char">'d'</literal></expr>:</case>
                <expr_stmt><expr><name>setlock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>CMD_DELETE</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><name>nIgnored</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%c is unknown lock action, ignored here."</literal></expr></argument>, <argument><expr><name><name>lockActions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><name>setlock</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>objectType</name> <operator>==</operator> <name>LOCK_TABLE</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>HashSearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
						<comment type="line">//nodelock-&gt;lock[cmd - OFFSET].table_locks[idx]++;</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>HashSearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>ENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block">/* no space left */</comment>
                        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <return>return <expr><name>false</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"table %s is already locked on %s."</literal></expr></argument>, <argument><expr><name>param2</name></expr></argument>, <argument><expr><name><name>LockMessages</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="block">/* set lock */</comment>
                        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//if (nodelock-&gt;lock[cmd - OFFSET].table_locks[idx] == 0)</comment>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name>nTables</name><operator>++</operator></expr>;</expr_stmt>
                            </block_content>}</block>

							<comment type="line">//nodelock-&gt;lock[cmd - OFFSET].table_locks[idx]++;</comment>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>HashSearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"table %s is not locked on %s before."</literal></expr></argument>, <argument><expr><name>param2</name></expr></argument>, <argument><expr><name><name>LockMessages</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
						<comment type="line">//nodelock-&gt;lock[cmd - OFFSET].table_locks[idx]--;</comment>
						<comment type="line">//if (nodelock-&gt;lock[cmd - OFFSET].table_locks[idx] == 0)</comment>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name>nTables</name><operator>--</operator></expr>;</expr_stmt>
                        </block_content>}</block>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>objectType</name> <operator>==</operator> <name>LOCK_REMOVE_TABLE</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
                
                <expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>pg_atoi</name><argument_list>(<argument><expr><name>param1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>HashSearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name><name>table_locks</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name>nTables</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>shardbitmap</name> <init>= <expr><operator>(</operator><name>Bitmapset</name> <operator>*</operator><operator>)</operator><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name>shard</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shards</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>param1</name></expr></argument>)</argument_list></call><operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>shards</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>param1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>shards</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <while>while<condition>(<expr><name>buf</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>shard</name> <operator>=</operator> <call><name>pg_atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ShardIDIsValid</name><argument_list>(<argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"shard id %d is invalid."</literal></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>false</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>shardbitmap</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>bms_add_member</name><argument_list>(<argument><expr><name>shardbitmap</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name><name>nShards</name><index>[<expr><name>shard</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>shard</name> <operator>&gt;=</operator> <name>MAX_SHARD_NUM</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"shard %d exceed max shard number, no need to unlock."</literal></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>shardbitmap</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
							<comment type="line">//nodelock-&gt;lock[cmd - OFFSET].nShards[shard]--;</comment>

							<comment type="line">//if (nodelock-&gt;lock[cmd - OFFSET].nShards[shard] == 0)</comment>
                            <block>{<block_content>
								<expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name><operator>.</operator><name><name>nShards</name><index>[<expr><name>shard</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>bms_del_member</name><argument_list>(<argument><expr><name>shardbitmap</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
							<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"shard %d is not locked before, no need to unlock."</literal></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>
                
                    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while> 

                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>shards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* if all actions are illlegal, set is failure, return false */</comment>
    <if_stmt><if>if<condition>(<expr><name>nIgnored</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"all lock actions %s are illlegal."</literal></expr></argument>, <argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>SetEventLock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    
    <switch>switch<condition>(<expr><name>event</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>STORAGE_EXTENSION_SOURCE</name></expr>:</case>
        <case>case <expr><name>COLD_HOT</name></expr>:</case>
        <case>case <expr><name>PROMOTION</name></expr>:</case>
        <case>case <expr><name>STORAGE_EXTENSION_DEST</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>event</name> <operator>!=</operator> <name>STORAGE_EXTENSION_DEST</name> <operator>&amp;&amp;</operator> <name>event</name> <operator>!=</operator> <name>STORAGE_EXTENSION_SOURCE</name><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"node is already locked with event \"%s\""</literal></expr></argument>, <argument><expr><name><name>event_message</name><index>[<expr><call><name>my_log2</name><argument_list>(<argument><expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;</operator> <name>event</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"node is already locked with event \"%s\""</literal></expr></argument>, <argument><expr><name><name>event_message</name><index>[<expr><call><name>my_log2</name><argument_list>(<argument><expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
						<comment type="line">//nodelock-&gt;nEventLocks++;</comment>

                        <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>|=</operator> <name>event</name></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>WriteNodeLockFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;</operator> <name>event</name><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
						<comment type="line">//if (--nodelock-&gt;nEventLocks == 0)</comment>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;=</operator> <operator>~</operator><name>event</name></expr>;</expr_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><call><name>WriteNodeLockFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name> <operator>&amp;</operator> <name>event</name><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"node is locked with other event \"%s\""</literal></expr></argument>, <argument><expr><name><name>event_message</name><index>[<expr><call><name>my_log2</name><argument_list>(<argument><expr><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>nodelock</name><operator>-&gt;</operator><name>eventLocks</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"node is not locked with any event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <break>break;</break>
            </block_content>}</block>
        <default>default:</default>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unknow event lock type %d"</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
    </block_content>}</block></switch>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* check if transactions in xid array finished or not
  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkTransFinished</name><parameter_list>(<parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>xids</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nxid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nxidLeft</name></decl></parameter>, <parameter><decl><type><name>RunningTransactions</name></type> <name>runTrans</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>exist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if<condition>(<expr><operator>*</operator><name>nxidLeft</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/* traverse transactions in xids and current running transactions to find if transactions in xids 
     * are still running. if not, remove transaction xid from xids. 
     */</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>nxid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>exist</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>xids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>runTrans</name><operator>-&gt;</operator><name>xcnt</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>xids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>runTrans</name><operator>-&gt;</operator><name>xids</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>exist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>exist</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>xids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nxidLeft</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
                
                <if_stmt><if>if<condition>(<expr><operator>*</operator><name>nxidLeft</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* lock node to reject query */</comment>
<function><type><name>bool</name></type> <name>NodeLock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lockActions</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>objectType</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loopTimes</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>loopTimes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"loopTimes %d must be greater than 0."</literal></expr></argument>, <argument><expr><name>loopTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
      * TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      * Pre-check:if there are long transactions in system?
      */</comment>
      
    <expr_stmt><expr><name>objectType</name> <operator>=</operator> <call><name>pg_ascii_toupper</name><argument_list>(<argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>objectType</name> <operator>==</operator> <name>LOCK_NONE_OBJECT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        <comment type="block">/* 
          * make copy before modify lock data 
          * if lock failed, set lock data back
          */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetHeavyLock</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>objectType</name> <operator>==</operator> <name>LOCK_EVENT</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"storage extension source"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>STORAGE_EXTENSION_SOURCE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if    <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"cold hot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>COLD_HOT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"promotion"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>PROMOTION</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"storage extension dest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>STORAGE_EXTENSION_DEST</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unknow event lock type %s."</literal></expr></argument>, <argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>objectType</name> <operator>!=</operator> <name>LOCK_TABLE</name> <operator>&amp;&amp;</operator> <name>objectType</name> <operator>!=</operator> <name>LOCK_SHARD</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unknow lock object %c."</literal></expr></argument>, <argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* 
          * make copy before modify lock data 
          * if lock failed, set lock data back
          */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetLightLock</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* check to see whether running transactions exist or not.
	 * if checkTimes is given, we will wait for checkTimes seconds at most.
	 * before time's up, if no running transactions, keep going; else fail to
	 * lock node
	 */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RunningTransactions</name></type> <name>running</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>running</name> <operator>=</operator> <call><name>GetCurrentRunningTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>XidGenLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>running</name><operator>-&gt;</operator><name>xcnt</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>xids</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nxid</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nxidLeft</name></decl>;</decl_stmt>
            
            <expr_stmt><expr><name>xids</name> <operator>=</operator> <operator>(</operator><name>TransactionId</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>running</name><operator>-&gt;</operator><name>xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xids</name></expr></argument>, <argument><expr><name><name>running</name><operator>-&gt;</operator><name>xids</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>running</name><operator>-&gt;</operator><name>xcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>nxid</name> <operator>=</operator> <name><name>running</name><operator>-&gt;</operator><name>xcnt</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><name>nxidLeft</name> <operator>=</operator> <name>nxid</name></expr>;</expr_stmt>
        
            <while>while<condition>(<expr><name>loopTimes</name><operator>--</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">1000000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* sleep one second */</comment>
                
                <expr_stmt><expr><name>running</name> <operator>=</operator> <call><name>GetCurrentRunningTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* GetRunningTransactionData() acquired XidGenLock, we must release it */</comment>
                <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>XidGenLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>checkTransFinished</name><argument_list>(<argument><expr><name>xids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nxidLeft</name></expr></argument>, <argument><expr><name>running</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <if_stmt><if>if<condition>(<expr><name>nxidLeft</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>

            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>xids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
            <if_stmt><if>if<condition>(<expr><name>loopTimes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock node: There are running transactions."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* lock succeed, write control file */</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>WriteNodeLockFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>NodeUnLock</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lockActions</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>objectType</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>param2</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>objectType</name> <operator>=</operator> <call><name>pg_ascii_toupper</name><argument_list>(<argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name>objectType</name> <operator>==</operator> <name>LOCK_NONE_OBJECT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        <comment type="block">/* 
          * make copy before modify lock data 
          * if lock failed, set lock data back
          */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetHeavyLock</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>WriteNodeLockFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>objectType</name> <operator>==</operator> <name>LOCK_EVENT</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"storage extension source"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>STORAGE_EXTENSION_SOURCE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if    <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"cold hot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>COLD_HOT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"promotion"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>PROMOTION</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><literal type="string">"storage extension dest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetEventLock</name><argument_list>(<argument><expr><name>STORAGE_EXTENSION_DEST</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unknow event lock type %s."</literal></expr></argument>, <argument><expr><name>lockActions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>objectType</name> <operator>!=</operator> <name>LOCK_TABLE</name> <operator>&amp;&amp;</operator> <name>objectType</name> <operator>!=</operator> <name>LOCK_SHARD</name> <operator>&amp;&amp;</operator> <name>objectType</name> <operator>!=</operator> <name>LOCK_REMOVE_TABLE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unknow lock object %c."</literal></expr></argument>, <argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* 
          * make copy before modify lock data 
          * if lock failed, set lock data back
          */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SetLightLock</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>WriteNodeLockFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* query is DDL or not */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>isDDL</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parsetree</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parsetree</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    
    <switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>parsetree</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>T_AlterDatabaseStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterDatabaseSetStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterDomainStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterFunctionStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterRoleStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterRoleSetStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterObjectSchemaStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterOwnerStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterSeqStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterTableStmt</name></expr>:</case>
        <case>case <expr><name>T_RenameStmt</name></expr>:</case>
        <case>case <expr><name>T_CommentStmt</name></expr>:</case>
        <case>case <expr><name>T_DefineStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateCastStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateConversionStmt</name></expr>:</case>
        <case>case <expr><name>T_CreatedbStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateDomainStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateFunctionStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateRoleStmt</name></expr>:</case>
        <case>case <expr><name>T_IndexStmt</name></expr>:</case>
        <case>case <expr><name>T_CreatePLangStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateOpClassStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateOpFamilyStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterOpFamilyStmt</name></expr>:</case>
        <case>case <expr><name>T_RuleStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateSchemaStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateSeqStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateTableAsStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateTableSpaceStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateTrigStmt</name></expr>:</case>
        <case>case <expr><name>T_CompositeTypeStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateEnumStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateRangeStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterEnumStmt</name></expr>:</case>
        <case>case <expr><name>T_ViewStmt</name></expr>:</case>
        <case>case <expr><name>T_DropStmt</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>DropStmt</name> <operator>*</operator><operator>)</operator><name>parsetree</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>removeType</name></name> <operator>==</operator> <name>OBJECT_PUBLICATION</name></expr>)</condition>
                <block>{<block_content>
                    <return>return <expr><name>false</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
        <case>case <expr><name>T_DropdbStmt</name></expr>:</case>
        <case>case <expr><name>T_DropTableSpaceStmt</name></expr>:</case>
        <case>case <expr><name>T_DropRoleStmt</name></expr>:</case>
        <case>case <expr><name>T_GrantStmt</name></expr>:</case>
        <case>case <expr><name>T_GrantRoleStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterDefaultPrivilegesStmt</name></expr>:</case>
        <case>case <expr><name>T_TruncateStmt</name></expr>:</case>
        <case>case <expr><name>T_DropOwnedStmt</name></expr>:</case>
        <case>case <expr><name>T_ReassignOwnedStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterTSDictionaryStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterTSConfigurationStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateExtensionStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterExtensionStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterExtensionContentsStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateFdwStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterFdwStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateForeignServerStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterForeignServerStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateUserMappingStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterUserMappingStmt</name></expr>:</case>
        <case>case <expr><name>T_DropUserMappingStmt</name></expr>:</case>
        <case>case <expr><name>T_AlterTableSpaceOptionsStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateForeignTableStmt</name></expr>:</case>
        <case>case <expr><name>T_SecLabelStmt</name></expr>:</case>
        <case>case <expr><name>T_CreateShardStmt</name></expr>:</case>
        <comment type="line">//case T_CleanShardingStmt:</comment>
        <case>case <expr><name>T_DropShardStmt</name></expr>:</case>
        <comment type="line">//case T_MoveDataStmt:</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
        <case>case <expr><name>T_CreateKeyValuesStmt</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__AUDIT__</name></cpp:ifdef>
        <case>case <expr><name>T_AuditStmt</name></expr>:</case>
        <case>case <expr><name>T_CleanAuditStmt</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return <expr><name>true</name></expr>;</return>
        <case>case <expr><name>T_RawStmt</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
                
                <decl_stmt><decl><type><name>RawStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>RawStmt</name> <operator>*</operator><operator>)</operator><name>parsetree</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>isDDL</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <default>default:</default>
            <comment type="block">/* do nothing */</comment>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* if node is locked, we will show the messages about lock type and lock action 
  * one node may have multi different locks, all locks and corresponding lock actions
  * will show here
  */</comment>
<function><type><name>void</name></type>
<name>LightLockCheck</name><parameter_list>(<parameter><decl><type><name>CmdType</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shard</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DMLLockContent</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cmd</name> <argument_list type="generic">&lt; <argument><expr><name>CMD_SELECT</name> <operator>||</operator> <name>cmd</name></expr></argument> &gt;</argument_list></name> <name>CMD_DELETE</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>CMD_SELECT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>CMD_SELECT</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>lock</name> <operator>=</operator> <operator>&amp;</operator><name><name>nodelock</name><operator>-&gt;</operator><name>lock</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="line">//LWLockAcquire(NodeLockMgrLock, LW_SHARED);</comment>

    <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>nTables</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>HashSearch</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>FIND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
			<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s on table %s is not permitted."</literal></expr></argument>, <argument><expr><name><name>LockMessages</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ShardIDIsValid</name><argument_list>(<argument><expr><name>shard</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>lock</name><operator>-&gt;</operator><name>nShards</name><index>[<expr><name>shard</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>shardbitmap</name> <init>= <expr><operator>(</operator><name>Bitmapset</name> <operator>*</operator><operator>)</operator><name><name>lock</name><operator>-&gt;</operator><name>shard</name></name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>bms_is_member</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>shardbitmap</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
			<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>

            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s on shard %d is not permitted."</literal></expr></argument>, <argument><expr><name><name>LockMessages</name><index>[<expr><name>cmd</name> <operator>-</operator> <name>OFFSET</name></expr>]</index></name></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
	<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
</block_content>}</block></function>


<comment type="block">/* node lock check
  * if current node has locks, we have to check whether query is permitted or not by locks
  * if query is not permitted, error messages will be shown, and transaction is aborted.
  */</comment>
<function><type><name>void</name></type> 
<name>HeavyLockCheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cmdString</name></decl></parameter>, <parameter><decl><type><name>CmdType</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_string</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parsetree</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives    </comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lockFuncName</name> <init>= <expr><literal type="string">"pg_node_lock"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>unlockFuncName</name> <init>= <expr><literal type="string">"pg_node_unlock"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>statFuncName</name> <init>= <expr><literal type="string">"show_node_lock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>poolReloadFunc</name> <init>= <expr><literal type="string">"pgxc_pool_reload"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>terminateFunc</name> <init>= <expr><literal type="string">"pg_terminate_backend"</literal></expr></init></decl>;</decl_stmt>


	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>cmdString</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmdString</name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>CMD_SELECT</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>query_string</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>asc_tolower</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>lockFuncName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>unlockFuncName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
				<call><name>strstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>statFuncName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>poolReloadFunc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
				<call><name>strstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>terminateFunc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
                
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>


    <comment type="block">/* if query is DDL, we'll check if current node has locks; 
      * if so, and DDL is permitted, error messages will be shown.
      * current transaction is aborted.
      */</comment>
	<if_stmt><if>if<condition>(<expr><name>parsetree</name> <operator>&amp;&amp;</operator> <call><name>isDDL</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<comment type="line">//LWLockAcquire(NodeLockMgrLock, LW_SHARED);</comment>
        
        <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DDL</name></expr>)</condition>
        <block>{<block_content>
			<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s is not permitted now."</literal></expr></argument>, <argument><expr><call><name>CreateCommandTag</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>parsetree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

		<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
    </block_content>}</block></if>
    <comment type="block">/*
      * query is DML (update, insert, delete) or select
      */</comment>
    <else>else
    <block>{<block_content>
        <comment type="block">/* if query is select, we can not block the node lock and node unlock functions
          * Here we make a check, if query is one of them, just go through, do not check.
          */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>cmdString</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmdString</name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>CMD_SELECT</name></expr>)</condition>
        <block>{<block_content>
			<comment type="line">//LWLockAcquire(NodeLockMgrLock, LW_SHARED);</comment>
        
            <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECT</name></expr>)</condition>
            <block>{<block_content>
				<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SELECT is not permitted now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

			<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><operator>(</operator><name>cmdString</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmdString</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>CMD_UPDATE</name></expr>)</condition>
        <block>{<block_content>
			<comment type="line">//LWLockAcquire(NodeLockMgrLock, LW_SHARED);</comment>
        
            <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>UPDATE</name></expr>)</condition>
            <block>{<block_content>
				<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"UPDATE is not permitted now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

			<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><operator>(</operator><name>cmdString</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmdString</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>CMD_DELETE</name></expr>)</condition>
        <block>{<block_content>
			<comment type="line">//LWLockAcquire(NodeLockMgrLock, LW_SHARED);</comment>
        
            <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DELETE</name></expr>)</condition>
            <block>{<block_content>
				<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"DELETE is not permitted now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

			<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><operator>(</operator><name>cmdString</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmdString</name></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>CMD_INSERT</name></expr>)</condition>
        <block>{<block_content>
			<comment type="line">//LWLockAcquire(NodeLockMgrLock, LW_SHARED);</comment>
        
            <if_stmt><if>if <condition>(<expr><name><name>nodelock</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>
            <block>{<block_content>
				<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"INSERT is not permitted now."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

			<comment type="line">//LWLockRelease(NodeLockMgrLock);</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>currIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>ShmMgr_State</name>;</typedef>

<function><type><name>Datum</name></type> <name>show_node_lock</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_COLUMN_NUM</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
    
    <decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ShmMgr_State</name>    <modifier>*</modifier></type><name>status</name>  <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <decl_stmt><decl><type><name>TupleDesc</name></type>    <name>tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nodelock_Copy</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nodelock</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="block">/* create a function context for cross-call persistence */</comment>
        <expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
          * Switch to memory context appropriate for multiple function calls
          */</comment>
        <expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* build tupdesc for result tuples */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>STAT_COLUMN_NUM</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"HeavyLock"</literal></expr></argument>,
                         <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"LightLock"</literal></expr></argument>,
                         <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Schema"</literal></expr></argument>,
                         <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Table"</literal></expr></argument>,
                         <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Shard"</literal></expr></argument>,
                         <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"EventLock"</literal></expr></argument>,
                         <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>status</name> <operator>=</operator> <operator>(</operator><name>ShmMgr_State</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShmMgr_State</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>status</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name>    <operator>=</operator> <operator>(</operator><name>ShmMgr_State</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>

    <comment type="block">/* show event locks */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>eventLocks</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>STAT_COLUMN_NUM</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>STAT_COLUMN_NUM</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
            
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>event_message</name><index>[<expr><call><name>my_log2</name><argument_list>(<argument><expr><name><name>nodelock_Copy</name><operator>.</operator><name>eventLocks</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>eventLocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* show heavy locks */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>STAT_COLUMN_NUM</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>STAT_COLUMN_NUM</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
            
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DDL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"DDL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>DDL</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UPDATE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>UPDATE</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>INSERT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>INSERT</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>DELETE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>DELETE</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>SELECT</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>nodelock_Copy</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>SELECT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>


        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name> <operator>&lt;</operator> <name>NUM_LIGHT_LOCK</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name><name>values</name><index>[<expr><name>STAT_COLUMN_NUM</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name><name>nulls</name><index>[<expr><name>STAT_COLUMN_NUM</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>shardbitmap</name> <init>= <expr><operator>(</operator><name>Bitmapset</name> <operator>*</operator><operator>)</operator><name><name>nodelock_Copy</name><operator>.</operator><name>lock</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>.</operator><name>shard</name></expr></init></decl>;</decl_stmt>
            
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><name><name>nodelock_Copy</name><operator>.</operator><name>lock</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>.</operator><name>nTables</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init>;</init> <condition><expr><name><name>status</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <operator>(</operator><name>MAX_TABLE_NUM</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name><name>status</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Oid</name></type> <name>table</name> <init>= <expr><name><name>nodelock_Copy</name><operator>.</operator><name>lock</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>.</operator><name><name>table</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                
                <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>LockMessages</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>try_relation_open</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>rel</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>char</name></type> <name><name>oid</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        
                        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"Invisible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                    <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>lock</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>.</operator><name><name>table</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>nodelock_Copy</name><operator>.</operator><name>lock</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name><operator>.</operator><name>nTables</name><operator>--</operator></expr>;</expr_stmt>

                    <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_empty</name><argument_list>(<argument><expr><name>shardbitmap</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>shard</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lineNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringInfoData</name></type> <name>str</name></decl>;</decl_stmt>
            
            
            <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>LockMessages</name><index>[<expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><operator>(</operator><name>shard</name> <operator>=</operator> <call><name>bms_first_member</name><argument_list>(<argument><expr><name>shardbitmap</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>shard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lineNum</name><operator>++</operator></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>lineNum</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>lineNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>

            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name><name>str</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>currIdx</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>NodeLockMgrLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>pg_node_lock</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>lock_object</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>loopTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmd_string</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>lock_object</name> <operator>=</operator> <call><name>PG_GETARG_CHAR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>param1</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>param2</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>loopTimes</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>NodeLock</name><argument_list>(<argument><expr><name>cmd_string</name></expr></argument>, <argument><expr><name>lock_object</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>, <argument><expr><name>loopTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>Datum</name></type> <name>pg_node_unlock</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>lock_object</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cmd_string</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>lock_object</name> <operator>=</operator> <call><name>PG_GETARG_CHAR</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>param1</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>param2</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>NodeUnLock</name><argument_list>(<argument><expr><name>cmd_string</name></expr></argument>, <argument><expr><name>lock_object</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>nodeLockRecovery</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NODELOCKSIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    
    <if_stmt><if>if<condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>controlFile</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>BasicOpenFile</name><argument_list>(<argument><expr><name>controlFile</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>   
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open control file \"%s\""</literal></expr></argument>, <argument><expr><name>controlFile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <name>NODELOCKSIZE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nodelock</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NODELOCKSIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DMLLockContent</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>nodelock</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NODELOCKSIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DMLLockContent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read control file \"%s\""</literal></expr></argument>, <argument><expr><name>controlFile</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>LockParam</name>
<block>{
  <decl><name>LOCK_ACTIONS</name></decl>,
  <decl><name>LOCK_OBJECT</name></decl>,
  <decl><name>LOCK_PARAM1</name></decl>,
  <decl><name>LOCK_PARAM2</name></decl>
}</block></enum></type> <name>LockParam</name>;</typedef>

<function><type><name>void</name></type>
<name>LockNode</name><parameter_list>(<parameter><decl><type><name>LockNodeStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>loopTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lockActions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>objectType</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param1</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param2</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Lock Node needs at least 3 parameters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_ACTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>lockActions</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>objectType</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator>  <name>LOCK_PARAM1</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_PARAM1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>param1</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator>  <name>LOCK_PARAM2</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_PARAM2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>param2</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_Integer</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>loopTimes</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>ival</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lockActions</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"you need to specify lock query type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>objectType</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"you need to specify lock object."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>NodeLock</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><name><name>objectType</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>, <argument><expr><name>loopTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>UnLockNode</name><parameter_list>(<parameter><decl><type><name>LockNodeStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lockActions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>objectType</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param1</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param2</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Lock Node needs at least 2 parameters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_ACTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>lockActions</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>objectType</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator>  <name>LOCK_PARAM1</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_PARAM1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>param1</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator>  <name>LOCK_PARAM2</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Value</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name></expr></argument>, <argument><expr><name>LOCK_PARAM2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>param2</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lockActions</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"you need to specify lock query type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>objectType</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"you need to specify lock object."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>NodeUnLock</name><argument_list>(<argument><expr><name>lockActions</name></expr></argument>, <argument><expr><name><name>objectType</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to unlock node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
