<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/libpq/be-secure-openssl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * be-secure-openssl.c
 *      functions for OpenSSL support in the backend.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/libpq/be-secure-openssl.c
 *
 *      Since the server static private key ($DataDir/server.key)
 *      will normally be stored unencrypted so that the database
 *      backend can restart automatically, it is important that
 *      we select an algorithm that continues to provide confidentiality
 *      even if the attacker has the server's private key.  Ephemeral
 *      DH (EDH) keys provide this and more (Perfect Forward Secrecy
 *      aka PFS).
 *
 *      N.B., the static private key should still be protected to
 *      the largest extent possible, to minimize the risk of
 *      impersonations.
 *
 *      Another benefit of EDH is that it allows the backend and
 *      clients to use DSA keys.  DSA keys can only provide digital
 *      signatures, not encryption, and are often acceptable in
 *      jurisdictions where RSA keys are unacceptable.
 *
 *      The downside to EDH is that it makes it impossible to
 *      use ssldump(1) if there's a problem establishing an SSL
 *      session.  In this case you'll need to temporarily disable
 *      EDH by commenting out the callback.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_NETINET_TCP_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/dh.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/conf.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_ECDH</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ec.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/latch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>my_sock_read</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>my_sock_write</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BIO_METHOD</name> <modifier>*</modifier></type><name>my_BIO_s_socket</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>my_SSL_set_fd</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DH</name>  <modifier>*</modifier></type><name>load_dh_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isServerStart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DH</name>  <modifier>*</modifier></type><name>load_dh_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>ssl_passwd_cb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwflag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>verify_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>X509_STORE_CTX</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>info_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialize_dh</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isServerStart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>initialize_ecdh</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isServerStart</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SSLerrmessage</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>X509_NAME_to_cstring</name><parameter_list>(<parameter><decl><type><name>X509_NAME</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>SSL_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>SSL_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ssl_passwd_cb_called</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* ------------------------------------------------------------ */</comment>
<comment type="block">/*                         Hardcoded values                        */</comment>
<comment type="block">/* ------------------------------------------------------------ */</comment>

<comment type="block">/*
 *    Hardcoded DH parameters, used in ephemeral DH keying.
 *    As discussed above, EDH protects the confidentiality of
 *    sessions even if the static private key is compromised,
 *    so we are *highly* motivated to ensure that we can use
 *    EDH even if the DBA has not provided custom DH parameters.
 *
 *    We could refuse SSL connections unless a good DH parameter
 *    file exists, but some clients may quietly renegotiate an
 *    unsecured connection without fully informing the user.
 *    Very uncool. Alternatively, the system could refuse to start
 *    if a DH parameters is not specified, but this would tend to
 *    piss off DBAs.
 *
 *    If you want to create your own hardcoded DH parameters
 *    for fun and profit, review "Assigned Number for SKIP
 *    Protocols" (http://www.skip-vpn.org/spec/numbers.html)
 *    for suggestions.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>file_dh2048</name><index>[]</index></name> <init>=
<expr><literal type="string">"-----BEGIN DH PARAMETERS-----\n\
MIIBCAKCAQEA9kJXtwh/CBdyorrWqULzBej5UxE5T7bxbrlLOCDaAadWoxTpj0BV\n\
89AHxstDqZSt90xkhkn4DIO9ZekX1KHTUPj1WV/cdlJPPT2N286Z4VeSWc39uK50\n\
T8X8dryDxUcwYc58yWb/Ffm7/ZFexwGq01uejaClcjrUGvC/RgBYK+X0iP1YTknb\n\
zSC0neSRBzZrM2w4DUUdD3yIsxx8Wy2O9vPJI8BD8KVbGI2Ou1WMuF040zT9fBdX\n\
Q6MdGGzeMyEstSr/POGxKUAYEY18hKcKctaGxAMZyAcpesqVDNmWn6vQClCbAkbT\n\
CD1mpF1Bn5x8vYlLIhkmuquiXsNV6TILOwIBAg==\n\
-----END DH PARAMETERS-----\n"</literal></expr></init></decl>;</decl_stmt>


<comment type="block">/* ------------------------------------------------------------ */</comment>
<comment type="block">/*                         Public interface                        */</comment>
<comment type="block">/* ------------------------------------------------------------ */</comment>

<comment type="block">/*
 *    Initialize global SSL context.
 *
 * If isServerStart is true, report any errors as FATAL (so we don't return).
 * Otherwise, log errors at LOG level and return -1 to indicate trouble,
 * preserving the old SSL state if any.  Returns 0 if OK.
 */</comment>
<function><type><name>int</name></type>
<name>be_tls_init</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isServerStart</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator><name>root_cert_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSL_CTX</name>    <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>

    <comment type="block">/* This stuff need be done only once. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>SSL_initialized</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OPENSSL_INIT_SSL</name></cpp:ifdef>
        <expr_stmt><expr><call><name>OPENSSL_init_ssl</name><argument_list>(<argument><expr><name>OPENSSL_INIT_LOAD_CONFIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>OPENSSL_config</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>SSL_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * We use SSLv23_method() because it can negotiate use of the highest
     * mutually supported protocol version, while alternatives like
     * TLSv1_2_method() permit only one specific version.  Note that we don't
     * actually allow SSL v2 or v3, only TLS protocols (see below).
     */</comment>
    <expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create SSL context: %s"</literal></expr></argument>,
                        <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Disable OpenSSL's moving-write-buffer sanity check, because it causes
     * unnecessary failures in nonblocking send cases.
     */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If reloading, override OpenSSL's default handling of
     * passphrase-protected files, because we don't want to prompt for a
     * passphrase in an already-running server.  (Not that the default
     * handling is very desirable during server start either, but some people
     * insist we need to keep it.)
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isServerStart</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ssl_passwd_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Load and verify server's certificate and private key
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ssl_cert_file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not load server certificate file \"%s\": %s"</literal></expr></argument>,
                        <argument><expr><name>ssl_cert_file</name></expr></argument>, <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>ssl_key_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not access private key file \"%s\": %m"</literal></expr></argument>,
                        <argument><expr><name>ssl_key_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"private key file \"%s\" is not a regular file"</literal></expr></argument>,
                        <argument><expr><name>ssl_key_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Refuse to load key files owned by users other than us or root.
     *
     * XXX surely we can check this on Windows somehow, too.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <call><name>geteuid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>st_uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"private key file \"%s\" must be owned by the database user or root"</literal></expr></argument>,
                        <argument><expr><name>ssl_key_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Require no public access to key file. If the file is owned by us,
     * require mode 0600 or less. If owned by root, require 0640 or less to
     * allow read access through our gid, or a supplementary gid that allows
     * to read system-wide certificates.
     *
     * XXX temporarily suppress check when on Windows, because there may not
     * be proper support for Unix-y file permissions.  Need to think of a
     * reasonable check to apply on Windows.  (See also the data directory
     * permission check in postmaster.c)
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <call><name>geteuid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name><operator>)</operator><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>buf</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IWGRP</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IRWXO</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"private key file \"%s\" has group or world access"</literal></expr></argument>,
                        <argument><expr><name>ssl_key_file</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"File must have permissions u=rw (0600) or less if owned by the database user, or permissions u=rw,g=r (0640) or less if owned by root."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * OK, try to load the private key file.
     */</comment>
    <expr_stmt><expr><name>ssl_passwd_cb_called</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                                    <argument><expr><name>ssl_key_file</name></expr></argument>,
                                    <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ssl_passwd_cb_called</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"private key file \"%s\" cannot be reloaded because it requires a passphrase"</literal></expr></argument>,
                            <argument><expr><name>ssl_key_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not load private key file \"%s\": %s"</literal></expr></argument>,
                            <argument><expr><name>ssl_key_file</name></expr></argument>, <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_check_private_key</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"check of private key failed: %s"</literal></expr></argument>,
                        <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* disallow SSL v2/v3 */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_OP_NO_SSLv2</name> <operator>|</operator> <name>SSL_OP_NO_SSLv3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* disallow SSL session tickets */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_NO_TICKET</name></cpp:ifdef>            <comment type="block">/* added in openssl 0.9.8f */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TICKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* disallow SSL session caching, too */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_SESS_CACHE_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set up ephemeral DH and ECDH keys */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>initialize_dh</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>isServerStart</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>initialize_ecdh</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>isServerStart</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* set up the allowed cipher list */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSLCipherSuites</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not set the cipher list (no valid ciphers available)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Let server choose order */</comment>
    <if_stmt><if>if <condition>(<expr><name>SSLPreferServerCiphers</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_OP_CIPHER_SERVER_PREFERENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Load CA store, so we can verify client certificates if needed.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ssl_ca_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ssl_ca_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
            <operator>(</operator><name>root_cert_list</name> <operator>=</operator> <call><name>SSL_load_client_CA_file</name><argument_list>(<argument><expr><name>ssl_ca_file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not load root certificate file \"%s\": %s"</literal></expr></argument>,
                            <argument><expr><name>ssl_ca_file</name></expr></argument>, <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>error</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*----------
     * Load the Certificate Revocation List (CRL).
     * http://searchsecurity.techtarget.com/sDefinition/0,,sid14_gci803160,00.html
     *----------
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ssl_crl_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>X509_STORE</name> <modifier>*</modifier></type><name>cvstore</name> <init>= <expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>cvstore</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Set the flags to check against the complete CRL chain */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>X509_STORE_load_locations</name><argument_list>(<argument><expr><name>cvstore</name></expr></argument>, <argument><expr><name>ssl_crl_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* OpenSSL 0.96 does not support X509_V_FLAG_CRL_CHECK */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X509_V_FLAG_CRL_CHECK</name></cpp:ifdef>
                <expr_stmt><expr><call><name>X509_STORE_set_flags</name><argument_list>(<argument><expr><name>cvstore</name></expr></argument>,
                                     <argument><expr><name>X509_V_FLAG_CRL_CHECK</name> <operator>|</operator> <name>X509_V_FLAG_CRL_CHECK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SSL certificate revocation list file \"%s\" ignored"</literal></expr></argument>,
                                <argument><expr><name>ssl_crl_file</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"SSL library does not support certificate revocation lists."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not load SSL certificate revocation list file \"%s\": %s"</literal></expr></argument>,
                                <argument><expr><name>ssl_crl_file</name></expr></argument>, <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>error</name>;</goto>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ssl_ca_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Always ask for SSL client cert, but don't fail if it's not
         * presented.  We might fail such connections later, depending on what
         * we find in pg_hba.conf.
         */</comment>
        <expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                           <argument><expr><operator>(</operator><name>SSL_VERIFY_PEER</name> <operator>|</operator>
                            <name>SSL_VERIFY_CLIENT_ONCE</name><operator>)</operator></expr></argument>,
                           <argument><expr><name>verify_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Tell OpenSSL to send the list of root certs we trust to clients in
         * CertificateRequests.  This lets a client with a keystore select the
         * appropriate client certificate to send to us.
         */</comment>
        <expr_stmt><expr><call><name>SSL_CTX_set_client_CA_list</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>root_cert_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Success!  Replace any existing SSL_context.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>SSL_context</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>SSL_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>SSL_context</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Set flag to remember whether CA store has been loaded into SSL_context.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ssl_ca_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ssl_loaded_verify_locations</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>ssl_loaded_verify_locations</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Destroy global SSL context, if any.
 */</comment>
<function><type><name>void</name></type>
<name>be_tls_destroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>SSL_context</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>SSL_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>SSL_context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ssl_loaded_verify_locations</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *    Attempt to negotiate SSL connection.
 */</comment>
<function><type><name>int</name></type>
<name>be_tls_open_server</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>int</name></type>            <name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>waitfor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ecode</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>SSL_context</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not initialize SSL connection: SSL context not set up"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name>SSL_context</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not initialize SSL connection: %s"</literal></expr></argument>,
                        <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>my_SSL_set_fd</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not set SSL socket: %s"</literal></expr></argument>,
                        <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>ssl_in_use</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<label><name>aloop</name>:</label>

    <comment type="block">/*
     * Prepare to call SSL_get_error() by clearing thread's OpenSSL error
     * queue.  In general, the current thread's error queue must be empty
     * before the TLS/SSL I/O operation is attempted, or SSL_get_error() will
     * not work reliably.  An extension may have failed to clear the
     * per-thread error queue following another call to an OpenSSL I/O
     * routine.
     */</comment>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>SSL_accept</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Other clients of OpenSSL in the backend may fail to call
         * ERR_get_error(), but we always do, so as to not cause problems for
         * OpenSSL clients that don't call ERR_clear_error() defensively.  Be
         * sure that this happens by calling now. SSL_get_error() relies on
         * the OpenSSL per-thread error queue being intact, so this is the
         * earliest possible point ERR_get_error() may be called.
         */</comment>
        <expr_stmt><expr><name>ecode</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>err</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
            <case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
                <comment type="block">/* not allowed during connection establishment */</comment>
                <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>port</name><operator>-&gt;</operator><name>noblock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * No need to care about timeouts/interrupts here. At this
                 * point authentication_timeout still employs
                 * StartupPacketTimeoutHandler() which directly exits.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>SSL_ERROR_WANT_READ</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>waitfor</name> <operator>=</operator> <name>WL_SOCKET_READABLE</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>waitfor</name> <operator>=</operator> <name>WL_SOCKET_WRITEABLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><call><name>WaitLatchOrSocket</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>waitfor</name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                  <argument><expr><name>WAIT_EVENT_SSL_OPEN_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>aloop</name>;</goto>
            <case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode_for_socket_access</name><argument_list>()</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not accept SSL connection: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not accept SSL connection: EOF detected"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <break>break;</break>
            <case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not accept SSL connection: %s"</literal></expr></argument>,
                                <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not accept SSL connection: EOF detected"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized SSL error code: %d"</literal></expr></argument>,
                                <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Get client certificate, if available. */</comment>
    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* and extract the Common Name from it. */</comment>
    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>peer_cn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>peer_cert_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type>            <name>len</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>X509_NAME_get_text_by_NID</name><argument_list>(<argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>NID_commonName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>peer_cn</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>peer_cn</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>X509_NAME_get_text_by_NID</name><argument_list>(<argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><name>NID_commonName</name></expr></argument>, <argument><expr><name>peer_cn</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>peer_cn</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>len</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* shouldn't happen */</comment>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>peer_cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * Reject embedded NULLs in certificate common name to prevent
             * attacks like CVE-2009-4034.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>peer_cn</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SSL certificate's common name contains embedded null"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>peer_cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>peer_cn</name></name> <operator>=</operator> <name>peer_cn</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>peer_cert_valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SSL connection from \"%s\""</literal></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>port</name><operator>-&gt;</operator><name>peer_cn</name></name></expr> ?</condition><then> <expr><name><name>port</name><operator>-&gt;</operator><name>peer_cn</name></name></expr> </then><else>: <expr><literal type="string">"(anonymous)"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set up debugging/info callback */</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_info_callback</name><argument_list>(<argument><expr><name>SSL_context</name></expr></argument>, <argument><expr><name>info_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Close SSL connection.
 */</comment>
<function><type><name>void</name></type>
<name>be_tls_close</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>ssl_in_use</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>peer_cn</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>peer_cn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>peer_cn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *    Read data from a secure connection.
 */</comment>
<function><type><name>ssize_t</name></type>
<name>be_tls_read</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>waitfor</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ssize_t</name></type>        <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ecode</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SSL_read</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ecode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>err</name> <operator>!=</operator> <name>SSL_ERROR_NONE</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>err</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case>
            <comment type="block">/* a-ok */</comment>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>waitfor</name> <operator>=</operator> <name>WL_SOCKET_READABLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EWOULDBLOCK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>waitfor</name> <operator>=</operator> <name>WL_SOCKET_WRITEABLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EWOULDBLOCK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>
            <comment type="block">/* leave it to caller to ereport the value of errno */</comment>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SSL error: %s"</literal></expr></argument>, <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case>
            <comment type="block">/* connection was cleanly shut down by peer */</comment>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized SSL error code: %d"</literal></expr></argument>,
                            <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Write data to a secure connection.
 */</comment>
<function><type><name>ssize_t</name></type>
<name>be_tls_write</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>waitfor</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ssize_t</name></type>        <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ecode</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ecode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>err</name> <operator>!=</operator> <name>SSL_ERROR_NONE</name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>err</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case>
            <comment type="block">/* a-ok */</comment>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>waitfor</name> <operator>=</operator> <name>WL_SOCKET_READABLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EWOULDBLOCK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>waitfor</name> <operator>=</operator> <name>WL_SOCKET_WRITEABLE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EWOULDBLOCK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>
            <comment type="block">/* leave it to caller to ereport the value of errno */</comment>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SSL error: %s"</literal></expr></argument>, <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case>

            <comment type="block">/*
             * the SSL connnection was closed, leave it to the caller to
             * ereport it
             */</comment>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>COMMERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized SSL error code: %d"</literal></expr></argument>,
                            <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECONNRESET</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ------------------------------------------------------------ */</comment>
<comment type="block">/*                        Internal functions                        */</comment>
<comment type="block">/* ------------------------------------------------------------ */</comment>

<comment type="block">/*
 * Private substitute BIO: this does the sending and receiving using send() and
 * recv() instead. This is so that we can enable and disable interrupts
 * just while calling recv(). We cannot have interrupts occurring while
 * the bulk of openssl runs, because it uses malloc() and possibly other
 * non-reentrant libc facilities. We also need to call send() and recv()
 * directly so it gets passed through the socket/signals layer on Win32.
 *
 * These functions are closely modelled on the standard socket BIO in OpenSSL;
 * see sock_read() and sock_write() in OpenSSL's crypto/bio/bss_sock.c.
 * XXX OpenSSL 1.0.1e considers many more errcodes than just EINTR as reasons
 * to retry; do we need to adopt their logic for that?
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_BIO_GET_DATA</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_get_data</name><parameter_list>(<parameter><type><name>bio</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bio-&gt;ptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIO_set_data</name><parameter_list>(<parameter><type><name>bio</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bio-&gt;ptr = data)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>BIO_METHOD</name> <modifier>*</modifier></type><name>my_bio_methods</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>my_sock_read</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>secure_raw_read</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Port</name> <operator>*</operator><operator>)</operator> <call><name>BIO_get_data</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BIO_clear_retry_flags</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* If we were interrupted, tell caller to retry */</comment>
            <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BIO_set_retry_read</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>my_sock_write</name><parameter_list>(<parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>secure_raw_write</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Port</name> <operator>*</operator><operator>)</operator> <call><name>BIO_get_data</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BIO_clear_retry_flags</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* If we were interrupted, tell caller to retry */</comment>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>BIO_set_retry_write</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BIO_METHOD</name> <modifier>*</modifier></type>
<name>my_BIO_s_socket</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>my_bio_methods</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BIO_METHOD</name> <modifier>*</modifier></type><name>biom</name> <init>= <expr><operator>(</operator><name>BIO_METHOD</name> <operator>*</operator><operator>)</operator> <call><name>BIO_s_socket</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BIO_METH_NEW</name></cpp:ifdef>
        <decl_stmt><decl><type><name>int</name></type>            <name>my_bio_index</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>my_bio_index</name> <operator>=</operator> <call><name>BIO_get_new_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>my_bio_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>my_bio_methods</name> <operator>=</operator> <call><name>BIO_meth_new</name><argument_list>(<argument><expr><name>my_bio_index</name></expr></argument>, <argument><expr><literal type="string">"PostgreSQL backend socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>my_bio_methods</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BIO_meth_set_write</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><name>my_sock_write</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>!</operator><call><name>BIO_meth_set_read</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><name>my_sock_read</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>!</operator><call><name>BIO_meth_set_gets</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><call><name>BIO_meth_get_gets</name><argument_list>(<argument><expr><name>biom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>!</operator><call><name>BIO_meth_set_puts</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><call><name>BIO_meth_get_puts</name><argument_list>(<argument><expr><name>biom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>!</operator><call><name>BIO_meth_set_ctrl</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><call><name>BIO_meth_get_ctrl</name><argument_list>(<argument><expr><name>biom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>!</operator><call><name>BIO_meth_set_create</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><call><name>BIO_meth_get_create</name><argument_list>(<argument><expr><name>biom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>!</operator><call><name>BIO_meth_set_destroy</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><call><name>BIO_meth_get_destroy</name><argument_list>(<argument><expr><name>biom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>!</operator><call><name>BIO_meth_set_callback_ctrl</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><call><name>BIO_meth_get_callback_ctrl</name><argument_list>(<argument><expr><name>biom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>BIO_meth_free</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>my_bio_methods</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>my_bio_methods</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BIO_METHOD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>my_bio_methods</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>my_bio_methods</name></expr></argument>, <argument><expr><name>biom</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BIO_METHOD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>my_bio_methods</name><operator>-&gt;</operator><name>bread</name></name> <operator>=</operator> <name>my_sock_read</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>my_bio_methods</name><operator>-&gt;</operator><name>bwrite</name></name> <operator>=</operator> <name>my_sock_write</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>my_bio_methods</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This should exactly match openssl's SSL_set_fd except for using my BIO */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>my_SSL_set_fd</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BIO</name>           <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BIO_METHOD</name> <modifier>*</modifier></type><name>bio_method</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>bio_method</name> <operator>=</operator> <call><name>my_BIO_s_socket</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bio_method</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SSLerr</name><argument_list>(<argument><expr><name>SSL_F_SSL_SET_FD</name></expr></argument>, <argument><expr><name>ERR_R_BUF_LIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><name>bio_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>bio</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SSLerr</name><argument_list>(<argument><expr><name>SSL_F_SSL_SET_FD</name></expr></argument>, <argument><expr><name>ERR_R_BUF_LIB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>BIO_set_data</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BIO_set_fd</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>err</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Load precomputed DH parameters.
 *
 *    To prevent "downgrade" attacks, we perform a number of checks
 *    to verify that the DBA-generated DH parameters file contains
 *    what we expect it to contain.
 */</comment>
<function><type><specifier>static</specifier> <name>DH</name>  <modifier>*</modifier></type>
<name>load_dh_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isServerStart</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>FILE</name>       <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DH</name>           <modifier>*</modifier></type><name>dh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>codes</name></decl>;</decl_stmt>

    <comment type="block">/* attempt to open file.  It's not an error if it doesn't exist. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open DH parameters file \"%s\": %m"</literal></expr></argument>,
                        <argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>PEM_read_DHparams</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dh</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not load DH parameters file: %s"</literal></expr></argument>,
                        <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* make sure the DH parameters are usable */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>DH_check</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codes</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid DH parameters: %s"</literal></expr></argument>,
                        <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>codes</name> <operator>&amp;</operator> <name>DH_CHECK_P_NOT_PRIME</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid DH parameters: p is not prime"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>codes</name> <operator>&amp;</operator> <name>DH_NOT_SUITABLE_GENERATOR</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>codes</name> <operator>&amp;</operator> <name>DH_CHECK_P_NOT_SAFE_PRIME</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid DH parameters: neither suitable generator or safe prime"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>dh</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Load hardcoded DH parameters.
 *
 *    To prevent problems if the DH parameters files don't even
 *    exist, we can load DH parameters hardcoded into this file.
 */</comment>
<function><type><specifier>static</specifier> <name>DH</name>  <modifier>*</modifier></type>
<name>load_dh_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BIO</name>           <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DH</name>           <modifier>*</modifier></type><name>dh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new_mem_buf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>PEM_read_bio_DHparams</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"DH load buffer: %s"</literal></expr></argument>,
                                 <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>dh</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Passphrase collection callback
 *
 * If OpenSSL is told to use a passphrase-protected server key, by default
 * it will issue a prompt on /dev/tty and try to read a key from there.
 * That's no good during a postmaster SIGHUP cycle, not to mention SSL context
 * reload in an EXEC_BACKEND postmaster child.  So override it with this dummy
 * function that just returns an empty passphrase, guaranteeing failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ssl_passwd_cb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rwflag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Set flag to change the error message we'll report */</comment>
    <expr_stmt><expr><name>ssl_passwd_cb_called</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <comment type="block">/* And return empty string */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    Certificate verification callback
 *
 *    This callback allows us to log intermediate problems during
 *    verification, but for now we'll see if the final error message
 *    contains enough information.
 *
 *    This callback also allows us to override the default acceptance
 *    criteria (e.g., accepting self-signed or expired certs), but
 *    for now we accept the default checks.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>verify_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ok</name></decl></parameter>, <parameter><decl><type><name>X509_STORE_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    This callback is used to copy SSL information messages
 *    into the PostgreSQL log.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>info_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>SSL_CB_HANDSHAKE_START</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: handshake start"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_CB_HANDSHAKE_DONE</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: handshake done"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_CB_ACCEPT_LOOP</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: accept loop"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_CB_ACCEPT_EXIT</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: accept exit (%d)"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_CB_CONNECT_LOOP</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: connect loop"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_CB_CONNECT_EXIT</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: connect exit (%d)"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_CB_READ_ALERT</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: read alert (0x%04x)"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SSL_CB_WRITE_ALERT</name></expr>:</case>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"SSL: write alert (0x%04x)"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Set DH parameters for generating ephemeral DH keys.  The
 * DH parameters can take a long time to compute, so they must be
 * precomputed.
 *
 * Since few sites will bother to create a parameter file, we also
 * also provide a fallback to the parameters provided by the
 * OpenSSL project.
 *
 * These values can be static (once loaded or computed) since the
 * OpenSSL library can efficiently generate random keys from the
 * information provided.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>initialize_dh</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isServerStart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DH</name>           <modifier>*</modifier></type><name>dh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_DH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ssl_dh_params_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>load_dh_file</name><argument_list>(<argument><expr><name>ssl_dh_params_file</name></expr></argument>, <argument><expr><name>isServerStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>dh</name> <operator>=</operator> <call><name>load_dh_buffer</name><argument_list>(<argument><expr><name>file_dh2048</name></expr></argument>, <argument><expr><sizeof>sizeof <name>file_dh2048</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dh</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DH: could not load DH parameters"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SSL_CTX_set_tmp_dh</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DH: could not set DH parameters: %s"</literal></expr></argument>,
                         <argument><expr><call><name>SSLerrmessage</name><argument_list>(<argument><expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set ECDH parameters for generating ephemeral Elliptic Curve DH
 * keys.  This is much simpler than the DH parameters, as we just
 * need to provide the name of the curve to OpenSSL.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>initialize_ecdh</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isServerStart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_ECDH</name></cpp:ifndef>
    <decl_stmt><decl><type><name>EC_KEY</name>       <modifier>*</modifier></type><name>ecdh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nid</name> <operator>=</operator> <call><name>OBJ_sn2nid</name><argument_list>(<argument><expr><name>SSLECDHCurve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ECDH: unrecognized curve name: %s"</literal></expr></argument>, <argument><expr><name>SSLECDHCurve</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ecdh</name> <operator>=</operator> <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ecdh</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>isServerStart</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ECDH: could not create key"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_ECDH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_CTX_set_tmp_ecdh</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ecdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Obtain reason string for passed SSL errcode
 *
 * ERR_get_error() is used by caller to get errcode to pass here.
 *
 * Some caution is needed here since ERR_reason_error_string will
 * return NULL if it doesn't recognize the error code.  We don't
 * want to return NULL ever.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>SSLerrmessage</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ecode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errreason</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no SSL error reported"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>errreason</name> <operator>=</operator> <call><name>ERR_reason_error_string</name><argument_list>(<argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>errreason</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>errreason</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"SSL error code %lu"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>errbuf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return information about the SSL connection
 */</comment>
<function><type><name>int</name></type>
<name>be_tls_get_cipher_bits</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>bits</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SSL_get_cipher_bits</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>bits</name></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>be_tls_get_compression</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><call><name>SSL_get_current_compression</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>be_tls_get_version</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>SSL_get_version</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>be_tls_get_cipher</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>SSL_get_cipher</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>be_tls_get_peerdn_name</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>X509_NAME_to_cstring</name><argument_list>(<argument><expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Convert an X509 subject name to a cstring.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>X509_NAME_to_cstring</name><parameter_list>(<parameter><decl><type><name>X509_NAME</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BIO</name>           <modifier>*</modifier></type><name>membuf</name> <init>= <expr><call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>,
                <decl><type ref="prev"/><name>nid</name></decl>,
                <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name>X509_NAME_entry_count</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>X509_NAME_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ASN1_STRING</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>        <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name>nullterm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>BIO_set_close</name><argument_list>(<argument><expr><name>membuf</name></expr></argument>, <argument><expr><name>BIO_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>X509_NAME_get_entry</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nid</name> <operator>=</operator> <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><call><name>X509_NAME_ENTRY_get_object</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>X509_NAME_ENTRY_get_data</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>field_name</name> <operator>=</operator> <call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_name</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>field_name</name> <operator>=</operator> <call><name>OBJ_nid2ln</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>membuf</name></expr></argument>, <argument><expr><literal type="string">"/%s="</literal></expr></argument>, <argument><expr><name>field_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASN1_STRING_print_ex</name><argument_list>(<argument><expr><name>membuf</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
                             <argument><expr><operator>(</operator><operator>(</operator><name>ASN1_STRFLGS_RFC2253</name> <operator>&amp;</operator> <operator>~</operator><name>ASN1_STRFLGS_ESC_MSB</name><operator>)</operator>
                              <operator>|</operator> <name>ASN1_STRFLGS_UTF8_CONVERT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* ensure null termination of the BIO's content */</comment>
    <expr_stmt><expr><name>nullterm</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BIO_write</name><argument_list>(<argument><expr><name>membuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nullterm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>BIO_get_mem_data</name><argument_list>(<argument><expr><name>membuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>pg_any_to_server</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dp</name> <operator>!=</operator> <name>sp</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>membuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
