<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/tsearch/ts_locale.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ts_locale.c
 *        locale compatibility layer for tsearch
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *      src/backend/tsearch/ts_locale.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_public.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tsearch_readline_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_WIDE_UPPER_LOWER</name></cpp:ifdef>

<function><type><name>int</name></type>
<name>t_isdigit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>clen</name> <init>= <expr><call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>wchar_t</name></type>        <name><name>character</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>collation</name> <init>= <expr><name>DEFAULT_COLLATION_OID</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>
    <decl_stmt><decl><type><name>pg_locale_t</name></type> <name>mylocale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>

    <if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>lc_ctype_is_c</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>isdigit</name><argument_list>(<argument><expr><call><name>TOUCHAR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>char2wchar</name><argument_list>(<argument><expr><name>character</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>mylocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>iswdigit</name><argument_list>(<argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator> <name><name>character</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>t_isspace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>clen</name> <init>= <expr><call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>wchar_t</name></type>        <name><name>character</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>collation</name> <init>= <expr><name>DEFAULT_COLLATION_OID</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>
    <decl_stmt><decl><type><name>pg_locale_t</name></type> <name>mylocale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>

    <if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>lc_ctype_is_c</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>isspace</name><argument_list>(<argument><expr><call><name>TOUCHAR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>char2wchar</name><argument_list>(<argument><expr><name>character</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>mylocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>iswspace</name><argument_list>(<argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator> <name><name>character</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>t_isalpha</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>clen</name> <init>= <expr><call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>wchar_t</name></type>        <name><name>character</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>collation</name> <init>= <expr><name>DEFAULT_COLLATION_OID</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>
    <decl_stmt><decl><type><name>pg_locale_t</name></type> <name>mylocale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>

    <if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>lc_ctype_is_c</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>isalpha</name><argument_list>(<argument><expr><call><name>TOUCHAR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>char2wchar</name><argument_list>(<argument><expr><name>character</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>mylocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>iswalpha</name><argument_list>(<argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator> <name><name>character</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>t_isprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>clen</name> <init>= <expr><call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>wchar_t</name></type>        <name><name>character</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>collation</name> <init>= <expr><name>DEFAULT_COLLATION_OID</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>
    <decl_stmt><decl><type><name>pg_locale_t</name></type> <name>mylocale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>

    <if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>lc_ctype_is_c</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>isprint</name><argument_list>(<argument><expr><call><name>TOUCHAR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>char2wchar</name><argument_list>(<argument><expr><name>character</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>mylocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>iswprint</name><argument_list>(<argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator> <name><name>character</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* USE_WIDE_UPPER_LOWER */</comment>


<comment type="block">/*
 * Set up to read a file using tsearch_readline().  This facility is
 * better than just reading the file directly because it provides error
 * context pointing to the specific line where a problem is detected.
 *
 * Expected usage is:
 *
 *        tsearch_readline_state trst;
 *
 *        if (!tsearch_readline_begin(&amp;trst, filename))
 *            ereport(ERROR,
 *                    (errcode(ERRCODE_CONFIG_FILE_ERROR),
 *                     errmsg("could not open stop-word file \"%s\": %m",
 *                            filename)));
 *        while ((line = tsearch_readline(&amp;trst)) != NULL)
 *            process line;
 *        tsearch_readline_end(&amp;trst);
 *
 * Note that the caller supplies the ereport() for file open failure;
 * this is so that a custom message can be provided.  The filename string
 * passed to tsearch_readline_begin() must remain valid through
 * tsearch_readline_end().
 */</comment>
<function><type><name>bool</name></type>
<name>tsearch_readline_begin</name><parameter_list>(<parameter><decl><type><name>tsearch_readline_state</name> <modifier>*</modifier></type><name>stp</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stp</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>curline</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <comment type="block">/* Setup error traceback support for ereport() */</comment>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>tsearch_readline_callback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>stp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name>error_context_stack</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <operator>&amp;</operator><name><name>stp</name><operator>-&gt;</operator><name>cb</name></name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read the next line from a tsearch data file (expected to be in UTF-8), and
 * convert it to database encoding if needed. The returned string is palloc'd.
 * NULL return means EOF.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>tsearch_readline</name><parameter_list>(<parameter><decl><type><name>tsearch_readline_state</name> <modifier>*</modifier></type><name>stp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>lineno</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>curline</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>t_readline</name><argument_list>(<argument><expr><name><name>stp</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stp</name><operator>-&gt;</operator><name>curline</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Close down after reading a file with tsearch_readline()
 */</comment>
<function><type><name>void</name></type>
<name>tsearch_readline_end</name><parameter_list>(<parameter><decl><type><name>tsearch_readline_state</name> <modifier>*</modifier></type><name>stp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name><name>stp</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Pop the error context stack */</comment>
    <expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <name><name>stp</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>previous</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Error context callback for errors occurring while reading a tsearch
 * configuration file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tsearch_readline_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tsearch_readline_state</name> <modifier>*</modifier></type><name>stp</name> <init>= <expr><operator>(</operator><name>tsearch_readline_state</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We can't include the text of the config line for errors that occur
     * during t_readline() itself.  This is only partly a consequence of our
     * arms-length use of that routine: the major cause of such errors is
     * encoding violations, and we daren't try to print error messages
     * containing badly-encoded data.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>stp</name><operator>-&gt;</operator><name>curline</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"line %d of configuration file \"%s\": \"%s\""</literal></expr></argument>,
                   <argument><expr><name><name>stp</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>,
                   <argument><expr><name><name>stp</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>,
                   <argument><expr><name><name>stp</name><operator>-&gt;</operator><name>curline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"line %d of configuration file \"%s\""</literal></expr></argument>,
                   <argument><expr><name><name>stp</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>,
                   <argument><expr><name><name>stp</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Read the next line from a tsearch data file (expected to be in UTF-8), and
 * convert it to database encoding if needed. The returned string is palloc'd.
 * NULL return means EOF.
 *
 * Note: direct use of this function is now deprecated.  Go through
 * tsearch_readline() to provide better error reporting.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>t_readline</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>recoded</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>        <comment type="block">/* lines must not be longer than this */</comment>

    <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Make sure the input is valid UTF-8 */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pg_verify_mbstr</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* And convert */</comment>
    <expr_stmt><expr><name>recoded</name> <operator>=</operator> <call><name>pg_any_to_server</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>recoded</name> <operator>==</operator> <name>buf</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * conversion didn't pstrdup, so we must. We can use the length of the
         * original string, because no conversion was done.
         */</comment>
        <expr_stmt><expr><name>recoded</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name>recoded</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>recoded</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lowerstr --- fold null-terminated string to lower case
 *
 * Returned string is palloc'd
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>lowerstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>lowerstr_with_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lowerstr_with_len --- fold string to lower case
 *
 * Input string need not be null-terminated.
 *
 * Returned string is palloc'd
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>lowerstr_with_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_WIDE_UPPER_LOWER</name></cpp:ifdef>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>collation</name> <init>= <expr><name>DEFAULT_COLLATION_OID</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>
    <decl_stmt><decl><type><name>pg_locale_t</name></type> <name>mylocale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* TODO */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_WIDE_UPPER_LOWER</name></cpp:ifdef>

    <comment type="block">/*
     * Use wide char code only when max encoding length &gt; 1 and ctype != C.
     * Some operating systems fail with multi-byte encodings and a C locale.
     * Also, for a C locale there is no need to process as multibyte. From
     * backend/utils/adt/oracle_compat.c Teodor
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lc_ctype_is_c</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>wchar_t</name>    <modifier>*</modifier></type><name>wstr</name></decl>,
                   <decl><type ref="prev"><modifier>*</modifier></type><name>wptr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>wlen</name></decl>;</decl_stmt>

        <comment type="block">/*
         * alloc number of wchar_t for worst case, len contains number of
         * bytes &gt;= number of characters and alloc 1 wchar_t for 0, because
         * wchar2char wants zero-terminated string
         */</comment>
        <expr_stmt><expr><name>wptr</name> <operator>=</operator> <name>wstr</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>char2wchar</name><argument_list>(<argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mylocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>wlen</name> <operator>&lt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>*</operator><name>wptr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>wptr</name> <operator>=</operator> <call><name>towlower</name><argument_list>(<argument><expr><operator>(</operator><name>wint_t</name><operator>)</operator> <operator>*</operator><name>wptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>wptr</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/*
         * Alloc result string for worst case + '\0'
         */</comment>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call> <operator>*</operator> <name>wlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>wchar2char</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>mylocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>wstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CHARACTER_NOT_IN_REPERTOIRE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"conversion from wchar_t to server encoding failed: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>wlen</name> <operator>&lt;</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                            <comment type="block">/* USE_WIDE_UPPER_LOWER */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>outptr</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>outptr</name> <operator>=</operator> <name>out</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>str</name><operator>)</operator> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>outptr</name><operator>++</operator> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><call><name>TOUCHAR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
