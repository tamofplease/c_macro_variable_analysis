<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/tsearch/dict_synonym.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dict_synonym.c
 *        Synonym dictionary: replace word by its synonym
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *      src/backend/tsearch/dict_synonym.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>outlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16</name></type>        <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>Syn</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int</name></type>            <name>len</name></decl>;</decl_stmt>            <comment type="block">/* length of syn array */</comment>
    <decl_stmt><decl><type><name>Syn</name>           <modifier>*</modifier></type><name>syn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>case_sensitive</name></decl>;</decl_stmt>
}</block></struct></type> <name>DictSyn</name>;</typedef>

<comment type="block">/*
 * Finds the next whitespace-delimited word within the 'in' string.
 * Returns a pointer to the first character of the word, and a pointer
 * to the next byte after the last character in the word (in *end).
 * Character '*' at the end of word will not be threated as word
 * character if flags is not null.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>findwrd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>uint16</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>lastchar</name></decl>;</decl_stmt>

    <comment type="block">/* Skip leading spaces */</comment>
    <while>while <condition>(<expr><operator>*</operator><name>in</name> <operator>&amp;&amp;</operator> <call><name>t_isspace</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>in</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <comment type="block">/* Return NULL on empty lines */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>lastchar</name> <operator>=</operator> <name>start</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

    <comment type="block">/* Find end of word */</comment>
    <while>while <condition>(<expr><operator>*</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>t_isspace</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>lastchar</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>in</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>in</name> <operator>-</operator> <name>lastchar</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>lastchar</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>flags</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <name>TSL_PREFIX</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>lastchar</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareSyn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>Syn</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>in</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>Syn</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>dsynonym_init</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>dictoptions</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DictSyn</name>    <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>case_sensitive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tsearch_readline_state</name></type> <name>trst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>starti</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>starto</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16</name></type>        <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>dictoptions</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"Synonyms"</literal></expr></argument>, <argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"CaseSensitive"</literal></expr></argument>, <argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>case_sensitive</name> <operator>=</operator> <call><name>defGetBoolean</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized synonym parameter: \"%s\""</literal></expr></argument>,
                            <argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing Synonyms parameter"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_tsearch_config_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"syn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tsearch_readline_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trst</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open synonym file \"%s\": %m"</literal></expr></argument>,
                        <argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>DictSyn</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictSyn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>tsearch_readline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trst</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>starti</name> <operator>=</operator> <call><name>findwrd</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>starti</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Empty line */</comment>
            <goto>goto <name>skipline</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* A line with only one word. Ignore silently. */</comment>
            <goto>goto <name>skipline</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>starto</name> <operator>=</operator> <call><name>findwrd</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>starto</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* A line with only one word (+whitespace). Ignore silently. */</comment>
            <goto>goto <name>skipline</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <comment type="block">/*
         * starti now points to the first word, and starto to the second word
         * on the line, with a \0 terminator at the end of both words.
         */</comment>

        <if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&gt;=</operator> <name><name>d</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name></name> <operator>=</operator> <operator>(</operator><name>Syn</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Syn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name></name> <operator>=</operator> <operator>(</operator><name>Syn</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Syn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>case_sensitive</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>starti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>out</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>starto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <call><name>lowerstr</name><argument_list>(<argument><expr><name>starti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>out</name> <operator>=</operator> <call><name>lowerstr</name><argument_list>(<argument><expr><name>starto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>outlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>starto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>

<label><name>skipline</name>:</label>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>tsearch_readline_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Syn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareSyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>case_sensitive</name></name> <operator>=</operator> <name>case_sensitive</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dsynonym_lexize</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DictSyn</name>    <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>DictSyn</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type>        <name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Syn</name></type>            <name>key</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

    <comment type="block">/* note: d-&gt;len test protects against Solaris bsearch-of-no-items bug */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>d</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>case_sensitive</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>key</name><operator>.</operator><name>in</name></name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>key</name><operator>.</operator><name>in</name></name> <operator>=</operator> <call><name>lowerstr_with_len</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>Syn</name> <operator>*</operator><operator>)</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>syn</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Syn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareSyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name><name>found</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>found</name><operator>-&gt;</operator><name>outlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>found</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
