<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/tcop/dest.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * dest.c
 *      support for communication destinations
 *
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/backend/tcop/dest.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 *     INTERFACE ROUTINES
 *        BeginCommand - initialize the destination at start of command
 *        CreateDestReceiver - create tuple receiver object for destination
 *        EndCommand - clean up the destination at end of command
 *        NullCommand - tell dest that an empty query string was recognized
 *        ReadyForQuery - tell dest that we are ready for a new query
 *
 *     NOTES
 *        These routines do the appropriate work before and after
 *        tuples are returned by a query to keep the backend and the
 *        "destination" portals synchronized.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/printsimple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/printtup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/createas.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/matview.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/functions.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/producerReceiver.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tstoreReceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/portal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>



<comment type="block">/* ----------------
 *        dummy DestReceiver functions
 * ----------------
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>donothingReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>donothingStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>donothingCleanup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* this is used for both shutdown and destroy methods */</comment>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *        static DestReceiver structs for dest types needing no local state
 * ----------------
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>donothingDR</name> <init>= <expr><block>{
    <expr><name>donothingReceive</name></expr>, <expr><name>donothingStartup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
    <expr><name>DestNone</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>debugtupDR</name> <init>= <expr><block>{
    <expr><name>debugtup</name></expr>, <expr><name>debugStartup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
    <expr><name>DestDebug</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>printsimpleDR</name> <init>= <expr><block>{
    <expr><name>printsimple</name></expr>, <expr><name>printsimple_startup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
    <expr><name>DestRemoteSimple</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>DestReceiver</name></type> <name>spi_printtupDR</name> <init>= <expr><block>{
    <expr><name>spi_printtup</name></expr>, <expr><name>spi_dest_startup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
    <expr><name>DestSPI</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Globally available receiver for DestNone */</comment>
<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>None_Receiver</name> <init>= <expr><operator>&amp;</operator><name>donothingDR</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* ----------------
 *        BeginCommand - initialize the destination at start of command
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>BeginCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandTag</name></decl></parameter>, <parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Nothing to do at present */</comment>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *        CreateDestReceiver - return appropriate receiver function set for dest
 * ----------------
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateDestReceiver</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>DestRemote</name></expr>:</case>
        <case>case <expr><name>DestRemoteExecute</name></expr>:</case>
            <return>return <expr><call><name>printtup_create_DR</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>DestRemoteSimple</name></expr>:</case>
            <return>return <expr><operator>&amp;</operator><name>printsimpleDR</name></expr>;</return>

        <case>case <expr><name>DestNone</name></expr>:</case>
            <return>return <expr><operator>&amp;</operator><name>donothingDR</name></expr>;</return>

        <case>case <expr><name>DestDebug</name></expr>:</case>
            <return>return <expr><operator>&amp;</operator><name>debugtupDR</name></expr>;</return>

        <case>case <expr><name>DestSPI</name></expr>:</case>
            <return>return <expr><operator>&amp;</operator><name>spi_printtupDR</name></expr>;</return>

        <case>case <expr><name>DestTuplestore</name></expr>:</case>
            <return>return <expr><call><name>CreateTuplestoreDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

        <case>case <expr><name>DestIntoRel</name></expr>:</case>
            <return>return <expr><call><name>CreateIntoRelDestReceiver</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>DestCopyOut</name></expr>:</case>
            <return>return <expr><call><name>CreateCopyDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

        <case>case <expr><name>DestSQLFunction</name></expr>:</case>
            <return>return <expr><call><name>CreateSQLFunctionDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XCP</name></cpp:ifdef>
        <case>case <expr><name>DestProducer</name></expr>:</case>
            <return>return <expr><call><name>CreateProducerDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name>DestParallelSend</name></expr>:</case>
            <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <case>case <expr><name>DestTransientRel</name></expr>:</case>
            <return>return <expr><call><name>CreateTransientRelDestReceiver</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name>DestTupleQueue</name></expr>:</case>
            <return>return <expr><call><name>CreateTupleQueueDestReceiver</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>

    <comment type="block">/* should never get here */</comment>
    <return>return <expr><operator>&amp;</operator><name>donothingDR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *        EndCommand - clean up the destination at end of command
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>EndCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandTag</name></decl></parameter>, <parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>DestRemote</name></expr>:</case>
        <case>case <expr><name>DestRemoteExecute</name></expr>:</case>
        <case>case <expr><name>DestRemoteSimple</name></expr>:</case>

            <comment type="block">/*
             * We assume the commandTag is plain ASCII and therefore requires
             * no encoding conversion.
             */</comment>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"pid:%d send CommandComplete"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pq_putmessage</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>commandTag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>commandTag</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>DestNone</name></expr>:</case>
        <case>case <expr><name>DestDebug</name></expr>:</case>
        <case>case <expr><name>DestSPI</name></expr>:</case>
        <case>case <expr><name>DestTuplestore</name></expr>:</case>
        <case>case <expr><name>DestIntoRel</name></expr>:</case>
        <case>case <expr><name>DestCopyOut</name></expr>:</case>
        <case>case <expr><name>DestSQLFunction</name></expr>:</case>
        <case>case <expr><name>DestProducer</name></expr>:</case>
        <case>case <expr><name>DestParallelSend</name></expr>:</case>
        <case>case <expr><name>DestTransientRel</name></expr>:</case>
        <case>case <expr><name>DestTupleQueue</name></expr>:</case>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *        NullCommand - tell dest that an empty query string was recognized
 *
 *        In FE/BE protocol version 1.0, this hack is necessary to support
 *        libpq's crufty way of determining whether a multiple-command
 *        query string is done.  In protocol 2.0 it's probably not really
 *        necessary to distinguish empty queries anymore, but we still do it
 *        for backwards compatibility with 1.0.  In protocol 3.0 it has some
 *        use again, since it ensures that there will be a recognizable end
 *        to the response to an Execute message.
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>NullCommand</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>DestRemote</name></expr>:</case>
        <case>case <expr><name>DestRemoteExecute</name></expr>:</case>
        <case>case <expr><name>DestRemoteSimple</name></expr>:</case>

            <comment type="block">/*
             * tell the fe that we saw an empty query string.  In protocols
             * before 3.0 this has a useless empty-string message body.
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pq_putemptymessage</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pq_putmessage</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>

        <case>case <expr><name>DestNone</name></expr>:</case>
        <case>case <expr><name>DestDebug</name></expr>:</case>
        <case>case <expr><name>DestSPI</name></expr>:</case>
        <case>case <expr><name>DestTuplestore</name></expr>:</case>
        <case>case <expr><name>DestIntoRel</name></expr>:</case>
        <case>case <expr><name>DestCopyOut</name></expr>:</case>
        <case>case <expr><name>DestSQLFunction</name></expr>:</case>
        <case>case <expr><name>DestProducer</name></expr>:</case>
        <case>case <expr><name>DestParallelSend</name></expr>:</case>
        <case>case <expr><name>DestTransientRel</name></expr>:</case>
        <case>case <expr><name>DestTupleQueue</name></expr>:</case>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *        ReadyForQuery - tell dest that we are ready for a new query
 *
 *        The ReadyForQuery message is sent so that the FE can tell when
 *        we are done processing a query string.
 *        In versions 3.0 and up, it also carries a transaction state indicator.
 *
 *        Note that by flushing the stdio buffer here, we can avoid doing it
 *        most other places and thus reduce the number of separate packets sent.
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>ReadyForQuery</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>DestRemote</name></expr>:</case>
        <case>case <expr><name>DestRemoteExecute</name></expr>:</case>
        <case>case <expr><name>DestRemoteSimple</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>TransactionBlockStatusCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pq_putemptymessage</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <comment type="block">/* Flush output at end of cycle in any case. */</comment>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>    <name>_PG_REGRESS_</name></cpp:ifdef>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"pid %d send ReadyForQuery"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

        <case>case <expr><name>DestNone</name></expr>:</case>
        <case>case <expr><name>DestDebug</name></expr>:</case>
        <case>case <expr><name>DestSPI</name></expr>:</case>
        <case>case <expr><name>DestTuplestore</name></expr>:</case>
        <case>case <expr><name>DestIntoRel</name></expr>:</case>
        <case>case <expr><name>DestCopyOut</name></expr>:</case>
        <case>case <expr><name>DestSQLFunction</name></expr>:</case>
        <case>case <expr><name>DestProducer</name></expr>:</case>
        <case>case <expr><name>DestParallelSend</name></expr>:</case>
        <case>case <expr><name>DestTransientRel</name></expr>:</case>
        <case>case <expr><name>DestTupleQueue</name></expr>:</case>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SUPPORT_DISTRIBUTED_TRANSACTION__</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>ReadyForCommit</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>DestRemote</name></expr>:</case>
        <case>case <expr><name>DestRemoteExecute</name></expr>:</case>
        <case>case <expr><name>DestRemoteSimple</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>TransactionBlockStatusCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pq_putemptymessage</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <comment type="block">/* Flush output at end of cycle in any case. */</comment>
            <expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>DestNone</name></expr>:</case>
        <case>case <expr><name>DestDebug</name></expr>:</case>
        <case>case <expr><name>DestSPI</name></expr>:</case>
        <case>case <expr><name>DestTuplestore</name></expr>:</case>
        <case>case <expr><name>DestIntoRel</name></expr>:</case>
        <case>case <expr><name>DestCopyOut</name></expr>:</case>
        <case>case <expr><name>DestSQLFunction</name></expr>:</case>
        <case>case <expr><name>DestProducer</name></expr>:</case>
        <case>case <expr><name>DestParallelSend</name></expr>:</case>
        <case>case <expr><name>DestTransientRel</name></expr>:</case>
        <case>case <expr><name>DestTupleQueue</name></expr>:</case>
            <break>break;</break>
    </block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
