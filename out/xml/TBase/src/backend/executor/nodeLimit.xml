<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/executor/nodeLimit.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeLimit.c
 *      Routines to handle limiting of query results where appropriate
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/executor/nodeLimit.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * INTERFACE ROUTINES
 *        ExecLimit        - extract a limited range of tuples
 *        ExecInitLimit    - initialize node and subnodes..
 *        ExecEndLimit    - shutdown node and subnodes
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeLimit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/squeue.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>recompute_limits</name><parameter_list>(<parameter><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pass_down_bound</name><parameter_list>(<parameter><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>child_node</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* ----------------------------------------------------------------
 *        ExecLimit
 *
 *        This is a very simple node which just performs LIMIT/OFFSET
 *        filtering on the stream of tuples returned by a subplan.
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>            <comment type="block">/* return: a tuple or NULL */</comment>
<name>ExecLimit</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>LimitState</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScanDirection</name></type> <name>direction</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>outerPlan</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * get information from the node
     */</comment>
    <expr_stmt><expr><name>direction</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>es_direction</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>outerPlan</name> <operator>=</operator> <call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The main logic is a simple state machine.
     */</comment>
    <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>LIMIT_INITIAL</name></expr>:</case>

            <comment type="block">/*
             * First call for this node, so compute limit/offset. (We can't do
             * this any earlier, because parameters from upper nodes will not
             * be set during ExecInitLimit.)  This also sets position = 0 and
             * changes the state to LIMIT_RESCAN.
             */</comment>
            <expr_stmt><expr><call><name>recompute_limits</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* FALL THRU */</comment>

        <case>case <expr><name>LIMIT_RESCAN</name></expr>:</case>

            <comment type="block">/*
             * If backwards scan, just return NULL without changing state.
             */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ScanDirectionIsForward</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Check for empty window; if so, treat like empty subplan.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>noCount</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_EMPTY</name></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * Fetch rows from subplan until we reach position &gt; offset.
             */</comment>
            <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="block">/*
                     * The subplan returns too few tuples for us to produce
                     * any output at all.
                     */</comment>
                    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_EMPTY</name></expr>;</expr_stmt>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>subSlot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>node</name><operator>-&gt;</operator><name>position</name></name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="block">/*
             * Okay, we have the first tuple of the window.
             */</comment>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_INWINDOW</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>LIMIT_EMPTY</name></expr>:</case>

            <comment type="block">/*
             * The subplan is known to return no tuples (or not more than
             * OFFSET tuples, in general).  So we return no tuples.
             */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>

        <case>case <expr><name>LIMIT_INWINDOW</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>ScanDirectionIsForward</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * Forwards scan, so check for stepping off end of window. If
                 * we are at the end of the window, return NULL without
                 * advancing the subplan or the position variable; but change
                 * the state machine state to record having done so.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>noCount</name></name> <operator>&amp;&amp;</operator>
                    <name><name>node</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_WINDOWEND</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
                    <if_stmt><if>if <condition>(<expr><name>g_DataPumpDebug</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ExecLimit: pid %d nodeLimit finishing"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    
					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>Limit</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name><operator>)</operator><operator>-&gt;</operator><name>skipEarlyFinish</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ExecFinishNode</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>g_DataPumpDebug</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ExecLimit: pid %d nodeLimit finished"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/*
                 * Get next tuple from subplan, if any.
                 */</comment>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_SUBPLANEOF</name></expr>;</expr_stmt>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>subSlot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>position</name></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/*
                 * Backwards scan, so check for stepping off start of window.
                 * As above, change only state-machine status if so.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>position</name></name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_WINDOWSTART</name></expr>;</expr_stmt>
                    <return>return <expr><name>NULL</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/*
                 * Get previous tuple from subplan; there should be one!
                 */</comment>
                <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"LIMIT subplan failed to run backwards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>subSlot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>position</name></name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>

        <case>case <expr><name>LIMIT_SUBPLANEOF</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>ScanDirectionIsForward</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Backing up from subplan EOF, so re-fetch previous tuple; there
             * should be one!  Note previous tuple must be in window.
             */</comment>
            <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"LIMIT subplan failed to run backwards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>subSlot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_INWINDOW</name></expr>;</expr_stmt>
            <comment type="block">/* position does not change 'cause we didn't advance it before */</comment>
            <break>break;</break>

        <case>case <expr><name>LIMIT_WINDOWEND</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>ScanDirectionIsForward</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Backing up from window end: simply re-return the last tuple
             * fetched from the subplan.
             */</comment>
            <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>subSlot</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_INWINDOW</name></expr>;</expr_stmt>
            <comment type="block">/* position does not change 'cause we didn't advance it before */</comment>
            <break>break;</break>

        <case>case <expr><name>LIMIT_WINDOWSTART</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ScanDirectionIsForward</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Advancing after having backed off window start: simply
             * re-return the last tuple fetched from the subplan.
             */</comment>
            <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>subSlot</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_INWINDOW</name></expr>;</expr_stmt>
            <comment type="block">/* position does not change 'cause we didn't change it before */</comment>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"impossible LIMIT state: %d"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>lstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>slot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>        <comment type="block">/* keep compiler quiet */</comment>
            <break>break;</break>
    </block_content>}</block></switch>

    <comment type="block">/* Return the current tuple */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Evaluate the limit/offset expressions --- done at startup or rescan.
 *
 * This is also a handy place to reset the current-position state info.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>recompute_limits</name><parameter_list>(<parameter><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isNull</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>limitOffset</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ExecEvalExprSwitchContext</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>limitOffset</name></name></expr></argument>,
                                        <argument><expr><name>econtext</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Interpret NULL offset as no offset */</comment>
        <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"OFFSET must not be negative"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* No OFFSET supplied */</comment>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>limitCount</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ExecEvalExprSwitchContext</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>limitCount</name></name></expr></argument>,
                                        <argument><expr><name>econtext</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Interpret NULL count as no count (LIMIT ALL) */</comment>
        <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>noCount</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_ROW_COUNT_IN_LIMIT_CLAUSE</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"LIMIT must not be negative"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>noCount</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* No COUNT supplied */</comment>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>noCount</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Reset position to start-of-scan */</comment>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>subSlot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Set state-machine state */</comment>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_RESCAN</name></expr>;</expr_stmt>

    <comment type="block">/* Notify child node about limit, if useful */</comment>
    <expr_stmt><expr><call><name>pass_down_bound</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * If we have a COUNT, and our input is a Sort node, notify it that it can
 * use bounded sort.  Also, if our input is a MergeAppend, we can apply the
 * same bound to any Sorts that are direct children of the MergeAppend,
 * since the MergeAppend surely need read no more than that many tuples from
 * any one input.  We also have to be prepared to look through a Result,
 * since the planner might stick one atop MergeAppend for projection purposes.
 *
 * This is a bit of a kluge, but we don't have any more-abstract way of
 * communicating between the two nodes; and it doesn't seem worth trying
 * to invent one without some more examples of special communication needs.
 *
 * Note: it is the responsibility of nodeSort.c to react properly to
 * changes of these parameters.  If we ever do redesign this, it'd be a
 * good idea to integrate this signaling with the parameter-change mechanism.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pass_down_bound</name><parameter_list>(<parameter><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>child_node</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>child_node</name></expr></argument>, <argument><expr><name>SortState</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SortState</name>  <modifier>*</modifier></type><name>sortState</name> <init>= <expr><operator>(</operator><name>SortState</name> <operator>*</operator><operator>)</operator> <name>child_node</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64</name></type>        <name>tuples_needed</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* negative test checks for overflow in sum */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>noCount</name></name> <operator>||</operator> <name>tuples_needed</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* make sure flag gets reset if needed upon rescan */</comment>
            <expr_stmt><expr><name><name>sortState</name><operator>-&gt;</operator><name>bounded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>sortState</name><operator>-&gt;</operator><name>bounded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sortState</name><operator>-&gt;</operator><name>bound</name></name> <operator>=</operator> <name>tuples_needed</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>child_node</name></expr></argument>, <argument><expr><name>MergeAppendState</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MergeAppendState</name> <modifier>*</modifier></type><name>maState</name> <init>= <expr><operator>(</operator><name>MergeAppendState</name> <operator>*</operator><operator>)</operator> <name>child_node</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>maState</name><operator>-&gt;</operator><name>ms_nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pass_down_bound</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>maState</name><operator>-&gt;</operator><name>mergeplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>child_node</name></expr></argument>, <argument><expr><name>ResultState</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * If Result supported qual checking, we'd have to punt on seeing a
         * qual.  Note that having a resconstantqual is not a showstopper: if
         * that fails we're not getting any rows at all.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>child_node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pass_down_bound</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>child_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecInitLimit
 *
 *        This initializes the limit node state structures and
 *        the node's subplan.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>LimitState</name> <modifier>*</modifier></type>
<name>ExecInitLimit</name><parameter_list>(<parameter><decl><type><name>Limit</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>limitstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Plan</name>       <modifier>*</modifier></type><name>outerPlan</name></decl>;</decl_stmt>

    <comment type="block">/* check for unsupported flags */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * create state structure
     */</comment>
    <expr_stmt><expr><name>limitstate</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>LimitState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>limitstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>limitstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>limitstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecLimit</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>limitstate</name><operator>-&gt;</operator><name>lstate</name></name> <operator>=</operator> <name>LIMIT_INITIAL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Miscellaneous initialization
     *
     * Limit nodes never call ExecQual or ExecProject, but they need an
     * exprcontext anyway to evaluate the limit/offset parameters in.
     */</comment>
    <expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>limitstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * initialize child expressions
     */</comment>
    <expr_stmt><expr><name><name>limitstate</name><operator>-&gt;</operator><name>limitOffset</name></name> <operator>=</operator> <call><name>ExecInitExpr</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>limitOffset</name></name></expr></argument>,
                                           <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>limitstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>limitstate</name><operator>-&gt;</operator><name>limitCount</name></name> <operator>=</operator> <call><name>ExecInitExpr</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>limitCount</name></name></expr></argument>,
                                          <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>limitstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Tuple table initialization (XXX not actually used...)
     */</comment>
    <expr_stmt><expr><call><name>ExecInitResultTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>limitstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * then initialize outer plan
     */</comment>
    <expr_stmt><expr><name>outerPlan</name> <operator>=</operator> <call><name>outerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>limitstate</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * limit nodes do no projections, so initialize projection info for this
     * node appropriately
     */</comment>
    <expr_stmt><expr><call><name>ExecAssignResultTypeFromTL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>limitstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>limitstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>limitstate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecEndLimit
 *
 *        This shuts down the subplan and frees resources allocated
 *        to this node.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndLimit</name><parameter_list>(<parameter><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ExecFreeExprContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ExecReScanLimit</name><parameter_list>(<parameter><decl><type><name>LimitState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Recompute limit/offset in case parameters changed, and reset the state
     * machine.  We must do this before rescanning our child node, in case
     * it's a Sort that we are passing the parameters down to.
     */</comment>
    <expr_stmt><expr><call><name>recompute_limits</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * if chgParam of subnode is not null then plan will be re-scanned by
     * first ExecProcNode.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
