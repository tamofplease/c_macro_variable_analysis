<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/executor/producerReceiver.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * producerReceiver.c
 *      An implementation of DestReceiver that distributes the result tuples to
 *      multiple customers via a SharedQueue.
 *
 *
 * Copyright (c) 2012-2014, TransLattice, Inc.
 *
 * IDENTIFICATION
 *      src/backend/executor/producerReceiver.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/producerReceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/nodemgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/pquery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tuplestore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>
    <comment type="block">/* parameters: */</comment>
    <decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>consumer</name></decl>;</decl_stmt>            <comment type="block">/* where to put the tuples for self */</comment>
    <decl_stmt><decl><type><name>AttrNumber</name></type> <name>distKey</name></decl>;</decl_stmt>                <comment type="block">/* distribution key attribute in the tuple */</comment>
    <decl_stmt><decl><type><name>Locator</name> <modifier>*</modifier></type><name>locator</name></decl>;</decl_stmt>                <comment type="block">/* locator is determining destination nodes */</comment>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>distNodes</name></decl>;</decl_stmt>                    <comment type="block">/* array where to get locator results */</comment>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>consMap</name></decl>;</decl_stmt>                    <comment type="block">/* map of consumers: consMap[node-1] indicates
                                     * the target consumer */</comment>
    <decl_stmt><decl><type><name>SharedQueue</name></type> <name>squeue</name></decl>;</decl_stmt>                <comment type="block">/* a SharedQueue for result distribution */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>DataPumpSender</name></type> <name>sender</name></decl>;</decl_stmt>             <comment type="block">/* used to send data locally, could be NULL */</comment>
    <decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>nodeMap</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>tmpcxt</name></decl>;</decl_stmt>           <comment type="block">/* holds temporary data */</comment>
    <decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier><modifier>*</modifier></type><name>tstores</name></decl>;</decl_stmt>        <comment type="block">/* storage to buffer data if destination queue
                                      * is full */</comment>
    <decl_stmt><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl>;</decl_stmt>                <comment type="block">/* description of received tuples */</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>tcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>selfcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>othercount</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>uint64</name></type>      <name>send_tuples</name></decl>;</decl_stmt>        <comment type="block">/* number of tuples sent to remote */</comment>
    <decl_stmt><decl><type><name>TimestampTz</name></type> <name>send_total_time</name></decl>;</decl_stmt>    <comment type="block">/* total time to send tuples */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>ProducerState</name>;</typedef>


<comment type="block">/*
 * Prepare to receive tuples from executor.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>producerStartupReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ActivePortal</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Normally ExecutorContext is current here. However we should better
         * create local producer storage in the Portal's context: producer
         * may keep pushing records to consumers after executor is destroyed.
         */</comment>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>savecontext</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>savecontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>PortalGetHeapMemory</name><argument_list>(<argument><expr><name>ActivePortal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>typeinfo</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>typeinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>typeinfo</name></name> <operator>=</operator> <call><name>CreateTupleDescCopy</name><argument_list>(<argument><expr><name>typeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>savecontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>typeinfo</name></name> <operator>=</operator> <name>typeinfo</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call>(<modifier>*</modifier><name><name>myState</name><operator>-&gt;</operator><name>consumer</name><operator>-&gt;</operator><name>rStartup</name></name>) <argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>typeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Receive a tuple from the executor and dispatch it to the proper consumer
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>producerReceiveSlot</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type>        <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>ncount</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>distKey</name></name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>distKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__COLD_HOT__</name></cpp:ifdef>
    <expr_stmt><expr><name>ncount</name> <operator>=</operator> <call><name>GET_NODES</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>ncount</name> <operator>=</operator> <call><name>GET_NODES</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tcount</name></name><operator>++</operator></expr>;</expr_stmt>
    <comment type="block">/* Dispatch the tuple */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>consumerIdx</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name>locatorType</name> <init>= <expr><call><name>getLocatorDisType</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="char">'S'</literal> <operator>==</operator> <name>locatorType</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nodeid</name> <init>= <expr><name><name>myState</name><operator>-&gt;</operator><name>distNodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nodeid</name> <operator>&lt;</operator> <name>MAX_NODES_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* data distributed by share queue */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>consumerIdx</name> <operator>=</operator> <call><name>GetConsumerIdx</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>, <argument><expr><name>nodeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <comment type="block">/* data replication */</comment>
            <block>{<block_content>
                <expr_stmt><expr><name>consumerIdx</name> <operator>=</operator> <name><name>myState</name><operator>-&gt;</operator><name>nodeMap</name><index>[<expr><name>nodeid</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>SQ_CONS_INIT</name> <operator>==</operator> <name>consumerIdx</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid nodeid %d in producerReceiveSlot."</literal></expr></argument>, <argument><expr><name>nodeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>consumerIdx</name> <operator>=</operator> <name><name>myState</name><operator>-&gt;</operator><name>distNodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>consumerIdx</name> <operator>==</operator> <name>SQ_CONS_NONE</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>consumerIdx</name> <operator>==</operator> <name>SQ_CONS_SELF</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call>(<modifier>*</modifier><name><name>myState</name><operator>-&gt;</operator><name>consumer</name><operator>-&gt;</operator><name>receiveSlot</name></name>) <argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>selfcount</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * If the tuple will not fit to the consumer queue it will be stored
             * in the local tuplestore. The tuplestore should be in the portal
             * context, because ExecutorContext may be destroyed when tuples
             * are not yet pushed to the consumer queue.
             */</comment>
            <decl_stmt><decl><type><name>MemoryContext</name></type> <name>savecontext</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ActivePortal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>savecontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>PortalGetHeapMemory</name><argument_list>(<argument><expr><name>ActivePortal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>g_UseDataPump</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TimestampTz</name></type> <name>begin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TimestampTz</name></type> <name>end</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>enable_statistic</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                
                <expr_stmt><expr><call><name>SendDataRemote</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>, <argument><expr><name>consumerIdx</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, 
                                                            <argument><expr><operator>&amp;</operator><name><name>myState</name><operator>-&gt;</operator><name>tstores</name><index>[<expr><name>consumerIdx</name></expr>]</index></name></expr></argument>, 
                                                            <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tmpcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>enable_statistic</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>end</name>   <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>send_tuples</name></name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>send_total_time</name></name> <operator>+=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>SharedQueueWrite</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>, <argument><expr><name>consumerIdx</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>,
                                 <argument><expr><operator>&amp;</operator><name><name>myState</name><operator>-&gt;</operator><name>tstores</name><index>[<expr><name>consumerIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tmpcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>savecontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>othercount</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Clean up at end of an executor run
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>producerShutdownReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>enable_statistic</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ProducerSend: send_tuples:%lu, send_total_time:%ld, avg_time:%lf."</literal></expr></argument>,
                   <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>send_tuples</name></name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>send_total_time</name></name></expr></argument>,
                   <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>myState</name><operator>-&gt;</operator><name>send_total_time</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>myState</name><operator>-&gt;</operator><name>send_tuples</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call>(<modifier>*</modifier><name><name>myState</name><operator>-&gt;</operator><name>consumer</name><operator>-&gt;</operator><name>rShutdown</name></name>) <argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Destroy receiver when done with it
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>producerDestroyReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"Producer stats: total %ld tuples, %ld tuples to self, %ld to other nodes"</literal></expr></argument>,
         <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tcount</name></name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>selfcount</name></name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>othercount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call>(<modifier>*</modifier><name><name>myState</name><operator>-&gt;</operator><name>consumer</name><operator>-&gt;</operator><name>rDestroy</name></name>) <argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>nodeMap</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>nodeMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>nodeMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Make sure all data are in the squeue */</comment>
    <while>while <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>SharedQueueFinish</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>typeinfo</name></name></expr></argument>,
                              <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"SharedQueueFinish returned 0 - freeing tstores"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>SharedQueueWaitOnProducerLatch</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>, <argument><expr><literal type="number">10000L</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <comment type="block">/*
                 * Do not wait for consumers that was not even connected after
                 * 10 seconds after start waiting for their disconnection.
                 * That should help to break the loop which would otherwise
                 * endless.  The error will be emitted later in
                 * SharedQueueUnBind
                 */</comment>
                <expr_stmt><expr><call><name>SharedQueueResetNotConnected</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* wait while consumer are finishing and release shared resources */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SharedQueueUnBind</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Release workspace if any */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>locator</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>freeLocator</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>myState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Initially create a DestReceiver object.
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateProducerDestReceiver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProducerState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>producerReceiveSlot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>producerStartupReceiver</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>producerShutdownReceiver</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>producerDestroyReceiver</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>=</operator> <name>DestProducer</name></expr>;</expr_stmt>

    <comment type="block">/* private fields will be set by SetTuplestoreDestReceiverParams */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>tcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>selfcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>othercount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>send_tuples</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>send_total_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>nodeMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Set parameters for a ProducerDestReceiver
 */</comment>
<function><type><name>void</name></type>
<name>SetProducerDestReceiverParams</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                              <parameter><decl><type><name>AttrNumber</name></type> <name>distKey</name></decl></parameter>,
                              <parameter><decl><type><name>Locator</name> <modifier>*</modifier></type><name>locator</name></decl></parameter>,
                              <parameter><decl><type><name>SharedQueue</name></type> <name>squeue</name></decl></parameter>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>                              
                                ,
                              <parameter><decl><type><name>DataPumpSender</name></type> <name>sender</name></decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                              )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>==</operator> <name>DestProducer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>distKey</name></name> <operator>=</operator> <name>distKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>locator</name></name> <operator>=</operator> <name>locator</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name> <operator>=</operator> <name>squeue</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>sender</name></name> <operator>=</operator> <name>sender</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>typeinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tmpcxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <comment type="block">/* Create workspace */</comment>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>distNodes</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>getLocatorResults</name><argument_list>(<argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>squeue</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name> <operator>=</operator> <operator>(</operator><name>Tuplestorestate</name> <operator>*</operator><operator>*</operator><operator>)</operator>
            <call><name>palloc0</name><argument_list>(<argument><expr><call><name>getLocatorNodeCount</name><argument_list>(<argument><expr><name>locator</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Tuplestorestate</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name> <operator>=</operator> <operator>(</operator><name>Tuplestorestate</name> <operator>*</operator><operator>*</operator><operator>)</operator>
            <call><name>palloc0</name><argument_list>(<argument><expr><name>NumDataNodes</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Tuplestorestate</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 * Set a DestReceiver to receive tuples targeted to "self".
 * Returns old value of the self consumer
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>SetSelfConsumerDestReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                            <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>consumer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>oldconsumer</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>==</operator> <name>DestProducer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oldconsumer</name> <operator>=</operator> <name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>consumer</name></name> <operator>=</operator> <name>consumer</name></expr>;</expr_stmt>
    <return>return <expr><name>oldconsumer</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Set a memory context to hold temporary data
 */</comment>
<function><type><name>void</name></type>
<name>SetProducerTempMemory</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>tmpcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>==</operator> <name>DestProducer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tmpcxt</name></name> <operator>=</operator> <name>tmpcxt</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Push data from the local tuplestores to the shared memory so consumers can
 * read them. Returns true if all data are pushed, false if something remains
 * in the tuplestores yet.
 */</comment>
<function><type><name>bool</name></type>
<name>ProducerReceiverPushBuffers</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>==</operator> <name>DestProducer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>SharedQueueFinish</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>squeue</name></name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>typeinfo</name></name></expr></argument>,
                              <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"SharedQueueFinish returned 0, freeing tstores"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tstores</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"SharedQueueFinish returned non-zero value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>SetProducerNodeMap</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>nodemap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ProducerState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>ProducerState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>nodeMap</name></name> <operator>=</operator> <operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_NODES_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>nodeMap</name></name></expr></argument>, <argument><expr><name>nodemap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_NODES_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
