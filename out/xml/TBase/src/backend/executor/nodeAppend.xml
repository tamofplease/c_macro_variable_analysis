<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/executor/nodeAppend.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeAppend.c
 *      routines to handle append nodes.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/executor/nodeAppend.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/* INTERFACE ROUTINES
 *        ExecInitAppend    - initialize the append node
 *        ExecAppend        - retrieve the next tuple from the node
 *        ExecEndAppend    - shut down the append node
 *        ExecReScanAppend - rescan the append node
 *
 *     NOTES
 *        Each append node contains a list of one or more subplans which
 *        must be iteratively processed (forwards or backwards).
 *        Tuples are retrieved by executing the 'whichplan'th subplan
 *        until the subplan stops returning tuples, at which point that
 *        plan is shut down and the next started up.
 *
 *        Append nodes don't make use of their left and right
 *        subtrees, rather they maintain a list of subplans so
 *        a typical append node looks like this in the plan tree:
 *
 *                   ...
 *                   /
 *                Append -------+------+------+--- nil
 *                /    \          |         |        |
 *              nil    nil         ...    ...    ...
 *                                 subplans
 *
 *        Append nodes are currently used for unions, and to support
 *        inheritance queries, where several relations need to be scanned.
 *        For example, in our standard person/student/employee/student-emp
 *        example, where student and employee inherit from person
 *        and student-emp inherits from student and employee, the
 *        query:
 *
 *                select name from person
 *
 *        generates the plan:
 *
 *                  |
 *                Append -------+-------+--------+--------+
 *                /    \          |          |           |        |
 *              nil    nil         Scan     Scan      Scan       Scan
 *                              |          |           |        |
 *                            person employee student student-emp
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeAppend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>ExecAppend</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>exec_append_initialize_next</name><parameter_list>(<parameter><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>appendstate</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* ----------------------------------------------------------------
 *        exec_append_initialize_next
 *
 *        Sets up the append state node for the "next" scan.
 *
 *        Returns t iff there is a "next" scan to process.
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>exec_append_initialize_next</name><parameter_list>(<parameter><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>appendstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>whichplan</name></decl>;</decl_stmt>

    <comment type="block">/*
     * get information from the append node
     */</comment>
    <expr_stmt><expr><name>whichplan</name> <operator>=</operator> <name><name>appendstate</name><operator>-&gt;</operator><name>as_whichplan</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>whichplan</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * if scanning in reverse, we start at the last scan in the list and
         * then proceed back to the first.. in any case we inform ExecAppend
         * that we are at the end of the line by returning FALSE
         */</comment>
        <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>as_whichplan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>whichplan</name> <operator>&gt;=</operator> <name><name>appendstate</name><operator>-&gt;</operator><name>as_nplans</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * as above, end the scan if we go beyond the last scan in our list..
         */</comment>
        <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>as_whichplan</name></name> <operator>=</operator> <name><name>appendstate</name><operator>-&gt;</operator><name>as_nplans</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>FALSE</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><name>TRUE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecInitAppend
 *
 *        Begin all of the subscans of the append node.
 *
 *       (This is potentially wasteful, since the entire result of the
 *        append node may not be scanned, but this way all of the
 *        structures get allocated in the executor's top level memory
 *        block instead of that of the call to ExecAppend.)
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>AppendState</name> <modifier>*</modifier></type>
<name>ExecInitAppend</name><parameter_list>(<parameter><decl><type><name>Append</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>appendstate</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AppendState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier><modifier>*</modifier></type><name>appendplanstates</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nplans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

    <comment type="block">/* check for unsupported flags */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Lock the non-leaf tables in the partition tree controlled by this node.
     * It's a no-op for non-partitioned parent tables.
     */</comment>
    <expr_stmt><expr><call><name>ExecLockNonLeafAppendTables</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>partitioned_rels</name></name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set up empty vector of subplan states
     */</comment>
    <expr_stmt><expr><name>nplans</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>appendplans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>appendplanstates</name> <operator>=</operator> <operator>(</operator><name>PlanState</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>nplans</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PlanState</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * create new AppendState for our append node
     */</comment>
    <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecAppend</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>appendplans</name></name> <operator>=</operator> <name>appendplanstates</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>as_nplans</name></name> <operator>=</operator> <name>nplans</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Miscellaneous initialization
     *
     * Append plans don't have expression contexts because they never call
     * ExecQual or ExecProject.
     */</comment>

    <comment type="block">/*
     * append nodes still have Result slots, which hold pointers to tuples, so
     * we have to initialize them.
     */</comment>
    <expr_stmt><expr><call><name>ExecInitResultTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>appendstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * call ExecInitNode on each of the plans to be executed and save the
     * results into the array "appendplans".
     */</comment>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>node-&gt;appendplans</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Plan</name>       <modifier>*</modifier></type><name>initNode</name> <init>= <expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>ExecInitNode</name><argument_list>(<argument><expr><name>initNode</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>appendplanstates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
    </block_content>}</block>
	<expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>as_nplans</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

    <comment type="block">/*
     * initialize output tuple type
     */</comment>
    <expr_stmt><expr><call><name>ExecAssignResultTypeFromTL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appendstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * initialize to scan first subplan
     */</comment>
    <expr_stmt><expr><name><name>appendstate</name><operator>-&gt;</operator><name>as_whichplan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_append_initialize_next</name><argument_list>(<argument><expr><name>appendstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>appendstate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *       ExecAppend
 *
 *        Handles iteration over multiple subplans.
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>ExecAppend</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>AppendState</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>subnode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * figure out which subplan we are currently processing
         */</comment>
        <expr_stmt><expr><name>subnode</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>appendplans</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>as_whichplan</name></name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block">/*
         * get a tuple from the subplan
         */</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>subnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * If the subplan gave us something then return it as-is. We do
             * NOT make use of the result slot that was set up in
             * ExecInitAppend; there's no need for it.
             */</comment>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Go on to the "next" subplan in the appropriate direction. If no
         * more subplans, return the empty slot set up for us by
         * ExecInitAppend.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>ScanDirectionIsForward</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>es_direction</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>as_whichplan</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>as_whichplan</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>exec_append_initialize_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ResultTupleSlot</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Else loop back and try to get a tuple from the new subplan */</comment>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecEndAppend
 *
 *        Shuts down the subscans of the append node.
 *
 *        Returns nothing of interest.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndAppend</name><parameter_list>(<parameter><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier><modifier>*</modifier></type><name>appendplans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nplans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/*
     * get information from the node
     */</comment>
    <expr_stmt><expr><name>appendplans</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>appendplans</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nplans</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>as_nplans</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * shut down each of the subscans
     */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nplans</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><name><name>appendplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ExecReScanAppend</name><parameter_list>(<parameter><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>as_nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>subnode</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>appendplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * ExecReScan doesn't know about my subplans, so I have to do
         * changed-parameter signaling myself.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>chgParam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>UpdateChangedParamSet</name><argument_list>(<argument><expr><name>subnode</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>chgParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * If chgParam of subnode is not null then plan will be re-scanned by
         * first ExecProcNode.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>subnode</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>subnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>as_whichplan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_append_initialize_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
