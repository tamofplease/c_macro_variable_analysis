<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/executor/execCurrent.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * execCurrent.c
 *      executor support for WHERE CURRENT OF cursor
 *
 * Portions Copyright (c) 2012-2014, TransLattice, Inc.
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *    src/backend/executor/execCurrent.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/portal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PGXC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgxc/execRemote.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fetch_cursor_param_value</name><parameter_list>(<parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramId</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PGXC</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>ScanState</name> <modifier>*</modifier></type><name>search_plan_tree</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>table_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * execCurrentOf
 *
 * Given a CURRENT OF expression and the OID of a table, determine which row
 * of the table is currently being scanned by the cursor named by CURRENT OF,
 * and return the row's TID into *current_tid.
 *
 * Returns TRUE if a row was identified.  Returns FALSE if the cursor is valid
 * for the table but is not currently scanning a row of the table (this is a
 * legal situation in inheritance cases).  Raises error if cursor is not a
 * valid updatable scan of the specified table.
 */</comment>
<function><type><name>bool</name></type>
<name>execCurrentOf</name><parameter_list>(<parameter><decl><type><name>CurrentOfExpr</name> <modifier>*</modifier></type><name>cexpr</name></decl></parameter>,
              <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>,
              <parameter><decl><type><name>Oid</name></type> <name>table_oid</name></decl></parameter>,
              <parameter><decl><type><name>ItemPointer</name></type> <name>current_tid</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>cursor_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Portal</name></type>        <name>portal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QueryDesc</name>  <modifier>*</modifier></type><name>queryDesc</name></decl>;</decl_stmt>

    <comment type="block">/* Get the cursor name --- may have to look up a parameter reference */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cexpr</name><operator>-&gt;</operator><name>cursor_name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cursor_name</name> <operator>=</operator> <name><name>cexpr</name><operator>-&gt;</operator><name>cursor_name</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>cursor_name</name> <operator>=</operator> <call><name>fetch_cursor_param_value</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>, <argument><expr><name><name>cexpr</name><operator>-&gt;</operator><name>cursor_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Fetch table name for possible use in error messages */</comment>
    <expr_stmt><expr><name>table_name</name> <operator>=</operator> <call><name>get_rel_name</name><argument_list>(<argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>table_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for relation %u"</literal></expr></argument>, <argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Find the cursor's portal */</comment>
    <expr_stmt><expr><name>portal</name> <operator>=</operator> <call><name>GetPortalByName</name><argument_list>(<argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PortalIsValid</name><argument_list>(<argument><expr><name>portal</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_CURSOR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * We have to watch out for non-SELECT queries as well as held cursors,
     * both of which may have null queryDesc.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>portal</name><operator>-&gt;</operator><name>strategy</name></name> <operator>!=</operator> <name>PORTAL_ONE_SELECT</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" is not a SELECT query"</literal></expr></argument>,
                        <argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>queryDesc</name> <operator>=</operator> <call><name>PortalGetQueryDesc</name><argument_list>(<argument><expr><name>portal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>queryDesc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" is held from a previous transaction"</literal></expr></argument>,
                        <argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * We have two different strategies depending on whether the cursor uses
     * FOR UPDATE/SHARE or not.  The reason for supporting both is that the
     * FOR UPDATE code is able to identify a target table in many cases where
     * the other code can't, while the non-FOR-UPDATE case allows use of WHERE
     * CURRENT OF with an insensitive cursor.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_rowMarks</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExecRowMark</name> <modifier>*</modifier></type><name>erm</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Here, the query must have exactly one FOR UPDATE/SHARE reference to
         * the target table, and we dig the ctid info out of that.
         */</comment>
        <expr_stmt><expr><name>erm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>queryDesc-&gt;estate-&gt;es_rowMarks</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ExecRowMark</name> <modifier>*</modifier></type><name>thiserm</name> <init>= <expr><operator>(</operator><name>ExecRowMark</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RowMarkRequiresRowShareLock</name><argument_list>(<argument><expr><name><name>thiserm</name><operator>-&gt;</operator><name>markType</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>        <comment type="block">/* ignore non-FOR UPDATE/SHARE items */</comment>

            <if_stmt><if>if <condition>(<expr><name><name>thiserm</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>table_oid</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>erm</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" has multiple FOR UPDATE/SHARE references to table \"%s\""</literal></expr></argument>,
                                    <argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>erm</name> <operator>=</operator> <name>thiserm</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>

        <if_stmt><if>if <condition>(<expr><name>erm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" does not have a FOR UPDATE/SHARE reference to table \"%s\""</literal></expr></argument>,
                            <argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * The cursor must have a current result row: per the SQL spec, it's
         * an error if not.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>portal</name><operator>-&gt;</operator><name>atStart</name></name> <operator>||</operator> <name><name>portal</name><operator>-&gt;</operator><name>atEnd</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" is not positioned on a row"</literal></expr></argument>,
                            <argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Return the currently scanned TID, if there is one */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>ItemPointerIsValid</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>erm</name><operator>-&gt;</operator><name>curCtid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>current_tid</name> <operator>=</operator> <name><name>erm</name><operator>-&gt;</operator><name>curCtid</name></name></expr>;</expr_stmt>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * This table didn't produce the cursor's current row; some other
         * inheritance child of the same parent must have.  Signal caller to
         * do nothing on this table.
         */</comment>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>ScanState</name>  <modifier>*</modifier></type><name>scanstate</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>lisnull</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name>            <name>tuple_tableoid</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ItemPointer</name></type> <name>tuple_tid</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Without FOR UPDATE, we dig through the cursor's plan to find the
         * scan node.  Fail if it's not there or buried underneath
         * aggregation.
         */</comment>
        <expr_stmt><expr><name>scanstate</name> <operator>=</operator> <call><name>search_plan_tree</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>planstate</name></name></expr></argument>, <argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>scanstate</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" is not a simply updatable scan of table \"%s\""</literal></expr></argument>,
                            <argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * The cursor must have a current result row: per the SQL spec, it's
         * an error if not.  We test this at the top level, rather than at the
         * scan node level, because in inheritance cases any one table scan
         * could easily not be on a row. We want to return false, not raise
         * error, if the passed-in table OID is for one of the inactive scans.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>portal</name><operator>-&gt;</operator><name>atStart</name></name> <operator>||</operator> <name><name>portal</name><operator>-&gt;</operator><name>atEnd</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cursor \"%s\" is not positioned on a row"</literal></expr></argument>,
                            <argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Now OK to return false if we found an inactive scan */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name><name>scanstate</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Use slot_getattr to catch any possible mistakes */</comment>
        <expr_stmt><expr><name>tuple_tableoid</name> <operator>=</operator>
            <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name><name>scanstate</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name></name></expr></argument>,
                                          <argument><expr><name>TableOidAttributeNumber</name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name>lisnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>lisnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple_tid</name> <operator>=</operator> <operator>(</operator><name>ItemPointer</name><operator>)</operator>
            <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name><name>scanstate</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name></name></expr></argument>,
                                         <argument><expr><name>SelfItemPointerAttributeNumber</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>lisnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>lisnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tuple_tableoid</name> <operator>==</operator> <name>table_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>current_tid</name> <operator>=</operator> <operator>*</operator><name>tuple_tid</name></expr>;</expr_stmt>

        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * fetch_cursor_param_value
 *
 * Fetch the string value of a param, verifying it is of type REFCURSOR.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fetch_cursor_param_value</name><parameter_list>(<parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramId</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>ParamListInfo</name></type> <name>paramInfo</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_param_list_info</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>paramInfo</name> <operator>&amp;&amp;</operator>
        <name>paramId</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>paramId</name> <operator>&lt;=</operator> <name><name>paramInfo</name><operator>-&gt;</operator><name>numParams</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ParamExternData</name> <modifier>*</modifier></type><name>prm</name> <init>= <expr><operator>&amp;</operator><name><name>paramInfo</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>paramId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* give hook a chance in case parameter is dynamic */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>prm</name><operator>-&gt;</operator><name>ptype</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>paramInfo</name><operator>-&gt;</operator><name>paramFetch</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call>(<modifier>*</modifier><name><name>paramInfo</name><operator>-&gt;</operator><name>paramFetch</name></name>) <argument_list>(<argument><expr><name>paramInfo</name></expr></argument>, <argument><expr><name>paramId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>prm</name><operator>-&gt;</operator><name>ptype</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prm</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* safety check in case hook did something unexpected */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>prm</name><operator>-&gt;</operator><name>ptype</name></name> <operator>!=</operator> <name>REFCURSOROID</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"type of parameter %d (%s) does not match that when preparing the plan (%s)"</literal></expr></argument>,
                                <argument><expr><name>paramId</name></expr></argument>,
                                <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>prm</name><operator>-&gt;</operator><name>ptype</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>REFCURSOROID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block">/* We know that refcursor uses text's I/O routines */</comment>
            <return>return <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>prm</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no value found for parameter %d"</literal></expr></argument>, <argument><expr><name>paramId</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * search_plan_tree
 *
 * Search through a PlanState tree for a scan node on the specified table.
 * Return NULL if not found or multiple candidates.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PGXC</name></cpp:ifdef>
<decl_stmt><decl><type><name>ScanState</name> <modifier>*</modifier></type>
<name>search_plan_tree</name><argument_list>(<argument><expr><name>PlanState</name> <operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>Oid</name> <name>table_oid</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>ScanState</name> <modifier>*</modifier>
<name>search_plan_tree</name><argument_list>(<argument><expr><name>PlanState</name> <operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>Oid</name> <name>table_oid</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
            <comment type="block">/*
             * Relation scan nodes can all be treated alike
             */</comment>
        <case>case <expr><name>T_SeqScanState</name></expr>:</case>
        <case>case <expr><name>T_SampleScanState</name></expr>:</case>
        <case>case <expr><name>T_IndexScanState</name></expr>:</case>
        <case>case <expr><name>T_IndexOnlyScanState</name></expr>:</case>
        <case>case <expr><name>T_BitmapHeapScanState</name></expr>:</case>
        <case>case <expr><name>T_TidScanState</name></expr>:</case>
        <case>case <expr><name>T_ForeignScanState</name></expr>:</case>
        <case>case <expr><name>T_CustomScanState</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ScanState</name>  <modifier>*</modifier></type><name>sstate</name> <init>= <expr><operator>(</operator><name>ScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name><name>sstate</name><operator>-&gt;</operator><name>ss_currentRelation</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>table_oid</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>sstate</name></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>

            <comment type="block">/*
             * For Append, we must look through the members; watch out for
             * multiple matches (possible if it was from UNION ALL)
             */</comment>
        <case>case <expr><name>T_AppendState</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>astate</name> <init>= <expr><operator>(</operator><name>AppendState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ScanState</name>  <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>astate</name><operator>-&gt;</operator><name>as_nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ScanState</name>  <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>search_plan_tree</name><argument_list>(<argument><expr><name><name>astate</name><operator>-&gt;</operator><name>appendplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                                        <argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>elem</name></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>    <comment type="block">/* multiple matches */</comment>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block>

            <comment type="block">/*
             * Similarly for MergeAppend
             */</comment>
        <case>case <expr><name>T_MergeAppendState</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>MergeAppendState</name> <modifier>*</modifier></type><name>mstate</name> <init>= <expr><operator>(</operator><name>MergeAppendState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ScanState</name>  <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mstate</name><operator>-&gt;</operator><name>ms_nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ScanState</name>  <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>search_plan_tree</name><argument_list>(<argument><expr><name><name>mstate</name><operator>-&gt;</operator><name>mergeplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                                        <argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>elem</name></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>    <comment type="block">/* multiple matches */</comment>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block>

            <comment type="block">/*
             * Result and Limit can be descended through (these are safe
             * because they always return their input's current row)
             */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PGXC</name></cpp:ifdef>
        <case>case <expr><name>T_MaterialState</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <case>case <expr><name>T_ResultState</name></expr>:</case>
        <case>case <expr><name>T_LimitState</name></expr>:</case>
            <return>return <expr><call><name>search_plan_tree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>lefttree</name></name></expr></argument>, <argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>;</return>

            <comment type="block">/*
             * SubqueryScan too, but it keeps the child in a different place
             */</comment>
        <case>case <expr><name>T_SubqueryScanState</name></expr>:</case>
            <return>return <expr><call><name>search_plan_tree</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SubqueryScanState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>subplan</name></expr></argument>,
                                    <argument><expr><name>table_oid</name></expr></argument>)</argument_list></call></expr>;</return>

        <default>default:</default>
            <comment type="block">/* Otherwise, assume we can't descend through it */</comment>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
