<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/executor/nodeBitmapIndexscan.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeBitmapIndexscan.c
 *      Routines to support bitmapped index scans of relations
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/executor/nodeBitmapIndexscan.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * INTERFACE ROUTINES
 *        MultiExecBitmapIndexScan    scans a relation using index.
 *        ExecInitBitmapIndexScan        creates and initializes state info.
 *        ExecReScanBitmapIndexScan    prepares to rescan the plan.
 *        ExecEndBitmapIndexScan        releases all storage.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeBitmapIndexscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeIndexscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__AUDIT_FGA__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audit/audit_fga.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecBitmapIndexScan
 *
 *        stub for pro forma compliance
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>ExecBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"BitmapIndexScan node does not support ExecProcNode call convention"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        MultiExecBitmapIndexScan(node)
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>Node</name> <modifier>*</modifier></type>
<name>MultiExecBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>BitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>TIDBitmap</name>  <modifier>*</modifier></type><name>tbm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexScanDesc</name></type> <name>scandesc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>        <name>nTuples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>doscan</name></decl>;</decl_stmt>

    <comment type="block">/* must provide our own instrumentation support */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>InstrStartNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * extract necessary information from index scan node
     */</comment>
    <expr_stmt><expr><name>scandesc</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>biss_ScanDesc</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * If we have runtime keys and they've not already been set up, do it now.
     * Array keys are also treated as runtime keys; note that if ExecReScan
     * returns with biss_RuntimeKeysReady still false, then there is an empty
     * array key so we should do nothing.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeKeysReady</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>biss_NumRuntimeKeys</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>biss_NumArrayKeys</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>doscan</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeKeysReady</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>doscan</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * Prepare the result bitmap.  Normally we just create a new one to pass
     * back; however, our parent node is allowed to store a pre-made one into
     * node-&gt;biss_result, in which case we just OR our tuple IDs into the
     * existing bitmap.  (This saves needing explicit UNION steps.)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>biss_result</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>tbm</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>biss_result</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>biss_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>    <comment type="block">/* reset for next time */</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* XXX should we use less than work_mem for this? */</comment>
        <expr_stmt><expr><name>tbm</name> <operator>=</operator> <call><name>tbm_create</name><argument_list>(<argument><expr><name>work_mem</name> <operator>*</operator> <literal type="number">1024L</literal></expr></argument>,
                         <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>BitmapIndexScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name><operator>)</operator><operator>-&gt;</operator><name>isshared</name></expr> ?</condition><then>
                         <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>es_query_dsa</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Get TIDs from index and insert into bitmap
     */</comment>
    <while>while <condition>(<expr><name>doscan</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>nTuples</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>index_getbitmap</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>, <argument><expr><name>tbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>doscan</name> <operator>=</operator> <call><name>ExecIndexAdvanceArrayKeys</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_ArrayKeys</name></name></expr></argument>,
                                           <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_NumArrayKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>doscan</name></expr>)</condition><block type="pseudo"><block_content>                <comment type="block">/* reset index scan */</comment>
            <expr_stmt><expr><call><name>index_rescan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_ScanDesc</name></name></expr></argument>,
                         <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_ScanKeys</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_NumScanKeys</name></name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* must provide our own instrumentation support */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>InstrStopNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr></argument>, <argument><expr><name>nTuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>tbm</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecReScanBitmapIndexScan(node)
 *
 *        Recalculates the values of any scan keys whose value depends on
 *        information known at runtime, then rescans the indexed relation.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecReScanBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>BitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeContext</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Reset the runtime-key context so we don't leak memory as each outer
     * tuple is scanned.  Note this assumes that we will recalculate *all*
     * runtime keys on each call.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>econtext</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * If we are doing runtime key calculations (ie, any of the index key
     * values weren't simple Consts), compute the new key values.
     *
     * Array keys are also treated as runtime keys; note that if we return
     * with biss_RuntimeKeysReady still false, then there is an empty array
     * key so no index scan is needed.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>biss_NumRuntimeKeys</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ExecIndexEvalRuntimeKeys</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>,
                                 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeKeys</name></name></expr></argument>,
                                 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_NumRuntimeKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>biss_NumArrayKeys</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeKeysReady</name></name> <operator>=</operator>
            <call><name>ExecIndexEvalArrayKeys</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>,
                                   <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_ArrayKeys</name></name></expr></argument>,
                                   <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_NumArrayKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeKeysReady</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* reset index scan */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeKeysReady</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>index_rescan</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_ScanDesc</name></name></expr></argument>,
                     <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_ScanKeys</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_NumScanKeys</name></name></expr></argument>,
                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecEndBitmapIndexScan
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>BitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Relation</name></type>    <name>indexRelationDesc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexScanDesc</name></type> <name>indexScanDesc</name></decl>;</decl_stmt>

    <comment type="block">/*
     * extract information from the node
     */</comment>
    <expr_stmt><expr><name>indexRelationDesc</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>biss_RelationDesc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>indexScanDesc</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>biss_ScanDesc</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Free the exprcontext ... now dead code, see ExecFreeExprContext
     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeContext</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FreeExprContext</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>biss_RuntimeContext</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * close the index relation (no-op if we didn't open it)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>indexScanDesc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>index_endscan</name><argument_list>(<argument><expr><name>indexScanDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>indexRelationDesc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>indexRelationDesc</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *        ExecInitBitmapIndexScan
 *
 *        Initializes the index scan's state information.
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>BitmapIndexScanState</name> <modifier>*</modifier></type>
<name>ExecInitBitmapIndexScan</name><parameter_list>(<parameter><decl><type><name>BitmapIndexScan</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>BitmapIndexScanState</name> <modifier>*</modifier></type><name>indexstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>relistarget</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__AUDIT_FGA__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>ListCell</name>      <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    

    <comment type="block">/* check for unsupported flags */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <operator>(</operator><name>EXEC_FLAG_BACKWARD</name> <operator>|</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * create state structure
     */</comment>
    <expr_stmt><expr><name>indexstate</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>BitmapIndexScanState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecBitmapIndexScan</name></expr>;</expr_stmt>

    <comment type="block">/* normally we don't make the result bitmap till runtime */</comment>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Miscellaneous initialization
     *
     * We do not need a standard exprcontext for this node, though we may
     * decide below to create a runtime-key exprcontext
     */</comment>

    <comment type="block">/*
     * initialize child expressions
     *
     * We don't need to initialize targetlist or qual since neither are used.
     *
     * Note: we don't initialize all of the indexqual expression, only the
     * sub-parts corresponding to runtime keys (see below).
     */</comment>

    <comment type="block">/*
     * We do not open or lock the base relation here.  We assume that an
     * ancestor BitmapHeapScan node is holding AccessShareLock (or better) on
     * the heap relation throughout the execution of the plan tree.
     */</comment>

    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentScanDesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * If we are just doing EXPLAIN (ie, aren't going to run the plan), stop
     * here.  This allows an index-advisor plugin to EXPLAIN a plan containing
     * references to nonexistent indexes.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_EXPLAIN_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>indexstate</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Open the index relation.
     *
     * If the parent table is one of the target relations of the query, then
     * InitPlan already opened and write-locked the index, so we can avoid
     * taking another lock here.  Otherwise we need a normal reader's lock.
     */</comment>
    <expr_stmt><expr><name>relistarget</name> <operator>=</operator> <call><name>ExecRelationIsTargetRelation</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RelationDesc</name></name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>indexid</name></name></expr></argument>,
                                               <argument><expr><ternary><condition><expr><name>relistarget</name></expr> ?</condition><then> <expr><name>NoLock</name></expr> </then><else>: <expr><name>AccessShareLock</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Initialize index-specific scan state
     */</comment>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RuntimeKeysReady</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RuntimeKeys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumRuntimeKeys</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__AUDIT_FGA__</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>enable_fga</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>foreach</name> <argument_list>(<argument>item</argument>, <argument>node-&gt;scan.plan.audit_fga_quals</argument>)</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>AuditFgaPolicy</name> <modifier>*</modifier></type><name>audit_fga_qual</name> <init>= <expr><operator>(</operator><name>AuditFgaPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name>audit_fga_policy_state</name> <modifier>*</modifier></type> <name>audit_fga_policy_state_item</name>
                    <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>audit_fga_policy_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>audit_fga_policy_state_item</name><operator>-&gt;</operator><name>policy_name</name></name> <operator>=</operator> <name><name>audit_fga_qual</name><operator>-&gt;</operator><name>policy_name</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>audit_fga_policy_state_item</name><operator>-&gt;</operator><name>query_string</name></name> <operator>=</operator> <name><name>audit_fga_qual</name><operator>-&gt;</operator><name>query_string</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>audit_fga_policy_state_item</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> 
                <call><name>ExecInitQual</name><argument_list>(<argument><expr><name><name>audit_fga_qual</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>indexstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>audit_fga_qual</name></name> <operator>=</operator> 
                <call><name>lappend</name><argument_list>(<argument><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>audit_fga_qual</name></name></expr></argument>, <argument><expr><name>audit_fga_policy_state_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>    

    <comment type="block">/*
     * build the index scan keys from the index qualification
     */</comment>
    <expr_stmt><expr><call><name>ExecIndexBuildScanKeys</name><argument_list>(<argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>indexstate</name></expr></argument>,
                           <argument><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RelationDesc</name></name></expr></argument>,
                           <argument><expr><name><name>node</name><operator>-&gt;</operator><name>indexqual</name></name></expr></argument>,
                           <argument><expr><name>false</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>indexstate</name><operator>-&gt;</operator><name>biss_ScanKeys</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumScanKeys</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RuntimeKeys</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumRuntimeKeys</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>indexstate</name><operator>-&gt;</operator><name>biss_ArrayKeys</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumArrayKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If we have runtime keys or array keys, we need an ExprContext to
     * evaluate them. We could just create a "standard" plan node exprcontext,
     * but to keep the code looking similar to nodeIndexscan.c, it seems
     * better to stick with the approach of using a separate ExprContext.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumRuntimeKeys</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumArrayKeys</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>stdecontext</name> <init>= <expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RuntimeContext</name></name> <operator>=</operator> <name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name> <operator>=</operator> <name>stdecontext</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RuntimeContext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Initialize scan descriptor.
     */</comment>
    <expr_stmt><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_ScanDesc</name></name> <operator>=</operator>
        <call><name>index_beginscan_bitmap</name><argument_list>(<argument><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_RelationDesc</name></name></expr></argument>,
                               <argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_snapshot</name></name></expr></argument>,
                               <argument><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumScanKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If no run-time keys to calculate, go ahead and pass the scankeys to the
     * index AM.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumRuntimeKeys</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumArrayKeys</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>index_rescan</name><argument_list>(<argument><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_ScanDesc</name></name></expr></argument>,
                     <argument><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_ScanKeys</name></name></expr></argument>, <argument><expr><name><name>indexstate</name><operator>-&gt;</operator><name>biss_NumScanKeys</name></name></expr></argument>,
                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * all done.
     */</comment>
    <return>return <expr><name>indexstate</name></expr>;</return>
</block_content>}</block></function>
</unit>
