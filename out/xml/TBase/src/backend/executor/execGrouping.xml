<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/executor/execGrouping.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * execGrouping.c
 *      executor utility routines for grouping, hashing, and aggregation
 *
 * Note: we currently assume that equality and hashing functions are not
 * collation-sensitive, so the code in this file has no support for passing
 * collation settings through from callers.  That may have to change someday.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/executor/execGrouping.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/parallel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>TupleHashTableHash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuplehash_hash</name></name> <modifier>*</modifier></type><name>tb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MinimalTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>    <name>TupleHashTableMatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuplehash_hash</name></name> <modifier>*</modifier></type><name>tb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MinimalTuple</name></type> <name>tuple1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MinimalTuple</name></type> <name>tuple2</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Define parameters for tuple hash table code generation. The interface is
 * *also* declared in execnodes.h (to generate the types, which are externally
 * visible).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_PREFIX</name></cpp:macro> <cpp:value>tuplehash</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_ELEMENT_TYPE</name></cpp:macro> <cpp:value>TupleHashEntryData</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_KEY_TYPE</name></cpp:macro> <cpp:value>MinimalTuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_KEY</name></cpp:macro> <cpp:value>firstTuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_HASH_KEY</name><parameter_list>(<parameter><type><name>tb</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TupleHashTableHash(tb, key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_EQUAL</name><parameter_list>(<parameter><type><name>tb</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TupleHashTableMatch(tb, a, b) == 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_SCOPE</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_STORE_HASH</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_GET_HASH</name><parameter_list>(<parameter><type><name>tb</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a-&gt;hash</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_DEFINE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/simplehash.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen">/*****************************************************************************
 *        Utility routines for grouping tuples together
 *****************************************************************************/</comment>

<comment type="block">/*
 * execTuplesMatch
 *        Return true if two tuples match in all the indicated fields.
 *
 * This actually implements SQL's notion of "not distinct".  Two nulls
 * match, a null and a not-null don't match.
 *
 * slot1, slot2: the tuples to compare (must have same columns!)
 * numCols: the number of attributes to be examined
 * matchColIdx: array of attribute column numbers
 * eqFunctions: array of fmgr lookup info for the equality functions to use
 * evalContext: short-term memory context for executing the functions
 *
 * NB: evalContext is reset each time!
 */</comment>
<function><type><name>bool</name></type>
<name>execTuplesMatch</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot1</name></decl></parameter>,
                <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot2</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>numCols</name></decl></parameter>,
                <parameter><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>matchColIdx</name></decl></parameter>,
                <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>eqfunctions</name></decl></parameter>,
                <parameter><decl><type><name>MemoryContext</name></type> <name>evalContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Reset and switch into the temp context. */</comment>
    <expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>evalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>evalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We cannot report a match without checking all the fields, but we can
     * report a non-match as soon as we find unequal fields.  So, start
     * comparing at the last field (least significant sort key). That's the
     * most likely to be different if we are dealing with sorted input.
     */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>numCols</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AttrNumber</name></type>    <name>att</name> <init>= <expr><name><name>matchColIdx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>attr1</name></decl>,
                    <decl><type ref="prev"/><name>attr2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>isNull1</name></decl>,
                    <decl><type ref="prev"/><name>isNull2</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>attr1</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot1</name></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>attr2</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot2</name></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>isNull1</name> <operator>!=</operator> <name>isNull2</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>        <comment type="block">/* one null and one not; they aren't equal */</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>isNull1</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>            <comment type="block">/* both are null, treat as equal */</comment>

        <comment type="block">/* Apply the type-specific equality function */</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eqfunctions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                        <argument><expr><name>attr1</name></expr></argument>, <argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>        <comment type="block">/* they aren't equal */</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * execTuplesUnequal
 *        Return true if two tuples are definitely unequal in the indicated
 *        fields.
 *
 * Nulls are neither equal nor unequal to anything else.  A true result
 * is obtained only if there are non-null fields that compare not-equal.
 *
 * Parameters are identical to execTuplesMatch.
 */</comment>
<function><type><name>bool</name></type>
<name>execTuplesUnequal</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot1</name></decl></parameter>,
                  <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot2</name></decl></parameter>,
                  <parameter><decl><type><name>int</name></type> <name>numCols</name></decl></parameter>,
                  <parameter><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>matchColIdx</name></decl></parameter>,
                  <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>eqfunctions</name></decl></parameter>,
                  <parameter><decl><type><name>MemoryContext</name></type> <name>evalContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Reset and switch into the temp context. */</comment>
    <expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>evalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>evalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * We cannot report a match without checking all the fields, but we can
     * report a non-match as soon as we find unequal fields.  So, start
     * comparing at the last field (least significant sort key). That's the
     * most likely to be different if we are dealing with sorted input.
     */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>numCols</name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AttrNumber</name></type>    <name>att</name> <init>= <expr><name><name>matchColIdx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>attr1</name></decl>,
                    <decl><type ref="prev"/><name>attr2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>isNull1</name></decl>,
                    <decl><type ref="prev"/><name>isNull2</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>attr1</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot1</name></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>isNull1</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>            <comment type="block">/* can't prove anything here */</comment>

        <expr_stmt><expr><name>attr2</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot2</name></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>isNull2</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>            <comment type="block">/* can't prove anything here */</comment>

        <comment type="block">/* Apply the type-specific equality function */</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>eqfunctions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                        <argument><expr><name>attr1</name></expr></argument>, <argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>        <comment type="block">/* they are unequal */</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * execTuplesMatchPrepare
 *        Look up the equality functions needed for execTuplesMatch or
 *        execTuplesUnequal, given an array of equality operator OIDs.
 *
 * The result is a palloc'd array.
 */</comment>
<function><type><name>FmgrInfo</name> <modifier>*</modifier></type>
<name>execTuplesMatchPrepare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numCols</name></decl></parameter>,
                       <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>eqOperators</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>eqFunctions</name> <init>= <expr><operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>numCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>eq_opr</name> <init>= <expr><name><name>eqOperators</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>eq_function</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>eq_function</name> <operator>=</operator> <call><name>get_opcode</name><argument_list>(<argument><expr><name>eq_opr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>eq_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eqFunctions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>eqFunctions</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * execTuplesHashPrepare
 *        Look up the equality and hashing functions needed for a TupleHashTable.
 *
 * This is similar to execTuplesMatchPrepare, but we also need to find the
 * hash functions associated with the equality operators.  *eqFunctions and
 * *hashFunctions receive the palloc'd result arrays.
 *
 * Note: we expect that the given operators are not cross-type comparisons.
 */</comment>
<function><type><name>void</name></type>
<name>execTuplesHashPrepare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numCols</name></decl></parameter>,
                      <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>eqOperators</name></decl></parameter>,
                      <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>eqFunctions</name></decl></parameter>,
                      <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>hashFunctions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>eqFunctions</name> <operator>=</operator> <operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>numCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>hashFunctions</name> <operator>=</operator> <operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>numCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>eq_opr</name> <init>= <expr><name><name>eqOperators</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>eq_function</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>left_hash_function</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>right_hash_function</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>eq_function</name> <operator>=</operator> <call><name>get_opcode</name><argument_list>(<argument><expr><name>eq_opr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_op_hash_functions</name><argument_list>(<argument><expr><name>eq_opr</name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name>left_hash_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right_hash_function</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find hash function for hash operator %u"</literal></expr></argument>,
                 <argument><expr><name>eq_opr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* We're not supporting cross-type cases here */</comment>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>left_hash_function</name> <operator>==</operator> <name>right_hash_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>eq_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>eqFunctions</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>right_hash_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>hashFunctions</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*****************************************************************************
 *        Utility routines for all-in-memory hash tables
 *
 * These routines build hash tables for grouping tuples together (eg, for
 * hash aggregation).  There is one entry for each not-distinct set of tuples
 * presented.
 *****************************************************************************/</comment>

<comment type="block">/*
 * Construct an empty TupleHashTable
 *
 *    numCols, keyColIdx: identify the tuple fields to use as lookup key
 *    eqfunctions: equality comparison functions to use
 *    hashfunctions: datatype-specific hashing functions to use
 *    nbuckets: initial estimate of hashtable size
 *    additionalsize: size of data stored in -&gt;additional
 *    tablecxt: memory context in which to store table and table entries
 *    tempcxt: short-lived context for evaluation hash and comparison functions
 *
 * The function arrays may be made with execTuplesHashPrepare().  Note they
 * are not cross-type functions, but expect to see the table datatype(s)
 * on both sides.
 *
 * Note that keyColIdx, eqfunctions, and hashfunctions must be allocated in
 * storage that will live as long as the hashtable does.
 */</comment>
<function><type><name>TupleHashTable</name></type>
<name>BuildTupleHashTable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numCols</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>keyColIdx</name></decl></parameter>,
                    <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>eqfunctions</name></decl></parameter>,
                    <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>hashfunctions</name></decl></parameter>,
                    <parameter><decl><type><name>long</name></type> <name>nbuckets</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>additionalsize</name></decl></parameter>,
                    <parameter><decl><type><name>MemoryContext</name></type> <name>tablecxt</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>tempcxt</name></decl></parameter>,
                    <parameter><decl><type><name>bool</name></type> <name>use_variable_hash_iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TupleHashTable</name></type> <name>hashtable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Size</name></type>        <name>entrysize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleHashEntryData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>additionalsize</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbuckets</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Limit initial table size request to not more than work_mem */</comment>
    <expr_stmt><expr><name>nbuckets</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nbuckets</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>work_mem</name> <operator>*</operator> <literal type="number">1024L</literal><operator>)</operator> <operator>/</operator> <name>entrysize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>hashtable</name> <operator>=</operator> <operator>(</operator><name>TupleHashTable</name><operator>)</operator>
        <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>tablecxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleHashTableData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>numCols</name></name> <operator>=</operator> <name>numCols</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>keyColIdx</name></name> <operator>=</operator> <name>keyColIdx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tab_hash_funcs</name></name> <operator>=</operator> <name>hashfunctions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tab_eq_funcs</name></name> <operator>=</operator> <name>eqfunctions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tablecxt</name></name> <operator>=</operator> <name>tablecxt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tempcxt</name></name> <operator>=</operator> <name>tempcxt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>entrysize</name></name> <operator>=</operator> <name>entrysize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tableslot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>    <comment type="block">/* will be made on first lookup */</comment>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>inputslot</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>in_hash_funcs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>cur_eq_funcs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
	<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>spilled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>spill_set</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hybrid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * If parallelism is in use, even if the master backend is performing the
     * scan itself, we don't want to create the hashtable exactly the same way
     * in all workers. As hashtables are iterated over in keyspace-order,
     * doing so in all processes in the same way is likely to lead to
     * "unbalanced" hashtables when the table size initially is
     * underestimated.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>use_variable_hash_iv</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hash_iv</name></name> <operator>=</operator> <call><name>hash_uint32</name><argument_list>(<argument><expr><name>ParallelWorkerNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hash_iv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hashtab</name></name> <operator>=</operator> <call><name>tuplehash_create</name><argument_list>(<argument><expr><name>tablecxt</name></expr></argument>, <argument><expr><name>nbuckets</name></expr></argument>, <argument><expr><name>hashtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>hashtable</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find or create a hashtable entry for the tuple group containing the
 * given tuple.  The tuple must be the same type as the hashtable entries.
 *
 * If isnew is NULL, we do not create new entries; we return NULL if no
 * match is found.
 *
 * If isnew isn't NULL, then a new entry is created if no existing entry
 * matches.  On return, *isnew is true if the entry is newly created,
 * false if it existed already.  -&gt;additional_data in the new entry has
 * been zeroed.
 */</comment>
<function><type><name>TupleHashEntry</name></type>
<name>LookupTupleHashEntry</name><parameter_list>(<parameter><decl><type><name>TupleHashTable</name></type> <name>hashtable</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
                     <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TupleHashEntryData</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MinimalTuple</name></type> <name>key</name></decl>;</decl_stmt>

    <comment type="block">/* If first time through, clone the input slot to make table slot */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hashtable</name><operator>-&gt;</operator><name>tableslot</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TupleDesc</name></type>    <name>tupdesc</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tablecxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * We copy the input tuple descriptor just for safety --- we assume
         * all input tuples will have equivalent descriptors.
         */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTupleDescCopy</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tableslot</name></name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Need to run the hash functions in short-lived context */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tempcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set up data needed by hash and match functions */</comment>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>inputslot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>in_hash_funcs</name></name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>tab_hash_funcs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>cur_eq_funcs</name></name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>tab_eq_funcs</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>                    <comment type="block">/* flag to reference inputslot */</comment>

    <if_stmt><if>if <condition>(<expr><name>isnew</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>tuplehash_insert</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hashtab</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* found pre-existing entry */</comment>
            <expr_stmt><expr><operator>*</operator><name>isnew</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>hashtable</name><operator>-&gt;</operator><name>hybrid</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* hashtable is full, need to dump it */</comment>
					<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<return>return <expr><name>NULL</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find entry in hashtable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <comment type="block">/* created new entry */</comment>
            <expr_stmt><expr><operator>*</operator><name>isnew</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <comment type="block">/* zero caller data */</comment>
            <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>additional</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TBASE__</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>hashtable</name><operator>-&gt;</operator><name>hybrid</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* use our own memorycontext */</comment>
				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hybridcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tablecxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tablecxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <comment type="block">/* Copy the first tuple into the table context */</comment>
            <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>firstTuple</name></name> <operator>=</operator> <call><name>ExecCopySlotMinimalTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>tuplehash_lookup</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hashtab</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Search for a hashtable entry matching the given tuple.  No entry is
 * created if there's not a match.  This is similar to the non-creating
 * case of LookupTupleHashEntry, except that it supports cross-type
 * comparisons, in which the given tuple is not of the same type as the
 * table entries.  The caller must provide the hash functions to use for
 * the input tuple, as well as the equality functions, since these may be
 * different from the table's internal functions.
 */</comment>
<function><type><name>TupleHashEntry</name></type>
<name>FindTupleHashEntry</name><parameter_list>(<parameter><decl><type><name>TupleHashTable</name></type> <name>hashtable</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
                   <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>eqfunctions</name></decl></parameter>,
                   <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>hashfunctions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TupleHashEntry</name></type> <name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MinimalTuple</name></type> <name>key</name></decl>;</decl_stmt>

    <comment type="block">/* Need to run the hash functions in short-lived context */</comment>
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tempcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set up data needed by hash and match functions */</comment>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>inputslot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>in_hash_funcs</name></name> <operator>=</operator> <name>hashfunctions</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashtable</name><operator>-&gt;</operator><name>cur_eq_funcs</name></name> <operator>=</operator> <name>eqfunctions</name></expr>;</expr_stmt>

    <comment type="block">/* Search the hash table */</comment>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>                    <comment type="block">/* flag to reference inputslot */</comment>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>tuplehash_lookup</name><argument_list>(<argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>hashtab</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute the hash value for a tuple
 *
 * The passed-in key is a pointer to TupleHashEntryData.  In an actual hash
 * table entry, the firstTuple field points to a tuple (in MinimalTuple
 * format).  LookupTupleHashEntry sets up a dummy TupleHashEntryData with a
 * NULL firstTuple field --- that cues us to look at the inputslot instead.
 * This convention avoids the need to materialize virtual input tuples unless
 * they actually need to get copied into the table.
 *
 * Also, the caller must select an appropriate memory context for running
 * the hash functions. (dynahash.c doesn't change CurrentMemoryContext.)
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>TupleHashTableHash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuplehash_hash</name></name> <modifier>*</modifier></type><name>tb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MinimalTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TupleHashTable</name></type> <name>hashtable</name> <init>= <expr><operator>(</operator><name>TupleHashTable</name><operator>)</operator> <name><name>tb</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>numCols</name> <init>= <expr><name><name>hashtable</name><operator>-&gt;</operator><name>numCols</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttrNumber</name> <modifier>*</modifier></type><name>keyColIdx</name> <init>= <expr><name><name>hashtable</name><operator>-&gt;</operator><name>keyColIdx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type>        <name>hashkey</name> <init>= <expr><name><name>hashtable</name><operator>-&gt;</operator><name>hash_iv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>hashfunctions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* Process the current input tuple for the table */</comment>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>inputslot</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hashfunctions</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>in_hash_funcs</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * Process a tuple already stored in the table.
         *
         * (this case never actually occurs due to the way simplehash.h is
         * used, as the hash-value is stored in the entries)
         */</comment>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>tableslot</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ExecStoreMinimalTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hashfunctions</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>tab_hash_funcs</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AttrNumber</name></type>    <name>att</name> <init>= <expr><name><name>keyColIdx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>attr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>isNull</name></decl>;</decl_stmt>

        <comment type="block">/* rotate hashkey left 1 bit at each step */</comment>
        <expr_stmt><expr><name>hashkey</name> <operator>=</operator> <operator>(</operator><name>hashkey</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>hashkey</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>att</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNull</name></expr>)</condition>            <comment type="block">/* treat nulls as having hash key 0 */</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint32</name></type>        <name>hkey</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>hkey</name> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><call><name>FunctionCall1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashfunctions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                                <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hashkey</name> <operator>^=</operator> <name>hkey</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>hashkey</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * See whether two tuples (presumably of the same hash value) match
 *
 * As above, the passed pointers are pointers to TupleHashEntryData.
 *
 * Also, the caller must select an appropriate memory context for running
 * the compare functions.  (dynahash.c doesn't change CurrentMemoryContext.)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>TupleHashTableMatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tuplehash_hash</name></name> <modifier>*</modifier></type><name>tb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MinimalTuple</name></type> <name>tuple1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MinimalTuple</name></type> <name>tuple2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleHashTable</name></type> <name>hashtable</name> <init>= <expr><operator>(</operator><name>TupleHashTable</name><operator>)</operator> <name><name>tb</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We assume that simplehash.h will only ever call us with the first
     * argument being an actual table entry, and the second argument being
     * LookupTupleHashEntry's dummy TupleHashEntryData.  The other direction
     * could be supported too, but is not currently required.
     */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tuple1</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot1</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>tableslot</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ExecStoreMinimalTuple</name><argument_list>(<argument><expr><name>tuple1</name></expr></argument>, <argument><expr><name>slot1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tuple2</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot2</name> <operator>=</operator> <name><name>hashtable</name><operator>-&gt;</operator><name>inputslot</name></name></expr>;</expr_stmt>

    <comment type="block">/* For crosstype comparisons, the inputslot must be first */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>execTuplesMatch</name><argument_list>(<argument><expr><name>slot2</name></expr></argument>,
                        <argument><expr><name>slot1</name></expr></argument>,
                        <argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>numCols</name></name></expr></argument>,
                        <argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>keyColIdx</name></name></expr></argument>,
                        <argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>cur_eq_funcs</name></name></expr></argument>,
                        <argument><expr><name><name>hashtable</name><operator>-&gt;</operator><name>tempcxt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
