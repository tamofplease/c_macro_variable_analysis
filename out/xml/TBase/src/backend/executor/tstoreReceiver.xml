<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/executor/tstoreReceiver.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tstoreReceiver.c
 *      An implementation of DestReceiver that stores the result tuples in
 *      a Tuplestore.
 *
 * Optionally, we can force detoasting (but not decompression) of out-of-line
 * toasted values.  This is to support cursors WITH HOLD, which must retain
 * data even if the underlying table is dropped.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/backend/executor/tstoreReceiver.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tuptoaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tstoreReceiver.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>
    <comment type="block">/* parameters: */</comment>
    <decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tstore</name></decl>;</decl_stmt>    <comment type="block">/* where to put the data */</comment>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>cxt</name></decl>;</decl_stmt>            <comment type="block">/* context containing tstore */</comment>
    <decl_stmt><decl><type><name>bool</name></type>        <name>detoast</name></decl>;</decl_stmt>        <comment type="block">/* were we told to detoast? */</comment>
    <comment type="block">/* workspace: */</comment>
    <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>outvalues</name></decl>;</decl_stmt>        <comment type="block">/* values array for result tuple */</comment>
    <decl_stmt><decl><type><name>Datum</name>       <modifier>*</modifier></type><name>tofree</name></decl>;</decl_stmt>            <comment type="block">/* temp values to be pfree'd */</comment>
}</block></struct></type> <name>TStoreState</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>tstoreReceiveSlot_notoast</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>tstoreReceiveSlot_detoast</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Prepare to receive tuples from executor.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tstoreStartupReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TStoreState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>TStoreState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>needtoast</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pg_attribute</name> <modifier>*</modifier></type><name>attrs</name> <init>= <expr><name><name>typeinfo</name><operator>-&gt;</operator><name>attrs</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>natts</name> <init>= <expr><name><name>typeinfo</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Check if any columns require detoast work */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>detoast</name></name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>needtoast</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Set up appropriate callback */</comment>
    <if_stmt><if>if <condition>(<expr><name>needtoast</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>tstoreReceiveSlot_detoast</name></expr>;</expr_stmt>
        <comment type="block">/* Create workspace */</comment>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>outvalues</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator>
            <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>cxt</name></name></expr></argument>, <argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tofree</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator>
            <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>cxt</name></name></expr></argument>, <argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>tstoreReceiveSlot_notoast</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>outvalues</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tofree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Receive a tuple from the executor and store it in the tuplestore.
 * This is for the easy case where we don't have to detoast.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tstoreReceiveSlot_notoast</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TStoreState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>TStoreState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tuplestore_puttupleslot</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tstore</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Receive a tuple from the executor and store it in the tuplestore.
 * This is for the case where we have to detoast any toasted values.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tstoreReceiveSlot_detoast</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TStoreState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>TStoreState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleDesc</name></type>    <name>typeinfo</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pg_attribute</name> <modifier>*</modifier></type><name>attrs</name> <init>= <expr><name><name>typeinfo</name><operator>-&gt;</operator><name>attrs</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>natts</name> <init>= <expr><name><name>typeinfo</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nfree</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

    <comment type="block">/* Make sure the tuple is fully deconstructed */</comment>
    <expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Fetch back any out-of-line datums.  We build the new datums array in
     * myState-&gt;outvalues[] (but we can re-use the slot's isnull array). Also,
     * remember the fetched values to free afterwards.
     */</comment>
    <expr_stmt><expr><name>nfree</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type>        <name>val</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attisdropped</name> <operator>&amp;&amp;</operator>
            <name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
            <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>heap_tuple_fetch_attr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator>
                                                            <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tofree</name><index>[<expr><name>nfree</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>outvalues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Push the modified tuple into the tuplestore.
     */</comment>
    <expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tstore</name></name></expr></argument>, <argument><expr><name>typeinfo</name></expr></argument>,
                         <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>outvalues</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* And release any temporary detoasted values */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfree</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tofree</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up at end of an executor run
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tstoreShutdownReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TStoreState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>TStoreState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Release workspace if any */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>outvalues</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>outvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>outvalues</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>myState</name><operator>-&gt;</operator><name>tofree</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>tofree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tofree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy receiver when done with it
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tstoreDestroyReceiver</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initially create a DestReceiver object.
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateTuplestoreDestReceiver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TStoreState</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>TStoreState</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TStoreState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>tstoreReceiveSlot_notoast</name></expr>;</expr_stmt>    <comment type="block">/* might change */</comment>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>tstoreStartupReceiver</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>tstoreShutdownReceiver</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>tstoreDestroyReceiver</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>=</operator> <name>DestTuplestore</name></expr>;</expr_stmt>

    <comment type="block">/* private fields will be set by SetTuplestoreDestReceiverParams */</comment>

    <return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set parameters for a TuplestoreDestReceiver
 */</comment>
<function><type><name>void</name></type>
<name>SetTuplestoreDestReceiverParams</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>,
                                <parameter><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tStore</name></decl></parameter>,
                                <parameter><decl><type><name>MemoryContext</name></type> <name>tContext</name></decl></parameter>,
                                <parameter><decl><type><name>bool</name></type> <name>detoast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TStoreState</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>TStoreState</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>==</operator> <name>DestTuplestore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>tstore</name></name> <operator>=</operator> <name>tStore</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>cxt</name></name> <operator>=</operator> <name>tContext</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>detoast</name></name> <operator>=</operator> <name>detoast</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
