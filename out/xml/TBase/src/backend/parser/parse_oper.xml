<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TBase/src/backend/parser/parse_oper.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making TBase available.  
 * 
 * Copyright (C) 2019 THL A29 Limited, a Tencent company.  All rights reserved.
 * 
 * TBase is licensed under the BSD 3-Clause License, except for the third-party component listed below. 
 * 
 * A copy of the BSD 3-Clause License is included in this file.
 * 
 * Other dependencies and licenses:
 * 
 * Open Source Software Licensed Under the PostgreSQL License: 
 * --------------------------------------------------------------------
 * 1. Postgres-XL XL9_5_STABLE
 * Portions Copyright (c) 2015-2016, 2ndQuadrant Ltd
 * Portions Copyright (c) 2012-2015, TransLattice, Inc.
 * Portions Copyright (c) 2010-2017, Postgres-XC Development Group
 * Portions Copyright (c) 1996-2015, The PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, The Regents of the University of California
 * 
 * Terms of the PostgreSQL License: 
 * --------------------------------------------------------------------
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 * 
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 * 
 * 
 * Terms of the BSD 3-Clause License:
 * --------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of THL A29 Limited nor the names of its contributors may be used to endorse or promote products derived from this software without 
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 * 
 */</comment>
<comment type="block">/*-------------------------------------------------------------------------
 *
 * parse_oper.c
 *        handle operator things for parser
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *      src/backend/parser/parse_oper.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_oper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * The lookup key for the operator lookaside hash table.  Unused bits must be
 * zeroes to ensure hashing works consistently --- in particular, oprname
 * must be zero-padded and any unused entries in search_path must be zero.
 *
 * search_path contains the actual search_path with which the entry was
 * derived (minus temp namespace if any), or else the single specified
 * schema OID if we are looking up an explicitly-qualified operator name.
 *
 * search_path has to be fixed-length since the hashtable code insists on
 * fixed-size keys.  If your search path is longer than that, we just punt
 * and don't cache anything.
 */</comment>

<comment type="block">/* If your search_path is longer than this, sucks to be you ... */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CACHED_PATH_LEN</name></cpp:macro>        <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>OprCacheKey</name>
<block>{
    <decl_stmt><decl><type><name>char</name></type>        <name><name>oprname</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>left_arg</name></decl>;</decl_stmt>        <comment type="block">/* Left input OID, or 0 if prefix op */</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>right_arg</name></decl>;</decl_stmt>        <comment type="block">/* Right input OID, or 0 if postfix op */</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name><name>search_path</name><index>[<expr><name>MAX_CACHED_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>OprCacheKey</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OprCacheEntry</name>
<block>{
    <comment type="block">/* the hash lookup key MUST BE FIRST */</comment>
    <decl_stmt><decl><type><name>OprCacheKey</name></type> <name>key</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Oid</name></type>            <name>opr_oid</name></decl>;</decl_stmt>        <comment type="block">/* OID of the resolved operator */</comment>
}</block></struct></type> <name>OprCacheEntry</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>Oid</name></type>    <name>binary_oper_exact</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FuncDetailCode</name></type> <name>oper_select_candidate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>,
                      <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>input_typeids</name></decl></parameter>,
                      <parameter><decl><type><name>FuncCandidateList</name></type> <name>candidates</name></decl></parameter>,
                      <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>operOid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_signature_string</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>oprkind</name></decl></parameter>,
                    <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>op_error</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>oprkind</name></decl></parameter>,
         <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>,
         <parameter><decl><type><name>FuncDetailCode</name></type> <name>fdresult</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>make_oper_cache_key</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>OprCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                    <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>ltypeId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rtypeId</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Oid</name></type>    <name>find_oper_cache_entry</name><parameter_list>(<parameter><decl><type><name>OprCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_oper_cache_entry</name><parameter_list>(<parameter><decl><type><name>OprCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opr_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InvalidateOprCacheCallBack</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashvalue</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>Oid</name></type> <name>get_oracle_compatible_oper</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>operOid</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * LookupOperName
 *        Given a possibly-qualified operator name and exact input datatypes,
 *        look up the operator.
 *
 * Pass oprleft = InvalidOid for a prefix op, oprright = InvalidOid for
 * a postfix op.
 *
 * If the operator name is not schema-qualified, it is sought in the current
 * namespace search path.
 *
 * If the operator is not found, we return InvalidOid if noError is true,
 * else raise an error.  pstate and location are used only to report the
 * error position; pass NULL/-1 if not available.
 */</comment>
<function><type><name>Oid</name></type>
<name>LookupOperName</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opername</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oprleft</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oprright</name></decl></parameter>,
               <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>OpernameGetOprid</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><name>oprleft</name></expr></argument>, <argument><expr><name>oprright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* we don't use op_error here because only an exact match is wanted */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>noError</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type>        <name>oprkind</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>oprleft</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>oprkind</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>oprright</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>oprkind</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>oprkind</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator does not exist: %s"</literal></expr></argument>,
                        <argument><expr><call><name>op_signature_string</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><name>oprkind</name></expr></argument>,
                                            <argument><expr><name>oprleft</name></expr></argument>, <argument><expr><name>oprright</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>InvalidOid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * LookupOperWithArgs
 *        Like LookupOperName, but the argument types are specified by
 *        a ObjectWithArg node.
 */</comment>
<function><type><name>Oid</name></type>
<name>LookupOperWithArgs</name><parameter_list>(<parameter><decl><type><name>ObjectWithArgs</name> <modifier>*</modifier></type><name>oper</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>oprleft</name></decl>,
               <decl><type ref="prev"><modifier>*</modifier></type><name>oprright</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>leftoid</name></decl>,
                <decl><type ref="prev"/><name>rightoid</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>oper</name><operator>-&gt;</operator><name>objargs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oprleft</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>oper</name><operator>-&gt;</operator><name>objargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oprright</name> <operator>=</operator> <call><name>lsecond</name><argument_list>(<argument><expr><name><name>oper</name><operator>-&gt;</operator><name>objargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>oprleft</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>leftoid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>leftoid</name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>oprleft</name></expr></argument>, <argument><expr><name>noError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>oprright</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rightoid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>rightoid</name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>oprright</name></expr></argument>, <argument><expr><name>noError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><call><name>LookupOperName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>oper</name><operator>-&gt;</operator><name>objname</name></name></expr></argument>, <argument><expr><name>leftoid</name></expr></argument>, <argument><expr><name>rightoid</name></expr></argument>,
                          <argument><expr><name>noError</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_sort_group_operators - get default sorting/grouping operators for type
 *
 * We fetch the "&lt;", "=", and "&gt;" operators all at once to reduce lookup
 * overhead (knowing that most callers will be interested in at least two).
 * However, a given datatype might have only an "=" operator, if it is
 * hashable but not sortable.  (Other combinations of present and missing
 * operators shouldn't happen, unless the system catalogs are messed up.)
 *
 * If an operator is missing and the corresponding needXX flag is true,
 * throw a standard error message, else return InvalidOid.
 *
 * In addition to the operator OIDs themselves, this function can identify
 * whether the "=" operator is hashable.
 *
 * Callers can pass NULL pointers for any results they don't care to get.
 *
 * Note: the results are guaranteed to be exact or binary-compatible matches,
 * since most callers are not prepared to cope with adding any run-time type
 * coercion steps.
 */</comment>
<function><type><name>void</name></type>
<name>get_sort_group_operators</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name></type> <name>needLT</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>needEQ</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>needGT</name></decl></parameter>,
                         <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>ltOpr</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>eqOpr</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>gtOpr</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isHashable</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typentry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>cache_flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>lt_opr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>eq_opr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>gt_opr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>hashable</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Look up the operators using the type cache.
     *
     * Note: the search algorithm used by typcache.c ensures that the results
     * are consistent, ie all from matching opclasses.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>isHashable</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cache_flags</name> <operator>=</operator> <name>TYPECACHE_LT_OPR</name> <operator>|</operator> <name>TYPECACHE_EQ_OPR</name> <operator>|</operator> <name>TYPECACHE_GT_OPR</name> <operator>|</operator>
            <name>TYPECACHE_HASH_PROC</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>cache_flags</name> <operator>=</operator> <name>TYPECACHE_LT_OPR</name> <operator>|</operator> <name>TYPECACHE_EQ_OPR</name> <operator>|</operator> <name>TYPECACHE_GT_OPR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>typentry</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>, <argument><expr><name>cache_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lt_opr</name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>lt_opr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>eq_opr</name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>eq_opr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gt_opr</name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>gt_opr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hashable</name> <operator>=</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>hash_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Report errors if needed */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>needLT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>lt_opr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>needGT</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>gt_opr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not identify an ordering operator for type %s"</literal></expr></argument>,
                        <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use an explicit ordering operator or modify the query."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>needEQ</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>eq_opr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not identify an equality operator for type %s"</literal></expr></argument>,
                        <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Return results as needed */</comment>
    <if_stmt><if>if <condition>(<expr><name>ltOpr</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>ltOpr</name> <operator>=</operator> <name>lt_opr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>eqOpr</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>eqOpr</name> <operator>=</operator> <name>eq_opr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>gtOpr</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>gtOpr</name> <operator>=</operator> <name>gt_opr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>isHashable</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>isHashable</name> <operator>=</operator> <name>hashable</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* given operator tuple, return the operator OID */</comment>
<function><type><name>Oid</name></type>
<name>oprid</name><parameter_list>(<parameter><decl><type><name>Operator</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* given operator tuple, return the underlying function's OID */</comment>
<function><type><name>Oid</name></type>
<name>oprfuncid</name><parameter_list>(<parameter><decl><type><name>Operator</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Form_pg_operator</name></type> <name>pgopform</name> <init>= <expr><operator>(</operator><name>Form_pg_operator</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name><name>pgopform</name><operator>-&gt;</operator><name>oprcode</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* binary_oper_exact()
 * Check for an "exact" match to the specified operand types.
 *
 * If one operand is an unknown literal, assume it should be taken to be
 * the same type as the other operand for this purpose.  Also, consider
 * the possibility that the other operand is a domain type that needs to
 * be reduced to its base type to find an "exact" match.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>binary_oper_exact</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>was_unknown</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Unspecified type for one of the arguments? then use the other */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg1</name> <operator>==</operator> <name>UNKNOWNOID</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg2</name> <operator>!=</operator> <name>InvalidOid</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>arg1</name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>was_unknown</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>arg2</name> <operator>==</operator> <name>UNKNOWNOID</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg1</name> <operator>!=</operator> <name>InvalidOid</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>arg2</name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>was_unknown</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>OpernameGetOprid</name><argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>was_unknown</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* arg1 and arg2 are the same here, need only look at arg1 */</comment>
        <decl_stmt><decl><type><name>Oid</name></type>            <name>basetype</name> <init>= <expr><call><name>getBaseType</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>basetype</name> <operator>!=</operator> <name>arg1</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>OpernameGetOprid</name><argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><name>basetype</name></expr></argument>, <argument><expr><name>basetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>InvalidOid</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* oper_select_candidate()
 *        Given the input argtype array and one or more candidates
 *        for the operator, attempt to resolve the conflict.
 *
 * Returns FUNCDETAIL_NOTFOUND, FUNCDETAIL_MULTIPLE, or FUNCDETAIL_NORMAL.
 * In the success case the Oid of the best candidate is stored in *operOid.
 *
 * Note that the caller has already determined that there is no candidate
 * exactly matching the input argtype(s).  Incompatible candidates are not yet
 * pruned away, however.
 */</comment>
<function><type><specifier>static</specifier> <name>FuncDetailCode</name></type>
<name>oper_select_candidate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nargs</name></decl></parameter>,
                      <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>input_typeids</name></decl></parameter>,
                      <parameter><decl><type><name>FuncCandidateList</name></type> <name>candidates</name></decl></parameter>,
                      <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>operOid</name></decl></parameter>)</parameter_list> <comment type="block">/* output argument */</comment>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type>            <name>ncandidates</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Delete any candidates that cannot actually accept the given input
     * types, whether directly or by coercion.
     */</comment>
    <expr_stmt><expr><name>ncandidates</name> <operator>=</operator> <call><name>func_match_argtypes</name><argument_list>(<argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>input_typeids</name></expr></argument>,
                                      <argument><expr><name>candidates</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Done if no candidate or only one candidate survives */</comment>
    <if_stmt><if>if <condition>(<expr><name>ncandidates</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>operOid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
        <return>return <expr><name>FUNCDETAIL_NOTFOUND</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ncandidates</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>operOid</name> <operator>=</operator> <name><name>candidates</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
        <return>return <expr><name>FUNCDETAIL_NORMAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Use the same heuristics as for ambiguous functions to resolve the
     * conflict.
     */</comment>
    <expr_stmt><expr><name>candidates</name> <operator>=</operator> <call><name>func_select_candidate</name><argument_list>(<argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>input_typeids</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>candidates</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>operOid</name> <operator>=</operator> <name><name>candidates</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
        <return>return <expr><name>FUNCDETAIL_NORMAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>operOid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
    <return>return <expr><name>FUNCDETAIL_MULTIPLE</name></expr>;</return> <comment type="block">/* failed to select a best candidate */</comment>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
<comment type="block">/* get_oracle_compatible_oper()
 *        Get an oracle compatible operId from pg_operator
 *        while enable_oracle_compatible is on.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type> 
<name>get_oracle_compatible_oper</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>operOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable_oracle_compatible</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>operOid</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* 
     * use pg_oracle.int4div which returns numeric instead of integer
     * when evaluate expression int4/int4 such as select 1/2 .
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>operOid</name> <operator>==</operator> <name>OID_INT4_DIV_OP</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>OID_ORCL_INT4_DIV_OP</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* 
     * use pg_oracle.timestamp_mi which returns float8 instead of interval
     * when evaluate expresion timestamp - timestamp such as 
     * select current_timestamp - (now() + interval '128 hours')
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>operOid</name> <operator>==</operator> <name>OID_TIMESTAMP_MI_OP</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>OID_ORCL_TIMESTAMP_MI_OP</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>operOid</name> <operator>==</operator> <name>OID_TIMESTAMPTZ_MI_OP</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>OID_ORCL_TIMESTAMPTZ_MI_OP</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>operOid</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* oper() -- search for a binary operator
 * Given operator name, types of arg1 and arg2, return oper struct.
 *
 * IMPORTANT: the returned operator (if any) is only promised to be
 * coercion-compatible with the input datatypes.  Do not use this if
 * you need an exact- or binary-compatible match; see compatible_oper.
 *
 * If no matching operator found, return NULL if noError is true,
 * raise an error if it is false.  pstate and location are used only to report
 * the error position; pass NULL/-1 if not available.
 *
 * NOTE: on success, the returned object is a syscache entry.  The caller
 * must ReleaseSysCache() the entry when done with it.
 */</comment>
<function><type><name>Operator</name></type>
<name>oper</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>ltypeId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rtypeId</name></decl></parameter>,
     <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>operOid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OprCacheKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>key_ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncDetailCode</name></type> <name>fdresult</name> <init>= <expr><name>FUNCDETAIL_NOTFOUND</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Try to find the mapping in the lookaside cache.
     */</comment>
    <expr_stmt><expr><name>key_ok</name> <operator>=</operator> <call><name>make_oper_cache_key</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>key_ok</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>find_oper_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
            <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>get_oracle_compatible_oper</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>tup</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * First try for an "exact" match.
     */</comment>
    <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>binary_oper_exact</name><argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Otherwise, search for the most suitable candidate.
         */</comment>
        <decl_stmt><decl><type><name>FuncCandidateList</name></type> <name>clist</name></decl>;</decl_stmt>

        <comment type="block">/* Get binary operators of given name */</comment>
        <expr_stmt><expr><name>clist</name> <operator>=</operator> <call><name>OpernameGetCandidates</name><argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* No operators found? Then fail... */</comment>
        <if_stmt><if>if <condition>(<expr><name>clist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Unspecified type for one of the arguments? then use the other
             * (XXX this is probably dead code?)
             */</comment>
            <decl_stmt><decl><type><name>Oid</name></type>            <name><name>inputOids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>rtypeId</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <name>ltypeId</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>ltypeId</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ltypeId</name> <operator>=</operator> <name>rtypeId</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>inputOids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ltypeId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inputOids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rtypeId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>fdresult</name> <operator>=</operator> <call><name>oper_select_candidate</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>inputOids</name></expr></argument>, <argument><expr><name>clist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
    <block>{<block_content>
        <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>get_oracle_compatible_oper</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key_ok</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>make_oper_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>op_error</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>, <argument><expr><name>fdresult</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>tup</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* compatible_oper()
 *    given an opname and input datatypes, find a compatible binary operator
 *
 *    This is tighter than oper() because it will not return an operator that
 *    requires coercion of the input datatypes (but binary-compatible operators
 *    are accepted).  Otherwise, the semantics are the same.
 */</comment>
<function><type><name>Operator</name></type>
<name>compatible_oper</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>,
                <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Operator</name></type>    <name>optup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pg_operator</name></type> <name>opform</name></decl>;</decl_stmt>

    <comment type="block">/* oper() will find the best available match */</comment>
    <expr_stmt><expr><name>optup</name> <operator>=</operator> <call><name>oper</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>noError</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>optup</name> <operator>==</operator> <operator>(</operator><name>Operator</name><operator>)</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* must be noError case */</comment>

    <comment type="block">/* but is it good enough? */</comment>
    <expr_stmt><expr><name>opform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_operator</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>optup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsBinaryCoercible</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprleft</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>IsBinaryCoercible</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprright</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>optup</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* nope... */</comment>
    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>optup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator requires run-time type coercion: %s"</literal></expr></argument>,
                        <argument><expr><call><name>op_signature_string</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* compatible_oper_opid() -- get OID of a binary operator
 *
 * This is a convenience routine that extracts only the operator OID
 * from the result of compatible_oper().  InvalidOid is returned if the
 * lookup fails and noError is true.
 */</comment>
<function><type><name>Oid</name></type>
<name>compatible_oper_opid</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Operator</name></type>    <name>optup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>optup</name> <operator>=</operator> <call><name>compatible_oper</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>noError</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>optup</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>oprid</name><argument_list>(<argument><expr><name>optup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>optup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>InvalidOid</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* right_oper() -- search for a unary right operator (postfix operator)
 * Given operator name and type of arg, return oper struct.
 *
 * IMPORTANT: the returned operator (if any) is only promised to be
 * coercion-compatible with the input datatype.  Do not use this if
 * you need an exact- or binary-compatible match.
 *
 * If no matching operator found, return NULL if noError is true,
 * raise an error if it is false.  pstate and location are used only to report
 * the error position; pass NULL/-1 if not available.
 *
 * NOTE: on success, the returned object is a syscache entry.  The caller
 * must ReleaseSysCache() the entry when done with it.
 */</comment>
<function><type><name>Operator</name></type>
<name>right_oper</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>operOid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OprCacheKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>key_ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncDetailCode</name></type> <name>fdresult</name> <init>= <expr><name>FUNCDETAIL_NOTFOUND</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Try to find the mapping in the lookaside cache.
     */</comment>
    <expr_stmt><expr><name>key_ok</name> <operator>=</operator> <call><name>make_oper_cache_key</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>key_ok</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>find_oper_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>tup</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * First try for an "exact" match.
     */</comment>
    <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>OpernameGetOprid</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Otherwise, search for the most suitable candidate.
         */</comment>
        <decl_stmt><decl><type><name>FuncCandidateList</name></type> <name>clist</name></decl>;</decl_stmt>

        <comment type="block">/* Get postfix operators of given name */</comment>
        <expr_stmt><expr><name>clist</name> <operator>=</operator> <call><name>OpernameGetCandidates</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* No operators found? Then fail... */</comment>
        <if_stmt><if>if <condition>(<expr><name>clist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * We must run oper_select_candidate even if only one candidate,
             * otherwise we may falsely return a non-type-compatible operator.
             */</comment>
            <expr_stmt><expr><name>fdresult</name> <operator>=</operator> <call><name>oper_select_candidate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>clist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key_ok</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>make_oper_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>op_error</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>fdresult</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>tup</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* left_oper() -- search for a unary left operator (prefix operator)
 * Given operator name and type of arg, return oper struct.
 *
 * IMPORTANT: the returned operator (if any) is only promised to be
 * coercion-compatible with the input datatype.  Do not use this if
 * you need an exact- or binary-compatible match.
 *
 * If no matching operator found, return NULL if noError is true,
 * raise an error if it is false.  pstate and location are used only to report
 * the error position; pass NULL/-1 if not available.
 *
 * NOTE: on success, the returned object is a syscache entry.  The caller
 * must ReleaseSysCache() the entry when done with it.
 */</comment>
<function><type><name>Operator</name></type>
<name>left_oper</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>operOid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OprCacheKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>key_ok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncDetailCode</name></type> <name>fdresult</name> <init>= <expr><name>FUNCDETAIL_NOTFOUND</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapTuple</name></type>    <name>tup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Try to find the mapping in the lookaside cache.
     */</comment>
    <expr_stmt><expr><name>key_ok</name> <operator>=</operator> <call><name>make_oper_cache_key</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>key_ok</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>find_oper_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>tup</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * First try for an "exact" match.
     */</comment>
    <expr_stmt><expr><name>operOid</name> <operator>=</operator> <call><name>OpernameGetOprid</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Otherwise, search for the most suitable candidate.
         */</comment>
        <decl_stmt><decl><type><name>FuncCandidateList</name></type> <name>clist</name></decl>;</decl_stmt>

        <comment type="block">/* Get prefix operators of given name */</comment>
        <expr_stmt><expr><name>clist</name> <operator>=</operator> <call><name>OpernameGetCandidates</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* No operators found? Then fail... */</comment>
        <if_stmt><if>if <condition>(<expr><name>clist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * The returned list has args in the form (0, oprright). Move the
             * useful data into args[0] to keep oper_select_candidate simple.
             * XXX we are assuming here that we may scribble on the list!
             */</comment>
            <decl_stmt><decl><type><name>FuncCandidateList</name></type> <name>clisti</name></decl>;</decl_stmt>

            <for>for <control>(<init><expr><name>clisti</name> <operator>=</operator> <name>clist</name></expr>;</init> <condition><expr><name>clisti</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>clisti</name> <operator>=</operator> <name><name>clisti</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>clisti</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>clisti</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="block">/*
             * We must run oper_select_candidate even if only one candidate,
             * otherwise we may falsely return a non-type-compatible operator.
             */</comment>
            <expr_stmt><expr><name>fdresult</name> <operator>=</operator> <call><name>oper_select_candidate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>clist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key_ok</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>make_oper_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>operOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>op_error</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>fdresult</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Operator</name><operator>)</operator> <name>tup</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * op_signature_string
 *        Build a string representing an operator name, including arg type(s).
 *        The result is something like "integer + integer".
 *
 * This is typically used in the construction of operator-not-found error
 * messages.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>op_signature_string</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>oprkind</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringInfoData</name></type> <name>argbuf</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>oprkind</name> <operator>!=</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argbuf</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argbuf</name></expr></argument>, <argument><expr><call><name>NameListToString</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>oprkind</name> <operator>!=</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argbuf</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name><name>argbuf</name><operator>.</operator><name>data</name></name></expr>;</return>            <comment type="block">/* return palloc'd string buffer */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * op_error - utility routine to complain about an unresolvable operator
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>op_error</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>oprkind</name></decl></parameter>,
         <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>,
         <parameter><decl><type><name>FuncDetailCode</name></type> <name>fdresult</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fdresult</name> <operator>==</operator> <name>FUNCDETAIL_MULTIPLE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_AMBIGUOUS_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator is not unique: %s"</literal></expr></argument>,
                        <argument><expr><call><name>op_signature_string</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>oprkind</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Could not choose a best candidate operator. "</literal>
                         <literal type="string">"You might need to add explicit type casts."</literal></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator does not exist: %s"</literal></expr></argument>,
                        <argument><expr><call><name>op_signature_string</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>oprkind</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"No operator matches the given name and argument type(s). "</literal>
                         <literal type="string">"You might need to add explicit type casts."</literal></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * make_op()
 *        Operator expression construction.
 *
 * Transform operator expression ensuring type compatibility.
 * This is where some type conversion happens.
 *
 * last_srf should be a copy of pstate-&gt;p_last_srf from just before we
 * started transforming the operator's arguments; this is used for nested-SRF
 * detection.  If the caller will throw an error anyway for a set-returning
 * expression, it's okay to cheat and just pass pstate-&gt;p_last_srf.
 */</comment>
<function><type><name>Expr</name> <modifier>*</modifier></type>
<name>make_op</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opname</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>ltree</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>,
        <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>last_srf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>ltypeId</name></decl>,
                <decl><type ref="prev"/><name>rtypeId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Operator</name></type>    <name>tup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pg_operator</name></type> <name>opform</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name><name>actual_arg_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name><name>declared_arg_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>nargs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>rettype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OpExpr</name>       <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

    <comment type="block">/* Select the operator */</comment>
    <if_stmt><if>if <condition>(<expr><name>rtree</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* right operator */</comment>
        <expr_stmt><expr><name>ltypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>right_oper</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ltree</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* left operator */</comment>
        <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ltypeId</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>left_oper</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* otherwise, binary operator */</comment>
        <expr_stmt><expr><name>ltypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PG_ORCL_</name></cpp:ifdef>
        <comment type="block">/* try coerce TYPCATEGORY_STRING to TYPCATEGORY_NUMERIC */</comment>
        <if_stmt><if>if <condition>(<expr><name>enable_oracle_compatible</name> <operator>&amp;&amp;</operator> <name>opname</name> <operator>!=</operator> <name>NIL</name> <operator>&amp;&amp;</operator> <name>ltypeId</name> <operator>!=</operator> <name>rtypeId</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>schemaname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>opername</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* deconstruct the name list */</comment>
            <expr_stmt><expr><call><name>DeconstructQualifiedName</name><argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schemaname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>schemaname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* search only in exact schema given */</comment>
                <decl_stmt><decl><type><name>Oid</name></type>    <name>namespaceId</name> <init>= <expr><call><name>LookupExplicitNamespace</name><argument_list>(<argument><expr><name>schemaname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>namespaceId</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>namespaceId</name> <operator>!=</operator> <name>PG_CATALOG_NAMESPACE</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>opername</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>opername</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> 
                <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                 <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                 <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                 <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator>
                 <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* '123' = 1 */</comment>
                <if_stmt><if>if <condition>(<expr><name>TYPCATEGORY_NUMERIC</name> <operator>==</operator> <call><name>TypeCategory</name><argument_list>(<argument><expr><name>rtypeId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                    <name>TYPCATEGORY_STRING</name>  <operator>==</operator> <call><name>TypeCategory</name><argument_list>(<argument><expr><name>ltypeId</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type> <name>ltarget</name> <init>= <expr><call><name>coerce_to_target_type</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
                                                            <argument><expr><name>ltree</name></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>,
                                                            <argument><expr><name>NUMERICOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                            <argument><expr><name>COERCION_EXPLICIT</name></expr></argument>,
                                                            <argument><expr><name>COERCE_EXPLICIT_CAST</name></expr></argument>,
                                                            <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ltarget</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>ltree</name> <operator>=</operator> <name>ltarget</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ltypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <comment type="block">/* 1 = '123' */</comment>
                <if type="elseif">else if <condition>(<expr><name>TYPCATEGORY_NUMERIC</name> <operator>==</operator> <call><name>TypeCategory</name><argument_list>(<argument><expr><name>ltypeId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                         <name>TYPCATEGORY_STRING</name> <operator>==</operator> <call><name>TypeCategory</name><argument_list>(<argument><expr><name>rtypeId</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type> <name>rtarget</name> <init>= <expr><call><name>coerce_to_target_type</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
                                                            <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>,
                                                            <argument><expr><name>NUMERICOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                            <argument><expr><name>COERCION_EXPLICIT</name></expr></argument>,
                                                            <argument><expr><name>COERCE_EXPLICIT_CAST</name></expr></argument>,
                                                            <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>rtarget</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>rtree</name> <operator>=</operator> <name>rtarget</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>opername</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> 
                <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"~~"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"!~~"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                 <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"~~*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opername</name></expr></argument>, <argument><expr><literal type="string">"!~~*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                
                <if_stmt><if>if <condition>(<expr><name>TYPCATEGORY_STRING</name> <operator>!=</operator> <call><name>TypeCategory</name><argument_list>(<argument><expr><name>ltypeId</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type> <name>ltarget</name> <init>= <expr><call><name>coerce_to_target_type</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
                                                            <argument><expr><name>ltree</name></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>,
                                                            <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                            <argument><expr><name>COERCION_EXPLICIT</name></expr></argument>,
                                                            <argument><expr><name>COERCE_EXPLICIT_CAST</name></expr></argument>,
                                                            <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ltarget</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>ltree</name> <operator>=</operator> <name>ltarget</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ltypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>TYPCATEGORY_STRING</name> <operator>!=</operator> <call><name>TypeCategory</name><argument_list>(<argument><expr><name>rtypeId</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type> <name>rtarget</name> <init>= <expr><call><name>coerce_to_target_type</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
                                                            <argument><expr><name>rtree</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>,
                                                            <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                                                            <argument><expr><name>COERCION_EXPLICIT</name></expr></argument>,
                                                            <argument><expr><name>COERCE_EXPLICIT_CAST</name></expr></argument>,
                                                            <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>rtarget</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>rtree</name> <operator>=</operator> <name>rtarget</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>oper</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>opform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_operator</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check it's not a shell */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegProcedureIsValid</name><argument_list>(<argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprcode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator is only a shell: %s"</literal></expr></argument>,
                        <argument><expr><call><name>op_signature_string</name><argument_list>(<argument><expr><name>opname</name></expr></argument>,
                                            <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprkind</name></name></expr></argument>,
                                            <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprleft</name></name></expr></argument>,
                                            <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprright</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Do typecasting and build the expression tree */</comment>
    <if_stmt><if>if <condition>(<expr><name>rtree</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* right operator */</comment>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>actual_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ltypeId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprleft</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nargs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ltree</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* left operator */</comment>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>actual_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rtypeId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprright</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nargs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* otherwise, binary operator */</comment>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>actual_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ltypeId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>actual_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rtypeId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprleft</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprright</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * enforce consistency with polymorphic argument and return types,
     * possibly adjusting return type or declared_arg_types (which will be
     * used as the cast destination by make_fn_arguments)
     */</comment>
    <expr_stmt><expr><name>rettype</name> <operator>=</operator> <call><name>enforce_generic_type_consistency</name><argument_list>(<argument><expr><name>actual_arg_types</name></expr></argument>,
                                               <argument><expr><name>declared_arg_types</name></expr></argument>,
                                               <argument><expr><name>nargs</name></expr></argument>,
                                               <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprresult</name></name></expr></argument>,
                                               <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* perform the necessary typecasting of arguments */</comment>
    <expr_stmt><expr><call><name>make_fn_arguments</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>actual_arg_types</name></expr></argument>, <argument><expr><name>declared_arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* and build the expression node */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>opno</name></name> <operator>=</operator> <call><name>oprid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>opfuncid</name></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprcode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>opresulttype</name></name> <operator>=</operator> <name>rettype</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>opretset</name></name> <operator>=</operator> <call><name>get_func_retset</name><argument_list>(<argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* opcollid and inputcollid will be set by parse_collate.c */</comment>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <comment type="block">/* if it returns a set, check that's OK */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>opretset</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>check_srf_call_placement</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>last_srf</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* ... and remember it for error checks at higher levels */</comment>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_last_srf</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>result</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * make_scalar_array_op()
 *        Build expression tree for "scalar op ANY/ALL (array)" construct.
 */</comment>
<function><type><name>Expr</name> <modifier>*</modifier></type>
<name>make_scalar_array_op</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opname</name></decl></parameter>,
                     <parameter><decl><type><name>bool</name></type> <name>useOr</name></decl></parameter>,
                     <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>ltree</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rtree</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content><comment type="line">// #lizard forgives</comment>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>ltypeId</name></decl>,
                <decl><type ref="prev"/><name>rtypeId</name></decl>,
                <decl><type ref="prev"/><name>atypeId</name></decl>,
                <decl><type ref="prev"/><name>res_atypeId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Operator</name></type>    <name>tup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Form_pg_operator</name></type> <name>opform</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name><name>actual_arg_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name><name>declared_arg_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name>       <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type>            <name>rettype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScalarArrayOpExpr</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ltypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>atypeId</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The right-hand input of the operator will be the element type of the
     * array.  However, if we currently have just an untyped literal on the
     * right, stay with that and hope we can resolve the operator.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>atypeId</name> <operator>==</operator> <name>UNKNOWNOID</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <name>UNKNOWNOID</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>rtypeId</name> <operator>=</operator> <call><name>get_base_element_type</name><argument_list>(<argument><expr><name>atypeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>rtypeId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"op ANY/ALL (array) requires array on right side"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Now resolve the operator */</comment>
    <expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>oper</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>ltypeId</name></expr></argument>, <argument><expr><name>rtypeId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>opform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_operator</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check it's not a shell */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegProcedureIsValid</name><argument_list>(<argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprcode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator is only a shell: %s"</literal></expr></argument>,
                        <argument><expr><call><name>op_signature_string</name><argument_list>(<argument><expr><name>opname</name></expr></argument>,
                                            <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprkind</name></name></expr></argument>,
                                            <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprleft</name></name></expr></argument>,
                                            <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprright</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><name>ltree</name></expr></argument>, <argument><expr><name>rtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>actual_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ltypeId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>actual_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rtypeId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprleft</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprright</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * enforce consistency with polymorphic argument and return types,
     * possibly adjusting return type or declared_arg_types (which will be
     * used as the cast destination by make_fn_arguments)
     */</comment>
    <expr_stmt><expr><name>rettype</name> <operator>=</operator> <call><name>enforce_generic_type_consistency</name><argument_list>(<argument><expr><name>actual_arg_types</name></expr></argument>,
                                               <argument><expr><name>declared_arg_types</name></expr></argument>,
                                               <argument><expr><literal type="number">2</literal></expr></argument>,
                                               <argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprresult</name></name></expr></argument>,
                                               <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check that operator result is boolean
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>rettype</name> <operator>!=</operator> <name>BOOLOID</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"op ANY/ALL (array) requires operator to yield boolean"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>get_func_retset</name><argument_list>(<argument><expr><name><name>opform</name><operator>-&gt;</operator><name>oprcode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"op ANY/ALL (array) requires operator not to return a set"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Now switch back to the array type on the right, arranging for any
     * needed cast to be applied.  Beware of polymorphic operators here;
     * enforce_generic_type_consistency may or may not have replaced a
     * polymorphic type with a real one.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsPolymorphicType</name><argument_list>(<argument><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* assume the actual array type is OK */</comment>
        <expr_stmt><expr><name>res_atypeId</name> <operator>=</operator> <name>atypeId</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>res_atypeId</name> <operator>=</operator> <call><name>get_array_type</name><argument_list>(<argument><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>res_atypeId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find array type for data type %s"</literal></expr></argument>,
                            <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>actual_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>atypeId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>declared_arg_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>res_atypeId</name></expr>;</expr_stmt>

    <comment type="block">/* perform the necessary typecasting of arguments */</comment>
    <expr_stmt><expr><call><name>make_fn_arguments</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>actual_arg_types</name></expr></argument>, <argument><expr><name>declared_arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* and build the expression node */</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ScalarArrayOpExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>opno</name></name> <operator>=</operator> <call><name>oprid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>opfuncid</name></name> <operator>=</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprcode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>useOr</name></name> <operator>=</operator> <name>useOr</name></expr>;</expr_stmt>
    <comment type="block">/* inputcollid will be set by parse_collate.c */</comment>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Lookaside cache to speed operator lookup.  Possibly this should be in
 * a separate module under utils/cache/ ?
 *
 * The idea here is that the mapping from operator name and given argument
 * types is constant for a given search path (or single specified schema OID)
 * so long as the contents of pg_operator and pg_cast don't change.  And that
 * mapping is pretty expensive to compute, especially for ambiguous operators;
 * this is mainly because there are a *lot* of instances of popular operator
 * names such as "=", and we have to check each one to see which is the
 * best match.  So once we have identified the correct mapping, we save it
 * in a cache that need only be flushed on pg_operator or pg_cast change.
 * (pg_cast must be considered because changes in the set of implicit casts
 * affect the set of applicable operators for any given input datatype.)
 *
 * XXX in principle, ALTER TABLE ... INHERIT could affect the mapping as
 * well, but we disregard that since there's no convenient way to find out
 * about it, and it seems a pretty far-fetched corner-case anyway.
 *
 * Note: at some point it might be worth doing a similar cache for function
 * lookups.  However, the potential gain is a lot less since (a) function
 * names are generally not overloaded as heavily as operator names, and
 * (b) we'd have to flush on pg_proc updates, which are probably a good
 * deal more common than pg_operator updates.
 */</comment>

<comment type="block">/* The operator cache hashtable */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>OprCacheHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * make_oper_cache_key
 *        Fill the lookup key struct given operator name and arg types.
 *
 * Returns TRUE if successful, FALSE if the search_path overflowed
 * (hence no caching is possible).
 *
 * pstate/location are used only to report the error position; pass NULL/-1
 * if not available.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>make_oper_cache_key</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>OprCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>opname</name></decl></parameter>,
                    <parameter><decl><type><name>Oid</name></type> <name>ltypeId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rtypeId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>schemaname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>opername</name></decl>;</decl_stmt>

    <comment type="block">/* deconstruct the name list */</comment>
    <expr_stmt><expr><call><name>DeconstructQualifiedName</name><argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>schemaname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* ensure zero-fill for stable hashing */</comment>
    <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OprCacheKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* save operator name and input types into key */</comment>
    <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>oprname</name></name></expr></argument>, <argument><expr><name>opername</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>left_arg</name></name> <operator>=</operator> <name>ltypeId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>right_arg</name></name> <operator>=</operator> <name>rtypeId</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>schemaname</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ParseCallbackState</name></type> <name>pcbstate</name></decl>;</decl_stmt>

        <comment type="block">/* search only in exact schema given */</comment>
        <expr_stmt><expr><call><name>setup_parser_errposition_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pcbstate</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>search_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LookupExplicitNamespace</name><argument_list>(<argument><expr><name>schemaname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cancel_parser_errposition_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pcbstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* get the active search path */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>fetch_search_path_array</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>search_path</name></name></expr></argument>,
                                    <argument><expr><name>MAX_CACHED_PATH_LEN</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAX_CACHED_PATH_LEN</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>        <comment type="block">/* oops, didn't fit */</comment>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * find_oper_cache_entry
 *
 * Look for a cache entry matching the given key.  If found, return the
 * contained operator OID, else return InvalidOid.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>find_oper_cache_entry</name><parameter_list>(<parameter><decl><type><name>OprCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OprCacheEntry</name> <modifier>*</modifier></type><name>oprentry</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>OprCacheHash</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* First time through: initialize the hash table */</comment>
        <decl_stmt><decl><type><name>HASHCTL</name></type>        <name>ctl</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OprCacheKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OprCacheEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>OprCacheHash</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Operator lookup cache"</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Arrange to flush cache on pg_operator and pg_cast changes */</comment>
        <expr_stmt><expr><call><name>CacheRegisterSyscacheCallback</name><argument_list>(<argument><expr><name>OPERNAMENSP</name></expr></argument>,
                                      <argument><expr><name>InvalidateOprCacheCallBack</name></expr></argument>,
                                      <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CacheRegisterSyscacheCallback</name><argument_list>(<argument><expr><name>CASTSOURCETARGET</name></expr></argument>,
                                      <argument><expr><name>InvalidateOprCacheCallBack</name></expr></argument>,
                                      <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Look for an existing entry */</comment>
    <expr_stmt><expr><name>oprentry</name> <operator>=</operator> <operator>(</operator><name>OprCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>OprCacheHash</name></expr></argument>,
                                             <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>,
                                             <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>oprentry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>InvalidOid</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>oprentry</name><operator>-&gt;</operator><name>opr_oid</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * make_oper_cache_entry
 *
 * Insert a cache entry for the given key.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_oper_cache_entry</name><parameter_list>(<parameter><decl><type><name>OprCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opr_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>OprCacheEntry</name> <modifier>*</modifier></type><name>oprentry</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>OprCacheHash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>oprentry</name> <operator>=</operator> <operator>(</operator><name>OprCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>OprCacheHash</name></expr></argument>,
                                             <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>,
                                             <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>oprentry</name><operator>-&gt;</operator><name>opr_oid</name></name> <operator>=</operator> <name>opr_oid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Callback for pg_operator and pg_cast inval events
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InvalidateOprCacheCallBack</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OprCacheEntry</name> <modifier>*</modifier></type><name>hentry</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>OprCacheHash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Currently we just flush all entries; hard to be smarter ... */</comment>
    <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>OprCacheHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>hentry</name> <operator>=</operator> <operator>(</operator><name>OprCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>OprCacheHash</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>hentry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
                        <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"hash table corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
</unit>
