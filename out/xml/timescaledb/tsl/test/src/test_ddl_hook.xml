<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/test/src/test_ddl_hook.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"process_utility.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cross_module_fn.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_ddl_command_hook_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_ddl_command_hook_unreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>tsl_delayed_execution_list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>ddl_command_start</name>)<parameter_list>(<parameter><decl><type><name>ProcessUtilityArgs</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>ddl_command_end</name>)<parameter_list>(<parameter><decl><type><name>EventTriggerData</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>sql_drop</name>)<parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>dropped_objects</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ddl_command_start</name><parameter_list>(<parameter><decl><type><name>ProcessUtilityArgs</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
		 <argument><expr><literal type="string">"test_ddl_command_start: %d hypertables, query: %s"</literal></expr></argument>,
		 <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>hypertable_list</name></name></expr></argument>)</argument_list></call></expr></argument>,
		 <argument><expr><name><name>args</name><operator>-&gt;</operator><name>query_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Hypertable oid from those commands is available in hypertable_list but
	 * cannot be resolved here until standard utility hook will synchronize new
	 * relation name and schema.
	 *
	 * Save hypertable list here for command_end execution to avoid statement
	 * parsing for second time.
	 */</comment>
	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>parsetree</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_AlterObjectSchemaStmt</name></expr>:</case>
		<case>case <expr><name>T_RenameStmt</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_ddl_command_start: wait for ddl_command_end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tsl_delayed_execution_list</name> <operator>=</operator> <call><name>list_copy</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>hypertable_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>hcache</name> <operator>=</operator> <call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>args-&gt;hypertable_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
			 <argument><expr><literal type="string">"test_ddl_command_start: %s.%s"</literal></expr></argument>,
			 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ddl_command_end</name><parameter_list>(<parameter><decl><type><name>EventTriggerData</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG13_GE</name></expr></cpp:if>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_ddl_command_end: %s"</literal></expr></argument>, <argument><expr><call><name>GetCommandTagName</name><argument_list>(<argument><expr><name><name>command</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_ddl_command_end: %s"</literal></expr></argument>, <argument><expr><name><name>command</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>tsl_delayed_execution_list</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
		 <argument><expr><literal type="string">"test_ddl_command_end: %d hypertables scheduled"</literal></expr></argument>,
		 <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>tsl_delayed_execution_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hcache</name> <operator>=</operator> <call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>tsl_delayed_execution_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
			 <argument><expr><literal type="string">"test_ddl_command_end: %s.%s"</literal></expr></argument>,
			 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tsl_delayed_execution_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tsl_delayed_execution_list</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>event_trigger_event_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>EventTriggerDropObject</name> <modifier>*</modifier></type><name><name>obj</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>EventTriggerDropObject</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>obj1</name><operator>)</operator></expr>,
											<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>EventTriggerDropObject</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>obj2</name><operator>)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/* This only orders on object type for simplicity. Thus it is assumed that
	 * the order of objects with the same type is predictible across
	 * PostgreSQL versions */</comment>
	<return>return <expr><name><name>obj</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>-</operator> <name><name>obj</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_sql_drop</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>dropped_objects</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_objects</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>dropped_objects</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EventTriggerDropObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>objects</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>num_objects</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropObject</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Sort the list of dropped objects for predictible order in tests across
	 * PostgreSQL versions. Note that PG11 introduced a list_qsort function,
	 * but it is not available in earlier PostgreSQL versions so we're doing
	 * our own sorting. */</comment>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>dropped_objects</argument>)</argument_list></macro>
		<expr_stmt><expr><name><name>objects</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name>num_objects</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropObject</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>event_trigger_event_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_objects</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>EventTriggerDropObject</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>EVENT_TRIGGER_DROP_TABLE_CONSTRAINT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>EventTriggerDropTableConstraint</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><operator>(</operator><name>EventTriggerDropTableConstraint</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
					 <argument><expr><literal type="string">"test_sql_drop: constraint: %s.%s.%s"</literal></expr></argument>,
					 <argument><expr><name><name>event</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>,
					 <argument><expr><name><name>event</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
					 <argument><expr><name><name>event</name><operator>-&gt;</operator><name>constraint_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>EVENT_TRIGGER_DROP_INDEX</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_sql_drop: index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>EVENT_TRIGGER_DROP_FOREIGN_TABLE</name></expr>:</case>
			<case>case <expr><name>EVENT_TRIGGER_DROP_TABLE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>EventTriggerDropRelation</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><operator>(</operator><name>EventTriggerDropRelation</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_sql_drop: table: %s.%s"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>EVENT_TRIGGER_DROP_SCHEMA</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>EventTriggerDropSchema</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><operator>(</operator><name>EventTriggerDropSchema</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_sql_drop: schema: %s"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>EVENT_TRIGGER_DROP_TRIGGER</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_sql_drop: trigger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>EVENT_TRIGGER_DROP_VIEW</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_sql_drop: view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>EVENT_TRIGGER_DROP_FOREIGN_SERVER</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"test_sql_drop: foreign server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
		</block_content>}</block></switch>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_test_ddl_command_hook_reg</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>ddl_command_start</name> <operator>=</operator> <name><name>ts_cm_functions</name><operator>-&gt;</operator><name>ddl_command_start</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ddl_command_end</name> <operator>=</operator> <name><name>ts_cm_functions</name><operator>-&gt;</operator><name>ddl_command_end</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sql_drop</name> <operator>=</operator> <name><name>ts_cm_functions</name><operator>-&gt;</operator><name>sql_drop</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>ddl_command_start</name></name> <operator>=</operator> <name>test_ddl_command_start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>ddl_command_end</name></name> <operator>=</operator> <name>test_ddl_command_end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>sql_drop</name></name> <operator>=</operator> <name>test_sql_drop</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_test_ddl_command_hook_unreg</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>ddl_command_start</name></name> <operator>==</operator> <name>test_ddl_command_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>ddl_command_start</name></name> <operator>=</operator> <name>ddl_command_start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>ddl_command_end</name></name> <operator>=</operator> <name>ddl_command_end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>sql_drop</name></name> <operator>=</operator> <name>sql_drop</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
