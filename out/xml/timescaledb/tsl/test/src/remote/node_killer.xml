<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/test/src/remote/node_killer.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgrprotos.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/procarray.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/foreign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node_killer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/dist_txn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>RemoteNodeKiller</name></type> <name>rnk_event</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>conn</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
	<expr><operator>.</operator><name>killevent</name> <operator>=</operator> <name>DTXN_EVENT_ANY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>kill_backend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DistTransactionEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteNodeKiller</name> <modifier>*</modifier></type><name>rnk</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name><name>rnk</name><operator>-&gt;</operator><name>killevent</name></name> <operator>||</operator> <name><name>rnk</name><operator>-&gt;</operator><name>killevent</name></name> <operator>==</operator> <name>DTXN_EVENT_ANY</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"kill event: %s"</literal></expr></argument>, <argument><expr><call><name>remote_dist_txn_event_name</name><argument_list>(<argument><expr><name><name>rnk</name><operator>-&gt;</operator><name>killevent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_node_killer_kill</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rnk_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_dist_txn_set_event_handler</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>DistTransactionEventHandler</name></type> <name>eventhandler</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>handler</name> <operator>=</operator> <name>kill_backend</name></expr>,
	<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>rnk_event</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_remote_node_killer_set_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type>
<name>remote_node_killer_init</name><parameter_list>(<parameter><decl><type><name>RemoteNodeKiller</name> <modifier>*</modifier></type><name>rnk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
						<parameter><decl><type><specifier>const</specifier> <name>DistTransactionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>remote_pid</name> <init>= <expr><call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>remote_pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get PID of remote backend process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>rnk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rnk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rnk</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rnk</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>remote_pid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rnk</name><operator>-&gt;</operator><name>killevent</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>kill_backends</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SETSID</name></cpp:ifdef>
	<comment type="block">/* If PostgreSQL is compiled with setsid support, then the running
	 * PostgreSQL processes are in a process group and the negative pid kills
	 * all the other processes in the same group. */</comment>
	<return>return <expr><call><name>kill</name><argument_list>(<argument><expr><operator>-</operator><name>pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Kill a remote process (data node).
 *
 * This only works if the process is on the same instance, which is true for
 * regression tests.
 *
 * The function should not throw errors since it might be invoked from a
 * transaction abort handler, which itself is invoked by errors. Throwing an
 * error could cause unexpected recursion, and crash.
 */</comment>
<function><type><name>void</name></type>
<name>remote_node_killer_kill</name><parameter_list>(<parameter><decl><type><name>RemoteNodeKiller</name> <modifier>*</modifier></type><name>rnk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rnk</name><operator>-&gt;</operator><name>num_kills</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"cannot kill backend twice on the same event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * do not use pg_terminate_backend here because that does permission
	 * checks through the catalog which requires you to be in a transaction
	 */</comment>
	<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>BackendPidGetProc</name><argument_list>(<argument><expr><name><name>rnk</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>proc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"PID %d is not a PostgreSQL server process"</literal></expr></argument>, <argument><expr><name><name>rnk</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>rnk</name><operator>-&gt;</operator><name>num_kills</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>kill_backends</name><argument_list>(<argument><expr><name><name>rnk</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not send signal to process %d: %m"</literal></expr></argument>, <argument><expr><name><name>rnk</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Ensure that the backend is dead before proceeding. Otherwise, we
		 * might end up in a race condition where we check the status of the
		 * backend before it has actually exited, leading to flaky testing. */</comment>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>wait_count</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><call><name>BackendPidGetProc</name><argument_list>(<argument><expr><name><name>rnk</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>wait_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"timeout while waiting for killed backend to exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>wait_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">100L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* Once PG registered the backend as gone, wait some additional time
		 * for it to really exit */</comment>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">500L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_remote_node_killer_set_event</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>event_name</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistTransactionEvent</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>event_name</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>server_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>remote_dist_txn_set_event_handler</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eventhandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>remote_connection_id_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>,
							 <argument><expr><call><name>GetForeignServerByName</name><argument_list>(<argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr></argument>,
							 <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>remote_dist_txn_get_connection</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>REMOTE_TXN_NO_PREP_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>remote_dist_txn_event_from_name</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_node_killer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rnk_event</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
