<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/test/src/remote/connection_cache.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgrprotos.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/procarray.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/foreign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/fdwapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/reloptions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_foreign_server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/dbcommands.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/defrem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/pg_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/inval.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/connection_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_remote_connection_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_alter_data_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_basic_cache</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id_2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn_2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_prime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>remote_connection_id_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id_1</name></expr></argument>,
							 <argument><expr><call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback_1"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr></argument>,
							 <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_id_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id_2</name></expr></argument>,
							 <argument><expr><call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback_2"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr></argument>,
							 <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_1</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_2</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_2</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_2</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>!=</operator> <name>pid_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_prime</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>==</operator> <name>pid_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_data_node_application_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><name>DefElemAction</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Generate a new name. Use PID of current backend since every alter
	 * happens on an new connection. */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>appname</name> <init>= <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"app%d"</literal></expr></argument>, <argument><expr><name>MyProcPid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlterForeignServerStmt</name></type> <name>stmt</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_AlterForeignServerStmt</name></expr>,
		<expr><operator>.</operator><name>servername</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>options</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeDefElemExtended</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
												  <argument><expr><literal type="string">"application_name"</literal></expr></argument>,
												  <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><name>appname</name></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><name>action</name></expr></argument>,
												  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>has_version</name> <operator>=</operator> <name>false</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AlterForeignServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Alter a server for testing invalidation.  We directly call
 * AlterForeignServer() instead of issuing ALTER SERVER to bypass
 * process_utility blocks on altering servers.
 */</comment>
<function><type><name>Datum</name></type>
<name>ts_test_alter_data_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DefElemAction</name></type> <name>action</name> <init>= <expr><name>DEFELEM_ADD</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nodename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>GetForeignServerByName</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>server-&gt;options</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>de</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"application_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>action</name> <operator>=</operator> <name>DEFELEM_SET</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>set_data_node_application_name</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This alters the server on the local (test) database in a separate backend */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>invalidate_server</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn_modify</name> <init>= <expr><call><name>get_connection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>remote_connection_query_ok</name><argument_list>(<argument><expr><name>conn_modify</name></expr></argument>,
							   <argument><expr><literal type="string">"SELECT _timescaledb_internal.test_alter_data_node('loopback_1')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_close</name><argument_list>(<argument><expr><name>conn_modify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_invalidate_server</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_prime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>original_application_name</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>remote_connection_id_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id_1</name></expr></argument>,
							 <argument><expr><call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback_1"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr></argument>,
							 <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_1</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* simulate an invalidation in another backend */</comment>
	<expr_stmt><expr><call><name>invalidate_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Should get a different connection since we invalidated the foreign
	 * server and didn't yet start a transaction on the remote node. */</comment>
	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_prime</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>!=</operator> <name>pid_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test that connections remain despite invalidations during ongoing
	 * remote transaction */</comment>
	<expr_stmt><expr><name>pid_1</name> <operator>=</operator> <name>pid_prime</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>original_application_name</name> <operator>=</operator> <call><name>remote_connection_get_application_name</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BeginInternalSubTransaction</name><argument_list>(<argument><expr><literal type="string">"sub1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Start a remote transaction on the connection */</comment>
	<expr_stmt><expr><call><name>remote_txn_begin_on_connection</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>invalidate_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_prime</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Connection should be the same despite invalidation since we're in a
	 * transaction */</comment>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>==</operator> <name>pid_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(
		<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>original_application_name</name></expr></argument>, <argument><expr><call><name>remote_connection_get_application_name</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RollbackAndReleaseCurrentSubTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* After rollback, we're still in a remote transaction. Connection should
	 * be the same. */</comment>
	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_prime</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>==</operator> <name>pid_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_1</name> <operator>=</operator> <name>pid_prime</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_remove</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid_prime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>remote_connection_id_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id_1</name></expr></argument>,
							 <argument><expr><call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback_1"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr></argument>,
							 <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_1</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>remote_connection_cache_remove</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* even using the same pin, get new connection */</comment>
	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_prime</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>!=</operator> <name>pid_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pid_1</name> <operator>=</operator> <name>pid_prime</name></expr>;</expr_stmt>

	<comment type="block">/* test the by_oid variant */</comment>
	<expr_stmt><expr><call><name>remote_connection_cache_remove</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_1</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pid_prime</name> <operator>=</operator> <call><name>remote_connection_get_remote_pid</name><argument_list>(<argument><expr><name>conn_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>pid_1</name> <operator>!=</operator> <name>pid_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_test_remote_connection_cache</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_basic_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_invalidate_server</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
