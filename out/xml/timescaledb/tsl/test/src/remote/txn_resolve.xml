<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/test/src/remote/txn_resolve.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgrprotos.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_remote_txn_resolve_create_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_remote_txn_resolve_create_prepared_record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_remote_txn_resolve_create_records_with_concurrent_heal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>RemoteTxn</name> <modifier>*</modifier></type>
<name>prepared_txn</name><parameter_list>(<parameter><decl><type><name>TSConnectionId</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>tx</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><call><name>remote_txn_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_init</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><call><name>get_connection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_begin</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_cmd_ok</name><argument_list>(<argument><expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_write_persistent_record</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>async_request_wait_ok_command</name><argument_list>(<argument><expr><call><name>remote_txn_async_send_prepare_transaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>tx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_committed_txn</name><parameter_list>(<parameter><decl><type><name>TSConnectionId</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>tx</name> <init>=
		<expr><call><name>prepared_txn</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO public.table_modified_by_txns VALUES ('committed');"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>async_request_wait_ok_command</name><argument_list>(<argument><expr><call><name>remote_txn_async_send_commit_prepared</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_prepared_txn</name><parameter_list>(<parameter><decl><type><name>TSConnectionId</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>prepared_txn</name><argument_list>(<argument><expr><name>id</name></expr></argument>,
				 <argument><expr><literal type="string">"INSERT INTO public.table_modified_by_txns VALUES ('prepared not committed');"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_rollback_prepared_txn</name><parameter_list>(<parameter><decl><type><name>TSConnectionId</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>tx</name> <init>=
		<expr><call><name>prepared_txn</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO public.table_modified_by_txns VALUES ('rollback prepared');"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>remote_txn_abort</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_test_remote_txn_resolve_create_records</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>id</name><operator>.</operator><name>server_id</name></name> <operator>=</operator> <call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>id</name><operator>.</operator><name>user_id</name></name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>create_committed_txn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>id</name><operator>.</operator><name>server_id</name></name> <operator>=</operator> <call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback2"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>create_prepared_txn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>id</name><operator>.</operator><name>server_id</name></name> <operator>=</operator> <call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback3"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>create_rollback_prepared_txn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* create an additional prepared gid in a separate transaction */</comment>
<function><type><name>Datum</name></type>
<name>ts_test_remote_txn_resolve_create_prepared_record</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>id</name><operator>.</operator><name>server_id</name></name> <operator>=</operator> <call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>create_prepared_txn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>send_heal</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>remote_connection_query_ok</name><argument_list>(<argument><expr><call><name>get_connection</name><argument_list>()</argument_list></call></expr></argument>,
							   <argument><expr><literal type="string">"SELECT "</literal>
							   <literal type="string">"_timescaledb_internal.remote_txn_heal_data_node((SELECT "</literal>
							   <literal type="string">"OID FROM pg_foreign_server WHERE srvname = 'loopback'))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_committed_txn_with_concurrent_heal</name><parameter_list>(<parameter><decl><type><name>TSConnectionId</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>tx</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><call><name>remote_txn_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_init</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><call><name>get_connection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_begin</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_cmd_ok</name><argument_list>(<argument><expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><literal type="string">"INSERT INTO public.table_modified_by_txns VALUES "</literal>
							 <literal type="string">"('committed with concurrent heal');"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>send_heal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_write_persistent_record</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>send_heal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>async_request_wait_ok_command</name><argument_list>(<argument><expr><call><name>remote_txn_async_send_prepare_transaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>send_heal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>async_request_wait_ok_command</name><argument_list>(<argument><expr><call><name>remote_txn_async_send_commit_prepared</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>send_heal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_test_remote_txn_resolve_create_records_with_concurrent_heal</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id</name> <init>= <expr><block>{ <expr><operator>.</operator><name>server_id</name> <operator>=</operator> <call><name>GetForeignServerByName</name><argument_list>(<argument><expr><literal type="string">"loopback2"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>serverid</name></expr>,
						  <expr><operator>.</operator><name>user_id</name> <operator>=</operator> <macro><name>GetUserId</name><argument_list>()</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>create_committed_txn_with_concurrent_heal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
