<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/test/src/test_chunk_stats.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/timestamp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_policy/chunk_stats.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_chunk_stats_insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ts_test_chunk_stats_insert</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>job_id</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>chunk_id</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>num_times_run</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>last_time_run</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>BgwPolicyChunkStats</name></type> <name>stat</name> <init>= <expr><block>{ <expr><operator>.</operator><name>fd</name> <operator>=</operator> <block>{
									 <expr><operator>.</operator><name>job_id</name> <operator>=</operator> <name>job_id</name></expr>,
									 <expr><operator>.</operator><name>chunk_id</name> <operator>=</operator> <name>chunk_id</name></expr>,
									 <expr><operator>.</operator><name>num_times_job_run</name> <operator>=</operator> <name>num_times_run</name></expr>,
									 <expr><operator>.</operator><name>last_time_job_run</name> <operator>=</operator> <name>last_time_run</name></expr>,
								 }</block></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_bgw_policy_chunk_stats_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>osm_insert_hook_mock</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>ht_oid</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>range_start</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>range_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* always return true */</comment>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Dummy function to mock OSM_INSERT hook called at chunk creation for tiered data
 */</comment>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_setup_osm_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_setup_osm_hook</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>MOCK_OSM_INSERT_HOOK</name>)<parameter_list>(<parameter><decl><type><name>Oid</name></type></decl></parameter>, <parameter><decl><type><name>int64</name></type></decl></parameter>, <parameter><decl><type><name>int64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
	<decl_stmt><decl><type><name>MOCK_OSM_INSERT_HOOK</name> <modifier>*</modifier></type><name>var</name> <init>=
		<expr><operator>(</operator><name>MOCK_OSM_INSERT_HOOK</name> <operator>*</operator><operator>)</operator> <call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><literal type="string">"osm_chunk_insert_check_hook"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>osm_insert_hook_mock</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_undo_osm_hook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_undo_osm_hook</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>MOCK_OSM_INSERT_HOOK</name>)<parameter_list>(<parameter><decl><type><name>Oid</name></type></decl></parameter>, <parameter><decl><type><name>int64</name></type></decl></parameter>, <parameter><decl><type><name>int64</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
	<decl_stmt><decl><type><name>MOCK_OSM_INSERT_HOOK</name> <modifier>*</modifier></type><name>var</name> <init>=
		<expr><operator>(</operator><name>MOCK_OSM_INSERT_HOOK</name> <operator>*</operator><operator>)</operator> <call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><literal type="string">"osm_chunk_insert_check_hook"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
