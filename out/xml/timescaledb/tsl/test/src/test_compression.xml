<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/test/src/test_compression.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/heapam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq/pqformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lib/stringinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/array.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/typcache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;export.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/gorilla.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/deltadelta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/float_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/segment_meta.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_PREFIX</name></cpp:macro> <cpp:value>compression_info</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_ELEMENT_TYPE</name></cpp:macro> <cpp:value>Form_hypertable_compression</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_DECLARE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_DEFINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_SCOPE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;adts/vec.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_compress_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_decompress_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_int_array</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>array_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>array_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>tsl_array_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>tsl_array_decompression_iterator_from_datum_reverse</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>array_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>array_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_string_array</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>strings</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><literal type="string">"gobble gobble gobble"</literal></expr>, <expr><literal type="string">"baz"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name><name>texts</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>texts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>array_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>texts</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>array_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>tsl_array_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"%4d \"%s\" != \"%s\" @ %d"</literal></expr></argument>,
				 <argument><expr><name>i</name></expr></argument>,
				 <argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><name><name>strings</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>,
				 <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>tsl_array_decompression_iterator_from_datum_reverse</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>array_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>array_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"%4d \"%s\" != \"%s\" @ %d"</literal></expr></argument>,
				 <argument><expr><name>i</name></expr></argument>,
				 <argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><name><name>strings</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>,
				 <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_int_dictionary</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>dictionary_compressor_alloc</name><argument_list>(<argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dictionary_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>i</name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>dictionary_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>tsl_dictionary_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>,
																	<argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>dictionary_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>dictionary_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>%</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_string_dictionary</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>dictionary_compressor_alloc</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>strings</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><literal type="string">"gobble gobble gobble"</literal></expr>, <expr><literal type="string">"baz"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name><name>texts</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>texts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1014</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dictionary_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>texts</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>dictionary_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>tsl_dictionary_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>,
																	<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>dictionary_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>dictionary_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"%4d \"%s\" != \"%s\" @ %d"</literal></expr></argument>,
				 <argument><expr><name>i</name></expr></argument>,
				 <argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><name><name>strings</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>,
				 <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1014</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>tsl_dictionary_decompression_iterator_from_datum_reverse</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>,
																	<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>dictionary_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>dictionary_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"%4d \"%s\" != \"%s\" @ %d"</literal></expr></argument>,
				 <argument><expr><name>i</name></expr></argument>,
				 <argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><name><name>strings</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>,
				 <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestEnsureError</name><argument_list>(<argument><expr><call><name>dictionary_compressor_alloc</name><argument_list>(<argument><expr><name>CSTRINGOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_gorilla_int</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GorillaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>gorilla_compressor_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GorillaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gorilla_compressor_append_value</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>gorilla_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1344</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_from_datum_reverse</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>gorilla_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bytea</name> <modifier>*</modifier></type><name>sent</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringInfoData</name></type> <name>transmition</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GorillaCompressed</name> <modifier>*</modifier></type><name>compressed_recv</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pq_begintypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gorilla_compressed_send</name><argument_list>(<argument><expr><operator>(</operator><name>CompressedDataHeader</name> <operator>*</operator><operator>)</operator> <name>compressed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sent</name> <operator>=</operator> <call><name>pq_endtypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>transmition</name> <operator>=</operator> <operator>(</operator><name>StringInfoData</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>data</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>.</operator><name>len</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>.</operator><name>maxlen</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>,
		}</block></expr>;</expr_stmt>

		<expr_stmt><expr><name>compressed_recv</name> <operator>=</operator>
			<operator>(</operator><name>GorillaCompressed</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>gorilla_compressed_recv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>transmition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed_recv</name></expr></argument>)</argument_list></call></expr></argument>,
																 <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
			 <incr><expr><name>r</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_gorilla_float</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GorillaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>gorilla_compressor_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GorillaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015.0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gorilla_compressor_append_value</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>float_get_bits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>gorilla_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>gorilla_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertDoubleEq</name><argument_list>(<argument><expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>gorilla_decompression_iterator_from_datum_reverse</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>gorilla_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_gorilla_double</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GorillaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>gorilla_compressor_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GorillaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015.0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gorilla_compressor_append_value</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>double_get_bits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>gorilla_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>gorilla_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertDoubleEq</name><argument_list>(<argument><expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator>
		<call><name>gorilla_decompression_iterator_from_datum_reverse</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>gorilla_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>gorilla_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertDoubleEq</name><argument_list>(<argument><expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_delta</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>tsl_deltadelta_compressor_finish</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>delta_delta_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>delta_delta_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>delta_delta_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_delta2</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1015</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* prevent everything from being rle'd away */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>tsl_deltadelta_compressor_finish</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1664</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>delta_delta_decompression_iterator_from_datum_forward</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>r</name> <init>= <expr><call><name>delta_delta_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>r</name> <operator>=</operator> <call><name>delta_delta_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name><name>r</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1015</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_test_compression</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test_int_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_string_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_int_dictionary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_string_dictionary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_gorilla_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_gorilla_float</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_gorilla_double</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_delta</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_delta2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>compression_info_vec</name> <modifier>*</modifier></type>
<name>compression_info_from_array</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>compression_info_arr</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>form_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayMetaState</name></type> <name>compression_info_arr_meta</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>form_oid</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayIterator</name></type> <name>compression_info_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>compression_info_datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_null</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>compression_info_vec</name> <modifier>*</modifier></type><name>compression_info</name> <init>= <expr><call><name>compression_info_vec_create</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>form_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>get_typlenbyvalalign</name><argument_list>(<argument><expr><name><name>compression_info_arr_meta</name><operator>.</operator><name>element_type</name></name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name><name>compression_info_arr_meta</name><operator>.</operator><name>typlen</name></name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name><name>compression_info_arr_meta</name><operator>.</operator><name>typbyval</name></name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name><name>compression_info_arr_meta</name><operator>.</operator><name>typalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>compression_info_iter</name> <operator>=</operator>
		<call><name>array_create_iterator</name><argument_list>(<argument><expr><name>compression_info_arr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>compression_info_arr_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>array_iterate</name><argument_list>(<argument><expr><name>compression_info_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compression_info_datum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>form</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTupleData</name></type> <name>tmptup</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>DatumGetHeapTupleHeaderCopy</name><argument_list>(<argument><expr><name>compression_info_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><call><name>HeapTupleHeaderGetTypeId</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>form_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>form_desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type> <name>formTypmod</name> <init>= <expr><call><name>HeapTupleHeaderGetTypMod</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>form_desc</name> <operator>=</operator> <call><name>lookup_rowtype_tupdesc</name><argument_list>(<argument><expr><name>form_oid</name></expr></argument>, <argument><expr><name>formTypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>tmptup</name><operator>.</operator><name>t_len</name></name> <operator>=</operator> <call><name>HeapTupleHeaderGetDatumLength</name><argument_list>(<argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tmptup</name><operator>.</operator><name>t_data</name></name> <operator>=</operator> <name>form</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>compression_info_vec_append</name><argument_list>(<argument><expr><name>compression_info</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmptup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>form_desc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ReleaseTupleDesc</name><argument_list>(<argument><expr><name>form_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>compression_info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_compress_table</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>in_table</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>out_table</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>compression_info_array</name> <init>= <expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>compression_info_vec</name> <modifier>*</modifier></type><name>compression_info</name> <init>=
		<expr><call><name>compression_info_from_array</name><argument_list>(<argument><expr><name>compression_info_array</name></expr></argument>, <argument><expr><name><name>compression_info_array</name><operator>-&gt;</operator><name>elemtype</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>compress_chunk</name><argument_list>(<argument><expr><name>in_table</name></expr></argument>,
				   <argument><expr><name>out_table</name></expr></argument>,
				   <argument><expr><operator>(</operator><specifier>const</specifier> <name>ColumnCompressionInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>compression_info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
				   <argument><expr><name><name>compression_info</name><operator>-&gt;</operator><name>num_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_decompress_table</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>in_table</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>out_table</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>decompress_chunk</name><argument_list>(<argument><expr><name>in_table</name></expr></argument>, <argument><expr><name>out_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_segment_meta_min_max_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ts_segment_meta_min_max_append</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SegmentMetaMinMaxBuilder</name> <modifier>*</modifier></type><name>builder</name> <init>=
		<expr><operator>(</operator><name>SegmentMetaMinMaxBuilder</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>agg_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AggCheckCallContext</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg_context</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* cannot be called directly because of internal-type argument */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ts_segment_meta_min_max_append called in non-aggregate context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>agg_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>builder</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>type_to_compress</name> <init>= <expr><call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>builder</name> <operator>=</operator> <call><name>segment_meta_min_max_builder_create</name><argument_list>(<argument><expr><name>type_to_compress</name></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>fncollation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>segment_meta_min_max_builder_update_null</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>segment_meta_min_max_builder_update_val</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_segment_meta_min_max_finish_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_segment_meta_min_max_finish_max</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SegmentMetaMinMaxBuilder</name> <modifier>*</modifier></type><name>builder</name> <init>=
		<expr><operator>(</operator><name>SegmentMetaMinMaxBuilder</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>builder</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>segment_meta_min_max_builder_empty</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>segment_meta_min_max_builder_max</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_segment_meta_min_max_finish_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_segment_meta_min_max_finish_min</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SegmentMetaMinMaxBuilder</name> <modifier>*</modifier></type><name>builder</name> <init>=
		<expr><operator>(</operator><name>SegmentMetaMinMaxBuilder</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>builder</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>segment_meta_min_max_builder_empty</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>segment_meta_min_max_builder_min</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_compression_custom_type_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_compression_custom_type_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_compression_custom_type_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* basically int2in but returns by reference */</comment>
<function><type><name>Datum</name></type>
<name>ts_compression_custom_type_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>pg_strtoint16</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* like int2out but takes values by ref */</comment>
<function><type><name>Datum</name></type>
<name>ts_compression_custom_type_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* sign, 5 digits, '\0' */</comment>

	<expr_stmt><expr><call><name>pg_itoa</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* like int2eq but takes values by ref */</comment>
<function><type><name>Datum</name></type>
<name>ts_compression_custom_type_eq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>*</operator><name>arg1</name> <operator>==</operator> <operator>*</operator><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
