<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/compression/array.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/tupmacs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;adts/char_vec.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;common/base64.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/simple8b_rle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datum_serialize.h"</cpp:file></cpp:include>

<comment type="block">/* A "compressed" array
 *     uint8 has_nulls: 1 iff this has a nulls bitmap stored before the data
 *     Oid element_type: the element stored by this array
 *     simple8b_rle nulls: optional bitmap of nulls within the array
 *     simple8b_rle sizes: the sizes of each data element
 *     char data[]: the elements of the array
 */</comment>

<typedef>typedef <type><struct>struct <name>ArrayCompressed</name>
<block>{
	<expr_stmt><expr><name>CompressedDataHeaderFields</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>has_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name><name>padding</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>element_type</name></decl>;</decl_stmt>
	<comment type="block">/* 8-byte alignment sentinel for the following fields */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name><name>alignment_sentinel</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ArrayCompressed</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pg_attribute_unused</name><parameter_list>()</parameter_list> assertions<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressed</name></type> <name>test_val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>vl_len_</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name></type> <name>test_simple8b</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<comment type="block">/* make sure no padding bytes make it to disk */</comment>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ArrayCompressed</name></expr></argument>)</argument_list></sizeof> <operator>==</operator>
						 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>vl_len_</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>compression_algorithm</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
							 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>has_nulls</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>padding</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
							 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>element_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"ArrayCompressed wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ArrayCompressed</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"ArrayCompressed wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Note about alignment: the data[] field stores arbitrary Postgres types using store_att_byval
	 * and fetch_att. For this to work the data must be aligned according to the types alignment
	 * parameter (in CREATE TYPE; valid values are 1,2,4,8 bytes). In order to ease implementation,
	 * we simply align the start of data[] on a MAXALIGN (8-byte) boundary. Individual items in the
	 * array are then aligned as specified by the array element type. See top of array.h header in
	 * Postgres source code since it uses the same trick. Thus, we make sure that all fields
	 * before the alignment sentinal are 8-byte aligned, and also that the two Simple8bRleSerialized
	 * elements before the data element are themselves 8-byte aligned as well.
	 */</comment>

	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ArrayCompressed</name></expr></argument>, <argument><expr><name>alignment_sentinel</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>MAXIMUM_ALIGNOF</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
					 <argument><expr><literal type="string">"variable sized data must be 8-byte aligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Simple8bRleSerialized</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>MAXIMUM_ALIGNOF</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
					 <argument><expr><literal type="string">"Simple8bRle data must be 8-byte aligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_simple8b</name><operator>.</operator><name>slots</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>MAXIMUM_ALIGNOF</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
					 <argument><expr><literal type="string">"Simple8bRle variable-length slots must be 8-byte aligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ArrayCompressedData</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>element_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt> <comment type="block">/* NULL if no nulls */</comment>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>sizes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>data_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>ArrayCompressedData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ArrayCompressor</name>
<block>{
	<decl_stmt><decl><type><name>Simple8bRleCompressor</name></type> <name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleCompressor</name></type> <name>sizes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char_vec</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>serializer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name></decl>;</decl_stmt>
}</block></struct></type> <name>ArrayCompressor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ExtendedCompressor</name>
<block>{
	<decl_stmt><decl><type><name>Compressor</name></type> <name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>element_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>ExtendedCompressor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ArrayDecompressionIterator</name>
<block>{
	<decl_stmt><decl><type><name>DecompressionIterator</name></type> <name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressionIterator</name></type> <name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressionIterator</name></type> <name>sizes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>num_data_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>data_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumDeserializer</name> <modifier>*</modifier></type><name>deserializer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name></decl>;</decl_stmt>
}</block></struct></type> <name>ArrayDecompressionIterator</name>;</typedef>

<comment type="block" format="doxygen">/******************
 *** Compressor ***
 ******************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>array_compressor_append_datum</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>array_compressor_append</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>array_compressor_append_null_value</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>array_compressor_append_null</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>array_compressor_finish_and_reset</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>compressed</name> <init>= <expr><call><name>array_compressor_finish</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>compressed</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>array_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>array_compressor_append_datum</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>array_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>array_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Compressor</name> <modifier>*</modifier></type>
<name>array_compressor_for_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>base</name> <operator>=</operator> <name>array_compressor</name></expr>,
		<expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>element_type</name></expr>,
	}</block></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ArrayCompressor</name> <modifier>*</modifier></type>
<name>array_compressor_alloc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_to_compress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple8brle_compressor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>char_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type_to_compress</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>serializer</name></name> <operator>=</operator> <call><name>create_datum_serializer</name><argument_list>(<argument><expr><name>type_to_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>compressor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>array_compressor_append_null</name><parameter_list>(<parameter><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>array_compressor_append</name><parameter_list>(<parameter><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>datum_size_and_align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start_ptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>datum_serializer_value_may_be_toasted</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>serializer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>PG_DETOAST_DATUM_PACKED</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>datum_size_and_align</name> <operator>=</operator>
		<call><name>datum_get_bytes_size</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>serializer</name></name></expr></argument>, <argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>-</operator>
		<name><name>compressor</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>, <argument><expr><name>datum_size_and_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* datum_to_bytes_and_advance will zero any padding bytes, so we need not do so here */</comment>
	<expr_stmt><expr><call><name>char_vec_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>datum_size_and_align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>start_ptr</name> <operator>=</operator> <name><name>compressor</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>compressor</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name> <operator>+=</operator> <name>datum_size_and_align</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>datum_to_bytes_and_advance</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>serializer</name></name></expr></argument>, <argument><expr><name>start_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datum_size_and_align</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>datum_size_and_align</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ArrayCompressorSerializationInfo</name>
<block>{
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>sizes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char_vec</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>total</name></decl>;</decl_stmt>
}</block></struct></type> <name>ArrayCompressorSerializationInfo</name>;</typedef>

<function><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type>
<name>array_compressor_get_serialization_info</name><parameter_list>(<parameter><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <operator>(</operator><name>ArrayCompressorSerializationInfo</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>sizes</name> <operator>=</operator> <call><name>simple8brle_compressor_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>nulls</name> <operator>=</operator> <name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>?</operator> <call><name>simple8brle_compressor_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>compressor</name><operator>-&gt;</operator><name>data</name></name></expr>,
		<expr><operator>.</operator><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>,
	}</block></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>sizes</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>total</name></name> <operator>+=</operator> <name><name>compressor</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name></expr>;</expr_stmt>
	<return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>array_compression_serialization_size</name><parameter_list>(<parameter><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>total</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32</name></type>
<name>array_compression_serialization_num_elements</name><parameter_list>(<parameter><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>sizes</name><operator>-&gt;</operator><name>num_elements</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>bytes_serialize_array_compressor_and_advance</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>dst_size</name></decl></parameter>,
											 <parameter><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>sizes_bytes</name> <init>= <expr><call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dst_size</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>nulls_bytes</name> <init>= <expr><call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dst_size</name> <operator>&gt;=</operator> <name>nulls_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>bytes_serialize_simple8b_and_advance</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>nulls_bytes</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dst_size</name> <operator>-=</operator> <name>nulls_bytes</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dst_size</name> <operator>&gt;=</operator> <name>sizes_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>bytes_serialize_simple8b_and_advance</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>sizes_bytes</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_size</name> <operator>-=</operator> <name>sizes_bytes</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dst_size</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>dst</name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>num_elements</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ArrayCompressed</name> <modifier>*</modifier></type>
<name>array_compressed_from_serialization_info</name><parameter_list>(<parameter><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compressed_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayCompressed</name> <modifier>*</modifier></type><name>compressed_array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>compressed_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ArrayCompressed</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>total</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocSizeIsValid</name><argument_list>(<argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"compressed size exceeds the maximum allowed (%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>MaxAllocSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed_data</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_array</name> <operator>=</operator> <operator>(</operator><name>ArrayCompressed</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>compressed_array</name> <operator>=</operator> <operator>(</operator><name>ArrayCompressed</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>compression_algorithm</name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name></expr>,
		<expr><operator>.</operator><name>has_nulls</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>element_type</name></expr>,
	}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name><name>compressed_array</name><operator>-&gt;</operator><name>vl_len_</name></name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ArrayCompressed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ArrayCompressed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>bytes_serialize_array_compressor_and_advance</name><argument_list>(<argument><expr><name>compressed_data</name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>compressed_array</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>array_compressor_finish</name><parameter_list>(<parameter><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>array_compressor_get_serialization_info</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>sizes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>array_compressed_from_serialization_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************
 *** Decompress ***
 ******************/</comment>

<function><type><specifier>static</specifier> <name>ArrayCompressedData</name></type>
<name>array_compressed_data_from_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serialized_data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>,
								 <parameter><decl><type><name>bool</name></type> <name>has_nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressedData</name></type> <name>data</name> <init>= <expr><block>{ <expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>element_type</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name> <init>= <expr><call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serialized_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>nulls</name></name> <operator>=</operator> <name>nulls</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>sizes</name></name> <operator>=</operator> <call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serialized_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>serialized_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressionIterator</name> <modifier>*</modifier></type>
<name>array_decompression_iterator_alloc_forward</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serialized_data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
										   <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressedData</name></type> <name>data</name> <init>=
		<expr><call><name>array_compressed_data_from_bytes</name><argument_list>(<argument><expr><name>serialized_data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>, <argument><expr><name>has_nulls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ArrayDecompressionIterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>compression_algorithm</name></name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>forward</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>element_type</name></name> <operator>=</operator> <name>element_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>try_next</name></name> <operator>=</operator> <name>array_decompression_iterator_try_next_forward</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>num_data_bytes</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>data_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>deserializer</name></name> <operator>=</operator> <call><name>create_datum_deserializer</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressionIterator</name> <modifier>*</modifier></type>
<name>tsl_array_decompression_iterator_from_datum_forward</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>compressed_array</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressed</name> <modifier>*</modifier></type><name>compressed_array_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>data_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressed_data</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>compressed_array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>compressed_array_header</name> <operator>=</operator> <operator>(</operator><name>ArrayCompressed</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_array_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>compressed_array_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_array_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>element_type</name> <operator>!=</operator> <name><name>compressed_array_header</name><operator>-&gt;</operator><name>element_type</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"trying to decompress the wrong type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>array_decompression_iterator_alloc_forward</name><argument_list>(<argument><expr><name>compressed_data</name></expr></argument>,
													  <argument><expr><name>data_size</name></expr></argument>,
													  <argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>,
													  <argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>DecompressResult</name></type>
<name>array_decompression_iterator_try_next_forward</name><parameter_list>(<parameter><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>general_iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>datum_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start_pointer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>general_iter</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name> <operator>&amp;&amp;</operator>
		   <name><name>general_iter</name><operator>-&gt;</operator><name>forward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>(</operator><name>ArrayDecompressionIterator</name> <operator>*</operator><operator>)</operator> <name>general_iter</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>null</name> <init>=
			<expr><call><name>simple8brle_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>datum_size</name> <operator>=</operator> <call><name>simple8brle_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>datum_size</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
		}</block></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+</operator> <name><name>datum_size</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>num_data_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>start_pointer</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>data_offset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytes_to_datum_and_advance</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>deserializer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>+=</operator> <name><name>datum_size</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>==</operator> <name>start_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>,
	}</block></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************************
 *** Decompress Reverse ***
 **************************/</comment>

<function><type><name>DecompressionIterator</name> <modifier>*</modifier></type>
<name>tsl_array_decompression_iterator_from_datum_reverse</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>compressed_array</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressed</name> <modifier>*</modifier></type><name>compressed_array_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>data_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayCompressedData</name></type> <name>array_compressed_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayDecompressionIterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressed_data</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>compressed_array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>compression_algorithm</name></name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>forward</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>element_type</name></name> <operator>=</operator> <name>element_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>try_next</name></name> <operator>=</operator> <name>array_decompression_iterator_try_next_reverse</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_array_header</name> <operator>=</operator> <operator>(</operator><name>ArrayCompressed</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_array_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>element_type</name> <operator>!=</operator> <name><name>compressed_array_header</name><operator>-&gt;</operator><name>element_type</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"trying to decompress the wrong type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>compressed_array_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_array_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>array_compressed_data</name> <operator>=</operator> <call><name>array_compressed_data_from_bytes</name><argument_list>(<argument><expr><name>compressed_data</name></expr></argument>,
															 <argument><expr><name>data_size</name></expr></argument>,
															 <argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>,
															 <argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>has_nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <name><name>array_compressed_data</name><operator>.</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>,
														<argument><expr><name><name>array_compressed_data</name><operator>.</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>, <argument><expr><name><name>array_compressed_data</name><operator>.</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>array_compressed_data</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>num_data_bytes</name></name> <operator>=</operator> <name><name>array_compressed_data</name><operator>.</operator><name>data_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>num_data_bytes</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>deserializer</name></name> <operator>=</operator> <call><name>create_datum_deserializer</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressResult</name></type>
<name>array_decompression_iterator_try_next_reverse</name><parameter_list>(<parameter><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>base_iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>datum_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start_pointer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>base_iter</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>base_iter</name><operator>-&gt;</operator><name>forward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>(</operator><name>ArrayDecompressionIterator</name> <operator>*</operator><operator>)</operator> <name>base_iter</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>null</name> <init>=
			<expr><call><name>simple8brle_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>datum_size</name> <operator>=</operator> <call><name>simple8brle_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>datum_size</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
		}</block></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>-</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name><name>datum_size</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data_offset</name></name> <operator>-=</operator> <name><name>datum_size</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>start_pointer</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>data_offset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytes_to_datum_and_advance</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>deserializer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>,
	}</block></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*********************
 ***  send / recv  ***
 *********************/</comment>

<function><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type>
<name>array_compressed_data_recv</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressionIterator</name></type> <name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>has_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumDeserializer</name> <modifier>*</modifier></type><name>deser</name> <init>= <expr><call><name>create_datum_deserializer</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>use_binary_recv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>num_elements</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>has_nulls</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>,
														<argument><expr><call><name>simple8brle_serialized_recv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>use_binary_recv</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* This is actually the number of not-null elements */</comment>
	<expr_stmt><expr><name>num_elements</name> <operator>=</operator> <call><name>pq_getmsgint32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if there are nulls, use that count instead */</comment>
	<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>num_elements</name> <operator>=</operator> <name><name>nulls</name><operator>.</operator><name>num_elements</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_elements</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>val</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>null</name> <init>=
				<expr><call><name>simple8brle_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>null</name><operator>.</operator><name>is_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>val</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>array_compressor_append_null</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>binary_string_to_datum</name><argument_list>(<argument><expr><name>deser</name></expr></argument>,
									 <argument><expr><ternary><condition><expr><name>use_binary_recv</name></expr> ?</condition><then> <expr><name>BINARY_ENCODING</name></expr> </then><else>: <expr><name>TEXT_ENCODING</name></expr></else></ternary></expr></argument>,
									 <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>array_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>array_compressor_get_serialization_info</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>array_compressed_data_send</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serialized_data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
						   <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>has_nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressedData</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>data_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressResult</name></type> <name>datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>serializer</name> <init>= <expr><call><name>create_datum_serializer</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BinaryStringEncoding</name></type> <name>encoding</name> <init>= <expr><call><name>datum_serializer_binary_string_encoding</name><argument_list>(<argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>array_compressed_data_from_bytes</name><argument_list>(<argument><expr><name>serialized_data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>, <argument><expr><name>has_nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple8brle_serialized_send</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>encoding</name> <operator>==</operator> <name>BINARY_ENCODING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * we do not send data.sizes because the sizes need not be the same once
	 * deserialized, and we will need to recalculate them on recv. We do need
	 * to send the number of elements, which is always the same as the number
	 * of sizes.
	 */</comment>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sizes</name><operator>-&gt;</operator><name>num_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_iter</name> <operator>=</operator> <call><name>array_decompression_iterator_alloc_forward</name><argument_list>(<argument><expr><name>serialized_data</name></expr></argument>,
														   <argument><expr><name>data_size</name></expr></argument>,
														   <argument><expr><name>element_type</name></expr></argument>,
														   <argument><expr><name>has_nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>datum</name> <operator>=</operator> <call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>data_iter</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>!</operator><name><name>datum</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>datum</name> <operator>=</operator> <call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>data_iter</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>datum</name><operator>.</operator><name>is_null</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>datum_append_to_binary_string</name><argument_list>(<argument><expr><name>serializer</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>datum</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/********************
 *** SQL Bindings ***
 ********************/</comment>

<function><type><name>Datum</name></type>
<name>array_compressed_recv</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>has_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>element_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>has_nulls</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>has_nulls</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>has_nulls</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid recv in array: bad bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>element_type</name> <operator>=</operator> <call><name>binary_string_get_type</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>array_compressed_data_recv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>array_compressed_from_serialization_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>array_compressed_send</name><parameter_list>(<parameter><decl><type><name>CompressedDataHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressed_data</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>data_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayCompressed</name> <modifier>*</modifier></type><name>compressed_array_header</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_array_header</name> <operator>=</operator> <operator>(</operator><name>ArrayCompressed</name> <operator>*</operator><operator>)</operator> <name>header</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_array_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>compressed_array_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_array_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>type_append_to_binary_string</name><argument_list>(<argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>array_compressed_data_send</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
							   <argument><expr><name>compressed_data</name></expr></argument>,
							   <argument><expr><name>data_size</name></expr></argument>,
							   <argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>,
							   <argument><expr><name><name>compressed_array_header</name><operator>-&gt;</operator><name>has_nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>Datum</name></type>
<name>tsl_array_compressor_append</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>=
		<expr><operator>(</operator><name>ArrayCompressor</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>agg_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AggCheckCallContext</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg_context</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* cannot be called directly because of internal-type argument */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tsl_array_compressor_append called in non-aggregate context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>agg_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>compressor</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>type_to_compress</name> <init>= <expr><call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>compressor</name> <operator>=</operator> <call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name>type_to_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>array_compressor_append_null</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>array_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>Datum</name></type>
<name>tsl_array_compressor_finish</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>=
		<expr><operator>(</operator><name>ArrayCompressor</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>array_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
