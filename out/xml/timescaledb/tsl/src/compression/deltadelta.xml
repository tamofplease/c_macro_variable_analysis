<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/compression/deltadelta.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/deltadelta.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_aggregate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;common/base64.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/timestamp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/date.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lib/stringinfo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/simple8b_rle.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>uint64</name></type> <name>zig_zag_encode</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64</name></type> <name>zig_zag_decode</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>DeltaDeltaCompressed</name>
<block>{
	<expr_stmt><expr><name>CompressedDataHeaderFields</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>has_nulls</name></decl>;</decl_stmt> <comment type="block">/* 1 if this has a NULLs bitmap after deltas, 0 otherwise */</comment>
	<decl_stmt><decl><type><name>uint8</name></type> <name><name>padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>last_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>last_delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name></type> <name>delta_deltas</name></decl>;</decl_stmt>
}</block></struct></type> <name>DeltaDeltaCompressed</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pg_attribute_unused</name><parameter_list>()</parameter_list> assertions<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeltaDeltaCompressed</name></type> <name>test_val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>vl_len_</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
	<comment type="block">/* make sure no padding bytes make it to disk */</comment>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DeltaDeltaCompressed</name></expr></argument>)</argument_list></sizeof> <operator>==</operator>
						 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>vl_len_</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>compression_algorithm</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
							 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>has_nulls</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>padding</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
							 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>last_value</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>last_delta</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
							 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>delta_deltas</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"DeltaDeltaCompressed wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DeltaDeltaCompressed</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"DeltaDeltaCompressed wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DeltaDeltaDecompressionIterator</name>
<block>{
	<decl_stmt><decl><type><name>DecompressionIterator</name></type> <name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>prev_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>prev_delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressionIterator</name></type> <name>delta_deltas</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressionIterator</name></type> <name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name></decl>;</decl_stmt>
}</block></struct></type> <name>DeltaDeltaDecompressionIterator</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DeltaDeltaCompressor</name>
<block>{
	<decl_stmt><decl><type><name>uint64</name></type> <name>prev_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>prev_delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleCompressor</name></type> <name>delta_delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleCompressor</name></type> <name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name></decl>;</decl_stmt>
}</block></struct></type> <name>DeltaDeltaCompressor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ExtendedCompressor</name>
<block>{
	<decl_stmt><decl><type><name>Compressor</name></type> <name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>
}</block></struct></type> <name>ExtendedCompressor</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_bool</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_int16</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_int32</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_int64</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_date</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><call><name>DatumGetDateADT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_timestamp</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><call><name>DatumGetTimestamp</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_timestamptz</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><call><name>DatumGetTimestampTz</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deltadelta_compressor_append_null_value</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>delta_delta_compressor_append_null</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>delta_delta_compressor_finish</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>deltadelta_compressor_finish_and_reset</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>compressed</name> <init>= <expr><call><name>delta_delta_compressor_finish</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>compressed</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>deltadelta_bool_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>deltadelta_compressor_append_bool</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>deltadelta_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>deltadelta_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>deltadelta_uint16_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>deltadelta_compressor_append_int16</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>deltadelta_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>deltadelta_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>deltadelta_uint32_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>deltadelta_compressor_append_int32</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>deltadelta_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>deltadelta_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>deltadelta_uint64_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>deltadelta_compressor_append_int64</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>deltadelta_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>deltadelta_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>deltadelta_date_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>deltadelta_compressor_append_date</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>deltadelta_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>deltadelta_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>deltadelta_timestamp_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>deltadelta_compressor_append_timestamp</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>deltadelta_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>deltadelta_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>deltadelta_timestamptz_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>deltadelta_compressor_append_timestamptz</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>deltadelta_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>deltadelta_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Compressor</name> <modifier>*</modifier></type>
<name>delta_delta_compressor_for_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>element_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BOOLOID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{ <expr><operator>.</operator><name>base</name> <operator>=</operator> <name>deltadelta_bool_compressor</name></expr> }</block></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{ <expr><operator>.</operator><name>base</name> <operator>=</operator> <name>deltadelta_uint16_compressor</name></expr> }</block></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{ <expr><operator>.</operator><name>base</name> <operator>=</operator> <name>deltadelta_uint32_compressor</name></expr> }</block></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{ <expr><operator>.</operator><name>base</name> <operator>=</operator> <name>deltadelta_uint64_compressor</name></expr> }</block></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{ <expr><operator>.</operator><name>base</name> <operator>=</operator> <name>deltadelta_date_compressor</name></expr> }</block></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{ <expr><operator>.</operator><name>base</name> <operator>=</operator> <name>deltadelta_timestamp_compressor</name></expr> }</block></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{ <expr><operator>.</operator><name>base</name> <operator>=</operator> <name>deltadelta_timestamptz_compressor</name></expr> }</block></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"invalid type for delta-delta compressor \"%s\""</literal></expr></argument>,
				 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>tsl_deltadelta_compressor_append</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>agg_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>=
		<expr><operator>(</operator><name>DeltaDeltaCompressor</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AggCheckCallContext</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg_context</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* cannot be called directly because of internal-type argument */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tsl_deltadelta_compressor_append called in non-aggregate context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>agg_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>compressor</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>compressor</name> <operator>=</operator> <call><name>delta_delta_compressor_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"append expects two arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>delta_delta_compressor_append_null</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type> <name>next_val</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>delta_delta_compressor_append_value</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name>next_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type>
<name>delta_delta_compressor_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>delta_delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>compressor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DeltaDeltaCompressed</name> <modifier>*</modifier></type>
<name>delta_delta_from_parts</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>last_value</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>last_delta</name></decl></parameter>, <parameter><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>deltas</name></decl></parameter>,
					   <parameter><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>nulls_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>compressed_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compressed_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DeltaDeltaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nulls</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nulls_size</name> <operator>=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed_size</name> <operator>=</operator>
		<sizeof>sizeof<argument_list>(<argument><expr><name>DeltaDeltaCompressed</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>simple8brle_serialized_slot_size</name><argument_list>(<argument><expr><name>deltas</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>nulls_size</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocSizeIsValid</name><argument_list>(<argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"compressed size exceeds the maximum allowed (%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>MaxAllocSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed_data</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <operator>(</operator><name>DeltaDeltaCompressed</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressed</name><operator>-&gt;</operator><name>vl_len_</name></name></expr></argument>, <argument><expr><name>compressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compressed</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_DELTADELTA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressed</name><operator>-&gt;</operator><name>last_value</name></name> <operator>=</operator> <name>last_value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressed</name><operator>-&gt;</operator><name>last_delta</name></name> <operator>=</operator> <name>last_delta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <ternary><condition><expr><name>nulls_size</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>compressed</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_data</name> <operator>=</operator>
		<call><name>bytes_serialize_simple8b_and_advance</name><argument_list>(<argument><expr><name>compressed_data</name></expr></argument>,
											 <argument><expr><call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name>deltas</name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>deltas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nulls</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>nulls</name><operator>-&gt;</operator><name>num_elements</name></name> <operator>&gt;</operator> <name><name>deltas</name><operator>-&gt;</operator><name>num_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bytes_serialize_simple8b_and_advance</name><argument_list>(<argument><expr><name>compressed_data</name></expr></argument>, <argument><expr><name>nulls_size</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>compressed</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>delta_delta_compressor_finish</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>deltas</name> <init>= <expr><call><name>simple8brle_compressor_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>delta_delta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name> <init>= <expr><call><name>simple8brle_compressor_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DeltaDeltaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>deltas</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>delta_delta_from_parts</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>prev_val</name></name></expr></argument>,
										<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>prev_delta</name></name></expr></argument>,
										<argument><expr><name>deltas</name></expr></argument>,
										<argument><expr><ternary><condition><expr><name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name></expr> ?</condition><then> <expr><name>nulls</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>compressed</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_DELTADELTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>compressed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>tsl_deltadelta_compressor_finish</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>=
		<expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>DeltaDeltaCompressor</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>delta_delta_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>delta_delta_compressor_append_null</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>delta_delta_compressor_append_value</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>next_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>delta_delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>encoded</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We perform all arithmetic using unsigned values due to C's overflow rules:
	 * signed integer overflow is undefined behavior, so if we have a very large delta,
	 * this code is without meaning, while unsigned overflow is 2's complement, so even
	 * very large delta work the same as any other
	 */</comment>

	<comment type="block">/* step 1: delta of deltas */</comment>
	<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>next_val</name><operator>)</operator> <operator>-</operator> <name><name>compressor</name><operator>-&gt;</operator><name>prev_val</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>delta_delta</name> <operator>=</operator> <name>delta</name> <operator>-</operator> <name><name>compressor</name><operator>-&gt;</operator><name>prev_delta</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>prev_val</name></name> <operator>=</operator> <name>next_val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>prev_delta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

	<comment type="block">/* step 2: ZigZag encode */</comment>
	<expr_stmt><expr><name>encoded</name> <operator>=</operator> <call><name>zig_zag_encode</name><argument_list>(<argument><expr><name>delta_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* step 3: simple8b/RTE */</comment>
	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>delta_delta</name></name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************/</comment>
<comment type="block" format="doxygen">/**********************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int64_decompression_iterator_init_forward</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
										  <parameter><decl><type><name>DeltaDeltaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>compressed</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>deltas</name> <init>= <expr><call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name> <init>= <expr><name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <operator>(</operator><name>DeltaDeltaDecompressionIterator</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>base</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>compression_algorithm</name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_DELTADELTA</name></expr>,
			<expr><operator>.</operator><name>forward</name> <operator>=</operator> <name>true</name></expr>,
			<expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>element_type</name></expr>,
			<expr><operator>.</operator><name>try_next</name> <operator>=</operator> <name>delta_delta_decompression_iterator_try_next_forward</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>prev_val</name> <operator>=</operator> <literal type="number">0</literal></expr>,
		<expr><operator>.</operator><name>prev_delta</name> <operator>=</operator> <literal type="number">0</literal></expr>,
		<expr><operator>.</operator><name>has_nulls</name> <operator>=</operator> <name>has_nulls</name></expr>,
	}</block></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name> <init>= <expr><call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int64_decompression_iterator_init_reverse</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
										  <parameter><decl><type><name>DeltaDeltaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>compressed</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>deltas</name> <init>= <expr><call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name> <init>= <expr><name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>compressed</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <operator>(</operator><name>DeltaDeltaDecompressionIterator</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>base</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>compression_algorithm</name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_DELTADELTA</name></expr>,
			<expr><operator>.</operator><name>forward</name> <operator>=</operator> <name>false</name></expr>,
			<expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>element_type</name></expr>,
			<expr><operator>.</operator><name>try_next</name> <operator>=</operator> <name>delta_delta_decompression_iterator_try_next_reverse</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>prev_val</name> <operator>=</operator> <name><name>compressed</name><operator>-&gt;</operator><name>last_value</name></name></expr>,
		<expr><operator>.</operator><name>prev_delta</name> <operator>=</operator> <name><name>compressed</name><operator>-&gt;</operator><name>last_delta</name></name></expr>,
		<expr><operator>.</operator><name>has_nulls</name> <operator>=</operator> <name>has_nulls</name></expr>,
	}</block></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></argument>, <argument><expr><name>deltas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name> <init>= <expr><call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>DecompressResult</name></type>
<name>convert_from_internal</name><parameter_list>(<parameter><decl><type><name>DecompressResultInternal</name></type> <name>res_internal</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>res_internal</name><operator>.</operator><name>is_done</name></name> <operator>||</operator> <name><name>res_internal</name><operator>.</operator><name>is_null</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name><name>res_internal</name><operator>.</operator><name>is_done</name></name></expr>,
			<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name><name>res_internal</name><operator>.</operator><name>is_null</name></name></expr>,
		}</block></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>element_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BOOLOID</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>val</name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>res_internal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>,
			}</block></expr>;</return>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>val</name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>res_internal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>,
			}</block></expr>;</return>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>val</name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>res_internal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>,
			}</block></expr>;</return>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>val</name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>res_internal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>,
			}</block></expr>;</return>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>val</name> <operator>=</operator> <call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name><name>res_internal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>,
			}</block></expr>;</return>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>val</name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>res_internal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>,
			}</block></expr>;</return>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>val</name> <operator>=</operator> <call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name><name>res_internal</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>,
			}</block></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"invalid type requested from deltadelta decompression \"%s\""</literal></expr></argument>,
				 <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DecompressResultInternal</name></type>
<name>delta_delta_decompression_iterator_try_next_forward_internal</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>delta_delta</name></decl>;</decl_stmt>

	<comment type="block">/* check for a null value */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>result</name> <init>=
			<expr><call><name>simple8brle_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>simple8brle_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
		}</block></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>delta_delta</name> <operator>=</operator> <call><name>zig_zag_decode</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>prev_delta</name></name> <operator>+=</operator> <name>delta_delta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>prev_val</name></name> <operator>+=</operator> <name><name>iter</name><operator>-&gt;</operator><name>prev_delta</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>val</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>prev_val</name></name></expr>,
		<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>false</name></expr>,
	}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressResult</name></type>
<name>delta_delta_decompression_iterator_try_next_forward</name><parameter_list>(<parameter><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_DELTADELTA</name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>forward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>convert_from_internal</name><argument_list>(<argument><expr><call><name>delta_delta_decompression_iterator_try_next_forward_internal</name><argument_list>(
									 <argument><expr><operator>(</operator><name>DeltaDeltaDecompressionIterator</name> <operator>*</operator><operator>)</operator> <name>iter</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DecompressResultInternal</name></type>
<name>delta_delta_decompression_iterator_try_next_reverse_internal</name><parameter_list>(<parameter><decl><type><name>DeltaDeltaDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>delta_delta</name></decl>;</decl_stmt>
	<comment type="block">/* check for a null value */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>result</name> <init>=
			<expr><call><name>simple8brle_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>simple8brle_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
		}</block></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>prev_val</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>delta_delta</name> <operator>=</operator> <call><name>zig_zag_decode</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>prev_val</name></name> <operator>-=</operator> <name><name>iter</name><operator>-&gt;</operator><name>prev_delta</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>prev_delta</name></name> <operator>-=</operator> <name>delta_delta</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DecompressResultInternal</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>,
	}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressResult</name></type>
<name>delta_delta_decompression_iterator_try_next_reverse</name><parameter_list>(<parameter><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_DELTADELTA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>forward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>convert_from_internal</name><argument_list>(<argument><expr><call><name>delta_delta_decompression_iterator_try_next_reverse_internal</name><argument_list>(
									 <argument><expr><operator>(</operator><name>DeltaDeltaDecompressionIterator</name> <operator>*</operator><operator>)</operator> <name>iter</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressionIterator</name> <modifier>*</modifier></type>
<name>delta_delta_decompression_iterator_from_datum_forward</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>deltadelta_compressed</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeltaDeltaDecompressionIterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>int64_decompression_iterator_init_forward</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>,
											  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>deltadelta_compressed</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressionIterator</name> <modifier>*</modifier></type>
<name>delta_delta_decompression_iterator_from_datum_reverse</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>deltadelta_compressed</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeltaDeltaDecompressionIterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>int64_decompression_iterator_init_reverse</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>,
											  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>deltadelta_compressed</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************/</comment>
<comment type="block" format="doxygen">/**********************************************************************************/</comment>
<function><type><name>void</name></type>
<name>deltadelta_compressed_send</name><parameter_list>(<parameter><decl><type><name>CompressedDataHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DeltaDeltaCompressed</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>DeltaDeltaCompressed</name> <operator>*</operator><operator>)</operator> <name>header</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_DELTADELTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>has_nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>last_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>last_delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_serialized_send</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name> <init>=
			<expr><operator>(</operator><name>Simple8bRleSerialized</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>delta_deltas</name></name><operator>)</operator> <operator>+</operator>
									   <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>delta_deltas</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>simple8brle_serialized_send</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>Datum</name></type>
<name>deltadelta_compressed_recv</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type> <name>has_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>last_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>last_delta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>delta_deltas</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DeltaDeltaCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>has_nulls</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>has_nulls</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>has_nulls</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid recv in deltadelta: bad bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>last_value</name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_delta</name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>delta_deltas</name> <operator>=</operator> <call><name>simple8brle_serialized_recv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>simple8brle_serialized_recv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>delta_delta_from_parts</name><argument_list>(<argument><expr><name>last_value</name></expr></argument>, <argument><expr><name>last_delta</name></expr></argument>, <argument><expr><name>delta_deltas</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************/</comment>
<comment type="block" format="doxygen">/**********************************************************************************/</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64</name></type>
<name>zig_zag_encode</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// (((uint64)value) &lt;&lt; 1) ^ (uint64)(value &gt;&gt; 63);</comment>
	<comment type="block">/* since shift is underspecified, we use (value &lt; 0 ? 0xFFFFFFFFFFFFFFFFull : 0)
	 * which compiles to the correct asm, and is well defined
	 */</comment>
	<return>return <expr><operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <name>value</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0xFFFFFFFFFFFFFFFFull</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64</name></type>
<name>zig_zag_decode</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ZigZag turns negative numbers into odd ones, and positive numbers into even ones*/</comment>
	<return>return <expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
