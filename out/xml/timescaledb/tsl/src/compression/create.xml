<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/compression/create.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/heapam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/reloptions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/tupdesc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/index.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/indexing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/indexing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/objectaccess.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_constraint_d.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_constraint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/toasting.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/alter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/defrem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/tablecmds.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/tablespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcop/utility.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/array.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/typcache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/continuous_agg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression_with_clause.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/hypertable_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"custom_type_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<comment type="block">/* entrypoint
 * tsl_process_compress_table : is the entry point.
 */</comment>
<typedef>typedef <type><struct>struct <name>CompressColInfo</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>numcols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_hypertable_compression</name>
		<modifier>*</modifier></type><name>col_meta</name></decl>;</decl_stmt>	  <comment type="block">/* metadata about columns from src hypertable that will be compressed*/</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>coldeflist</name></decl>;</decl_stmt> <comment type="block">/*list of ColumnDef for the compressed column */</comment>
}</block></struct></type> <name>CompressColInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>compresscolinfo_init</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>srctbl_relid</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>segmentby_cols</name></decl></parameter>,
								 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>orderby_cols</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>compresscolinfo_init_singlecolumn</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>compresscolinfo_add_catalog_entries</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>compress_cols</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>htid</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_COMPRESSION_TABLE_NAME</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>hypertable_id</name></type></parameter>)</parameter_list></cpp:macro>                                   \
	<cpp:value>do                                                                                             \
	{                                                                                              \
		int ret = snprintf(buf, NAMEDATALEN, prefix, hypertable_id);                               \
		if (ret &lt; 0 || ret &gt; NAMEDATALEN)                                                          \
		{                                                                                          \
			ereport(ERROR,                                                                         \
					(errcode(ERRCODE_INTERNAL_ERROR),                                              \
					 errmsg("bad compression hypertable internal name")));                         \
		}                                                                                          \
	} while (0);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>CompressionAlgorithms</name></name></type>
<name>get_default_algorithm_id</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>typeoid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INT4OID</name></expr>:</case>
		<case>case <expr><name>INT2OID</name></expr>:</case>
		<case>case <expr><name>INT8OID</name></expr>:</case>
		<case>case <expr><name>DATEOID</name></expr>:</case>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<return>return <expr><name>COMPRESSION_ALGORITHM_DELTADELTA</name></expr>;</return>

		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<return>return <expr><name>COMPRESSION_ALGORITHM_GORILLA</name></expr>;</return>

		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<return>return <expr><name>COMPRESSION_ALGORITHM_ARRAY</name></expr>;</return>

		<default>default:</default>
		<block>{<block_content>
			<comment type="block">/* use dictitionary if possible, otherwise use array */</comment>
			<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tentry</name> <init>=
				<expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>TYPECACHE_EQ_OPR_FINFO</name> <operator>|</operator> <name>TYPECACHE_HASH_PROC_FINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tentry</name><operator>-&gt;</operator><name>hash_proc_finfo</name><operator>.</operator><name>fn_addr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>tentry</name><operator>-&gt;</operator><name>eq_opr_finfo</name><operator>.</operator><name>fn_addr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>COMPRESSION_ALGORITHM_ARRAY</name></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><name>COMPRESSION_ALGORITHM_DICTIONARY</name></expr>;</return>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>compression_column_segment_metadata_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
										 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>orderby_column_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
				   <argument><expr><name>NAMEDATALEN</name></expr></argument>,
				   <argument><expr><name>COMPRESSION_COLUMN_METADATA_PREFIX</name> <literal type="string">"%s_%d"</literal></expr></argument>,
				   <argument><expr><name>type</name></expr></argument>,
				   <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>orderby_column_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ret</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ret</name></expr></argument> &gt;</argument_list></name> <name>NAMEDATALEN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad segment metadata column name"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>compression_column_segment_min_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>compression_column_segment_metadata_name</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>compression_column_segment_max_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>compression_column_segment_metadata_name</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compresscolinfo_add_metadata_columns</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>uncompressed_rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* additional metadata columns.
	 * these are not listed in hypertable_compression catalog table
	 * and so only has a ColDef entry */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>colno</name></decl>;</decl_stmt>

	<comment type="block">/* count column */</comment>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name></expr></argument>,

							 <comment type="block">/* count of the number of uncompressed rows */</comment>
							 <argument><expr><call><name>makeColumnDef</name><argument_list>(<argument><expr><name>COMPRESSION_COLUMN_METADATA_COUNT_NAME</name></expr></argument>,
										   <argument><expr><name>INT4OID</name></expr></argument>,
										   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/* typemod */</comment>,
										   <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/*collation*/</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* sequence_num column */</comment>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name></expr></argument>,

							 <comment type="block">/* count of the number of uncompressed rows */</comment>
							 <argument><expr><call><name>makeColumnDef</name><argument_list>(<argument><expr><name>COMPRESSION_COLUMN_METADATA_SEQUENCE_NUM_NAME</name></expr></argument>,
										   <argument><expr><name>INT4OID</name></expr></argument>,
										   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/* typemod */</comment>,
										   <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/*collation*/</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>colno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>colno</name> <operator>&lt;</operator> <name><name>cc</name><operator>-&gt;</operator><name>numcols</name></name></expr>;</condition> <incr><expr><name>colno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>orderby_column_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>FormData_hypertable_compression</name></type> <name>fd</name> <init>= <expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AttrNumber</name></type> <name>col_attno</name> <init>= <expr><call><name>get_attnum</name><argument_list>(<argument><expr><name><name>uncompressed_rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>fd</name><operator>.</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>uncompressed_rel</name></expr></argument>)</argument_list></call></expr></argument>,
												   <argument><expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>col_attno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>, <argument><expr><name>TYPECACHE_LT_OPR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>lt_opr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid ordering column type %s"</literal></expr></argument>, <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Could not identify a less-than operator for the type."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* segment_meta min and max columns */</comment>
			<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator>
				<call><name>lappend</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name></expr></argument>,
						<argument><expr><call><name>makeColumnDef</name><argument_list>(<argument><expr><call><name>compression_column_segment_min_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
									  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/* typemod */</comment>,
									  <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/*collation*/</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator>
				<call><name>lappend</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name></expr></argument>,
						<argument><expr><call><name>makeColumnDef</name><argument_list>(<argument><expr><call><name>compression_column_segment_max_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
									  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/* typemod */</comment>,
									  <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/*collation*/</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * return the columndef list for compressed hypertable.
 * we do this by getting the source hypertable's attrs,
 * 1.  validate the segmentby cols and orderby cols exists in this list and
 * 2. create the columndefs for the new compressed hypertable
 *     segmentby_cols have same datatype as the original table
 *     all other cols have COMPRESSEDDATA_TYPE type
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>compresscolinfo_init</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>srctbl_relid</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>segmentby_cols</name></decl></parameter>,
					 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>orderby_cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>colno</name></decl>, <decl><type ref="prev"/><name>attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>segorder_colindex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>seg_attnolen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>compresseddata_oid</name> <init>= <expr><call><name>ts_custom_type_cache_get</name><argument_list>(<argument><expr><name>CUSTOM_TYPE_COMPRESSED_DATA</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type_oid</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>seg_attnolen</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>segmentby_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>srctbl_relid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>segorder_colindex</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>natts</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>segmentby_cols</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>CompressedParsedCol</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttrNumber</name></type> <name>col_attno</name> <init>= <expr><call><name>get_attnum</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>col_attno</name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column \"%s\" does not exist"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The timescaledb.compress_segmentby option must reference a valid "</literal>
							 <literal type="string">"column."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>segorder_colindex</name><index>[<expr><name>col_attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<comment type="block">/* the column indexes are numbered as seg_attnolen + &lt;orderby_index&gt;
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>seg_attnolen</name> <operator>==</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>orderby_cols</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>CompressedParsedCol</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttrNumber</name></type> <name>col_attno</name> <init>= <expr><call><name>get_attnum</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>col_attno</name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column \"%s\" does not exist"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The timescaledb.compress_orderby option must reference a valid "</literal>
							 <literal type="string">"column."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* check if orderby_cols and segmentby_cols are distinct */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>segorder_colindex</name><index>[<expr><name>col_attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot use column \"%s\" for both ordering and segmenting"</literal></expr></argument>,
							<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use separate columns for the timescaledb.compress_orderby and"</literal>
							 <literal type="string">" timescaledb.compress_segmentby options."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>segorder_colindex</name><index>[<expr><name>col_attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>numcols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FormData_hypertable_compression</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>colno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>attno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>attno</name> <operator>&lt;</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>attno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>attroid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type> <name>typmod</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>collid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>coldef</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>COMPRESSION_COLUMN_METADATA_PREFIX</name></expr></argument>,
					<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>COMPRESSION_COLUMN_METADATA_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"cannot compress tables with reserved column prefix '%s'"</literal></expr></argument>,
				 <argument><expr><name>COMPRESSION_COLUMN_METADATA_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>attname</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>segorder_colindex</name><index>[<expr><name>attno</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>segorder_colindex</name><index>[<expr><name>attno</name></expr>]</index></name> <operator>&lt;=</operator> <name>seg_attnolen</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>attroid</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt> <comment type="block">/*segment by columns have original type */</comment>
				<expr_stmt><expr><name>typmod</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>collid</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>attcollation</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>segmentby_column_index</name> <operator>=</operator> <name><name>segorder_colindex</name><index>[<expr><name>attno</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>orderby_index</name> <init>= <expr><name><name>segorder_colindex</name><index>[<expr><name>attno</name></expr>]</index></name> <operator>-</operator> <name>seg_attnolen</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>ordercol</name> <init>= <expr><call><name>list_nth</name><argument_list>(<argument><expr><name>orderby_cols</name></expr></argument>, <argument><expr><name>orderby_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>orderby_column_index</name> <operator>=</operator> <name>orderby_index</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>orderby_asc</name> <operator>=</operator> <name><name>ordercol</name><operator>-&gt;</operator><name>asc</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>orderby_nullsfirst</name> <operator>=</operator> <name><name>ordercol</name><operator>-&gt;</operator><name>nullsfirst</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>attroid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>attroid</name> <operator>=</operator> <name>compresseddata_oid</name></expr>;</expr_stmt> <comment type="block">/* default type for column */</comment>
			<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>algo_id</name> <operator>=</operator> <call><name>get_default_algorithm_id</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>algo_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// invalid algo number</comment>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>coldef</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>attroid</name></expr></argument>, <argument><expr><name>typmod</name></expr></argument>, <argument><expr><name>collid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name></expr></argument>, <argument><expr><name>coldef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>colno</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>numcols</name></name> <operator>=</operator> <name>colno</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>compresscolinfo_add_metadata_columns</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>segorder_colindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* use this api for the case when you add a single column to a table that already has
 * compression setup
 * such as ALTER TABLE xyz ADD COLUMN .....
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>compresscolinfo_init_singlecolumn</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>colname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>colno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>compresseddata_oid</name> <init>= <expr><call><name>ts_custom_type_cache_get</name><argument_list>(<argument><expr><name>CUSTOM_TYPE_COMPRESSED_DATA</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type_oid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>coldef</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>numcols</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FormData_hypertable_compression</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cc</name><operator>-&gt;</operator><name>numcols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>attname</name></expr></argument>, <argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>algo_id</name> <operator>=</operator> <call><name>get_default_algorithm_id</name><argument_list>(<argument><expr><name>typid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>coldef</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>colname</name></expr></argument>, <argument><expr><name>compresseddata_oid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/*typmod*/</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/*collation*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>coldeflist</name></name></expr></argument>, <argument><expr><name>coldef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* modify storage attributes for toast table columns attached to the
 * compression table
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>modify_compressed_toast_table_storage</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>compress_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>colno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>cmds</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>colno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>colno</name> <operator>&lt;</operator> <name><name>cc</name><operator>-&gt;</operator><name>numcols</name></name></expr>;</condition> <incr><expr><name>colno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="line">// get storage type for columns which have compression on</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>algo_id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>CompressionStorage</name></type> <name>stor</name> <init>= <expr><call><name>compression_get_toast_storage</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>algo_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>stor</name> <operator>!=</operator> <name>TOAST_STORAGE_EXTERNAL</name></expr>)</condition>
			<comment type="block">/* external is default storage for toast columns */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <name>AT_SetStorage</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>attname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>stor</name> <operator>==</operator> <name>TOAST_STORAGE_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>def</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"extended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmds</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>cmds</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ts_alter_table_with_event_trigger</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* prevent concurrent transactions from inserting into
 * hypertable_compression for the same table, acquire the lock but don't free
 * here
 * i.e. 2 concurrent ALTER TABLE to compressed will not succeed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>compresscolinfo_add_catalog_entries</name><parameter_list>(<parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>compress_cols</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>htid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_hypertable_compression</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_hypertable_compression</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>HYPERTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>compress_cols</name><operator>-&gt;</operator><name>numcols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><operator>&amp;</operator><name><name>compress_cols</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>hypertable_id</name></name> <operator>=</operator> <name>htid</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_hypertable_compression_fill_tuple_values</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_catalog_insert_values</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/*lock will be released at end of transaction only*/</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_compressed_table_indexes</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>compresstable_relid</name></decl></parameter>, <parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>compress_cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>=
		<expr><call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name>compresstable_relid</name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexStmt</name></type> <name>stmt</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_IndexStmt</name></expr>,
		<expr><operator>.</operator><name>accessMethod</name> <operator>=</operator> <name>DEFAULT_INDEX_TYPE</name></expr>,
		<expr><operator>.</operator><name>idxname</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>relation</name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>tableSpace</name> <operator>=</operator> <call><name>get_tablespace_name</name><argument_list>(<argument><expr><call><name>get_rel_tablespace</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexElem</name></type> <name>sequence_num_elem</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_IndexElem</name></expr>,
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>COMPRESSION_COLUMN_METADATA_SEQUENCE_NUM_NAME</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NameData</name></type> <name>index_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>index_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>index_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>indexcols</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>compress_cols</name><operator>-&gt;</operator><name>numcols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>&amp;</operator><name><name>compress_cols</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>IndexElem</name> <modifier>*</modifier></type><name>segment_elem</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexElem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>segmentby_column_index</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>segment_elem</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* if this isn't the first element, add a ',' before appending it */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>indexcols</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>segment_elem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>indexcols</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>indexcols</name></expr></argument>, <argument><expr><name>segment_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>indexcols</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>COMPRESSION_COLUMN_METADATA_SEQUENCE_NUM_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>indexcols</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>indexcols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sequence_num_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>stmt</name><operator>.</operator><name>indexParams</name></name> <operator>=</operator> <name>indexcols</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>index_addr</name> <operator>=</operator> <call><name>DefineIndex</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>,
							 <argument><expr><name>InvalidOid</name></expr></argument>, <comment type="block">/* IndexRelationId */</comment>
							 <argument><expr><name>InvalidOid</name></expr></argument>, <comment type="block">/* parentIndexId */</comment>
							 <argument><expr><name>InvalidOid</name></expr></argument>, <comment type="block">/* parentConstraintId */</comment>
							 <argument><expr><name>false</name></expr></argument>,		 <comment type="block">/* is_alter_table */</comment>
							 <argument><expr><name>false</name></expr></argument>,		 <comment type="block">/* check_rights */</comment>
							 <argument><expr><name>false</name></expr></argument>,		 <comment type="block">/* check_not_in_use */</comment>
							 <argument><expr><name>false</name></expr></argument>,		 <comment type="block">/* skip_build */</comment>
							 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	 <comment type="block">/* quiet */</comment>
	<expr_stmt><expr><name>index_tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>index_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>index_tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for index relid %u"</literal></expr></argument>, <argument><expr><name><name>index_addr</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>index_name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>index_tuple</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>relname</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
		 <argument><expr><literal type="string">"adding index %s ON %s.%s USING BTREE(%s)"</literal></expr></argument>,
		 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name>index_name</name></expr></argument>)</argument_list></call></expr></argument>,
		 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
		 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
		 <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>index_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_statistics_on_compressed_table</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>compressed_table_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>table_rel</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>compressed_table_id</name></expr></argument>, <argument><expr><name>ShareUpdateExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>attrelation</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>AttributeRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>table_desc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>table_rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>compressed_data_type</name> <init>= <expr><call><name>ts_custom_type_cache_get</name><argument_list>(<argument><expr><name>CUSTOM_TYPE_COMPRESSED_DATA</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type_oid</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table_desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attrtuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>col_attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>table_desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* skip system columns */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>col_attr</name><operator>-&gt;</operator><name>attnum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCacheCopyAttName</name><argument_list>(<argument><expr><name>compressed_table_id</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col_attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column \"%s\" of compressed table \"%s\" does not exist"</literal></expr></argument>,
							<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col_attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>table_rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>attrtuple</name> <operator>=</operator> <operator>(</operator><name>Form_pg_attribute</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* the planner should never look at compressed column statistics because
		 * it will not understand them. Statistics on the other columns,
		 * segmentbys and metadata, are very important, so we increase their
		 * target.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>col_attr</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>==</operator> <name>compressed_data_type</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>attrtuple</name><operator>-&gt;</operator><name>attstattarget</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>attrtuple</name><operator>-&gt;</operator><name>attstattarget</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>attrelation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>InvokeObjectPostAlterHook</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>compressed_table_id</name></expr></argument>, <argument><expr><name><name>attrtuple</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>attrelation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>table_rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_toast_tuple_target_on_compressed</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>compressed_table_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DefElem</name></type> <name>def_elem</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_DefElem</name></expr>,
		<expr><operator>.</operator><name>defname</name> <operator>=</operator> <literal type="string">"toast_tuple_target"</literal></expr>,
		<expr><operator>.</operator><name>arg</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeInteger</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>defaction</name> <operator>=</operator> <name>DEFELEM_SET</name></expr>,
		<expr><operator>.</operator><name>location</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlterTableCmd</name></type> <name>cmd</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_AlterTableCmd</name></expr>,
		<expr><operator>.</operator><name>subtype</name> <operator>=</operator> <name>AT_SetRelOptions</name></expr>,
		<expr><operator>.</operator><name>def</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def_elem</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ts_alter_table_with_event_trigger</name><argument_list>(<argument><expr><name>compressed_table_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>create_compression_table</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>compress_cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>tbladdress</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>relnamebuf</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>toast_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>validnsps</name><index>[]</index></name> <init>= <expr><name>HEAP_RELOPT_NAMESPACES</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>compress_relid</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>create</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>compress_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>compress_hypertable_id</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>create</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CreateStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>tableElts</name></name> <operator>=</operator> <name><name>compress_cols</name><operator>-&gt;</operator><name>coldeflist</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>inhRelations</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>ofTypename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>oncommit</name></name> <operator>=</operator> <name>ONCOMMIT_NOOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>tablespacename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>if_not_exists</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* create the compression table */</comment>
	<comment type="block">/* NewRelationCreateToastTable calls CommandCounterIncrement */</comment>
	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compress_hypertable_id</name> <operator>=</operator> <call><name>ts_catalog_table_next_seq_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HYPERTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PRINT_COMPRESSION_TABLE_NAME</name><argument_list>(<argument><expr><name>relnamebuf</name></expr></argument>, <argument><expr><literal type="string">"_compressed_hypertable_%d"</literal></expr></argument>, <argument><expr><name>compress_hypertable_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compress_rel</name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>relnamebuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>create</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <name>compress_rel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tbladdress</name> <operator>=</operator> <call><name>DefineRelation</name><argument_list>(<argument><expr><name>create</name></expr></argument>, <argument><expr><name>RELKIND_RELATION</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compress_relid</name> <operator>=</operator> <name><name>tbladdress</name><operator>.</operator><name>objectId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>toast_options</name> <operator>=</operator>
		<call><name>transformRelOptions</name><argument_list>(<argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>create</name><operator>-&gt;</operator><name>options</name></name></expr></argument>, <argument><expr><literal type="string">"toast"</literal></expr></argument>, <argument><expr><name>validnsps</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>heap_reloptions</name><argument_list>(<argument><expr><name>RELKIND_TOASTVALUE</name></expr></argument>, <argument><expr><name>toast_options</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NewRelationCreateToastTable</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>, <argument><expr><name>toast_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>modify_compressed_toast_table_storage</name><argument_list>(<argument><expr><name>compress_cols</name></expr></argument>, <argument><expr><name>compress_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_hypertable_create_compressed</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>, <argument><expr><name>compress_hypertable_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>set_statistics_on_compressed_table</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_toast_tuple_target_on_compressed</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>create_compressed_table_indexes</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>, <argument><expr><name>compress_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>compress_hypertable_id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create compress chunk for specific table.
 *
 * If table_id is InvalidOid, create a new table.
 *
 * Constraints and triggers are not created on the PG chunk table.
 * Caller is expected to do this explicitly.
 */</comment>
<function><type><name>Chunk</name> <modifier>*</modifier></type>
<name>create_compress_chunk</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name></decl></parameter>, <parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>src_chunk</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>table_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hyperspace</name> <modifier>*</modifier></type><name>hs</name> <init>= <expr><name><name>compress_ht</name><operator>-&gt;</operator><name>space</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>compress_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>tablespace_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tablespace</name></decl>;</decl_stmt>

	<comment type="block">/* Create a new chunk based on the hypercube */</comment>
	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compress_chunk</name> <operator>=</operator> <call><name>ts_chunk_create_base</name><argument_list>(<argument><expr><call><name>ts_catalog_table_next_seq_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>CHUNK</name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>num_dimensions</name></name></expr></argument>,
										  <argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>hypertable_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>cube</name></name> <operator>=</operator> <name><name>src_chunk</name><operator>-&gt;</operator><name>cube</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name> <operator>=</operator> <name><name>compress_ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <call><name>ts_chunk_constraints_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>, <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>table_id</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Relation</name></type> <name>table_rel</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>table_id</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>table_rel</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>table_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Fail if we overflow the name limit */</comment>
		<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><name>NAMEDATALEN</name></expr></argument>,
						   <argument><expr><literal type="string">"compress%s_%d_chunk"</literal></expr></argument>,
						   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>compress_ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>associated_table_prefix</name></name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;=</operator> <name>NAMEDATALEN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid name \"%s\" for compressed chunk"</literal></expr></argument>,
							<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The associated table prefix is too long."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Insert chunk */</comment>
	<expr_stmt><expr><call><name>ts_chunk_insert_lock</name><argument_list>(<argument><expr><name>compress_chunk</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* only add inheritable constraints. no dimension constraints */</comment>
	<expr_stmt><expr><call><name>ts_chunk_constraints_add_inheritable_constraints</name><argument_list>(<argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>constraints</name></name></expr></argument>,
													 <argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
													 <argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>,
													 <argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_chunk_constraints_insert_metadata</name><argument_list>(<argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>constraints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the actual table relation for the chunk
	 * Note that we have to pick the tablespace here as the compressed ht doesn't have dimensions
	 * on which to base this decision. We simply pick the same tablespace as the uncompressed chunk
	 * for now.
	 */</comment>
	<expr_stmt><expr><name>tablespace_oid</name> <operator>=</operator> <call><name>get_rel_tablespace</name><argument_list>(<argument><expr><name><name>src_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tablespace</name> <operator>=</operator> <call><name>get_tablespace_name</name><argument_list>(<argument><expr><name>tablespace_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>table_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>table_id</name></name> <operator>=</operator> <name>table_id</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>table_id</name></name> <operator>=</operator> <call><name>ts_chunk_create_table</name><argument_list>(<argument><expr><name>compress_chunk</name></expr></argument>, <argument><expr><name>compress_ht</name></expr></argument>, <argument><expr><name>tablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not create compressed chunk table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* if the src chunk is not in the default tablespace, the compressed indexes
	 * should also be in a non-default tablespace. IN the usual case, this is inferred
	 * from the hypertable's and chunk's tablespace info. We do not propagate
	 * attach_tablespace settings to the compressed hypertable. So we have to explicitly
	 * pass the tablespace information here
	 */</comment>
	<expr_stmt><expr><call><name>ts_chunk_index_create_all</name><argument_list>(<argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name></expr></argument>,
							  <argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
							  <argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
							  <argument><expr><name><name>compress_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
							  <argument><expr><name>tablespace_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>compress_chunk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add  the hypertable time column to the end of the orderby list if
 * it's not already in the orderby or segmentby. */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>add_time_to_order_by_if_not_included</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>orderby_cols</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>segmentby_cols</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>time_dim</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>time_col_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>time_dim</name> <operator>=</operator> <call><name>hyperspace_get_open_dimension</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>time_col_name</name> <operator>=</operator> <call><name>get_attname</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name><name>time_dim</name><operator>-&gt;</operator><name>column_attno</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>orderby_cols</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>CompressedParsedCol</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>, <argument><expr><name>time_col_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>segmentby_cols</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>CompressedParsedCol</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>, <argument><expr><name>time_col_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Add time DESC NULLS FIRST to order by list */</comment>
		<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>col</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>col</name> <operator>=</operator> <operator>(</operator><name>CompressedParsedCol</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>index</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>orderby_cols</name></expr></argument>)</argument_list></call></expr>,
			<expr><operator>.</operator><name>asc</name> <operator>=</operator> <name>false</name></expr>,
			<expr><operator>.</operator><name>nullsfirst</name> <operator>=</operator> <name>true</name></expr>,
		}</block></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>, <argument><expr><name>time_col_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>orderby_cols</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>orderby_cols</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>orderby_cols</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FormData_hypertable_compression</name> <modifier>*</modifier></type>
<name>get_col_info_for_attnum</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>colinfo</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>attno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>attr_name</name> <init>= <expr><call><name>get_attname</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>colno</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>colno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>colno</name> <operator>&lt;</operator> <name><name>colinfo</name><operator>-&gt;</operator><name>numcols</name></name></expr>;</condition> <incr><expr><name>colno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>colinfo</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name><operator>.</operator><name>attname</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>&amp;</operator><name><name>colinfo</name><operator>-&gt;</operator><name>col_meta</name><index>[<expr><name>colno</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns list of constraints that need to be cloned on the compressed hypertable
 * This is limited to foreign key constraints now
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>validate_existing_constraints</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>colinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pg_constr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name>scankey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>conlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pg_constr</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>ConstraintRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>,
				<argument><expr><name>Anum_pg_constraint_conrelid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_constr</name></expr></argument>, <argument><expr><name>ConstraintRelidTypidNameIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scankey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_constraint</name></type> <name>form</name> <init>= <expr><operator>(</operator><name>Form_pg_constraint</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* we check primary ,unique and exclusion constraints.
		 * move foreign key constarints over to compression table
		 * ignore triggers
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>form</name><operator>-&gt;</operator><name>contype</name></name> <operator>==</operator> <name>CONSTRAINT_CHECK</name> <operator>||</operator> <name><name>form</name><operator>-&gt;</operator><name>contype</name></name> <operator>==</operator> <name>CONSTRAINT_TRIGGER</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>form</name><operator>-&gt;</operator><name>contype</name></name> <operator>==</operator> <name>CONSTRAINT_EXCLUSION</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"constraint %s is not supported for compression"</literal></expr></argument>,
							<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Exclusion constraints are not supported on hypertables that are "</literal>
							 <literal type="string">"compressed."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>numkeys</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int16</name> <modifier>*</modifier></type><name>attnums</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>is_null</name></decl>;</decl_stmt>
			<comment type="block">/* Extract the conkey array, ie, attnums of PK's columns */</comment>
			<decl_stmt><decl><type><name>Datum</name></type> <name>adatum</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
										<argument><expr><name>Anum_pg_constraint_conkey</name></expr></argument>,
										<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_constr</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>is_null</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type> <name>oid</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
									   <argument><expr><name>Anum_pg_constraint_oid</name></expr></argument>,
									   <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_constr</name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"null conkey for constraint %u"</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>arr</name> <operator>=</operator> <call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>adatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ensure not toasted */</comment>
			<expr_stmt><expr><name>numkeys</name> <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>numkeys</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>ARR_HASNULL</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>||</operator>
				<call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>INT2OID</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"conkey is not a 1-D smallint array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>attnums</name> <operator>=</operator> <operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>col_def</name> <init>=
					<expr><call><name>get_col_info_for_attnum</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>colinfo</name></expr></argument>, <argument><expr><name><name>attnums</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>col_def</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing column definition for constraint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>form</name><operator>-&gt;</operator><name>contype</name></name> <operator>==</operator> <name>CONSTRAINT_FOREIGN</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* is this a segment-by column */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>col_def</name><operator>-&gt;</operator><name>segmentby_column_index</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column \"%s\" must be used for segmenting"</literal></expr></argument>,
										<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col_def</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The foreign key constraint \"%s\" cannot be"</literal>
										   <literal type="string">" enforced with the given compression configuration."</literal></expr></argument>,
										   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<comment type="block">/* is colno a segment-by or order_by column */</comment>
				<if type="elseif">else if <condition>(<expr><name><name>col_def</name><operator>-&gt;</operator><name>segmentby_column_index</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>col_def</name><operator>-&gt;</operator><name>orderby_column_index</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column \"%s\" must be used for segmenting or ordering"</literal></expr></argument>,
									<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>col_def</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The constraint \"%s\" cannot be enforced with"</literal>
									   <literal type="string">" the given compression configuration."</literal></expr></argument>,
									   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name><name>form</name><operator>-&gt;</operator><name>contype</name></name> <operator>==</operator> <name>CONSTRAINT_FOREIGN</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Name</name></type> <name>conname</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><name>conname</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>form</name><operator>-&gt;</operator><name>conname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>conlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>conlist</name></expr></argument>, <argument><expr><name>conname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_constr</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>conlist</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_modify_compression_options</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>,
								 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>parsed_orderby_cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>compress_enable</name> <init>= <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>with_clause_options</name><index>[<expr><name>CompressEnabled</name></expr>]</index></name><operator>.</operator><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>compressed_chunks_exist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>compression_already_enabled</name> <init>= <expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>compressed_chunks_exist</name> <operator>=</operator>
		<name>compression_already_enabled</name> <operator>&amp;&amp;</operator> <call><name>ts_chunk_exists_with_compression</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>compressed_chunks_exist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot change configuration on already compressed chunks"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"There are compressed chunks that prevent changing"</literal>
						   <literal type="string">" the existing compression configuration."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Require both order by and segment by when altering if they were previously set because
	 * otherwise it's not clear what the default value means: does it mean leave as-is or is it an
	 * empty list.
	 * In the case where orderby is already set to the default value (time DESC),
	 * both interpretations should lead to orderby being set to the default value,
	 * so we allow skipping orderby if the default is the already set value. */</comment>
	<if_stmt><if>if <condition>(<expr><name>compress_enable</name> <operator>&amp;&amp;</operator> <name>compression_already_enabled</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>current_orderby_cols</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>ts_hypertable_compression_get</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>segment_by_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>order_by_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>info</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>segmentby_column_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>segment_by_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>orderby_column_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>order_by_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>current_orderby_cols</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>current_orderby_cols</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<if_stmt><if>if <condition>(<expr><name><name>with_clause_options</name><index>[<expr><name>CompressOrderBy</name></expr>]</index></name><operator>.</operator><name>is_default</name> <operator>&amp;&amp;</operator> <name>order_by_set</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>orderby_time_default_matches</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>elem1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elem2</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>fd_elem1</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>NameData</name></type> <name>colname1</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>colname2</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>cpc_elem2</name></decl>;</decl_stmt>
			<comment type="block">/* If the orderby that's already set is only the time column DESC (which is the
			 default), and we pass the default again, then no need to give an error */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>parsed_orderby_cols</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>elem1</name> <operator>=</operator> <call><name>list_nth_cell</name><argument_list>(<argument><expr><name>current_orderby_cols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>fd_elem1</name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>elem1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>colname1</name> <operator>=</operator> <name><name>fd_elem1</name><operator>-&gt;</operator><name>attname</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>elem2</name> <operator>=</operator> <call><name>list_nth_cell</name><argument_list>(<argument><expr><name>parsed_orderby_cols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cpc_elem2</name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>elem2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>colname2</name> <operator>=</operator> <name><name>cpc_elem2</name><operator>-&gt;</operator><name>colname</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>orderby_time_default_matches</name> <operator>=</operator> <operator>(</operator><name><name>fd_elem1</name><operator>-&gt;</operator><name>orderby_asc</name></name> <operator>==</operator> <name><name>cpc_elem2</name><operator>-&gt;</operator><name>asc</name></name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// this is okay only if the orderby that's already set is only the time column</comment>
			<comment type="line">// check for the same attribute name and same order (desc)</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name>current_orderby_cols</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>parsed_orderby_cols</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
				  <operator>(</operator><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colname1</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name>colname2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>orderby_time_default_matches</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must specify a column to order by"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The timescaledb.compress_orderby option was"</literal>
								   <literal type="string">" previously set and must also be specified"</literal>
								   <literal type="string">" in the updated configuration."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>with_clause_options</name><index>[<expr><name>CompressSegmentBy</name></expr>]</index></name><operator>.</operator><name>is_default</name> <operator>&amp;&amp;</operator> <name>segment_by_set</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must specify a column to segment by"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The timescaledb.compress_segmentby option was"</literal>
							   <literal type="string">" previously set and must also be specified"</literal>
							   <literal type="string">" in the updated configuration."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>drop_existing_compression_table</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compressed</name> <init>= <expr><call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"compressed hypertable not found"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"compression was enabled on \"%s\", but its internal"</literal>
						   <literal type="string">" compressed hypertable could not be found."</literal></expr></argument>,
						   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* need to drop the old compressed hypertable in case the segment by columns changed (and
	 * thus the column types of compressed hypertable need to change) */</comment>
	<expr_stmt><expr><call><name>ts_hypertable_drop</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><name>DROP_RESTRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_hypertable_compression_delete_by_hypertable_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_hypertable_unset_compressed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>disable_compression</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>compression_already_enabled</name> <init>= <expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>CompressOrderBy</name></expr>]</index></name><operator>.</operator><name>is_default</name> <operator>||</operator>
		<operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>CompressSegmentBy</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid compression configuration"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Cannot set additional compression options when"</literal>
						   <literal type="string">" disabling compression."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compression_already_enabled</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* compression is not enabled, so just return */</comment>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* compression is enabled. can we turn it off? */</comment>
	<expr_stmt><expr><call><name>check_modify_compression_options</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>with_clause_options</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* distributed hypertables do not have compression table on the access node */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>drop_existing_compression_table</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ts_hypertable_compression_delete_by_hypertable_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_hypertable_unset_compressed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add column to internal compression table */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_column_to_compression_table</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name></decl></parameter>, <parameter><decl><type><name>CompressColInfo</name> <modifier>*</modifier></type><name>compress_cols</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>compress_relid</name> <init>= <expr><name><name>compress_ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>coldef</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>addcol_cmd</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>coldef</name> <operator>=</operator> <operator>(</operator><name>ColumnDef</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>compress_cols</name><operator>-&gt;</operator><name>coldeflist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* create altertable stmt to add column to the compressed hypertable */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>TS_HYPERTABLE_IS_INTERNAL_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>compress_ht</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>addcol_cmd</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addcol_cmd</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <name>AT_AddColumn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addcol_cmd</name><operator>-&gt;</operator><name>def</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>coldef</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addcol_cmd</name><operator>-&gt;</operator><name>missing_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* alter the table and add column */</comment>
	<expr_stmt><expr><call><name>ts_alter_table_with_event_trigger</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>addcol_cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>modify_compressed_toast_table_storage</name><argument_list>(<argument><expr><name>compress_cols</name></expr></argument>, <argument><expr><name>compress_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Drop column from internal compression table */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>drop_column_from_compression_table</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>compress_relid</name> <init>= <expr><name><name>compress_ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<comment type="block">/* create altertable stmt to drop column from the compressed hypertable */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>TS_HYPERTABLE_IS_INTERNAL_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>compress_ht</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <name>AT_DropColumn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>missing_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* alter the table and drop column */</comment>
	<expr_stmt><expr><call><name>ts_alter_table_with_event_trigger</name><argument_list>(<argument><expr><name>compress_relid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>update_compress_chunk_time_interval</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>time_dim</name> <init>= <expr><call><name>hyperspace_get_open_dimension</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>compress_interval</name> <init>=
		<expr><call><name>ts_compress_hypertable_parse_chunk_time_interval</name><argument_list>(<argument><expr><name>with_clause_options</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compress_interval</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>compress_interval_usec</name> <init>=
		<expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>compress_interval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>compress_interval_usec</name> <operator>%</operator> <name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>interval_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
			 <argument><expr><literal type="string">"compress chunk interval is not a multiple of chunk interval, you should use a "</literal>
			 <literal type="string">"factor of chunk interval to merge as much as possible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>ts_hypertable_set_compress_interval</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>compress_interval_usec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * enables compression for the passed in table by
 * creating a compression hypertable with special properties
 * Note: caller should check security permissions
 *
 * Return true if compression was enabled, false otherwise.
 *
 * Steps:
 * 1. Check existing constraints on the table -&gt; can we support them with compression?
 * 2. Create internal compression table + mark hypertable as compression enabled
 * 3. Add catalog entries to hypertable_compression to record compression settings.
 * 4. Copy constraints to internal compression table
 */</comment>
<function><type><name>bool</name></type>
<name>tsl_process_compress_table</name><parameter_list>(<parameter><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
						   <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>compress_htid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>CompressColInfo</name></name></type> <name>compress_cols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>compress_enable</name> <init>= <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>with_clause_options</name><index>[<expr><name>CompressEnabled</name></expr>]</index></name><operator>.</operator><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>ownerid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>segmentby_cols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>orderby_cols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>constraint_list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_IS_INTERNAL_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot compress internal compression hypertable"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*check row security settings for the table */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ts_has_row_security</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"compression cannot be used on table with row security"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Lock the uncompressed ht in exclusive mode and keep till end of txn */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reload info after lock */</comment>
	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* If we are not enabling compression, we must be just altering compressed chunk interval. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>with_clause_options</name><index>[<expr><name>CompressEnabled</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>update_compress_chunk_time_interval</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>with_clause_options</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compress_enable</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>disable_compression</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>with_clause_options</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ownerid</name> <operator>=</operator> <call><name>ts_rel_get_owner</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>segmentby_cols</name> <operator>=</operator> <call><name>ts_compress_hypertable_parse_segment_by</name><argument_list>(<argument><expr><name>with_clause_options</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>orderby_cols</name> <operator>=</operator> <call><name>ts_compress_hypertable_parse_order_by</name><argument_list>(<argument><expr><name>with_clause_options</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>orderby_cols</name> <operator>=</operator> <call><name>add_time_to_order_by_if_not_included</name><argument_list>(<argument><expr><name>orderby_cols</name></expr></argument>, <argument><expr><name>segmentby_cols</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_modify_compression_options</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>with_clause_options</name></expr></argument>, <argument><expr><name>orderby_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>compresscolinfo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>segmentby_cols</name></expr></argument>, <argument><expr><name>orderby_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* check if we can create a compressed hypertable with existing constraints */</comment>
	<expr_stmt><expr><name>constraint_list</name> <operator>=</operator> <call><name>validate_existing_constraints</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* take explicit locks on catalog tables and keep them till end of txn */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HYPERTABLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HYPERTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* compression is enabled */</comment>
		<expr_stmt><expr><call><name>drop_existing_compression_table</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* On a distributed hypertable, there's no data locally, so don't
		 * create local compression tables and data but let the DDL pass on to
		 * data nodes. */</comment>
		<expr_stmt><expr><call><name>ts_hypertable_set_compressed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>compresscolinfo_add_catalog_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>compress_htid</name> <operator>=</operator> <call><name>create_compression_table</name><argument_list>(<argument><expr><name>ownerid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_hypertable_set_compressed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>compress_htid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>compresscolinfo_add_catalog_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*add the constraints to the new compressed hypertable */</comment>
	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/*reload updated info*/</comment>
	<expr_stmt><expr><call><name>ts_hypertable_clone_constraints_to_compressed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>constraint_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>CompressChunkTimeInterval</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>update_compress_chunk_time_interval</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>with_clause_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* do not release any locks, will get released by xact end */</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add a column to a table that has compression enabled
 * This function specifically adds the column to the internal compression table.
 */</comment>
<function><type><name>void</name></type>
<name>tsl_process_compress_table_add_column</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>ColumnDef</name> <modifier>*</modifier></type><name>orig_def</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>CompressColInfo</name></name></type> <name>compress_cols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>coloid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>orig_htid</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colname</name> <init>= <expr><name><name>orig_def</name><operator>-&gt;</operator><name>colname</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>ht_comp</name> <init>=
		<expr><call><name>ts_hypertable_compression_get_by_pkey</name><argument_list>(<argument><expr><name>orig_htid</name></expr></argument>, <argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* don't add column if it already exists */</comment>
	<if_stmt><if>if <condition>(<expr><name>ht_comp</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>TypeName</name> <modifier>*</modifier></type><name>orig_typname</name> <init>= <expr><name><name>orig_def</name><operator>-&gt;</operator><name>typeName</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>coloid</name> <operator>=</operator> <call><name>LookupTypeNameOid</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>orig_typname</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>compresscolinfo_init_singlecolumn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>, <argument><expr><name>colname</name></expr></argument>, <argument><expr><name>coloid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type> <name>compress_htid</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_hypertable_id</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name> <init>= <expr><call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name>compress_htid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>add_column_to_compression_table</name><argument_list>(<argument><expr><name>compress_ht</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* add catalog entries for the new column for the hypertable */</comment>
	<expr_stmt><expr><call><name>compresscolinfo_add_catalog_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>compress_cols</name></expr></argument>, <argument><expr><name>orig_htid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Drop a column from a table that has compression enabled
 * This function specifically removes it from the internal compression table
 * and removes it from metadata.
 * Removing orderby or segmentby columns is not supported.
 */</comment>
<function><type><name>void</name></type>
<name>tsl_process_compress_table_drop_column</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>ht_comp</name> <init>=
		<expr><call><name>ts_hypertable_compression_get_by_pkey</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* With DROP COLUMN IF EXISTS we might end up being called
	 * for non-existant columns. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht_comp</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ht_comp</name><operator>-&gt;</operator><name>segmentby_column_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ht_comp</name><operator>-&gt;</operator><name>orderby_column_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot drop orderby or segmentby column from a hypertable with "</literal>
						<literal type="string">"compression enabled"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name> <init>= <expr><call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>drop_column_from_compression_table</name><argument_list>(<argument><expr><name>compress_ht</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_hypertable_compression_delete_by_pkey</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Rename a column on a hypertable that has compression enabled.
 *
 * This function renames the existing column in the internal compression table.
 * We assume that there is a 1-1 mapping between the original chunk and
 * compressed chunk column names and that the names are identical.
 * Also update any metadata associated with the column.
 */</comment>
<function><type><name>void</name></type>
<name>tsl_process_compress_table_rename_column</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RenameStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>orig_htid</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relationType</name></name> <operator>==</operator> <name>OBJECT_TABLE</name> <operator>&amp;&amp;</operator> <name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_COLUMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type> <name>compress_htid</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_hypertable_id</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name> <init>= <expr><call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name>compress_htid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>compress_col_stmt</name> <init>= <expr><operator>(</operator><name>RenameStmt</name> <operator>*</operator><operator>)</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>compress_col_stmt</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <call><name>makeRangeVar</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>compress_ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
												   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>compress_ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
												   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecRenameStmt</name><argument_list>(<argument><expr><name>compress_col_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// update catalog entries for the renamed column for the hypertable</comment>
	<expr_stmt><expr><call><name>ts_hypertable_compression_rename_column</name><argument_list>(<argument><expr><name>orig_htid</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>newname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
