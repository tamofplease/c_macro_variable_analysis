<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/compression/dictionary.c">
<comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/tupmacs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_aggregate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;common/base64.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lib/stringinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/datum.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/typcache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/dictionary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/simple8b_rle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/dictionary_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/datum_serialize.h"</cpp:file></cpp:include>

<comment type="block">/*
 * A compression bitmap is stored as
 *     bool has_nulls
 *     padding
 *     Oid element_type: the element stored by this compressed dictionary
 *     uint32 num_distinct: the number of distinct values
 *     simple8b_rle dictionary indexes: array of mappings from row to index into dictionary items
 * ArrayCompressed simple8b_rle nulls (optional) ArrayCompressed dictionary items
 */</comment>
<typedef>typedef <type><struct>struct <name>DictionaryCompressed</name>
<block>{
	<expr_stmt><expr><name>CompressedDataHeaderFields</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>has_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name><name>padding</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>element_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>num_distinct</name></decl>;</decl_stmt>
	<comment type="block">/* 8-byte alignment sentinel for the following fields */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name><name>alignment_sentinel</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DictionaryCompressed</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pg_attribute_unused</name><parameter_list>()</parameter_list> assertions<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryCompressed</name></type> <name>test_val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>vl_len_</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
	<comment type="block">/* make sure no padding bytes make it to disk */</comment>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryCompressed</name></expr></argument>)</argument_list></sizeof> <operator>==</operator>
						 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>vl_len_</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>compression_algorithm</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
							 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>has_nulls</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>padding</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
							 <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>element_type</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_val</name><operator>.</operator><name>num_distinct</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"CompressedDictionary wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryCompressed</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"CompressedDictionary wrong size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>DictionaryDecompressionIterator</name>
<block>{
	<decl_stmt><decl><type><name>DecompressionIterator</name></type> <name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DictionaryCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressionIterator</name></type> <name>bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressionIterator</name></type> <name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line" format="doxygen">//////////////////</comment>
<comment type="line" format="doxygen">/// Compressor ///</comment>
<comment type="line" format="doxygen">//////////////////</comment>

<typedef>typedef <type><struct>struct <name>DictionaryCompressor</name>
<block>{
	<decl_stmt><decl><type><name>dictionary_hash</name> <modifier>*</modifier></type><name>dictionary_items</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>next_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>typlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>typbyval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>typalign</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>has_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleCompressor</name></type> <name>dictionary_indexes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleCompressor</name></type> <name>nulls</name></decl>;</decl_stmt>
}</block></struct></type> <name>DictionaryCompressor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ExtendedCompressor</name>
<block>{
	<decl_stmt><decl><type><name>Compressor</name></type> <name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>element_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>ExtendedCompressor</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dictionary_compressor_append_datum</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>dictionary_compressor_alloc</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>dictionary_compressor_append</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dictionary_compressor_append_null_value</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <call><name>dictionary_compressor_alloc</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>dictionary_compressor_append_null</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>dictionary_compressor_finish_and_reset</name><parameter_list>(<parameter><decl><type><name>Compressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>extended</name> <init>= <expr><operator>(</operator><name>ExtendedCompressor</name> <operator>*</operator><operator>)</operator> <name>compressor</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>compressed</name> <init>= <expr><call><name>dictionary_compressor_finish</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extended</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>compressed</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>Compressor</name></type> <name>dictionary_compressor</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>append_val</name> <operator>=</operator> <name>dictionary_compressor_append_datum</name></expr>,
	<expr><operator>.</operator><name>append_null</name> <operator>=</operator> <name>dictionary_compressor_append_null_value</name></expr>,
	<expr><operator>.</operator><name>finish</name> <operator>=</operator> <name>dictionary_compressor_finish_and_reset</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Compressor</name> <modifier>*</modifier></type>
<name>dictionary_compressor_for_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>compressor</name> <operator>=</operator> <operator>(</operator><name>ExtendedCompressor</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>base</name> <operator>=</operator> <name>dictionary_compressor</name></expr>,
		<expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>element_type</name></expr>,
	}</block></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DictionaryCompressor</name> <modifier>*</modifier></type>
<name>dictionary_compressor_alloc</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tentry</name> <init>=
		<expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>TYPECACHE_EQ_OPR_FINFO</name> <operator>|</operator> <name>TYPECACHE_HASH_PROC_FINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>next_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <name><name>tentry</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>typbyval</name></name> <operator>=</operator> <name><name>tentry</name><operator>-&gt;</operator><name>typbyval</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>typalign</name></name> <operator>=</operator> <name><name>tentry</name><operator>-&gt;</operator><name>typalign</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_items</name></name> <operator>=</operator> <call><name>dictionary_hash_alloc</name><argument_list>(<argument><expr><name>tentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>simple8brle_compressor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_indexes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>compressor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dictionary_compressor_append_null</name><parameter_list>(<parameter><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dictionary_compressor_append</name><parameter_list>(<parameter><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryHashItem</name> <modifier>*</modifier></type><name>dict_item</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>compressor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dict_item</name> <operator>=</operator> <call><name>dictionary_insert</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_items</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// per_val-&gt;bitmap = roaring_dictionary_create();</comment>
		<expr_stmt><expr><name><name>dict_item</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>compressor</name><operator>-&gt;</operator><name>next_index</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dict_item</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>, <argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compressor</name><operator>-&gt;</operator><name>next_index</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_indexes</name></name></expr></argument>, <argument><expr><name><name>dict_item</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_compressor_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DictionaryCompressorSerializationInfo</name>
<block>{
	<decl_stmt><decl><type><name>Size</name></type> <name>bitmaps_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>nulls_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>dictionary_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>total_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>num_distinct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>dictionary_compressed_indexes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>compressed_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>value_array</name></decl>;</decl_stmt> <comment type="block">/* same as dictionary_serialization_info just as a regular array */</comment>
	<decl_stmt><decl><type><name>ArrayCompressorSerializationInfo</name> <modifier>*</modifier></type><name>dictionary_serialization_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_all_null</name></decl>;</decl_stmt>
}</block></struct></type> <name>DictionaryCompressorSerializationInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>DictionaryCompressorSerializationInfo</name></type>
<name>compressor_get_serialization_info</name><parameter_list>(<parameter><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>dict_indexes</name> <init>=
		<expr><call><name>simple8brle_compressor_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_indexes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>nulls</name> <init>= <expr><call><name>simple8brle_compressor_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>compressor</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dictionary_iterator</name></type> <name>dictionary_item_iterator</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>array_comp</name> <init>= <expr><call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* the total size is header size + bitmaps size + nulls? + data sizesize */</comment>
	<decl_stmt><decl><type><name>DictionaryCompressorSerializationInfo</name></type> <name>sizes</name> <init>= <expr><block>{ <expr><operator>.</operator><name>dictionary_compressed_indexes</name> <operator>=</operator> <name>dict_indexes</name></expr>,
													<expr><operator>.</operator><name>compressed_nulls</name> <operator>=</operator> <name>nulls</name></expr>,
													<expr><operator>.</operator><name>value_array</name> <operator>=</operator> <macro><name>palloc</name><argument_list>(<argument>compressor-&gt;next_index *
																		  sizeof(Datum)</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>header_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryCompressed</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sizes</name><operator>.</operator><name>dictionary_compressed_indexes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>DictionaryCompressorSerializationInfo</name><operator>)</operator><block>{ <expr><operator>.</operator><name>is_all_null</name> <operator>=</operator> <name>true</name></expr> }</block></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>bitmaps_size</name></name> <operator>=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name>dict_indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>total_size</name></name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>header_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sizes</name><operator>.</operator><name>bitmaps_size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compressor</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>nulls_size</name></name> <operator>=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>total_size</name></name> <operator>+=</operator> <name><name>sizes</name><operator>.</operator><name>nulls_size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dictionary_start_iterate</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_items</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dictionary_item_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>num_distinct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>DictionaryHashItem</name> <modifier>*</modifier></type><name>dict_item</name> <init>=
			 <expr><call><name>dictionary_iterate</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_items</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dictionary_item_iterator</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>
		 <condition><expr><name>dict_item</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>dict_item</name> <operator>=</operator> <call><name>dictionary_iterate</name><argument_list>(<argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>dictionary_items</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dictionary_item_iterator</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>value_array</name><index>[<expr><name><name>dict_item</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name> <operator>=</operator> <name><name>dict_item</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>num_distinct</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sizes</name><operator>.</operator><name>num_distinct</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>array_compressor_append</name><argument_list>(<argument><expr><name>array_comp</name></expr></argument>, <argument><expr><name><name>sizes</name><operator>.</operator><name>value_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>dictionary_serialization_info</name></name> <operator>=</operator> <call><name>array_compressor_get_serialization_info</name><argument_list>(<argument><expr><name>array_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>dictionary_size</name></name> <operator>=</operator>
		<call><name>array_compression_serialization_size</name><argument_list>(<argument><expr><name><name>sizes</name><operator>.</operator><name>dictionary_serialization_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sizes</name><operator>.</operator><name>total_size</name></name> <operator>+=</operator> <name><name>sizes</name><operator>.</operator><name>dictionary_size</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocSizeIsValid</name><argument_list>(<argument><expr><name><name>sizes</name><operator>.</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"compressed size exceeds the maximum allowed (%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>MaxAllocSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>sizes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DictionaryCompressed</name> <modifier>*</modifier></type>
<name>dictionary_compressed_from_serialization_info</name><parameter_list>(<parameter><decl><type><name>DictionaryCompressorSerializationInfo</name></type> <name>sizes</name></decl></parameter>,
											  <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name><name>sizes</name><operator>.</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryCompressed</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>(</operator><name>DictionaryCompressed</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>vl_len_</name></name></expr></argument>, <argument><expr><name><name>sizes</name><operator>.</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_DICTIONARY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>element_type</name></name> <operator>=</operator> <name>element_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sizes</name><operator>.</operator><name>nulls_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitmap</name><operator>-&gt;</operator><name>num_distinct</name></name> <operator>=</operator> <name><name>sizes</name><operator>.</operator><name>num_distinct</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryCompressed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bytes_serialize_simple8b_and_advance</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
												<argument><expr><name><name>sizes</name><operator>.</operator><name>bitmaps_size</name></name></expr></argument>,
												<argument><expr><name><name>sizes</name><operator>.</operator><name>dictionary_compressed_indexes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bitmap</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bytes_serialize_simple8b_and_advance</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>sizes</name><operator>.</operator><name>nulls_size</name></name></expr></argument>, <argument><expr><name><name>sizes</name><operator>.</operator><name>compressed_nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>bytes_serialize_array_compressor_and_advance</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
														<argument><expr><name><name>sizes</name><operator>.</operator><name>dictionary_size</name></name></expr></argument>,
														<argument><expr><name><name>sizes</name><operator>.</operator><name>dictionary_serialization_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>bitmap</name><operator>)</operator> <operator>==</operator> <name><name>sizes</name><operator>.</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dictionary_decompression_iterator_init</name><parameter_list>(<parameter><decl><type><name>DictionaryDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
												   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>scan_forward</name></decl></parameter>,
												   <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* there are more efficient ways to do this that use
 * DictionaryCompressorSerializationInfo, but they are not worth implementing
 * yet
 */</comment>
<function><type><specifier>static</specifier> <name>ArrayCompressed</name> <modifier>*</modifier></type>
<name>dictionary_compressed_to_array_compressed</name><parameter_list>(<parameter><decl><type><name>DictionaryCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>= <expr><call><name>array_compressor_alloc</name><argument_list>(<argument><expr><name><name>compressed</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryDecompressionIterator</name></type> <name>iterator</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>dictionary_decompression_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>,
										   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>compressed</name></expr></argument>,
										   <argument><expr><name>true</name></expr></argument>,
										   <argument><expr><name><name>compressed</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>DecompressResult</name></type> <name>res</name> <init>= <expr><call><name>dictionary_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iterator</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</init>
		 <condition><expr><operator>!</operator><name><name>res</name><operator>.</operator><name>is_done</name></name></expr>;</condition>
		 <incr><expr><name>res</name> <operator>=</operator> <call><name>dictionary_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iterator</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>is_null</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>array_compressor_append_null</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>array_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name><name>res</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>array_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>dictionary_compressor_finish</name><parameter_list>(<parameter><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>average_element_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>expected_array_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryCompressed</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictionaryCompressorSerializationInfo</name></type> <name>sizes</name> <init>= <expr><call><name>compressor_get_serialization_info</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>sizes</name><operator>.</operator><name>is_all_null</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>!=</operator> <name><name>sizes</name><operator>.</operator><name>num_distinct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* calculate what the expected size would have be if we recompressed this as
	 * an array, if this is smaller than the current size, recompress as an array.
	 */</comment>
	<expr_stmt><expr><name>average_element_size</name> <operator>=</operator> <name><name>sizes</name><operator>.</operator><name>dictionary_size</name></name> <operator>/</operator> <name><name>sizes</name><operator>.</operator><name>num_distinct</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>expected_array_size</name> <operator>=</operator> <name>average_element_size</name> <operator>*</operator> <name><name>sizes</name><operator>.</operator><name>dictionary_compressed_indexes</name><operator>-&gt;</operator><name>num_elements</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>dictionary_compressed_from_serialization_info</name><argument_list>(<argument><expr><name>sizes</name></expr></argument>, <argument><expr><name><name>compressor</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>expected_array_size</name> <operator>&lt;</operator> <name><name>sizes</name><operator>.</operator><name>total_size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>dictionary_compressed_to_array_compressed</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>compressed</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">////////////////////</comment>
<comment type="line" format="doxygen">/// Decompressor ///</comment>
<comment type="line" format="doxygen">////////////////////</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dictionary_decompression_iterator_init</name><parameter_list>(<parameter><decl><type><name>DictionaryDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
									   <parameter><decl><type><name>bool</name></type> <name>scan_forward</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DictionaryCompressed</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>DictionaryCompressed</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>total_size</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>remaining_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>s8_bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>dictionary_iterator</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <operator>(</operator><name>DictionaryDecompressionIterator</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>base</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>compression_algorithm</name> <operator>=</operator> <name>COMPRESSION_ALGORITHM_DICTIONARY</name></expr>,
			<expr><operator>.</operator><name>forward</name> <operator>=</operator> <name>scan_forward</name></expr>,
			<expr><operator>.</operator><name>element_type</name> <operator>=</operator> <name>element_type</name></expr>,
			<expr><operator>.</operator><name>try_next</name> <operator>=</operator> <operator>(</operator><name>scan_forward</name> <operator>?</operator> <name>dictionary_decompression_iterator_try_next_forward</name> <operator>:</operator> <name>dictionary_decompression_iterator_try_next_reverse</name><operator>)</operator></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>compressed</name> <operator>=</operator> <name>bitmap</name></expr>,
		<expr><operator>.</operator><name>values</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>num_distinct</name></name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>has_nulls</name> <operator>=</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <literal type="number">1</literal></expr>,
	}</block></expr>;</expr_stmt>

	<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryCompressed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>s8_bitmap</name> <operator>=</operator> <call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>scan_forward</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>s8_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>s8_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleSerialized</name> <modifier>*</modifier></type><name>s8_null</name> <init>= <expr><call><name>bytes_deserialize_simple8b_and_advance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>scan_forward</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>s8_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>simple8brle_decompression_iterator_init_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>s8_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>remaining_size</name> <operator>=</operator> <name>total_size</name> <operator>-</operator> <operator>(</operator><name>data</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>bitmap</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>dictionary_iterator</name> <operator>=</operator> <call><name>array_decompression_iterator_alloc_forward</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
																	 <argument><expr><name>remaining_size</name></expr></argument>,
																	 <argument><expr><name><name>bitmap</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>,
																	 <comment type="block">/* has_nulls */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bitmap</name><operator>-&gt;</operator><name>num_distinct</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DecompressResult</name></type> <name>res</name> <init>= <expr><call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>dictionary_iterator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>res</name><operator>.</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>res</name><operator>.</operator><name>is_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>res</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>array_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><name>dictionary_iterator</name></expr></argument>)</argument_list></call><operator>.</operator><name>is_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>DecompressionIterator</name> <modifier>*</modifier></type>
<name>tsl_dictionary_decompression_iterator_from_datum_forward</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>dictionary_compressed</name></decl></parameter>,
														 <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryDecompressionIterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>dictionary_decompression_iterator_init</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>,
										   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>dictionary_compressed</name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><name>true</name></expr></argument>,
										   <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressionIterator</name> <modifier>*</modifier></type>
<name>tsl_dictionary_decompression_iterator_from_datum_reverse</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>dictionary_compressed</name></decl></parameter>,
														 <parameter><decl><type><name>Oid</name></type> <name>element_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryDecompressionIterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>dictionary_decompression_iterator_init</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>,
										   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>dictionary_compressed</name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><name>false</name></expr></argument>,
										   <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>iterator</name><operator>-&gt;</operator><name>base</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressResult</name></type>
<name>dictionary_decompression_iterator_try_next_forward</name><parameter_list>(<parameter><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter_base</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_DICTIONARY</name> <operator>&amp;&amp;</operator>
		   <name><name>iter_base</name><operator>-&gt;</operator><name>forward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>(</operator><name>DictionaryDecompressionIterator</name> <operator>*</operator><operator>)</operator> <name>iter_base</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>null</name> <init>=
			<expr><call><name>simple8brle_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>simple8brle_decompression_iterator_try_next_forward</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
		}</block></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>compressed</name><operator>-&gt;</operator><name>num_distinct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>val</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>result</name><operator>.</operator><name>val</name></name></expr>]</index></name></expr>,
		<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>false</name></expr>,
	}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>DecompressResult</name></type>
<name>dictionary_decompression_iterator_try_next_reverse</name><parameter_list>(<parameter><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iter_base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryDecompressionIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter_base</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_DICTIONARY</name> <operator>&amp;&amp;</operator>
		   <operator>!</operator><name><name>iter_base</name><operator>-&gt;</operator><name>forward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>(</operator><name>DictionaryDecompressionIterator</name> <operator>*</operator><operator>)</operator> <name>iter_base</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Simple8bRleDecompressResult</name></type> <name>null</name> <init>=
			<expr><call><name>simple8brle_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>null</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
				<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>,
			}</block></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>simple8brle_decompression_iterator_try_next_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>is_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>true</name></expr>,
		}</block></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>compressed</name><operator>-&gt;</operator><name>num_distinct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>DecompressResult</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>val</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>result</name><operator>.</operator><name>val</name></name></expr>]</index></name></expr>,
		<expr><operator>.</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>is_done</name> <operator>=</operator> <name>false</name></expr>,
	}</block></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">/////////////////////</comment>
<comment type="line" format="doxygen">/// SQL Functions ///</comment>
<comment type="line" format="doxygen">/////////////////////</comment>

<function><type><name>Datum</name></type>
<name>tsl_dictionary_compressor_append</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>=
		<expr><operator>(</operator><name>DictionaryCompressor</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>agg_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AggCheckCallContext</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg_context</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* cannot be called directly because of internal-type argument */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tsl_dictionary_compressor_append called in non-aggregate context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>agg_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>compressor</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>type_to_compress</name> <init>= <expr><call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>compressor</name> <operator>=</operator> <call><name>dictionary_compressor_alloc</name><argument_list>(<argument><expr><name>type_to_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dictionary_compressor_append_null</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dictionary_compressor_append</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>tsl_dictionary_compressor_finish</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryCompressor</name> <modifier>*</modifier></type><name>compressor</name> <init>=
		<expr><operator>(</operator><name>DictionaryCompressor</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>compressed</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressor</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name>dictionary_compressor_finish</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">/////////////////////</comment>
<comment type="line" format="doxygen">/// I/O Functions ///</comment>
<comment type="line" format="doxygen">/////////////////////</comment>

<function><type><name>void</name></type>
<name>dictionary_compressed_send</name><parameter_list>(<parameter><decl><type><name>CompressedDataHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>data_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DictionaryCompressed</name> <modifier>*</modifier></type><name>compressed_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressed_data</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>compression_algorithm</name></name> <operator>==</operator> <name>COMPRESSION_ALGORITHM_DICTIONARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_header</name> <operator>=</operator> <operator>(</operator><name>DictionaryCompressed</name> <operator>*</operator><operator>)</operator> <name>header</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>compressed_header</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>compressed_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>compressed_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>compressed_header</name><operator>-&gt;</operator><name>has_nulls</name></name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>type_append_to_binary_string</name><argument_list>(<argument><expr><name><name>compressed_header</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>simple8brle_serialized_send</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_data</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compressed_header</name><operator>-&gt;</operator><name>has_nulls</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>size</name> <init>= <expr><call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>simple8brle_serialized_send</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>compressed_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>compressed_data</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>array_compressed_data_send</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
							   <argument><expr><name>compressed_data</name></expr></argument>,
							   <argument><expr><name>data_size</name></expr></argument>,
							   <argument><expr><name><name>compressed_header</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>,
							   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>dictionary_compressed_recv</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictionaryCompressorSerializationInfo</name></type> <name>data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>has_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>element_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>has_nulls</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>has_nulls</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>has_nulls</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid recv in dict: bad bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>element_type</name> <operator>=</operator> <call><name>binary_string_get_type</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dictionary_compressed_indexes</name></name> <operator>=</operator> <call><name>simple8brle_serialized_recv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>bitmaps_size</name></name> <operator>=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>dictionary_compressed_indexes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>total_size</name></name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictionaryCompressed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>data</name><operator>.</operator><name>bitmaps_size</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>has_nulls</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>compressed_nulls</name></name> <operator>=</operator> <call><name>simple8brle_serialized_recv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>nulls_size</name></name> <operator>=</operator> <call><name>simple8brle_serialized_total_size</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>compressed_nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><operator>.</operator><name>total_size</name></name> <operator>+=</operator> <name><name>data</name><operator>.</operator><name>nulls_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dictionary_serialization_info</name></name> <operator>=</operator> <call><name>array_compressed_data_recv</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>dictionary_size</name></name> <operator>=</operator> <call><name>array_compression_serialization_size</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>dictionary_serialization_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>total_size</name></name> <operator>+=</operator> <name><name>data</name><operator>.</operator><name>dictionary_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>num_distinct</name></name> <operator>=</operator>
		<call><name>array_compression_serialization_num_elements</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>dictionary_serialization_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AllocSizeIsValid</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>total_size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"compressed size exceeds the maximum allowed (%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>MaxAllocSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>dictionary_compressed_from_serialization_info</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>element_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
