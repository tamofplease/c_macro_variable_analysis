<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/compression/api.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<comment type="block">/* This file contains the implementation for SQL utility functions that
 *  compress and decompress chunks
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/dependency.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/tablecmds.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/pg_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/parsenodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_func.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/elog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgrprotos.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq-fe.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;remote/dist_commands.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypercube.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/continuous_agg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/hypertable_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/compression_chunk_size.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan_iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>CompressChunkCxt</name>
<block>{
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>srcht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>srcht_chunk</name></decl>;</decl_stmt>		 <comment type="block">/* chunk from srcht */</comment>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name></decl>;</decl_stmt> <comment type="block">/*compressed table for srcht */</comment>
}</block></struct></type> <name>CompressChunkCxt</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compression_chunk_size_catalog_insert</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>src_chunk_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RelationSize</name> <modifier>*</modifier></type><name>src_size</name></decl></parameter>,
									  <parameter><decl><type><name>int32</name></type> <name>compress_chunk_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RelationSize</name> <modifier>*</modifier></type><name>compress_size</name></decl></parameter>,
									  <parameter><decl><type><name>int64</name></type> <name>rowcnt_pre_compression</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>rowcnt_post_compression</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_compression_chunk_size</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_compression_chunk_size</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>COMPRESSION_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>src_chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>compress_chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_heap_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>src_size</name><operator>-&gt;</operator><name>heap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_toast_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>src_size</name><operator>-&gt;</operator><name>toast_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_index_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>src_size</name><operator>-&gt;</operator><name>index_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_heap_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>compress_size</name><operator>-&gt;</operator><name>heap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_toast_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>compress_size</name><operator>-&gt;</operator><name>toast_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_index_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>compress_size</name><operator>-&gt;</operator><name>index_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_numrows_pre_compression</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>rowcnt_pre_compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_numrows_post_compression</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>rowcnt_post_compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_insert_values</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compression_chunk_size_catalog_update_merged</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>chunk_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RelationSize</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
											 <parameter><decl><type><name>int32</name></type> <name>merge_chunk_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RelationSize</name> <modifier>*</modifier></type><name>merge_size</name></decl></parameter>,
											 <parameter><decl><type><name>int64</name></type> <name>merge_rowcnt_pre_compression</name></decl></parameter>,
											 <parameter><decl><type><name>int64</name></type> <name>merge_rowcnt_post_compression</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>iterator</name> <init>=
		<expr><call><name>ts_scan_iterator_create</name><argument_list>(<argument><expr><name>COMPRESSION_CHUNK_SIZE</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>updated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>ctx</name><operator>.</operator><name>index</name></name> <operator>=</operator>
		<call><name>catalog_get_index</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>COMPRESSION_CHUNK_SIZE</name></expr></argument>, <argument><expr><name>COMPRESSION_CHUNK_SIZE_PKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>,
								   <argument><expr><name>Anum_compression_chunk_size_pkey_chunk_id</name></expr></argument>,
								   <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
								   <argument><expr><name>F_INT4EQ</name></expr></argument>,
								   <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>ts_scanner_foreach</name><argument_list>(<argument>&amp;iterator</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_compression_chunk_size</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>replIsnull</name><index>[<expr><name>Natts_compression_chunk_size</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>repl</name><index>[<expr><name>Natts_compression_chunk_size</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><call><name>ts_scan_iterator_tuple_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ts_scanner_fetch_heap_tuple</name><argument_list>(<argument><expr><name>ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>new_tuple</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><call><name>ts_scanner_get_tupledesc</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>replIsnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Increment existing sizes with sizes from uncompressed chunk. */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_heap_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>size</name><operator>-&gt;</operator><name>heap_size</name></name> <operator>+</operator>
						  <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(
							  <argument><expr><name>Anum_compression_chunk_size_uncompressed_heap_size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_heap_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_toast_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>size</name><operator>-&gt;</operator><name>toast_size</name></name> <operator>+</operator>
						  <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(
							  <argument><expr><name>Anum_compression_chunk_size_uncompressed_toast_size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_toast_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_index_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>size</name><operator>-&gt;</operator><name>index_size</name></name> <operator>+</operator>
						  <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(
							  <argument><expr><name>Anum_compression_chunk_size_uncompressed_index_size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_uncompressed_index_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_heap_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>merge_size</name><operator>-&gt;</operator><name>heap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_heap_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_toast_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>merge_size</name><operator>-&gt;</operator><name>toast_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_toast_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_index_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>merge_size</name><operator>-&gt;</operator><name>index_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_compressed_index_size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_numrows_pre_compression</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>merge_rowcnt_pre_compression</name> <operator>+</operator>
						  <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(
							  <argument><expr><name>Anum_compression_chunk_size_numrows_pre_compression</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_numrows_pre_compression</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_numrows_post_compression</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>merge_rowcnt_post_compression</name> <operator>+</operator>
						  <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(
							  <argument><expr><name>Anum_compression_chunk_size_numrows_post_compression</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>repl</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_compression_chunk_size_numrows_post_compression</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>new_tuple</name> <operator>=</operator>
			<call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><call><name>ts_scanner_get_tupledesc</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>replIsnull</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_catalog_update</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ts_scan_iterator_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>updated</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_hypertable_or_cagg_name</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>objname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ContinuousAggHypertableStatus</name></type> <name>status</name> <init>= <expr><call><name>ts_continuous_agg_hypertable_status</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>HypertableIsNotContinuousAgg</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>HypertableIsRawTable</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><name>objname</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>HypertableIsMaterialization</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name> <init>= <expr><call><name>ts_continuous_agg_find_by_mat_hypertable_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><name>objname</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>user_view_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected hypertable status for %s %d"</literal></expr></argument>,
						<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compresschunkcxt_init</name><parameter_list>(<parameter><decl><type><name>CompressChunkCxt</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>hypertable_relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>srcht</name> <init>= <expr><call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name>hypertable_relid</name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compress_ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>srcchunk</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_hypertable_permissions_check</name><argument_list>(<argument><expr><name><name>srcht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>srcht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NameData</name></type> <name>cagg_ht_name</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>get_hypertable_or_cagg_name</name><argument_list>(<argument><expr><name>srcht</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cagg_ht_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"compression not enabled on \"%s\""</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name>cagg_ht_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"It is not possible to compress chunks on a hypertable or"</literal>
						   <literal type="string">" continuous aggregate that does not have compression enabled."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Enable compression using ALTER TABLE/MATERIALIZED VIEW with"</literal>
						 <literal type="string">" the timescaledb.compress option."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>compress_ht</name> <operator>=</operator> <call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>srcht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>compress_ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing compress hypertable"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* user has to be the owner of the compression table too */</comment>
	<expr_stmt><expr><call><name>ts_hypertable_permissions_check</name><argument_list>(<argument><expr><name><name>compress_ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>srcht</name><operator>-&gt;</operator><name>space</name></name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* something is wrong */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing hyperspace for hypertable"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* refetch the srcchunk with all attributes filled in */</comment>
	<expr_stmt><expr><name>srcchunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_chunk_validate_chunk_status_for_operation</name><argument_list>(<argument><expr><name><name>srcchunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
												 <argument><expr><name><name>srcchunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>status</name></name></expr></argument>,
												 <argument><expr><name>CHUNK_COMPRESS</name></expr></argument>,
												 <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>srcht</name></name> <operator>=</operator> <name>srcht</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>compress_ht</name></name> <operator>=</operator> <name>compress_ht</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cxt</name><operator>-&gt;</operator><name>srcht_chunk</name></name> <operator>=</operator> <name>srcchunk</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disable_autovacuum_on_chunk</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTableCmd</name></type> <name>at_cmd</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_AlterTableCmd</name></expr>,
		<expr><operator>.</operator><name>subtype</name> <operator>=</operator> <name>AT_SetRelOptions</name></expr>,
		<expr><operator>.</operator><name>def</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>list_make1</name><argument_list>(
			<argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"autovacuum_enabled"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ts_alter_table_with_event_trigger</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>at_cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function is intended to undo the disabling of autovacuum done when we compressed a chunk.
 * Note that we do not cache the previous value for this (as we don't expect users to toggle this
 * for individual chunks), so we use the hypertable's setting to determine whether to enable this on
 * the decompressed chunk.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>restore_autovacuum_on_decompress</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>uncompressed_hypertable_relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>uncompressed_chunk_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>tablerel</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>uncompressed_hypertable_relid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ht_autovac_enabled</name> <init>=
		<expr><ternary><condition><expr><name><name>tablerel</name><operator>-&gt;</operator><name>rd_options</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>StdRdOptions</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>tablerel</name><operator>)</operator><operator>-&gt;</operator><name>rd_options</name><operator>)</operator><operator>-&gt;</operator><name><name>autovacuum</name><operator>.</operator><name>enabled</name></name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>tablerel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ht_autovac_enabled</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AlterTableCmd</name></type> <name>at_cmd</name> <init>= <expr><block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_AlterTableCmd</name></expr>,
			<expr><operator>.</operator><name>subtype</name> <operator>=</operator> <name>AT_SetRelOptions</name></expr>,
			<expr><operator>.</operator><name>def</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>list_make1</name><argument_list>(
				<argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"autovacuum_enabled"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
		}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ts_alter_table_with_event_trigger</name><argument_list>(<argument><expr><name>uncompressed_chunk_relid</name></expr></argument>,
										  <argument><expr><name>NULL</name></expr></argument>,
										  <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>at_cmd</name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Chunk</name> <modifier>*</modifier></type>
<name>find_chunk_to_merge_into</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>current_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>max_chunk_interval</name></decl>, <decl><type ref="prev"/><name>current_chunk_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>compressed_chunk_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>previous_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>time_dim</name> <init>= <expr><call><name>hyperspace_get_open_dimension</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>time_dim</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compress_interval_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>==</operator> <name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>max_chunk_interval</name> <operator>=</operator> <name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compress_interval_length</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ts_point_create</name><argument_list>(<argument><expr><name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>num_slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First coordinate is the time coordinates and we want it to fall into previous chunk
	 * hence we reduce it by 1
	 */</comment>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coordinates</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>num_coords</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>current_chunk_interval</name> <operator>=</operator> <name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>-</operator>
							 <name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_start</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>num_coords</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>num_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coordinates</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>num_coords</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_start</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>previous_chunk</name> <operator>=</operator> <call><name>ts_hypertable_find_chunk_for_point</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If there is no previous adjacent chunk along the time dimension or
	 * if it hasn't been compressed yet, we can't merge.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>previous_chunk</name> <operator>||</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>previous_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>previous_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>previous_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>==</operator> <name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_chunk_interval</name> <operator>=</operator> <name><name>previous_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>-</operator>
								<name><name>previous_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_start</name></name></expr>;</expr_stmt>

	<comment type="block">/* If the slices do not match (except on time dimension), we cannot merge the chunks. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>previous_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>!=</operator> <name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>num_slices</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>previous_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>num_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>previous_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name><name>current_chunk</name><operator>-&gt;</operator><name>cube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>id</name></name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* If the compressed chunk is full, we can't merge any more. */</comment>
	<if_stmt><if>if <condition>(<expr><name>compressed_chunk_interval</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<name>compressed_chunk_interval</name> <operator>+</operator> <name>current_chunk_interval</name> <operator>&gt;</operator> <name>max_chunk_interval</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>previous_chunk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if compression order is violated by merging in a new chunk
 * Because data merged in uses higher sequence numbers than any data already in the chunk,
 * the only way the order is guaranteed can be if we know the data we are merging in would come
 * after the existing data according to the compression order. This is true if the data being merged
 * in has timestamps greater than the existing data and the first column in the order by is time
 * ASC.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_is_chunk_order_violated_by_merge</name><parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>time_dim</name></decl></parameter>, <parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>mergable_chunk</name></decl></parameter>, <parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>compressed_chunk</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>FormData_hypertable_compression</name> <modifier>*</modifier><modifier>*</modifier></type><name>column_compression_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_compression_infos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>mergable_slice</name> <init>=
		<expr><call><name>ts_hypercube_get_slice_by_dimension_id</name><argument_list>(<argument><expr><name><name>mergable_chunk</name><operator>-&gt;</operator><name>cube</name></name></expr></argument>, <argument><expr><name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mergable_slice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"mergable chunk has no time dimension slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>compressed_slice</name> <init>=
		<expr><call><name>ts_hypercube_get_slice_by_dimension_id</name><argument_list>(<argument><expr><name><name>compressed_chunk</name><operator>-&gt;</operator><name>cube</name></name></expr></argument>, <argument><expr><name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compressed_slice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"compressed chunk has no time dimension slice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mergable_slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>&gt;</operator> <name><name>compressed_slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>&amp;&amp;</operator>
		<name><name>mergable_slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>&gt;</operator> <name><name>compressed_slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_compression_infos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>column_compression_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>orderby_column_index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>column_compression_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>orderby_asc</name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>get_attnum</name><argument_list>(<argument><expr><name><name>time_dim</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>,
						   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>column_compression_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>attname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>time_dim</name><operator>-&gt;</operator><name>column_attno</name></name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>compress_chunk_impl</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>hypertable_relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>result_chunk_id</name> <init>= <expr><name>chunk_relid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CompressChunkCxt</name></type> <name>cxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>compress_ht_chunk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mergable_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>htcols_list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ColumnCompressionInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>colinfo_array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>htcols_listlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelationSize</name></type> <name>before_size</name></decl>, <decl><type ref="prev"/><name>after_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CompressionStats</name></type> <name>cstat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>new_compressed_chunk</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>hcache</name> <operator>=</operator> <call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>compresschunkcxt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>hcache</name></expr></argument>, <argument><expr><name>hypertable_relid</name></expr></argument>, <argument><expr><name>chunk_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* acquire locks on src and compress hypertable and src chunk */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>compress_ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>ShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Disabling autovacuum on chunk which should be empty while in compressed state */</comment>
	<expr_stmt><expr><call><name>disable_autovacuum_on_chunk</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* acquire locks on catalog tables to keep till end of txn */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HYPERTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHUNK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DEBUG_WAITPOINT</name><argument_list>(<argument><expr><literal type="string">"compress_chunk_impl_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Re-read the state of the chunk after all locks have been acquired and ensure
	 * it is still uncompressed. Another process running in parallel might have
	 * already performed the compression while we were waiting for the locks to be
	 * acquired.
	 */</comment>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk_state_after_lock</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Throw error if chunk has invalid status for operation */</comment>
	<expr_stmt><expr><call><name>ts_chunk_validate_chunk_status_for_operation</name><argument_list>(<argument><expr><name><name>chunk_state_after_lock</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
												 <argument><expr><name><name>chunk_state_after_lock</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>status</name></name></expr></argument>,
												 <argument><expr><name>CHUNK_COMPRESS</name></expr></argument>,
												 <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get compression properties for hypertable */</comment>
	<expr_stmt><expr><name>htcols_list</name> <operator>=</operator> <call><name>ts_hypertable_compression_get</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>htcols_listlen</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>htcols_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mergable_chunk</name> <operator>=</operator> <call><name>find_chunk_to_merge_into</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht</name></name></expr></argument>, <argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mergable_chunk</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* create compressed chunk and a new table */</comment>
		<expr_stmt><expr><name>compress_ht_chunk</name> <operator>=</operator> <call><name>create_compress_chunk</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>compress_ht</name></name></expr></argument>, <argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>new_compressed_chunk</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* use an existing compressed chunk to compress into */</comment>
		<expr_stmt><expr><name>compress_ht_chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_id</name><argument_list>(<argument><expr><name><name>mergable_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result_chunk_id</name> <operator>=</operator> <name><name>mergable_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* convert list to array of pointers for compress_chunk */</comment>
	<expr_stmt><expr><name>colinfo_array</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ColumnCompressionInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>htcols_listlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>htcols_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><operator>(</operator><name>FormData_hypertable_compression</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>colinfo_array</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name>before_size</name> <operator>=</operator> <call><name>ts_relation_size_impl</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cstat</name> <operator>=</operator> <call><name>compress_chunk</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
						   <argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
						   <argument><expr><name>colinfo_array</name></expr></argument>,
						   <argument><expr><name>htcols_listlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Drop all FK constraints on the uncompressed chunk. This is needed to allow
	 * cascading deleted data in FK-referenced tables, while blocking deleting data
	 * directly on the hypertable or chunks.
	 */</comment>
	<expr_stmt><expr><call><name>ts_chunk_drop_fks</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>after_size</name> <operator>=</operator> <call><name>ts_relation_size_impl</name><argument_list>(<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>new_compressed_chunk</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>compression_chunk_size_catalog_insert</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>before_size</name></expr></argument>,
											  <argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>after_size</name></expr></argument>,
											  <argument><expr><name><name>cstat</name><operator>.</operator><name>rowcnt_pre_compression</name></name></expr></argument>,
											  <argument><expr><name><name>cstat</name><operator>.</operator><name>rowcnt_post_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Copy chunk constraints (including fkey) to compressed chunk.
		 * Do this after compressing the chunk to avoid holding strong, unnecessary locks on the
		 * referenced table during compression.
		 */</comment>
		<expr_stmt><expr><call><name>ts_chunk_constraints_create</name><argument_list>(<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>constraints</name></name></expr></argument>,
									<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
									<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
									<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
									<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_trigger_create_all_on_chunk</name><argument_list>(<argument><expr><name>compress_ht_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_chunk_set_compressed_chunk</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>, <argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>compression_chunk_size_catalog_update_merged</name><argument_list>(<argument><expr><name><name>mergable_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>before_size</name></expr></argument>,
													 <argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>after_size</name></expr></argument>,
													 <argument><expr><name><name>cstat</name><operator>.</operator><name>rowcnt_pre_compression</name></name></expr></argument>,
													 <argument><expr><name><name>cstat</name><operator>.</operator><name>rowcnt_post_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>time_dim</name> <init>= <expr><call><name>hyperspace_get_open_dimension</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>time_dim</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>chunk_unordered</name> <init>= <expr><call><name>check_is_chunk_order_violated_by_merge</name><argument_list>(<argument><expr><name>time_dim</name></expr></argument>,
																	  <argument><expr><name>mergable_chunk</name></expr></argument>,
																	  <argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>,
																	  <argument><expr><name>colinfo_array</name></expr></argument>,
																	  <argument><expr><name>htcols_listlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>merge_chunk_relstats</name><argument_list>(<argument><expr><name><name>mergable_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_chunk_merge_on_dimension</name><argument_list>(<argument><expr><name>mergable_chunk</name></expr></argument>, <argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>, <argument><expr><name><name>time_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>chunk_unordered</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ts_chunk_set_unordered</name><argument_list>(<argument><expr><name>mergable_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tsl_recompress_chunk_wrapper</name><argument_list>(<argument><expr><name>mergable_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result_chunk_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>decompress_chunk_impl</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>uncompressed_hypertable_relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>uncompressed_chunk_relid</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name></type> <name>if_compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>uncompressed_hypertable</name> <init>=
		<expr><call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name>uncompressed_hypertable_relid</name></expr></argument>,
												<argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>compressed_hypertable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>uncompressed_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>compressed_chunk</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_hypertable_permissions_check</name><argument_list>(<argument><expr><name><name>uncompressed_hypertable</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_hypertable</name> <operator>=</operator>
		<call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>uncompressed_hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>compressed_hypertable</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing compressed hypertable"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>uncompressed_chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>uncompressed_chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>uncompressed_chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"table \"%s\" is not a chunk"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>uncompressed_chunk_relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name> <operator>!=</operator> <name><name>uncompressed_hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"hypertable and chunk do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_id</name></name> <operator>==</operator> <name>INVALID_CHUNK_ID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>if_compressed</name></expr> ?</condition><then> <expr><name>NOTICE</name></expr> </then><else>: <expr><name>ERROR</name></expr></else></ternary><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk \"%s\" is not compressed"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>uncompressed_chunk_relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_chunk_validate_chunk_status_for_operation</name><argument_list>(<argument><expr><name>uncompressed_chunk_relid</name></expr></argument>,
												 <argument><expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>status</name></name></expr></argument>,
												 <argument><expr><name>CHUNK_DECOMPRESS</name></expr></argument>,
												 <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compressed_chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_id</name><argument_list>(<argument><expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* acquire locks on src and compress hypertable and src chunk */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>uncompressed_hypertable</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>compressed_hypertable</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Acquire an ExclusiveLock on the uncompressed and the compressed
	 * chunk (the chunks can still be accessed by reads).
	 *
	 * The lock on the compressed chunk is needed because it gets deleted
	 * after decompression. The lock on the uncompressed chunk is needed
	 * to avoid deadlocks (e.g., caused by later lock upgrades or parallel
	 * started chunk compressions).
	 *
	 * Note: Also the function decompress_chunk() will request an
	 *       ExclusiveLock on the compressed and on the uncompressed
	 *       chunk. See the comments in function about the concurrency of
	 *       operations.
	 */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>compressed_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* acquire locks on catalog tables to keep till end of txn */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HYPERTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHUNK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DEBUG_WAITPOINT</name><argument_list>(<argument><expr><literal type="string">"decompress_chunk_impl_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Re-read the state of the chunk after all locks have been acquired and ensure
	 * it is still compressed. Another process running in parallel might have
	 * already performed the decompression while we were waiting for the locks to be
	 * acquired.
	 */</comment>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk_state_after_lock</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>uncompressed_chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Throw error if chunk has invalid status for operation */</comment>
	<expr_stmt><expr><call><name>ts_chunk_validate_chunk_status_for_operation</name><argument_list>(<argument><expr><name><name>chunk_state_after_lock</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
												 <argument><expr><name><name>chunk_state_after_lock</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>status</name></name></expr></argument>,
												 <argument><expr><name>CHUNK_DECOMPRESS</name></expr></argument>,
												 <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>decompress_chunk</name><argument_list>(<argument><expr><name><name>compressed_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Recreate FK constraints, since they were dropped during compression. */</comment>
	<expr_stmt><expr><call><name>ts_chunk_create_fks</name><argument_list>(<argument><expr><name>uncompressed_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Delete the compressed chunk */</comment>
	<expr_stmt><expr><call><name>ts_compression_chunk_size_delete</name><argument_list>(<argument><expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_chunk_clear_compressed_chunk</name><argument_list>(<argument><expr><name>uncompressed_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Lock the compressed chunk that is going to be deleted. At this point,
	 * the reference to the compressed chunk is already removed from the
	 * catalog. So, new readers do not include it in their operations.
	 *
	 * Note: Calling performMultipleDeletions in chunk_index_tuple_delete
	 * also requests an AccessExclusiveLock on the compressed_chunk. However,
	 * this call makes the lock on the chunk explicit.
	 */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>compressed_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_chunk_drop</name><argument_list>(<argument><expr><name>compressed_chunk</name></expr></argument>, <argument><expr><name>DROP_RESTRICT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reenable autovacuum if necessary */</comment>
	<expr_stmt><expr><call><name>restore_autovacuum_on_decompress</name><argument_list>(<argument><expr><name>uncompressed_hypertable_relid</name></expr></argument>, <argument><expr><name>uncompressed_chunk_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set if_not_compressed to true for idempotent operation. Aborts transaction if the chunk is
 * already compressed, unless it is running in idempotent mode.
 */</comment>

<function><type><name>Oid</name></type>
<name>tsl_compress_chunk_wrapper</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_not_compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_id</name></name> <operator>!=</operator> <name>INVALID_CHUNK_ID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>if_not_compressed</name></expr> ?</condition><then> <expr><name>NOTICE</name></expr> </then><else>: <expr><name>ERROR</name></expr></else></ternary><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk \"%s\" is already compressed"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>compress_chunk_impl</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper for remote invocation of chunk compression and decompression.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>invoke_compression_func_remotely</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>datanodes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>distres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull_result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_FOREIGN_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_nodes</name></name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>datanodes</name> <operator>=</operator> <call><name>ts_chunk_get_data_node_name_list</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>distres</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_func_call_on_data_nodes</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>datanodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ts_dist_cmd_response_count</name><argument_list>(<argument><expr><name>distres</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name> <name>PG_USED_FOR_ASSERTS_ONLY</name></type> <name>d</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ts_dist_cmd_get_single_scalar_result_by_index</name><argument_list>(<argument><expr><name>distres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Make sure data nodes either (1) all return NULL, or (2) all return
		 * a non-null result. */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>isnull_result</name> <operator>!=</operator> <name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"inconsistent result from data node \"%s\""</literal></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>isnull_result</name> <operator>=</operator> <name>isnull</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>distres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>!</operator><name>isnull_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>compress_remote_chunk</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_not_compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>invoke_compression_func_remotely</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>if_not_compressed</name></expr> ?</condition><then> <expr><name>NOTICE</name></expr> </then><else>: <expr><name>ERROR</name></expr></else></ternary><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk \"%s\" is already compressed"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>decompress_remote_chunk</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>invoke_compression_func_remotely</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>if_compressed</name></expr> ?</condition><then> <expr><name>NOTICE</name></expr> </then><else>: <expr><name>ERROR</name></expr></else></ternary><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk \"%s\" is not compressed"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a new compressed chunk using existing table with compressed data.
 *
 * chunk_relid - non-compressed chunk relid
 * chunk_table - table containing compressed data
 */</comment>
<function><type><name>Datum</name></type>
<name>tsl_create_compressed_chunk</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>chunk_relid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>chunk_table</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelationSize</name></type> <name>uncompressed_size</name> <init>= <expr><block>{ <expr><operator>.</operator><name>heap_size</name> <operator>=</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
									   <expr><operator>.</operator><name>toast_size</name> <operator>=</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>,
									   <expr><operator>.</operator><name>index_size</name> <operator>=</operator> <macro><name>PG_GETARG_INT64</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelationSize</name></type> <name>compressed_size</name> <init>= <expr><block>{ <expr><operator>.</operator><name>heap_size</name> <operator>=</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,
									 <expr><operator>.</operator><name>toast_size</name> <operator>=</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
									 <expr><operator>.</operator><name>index_size</name> <operator>=</operator> <macro><name>PG_GETARG_INT64</name><argument_list>(<argument><literal type="number">7</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>numrows_pre_compression</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>numrows_post_compression</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>compress_ht_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CompressChunkCxt</name></type> <name>cxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TS_PREVENT_FUNC_IF_READ_ONLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hcache</name> <operator>=</operator> <call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>compresschunkcxt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>hcache</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>, <argument><expr><name>chunk_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Acquire locks on src and compress hypertable and src chunk */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>compress_ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>ShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Aquire locks on catalog tables to keep till end of txn */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HYPERTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHUNK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create compressed chunk using existing table */</comment>
	<expr_stmt><expr><name>compress_ht_chunk</name> <operator>=</operator> <call><name>create_compress_chunk</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>compress_ht</name></name></expr></argument>, <argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>, <argument><expr><name>chunk_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Copy chunk constraints (including fkey) to compressed chunk */</comment>
	<expr_stmt><expr><call><name>ts_chunk_constraints_create</name><argument_list>(<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>constraints</name></name></expr></argument>,
								<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>,
								<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
								<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
								<argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_trigger_create_all_on_chunk</name><argument_list>(<argument><expr><name>compress_ht_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Drop all FK constraints on the uncompressed chunk. This is needed to allow
	 * cascading deleted data in FK-referenced tables, while blocking deleting data
	 * directly on the hypertable or chunks.
	 */</comment>
	<expr_stmt><expr><call><name>ts_chunk_drop_fks</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Insert empty stats to compression_chunk_size */</comment>
	<expr_stmt><expr><call><name>compression_chunk_size_catalog_insert</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name>uncompressed_size</name></expr></argument>,
										  <argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name>compressed_size</name></expr></argument>,
										  <argument><expr><name>numrows_pre_compression</name></expr></argument>,
										  <argument><expr><name>numrows_post_compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_chunk_set_compressed_chunk</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>srcht_chunk</name></name></expr></argument>, <argument><expr><name><name>compress_ht_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_OID</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>tsl_compress_chunk</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>uncompressed_chunk_id</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>InvalidOid</name></expr> </then><else>: <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>if_not_compressed</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TS_PREVENT_FUNC_IF_READ_ONLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>uncompressed_chunk_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_FOREIGN_TABLE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* chunks of distributed hypertables are foreign tables */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compress_remote_chunk</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>if_not_compressed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Updating the chunk compression status of the Access Node AFTER executing remote
		 * compression. In the event of failure, the compressed status will NOT be set. The
		 * distributed compression policy will attempt to compress again, which is idempotent, thus
		 * the metadata are eventually consistent.
		 */</comment>
		<expr_stmt><expr><call><name>ts_chunk_set_compressed_chunk</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>INVALID_CHUNK_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>uncompressed_chunk_id</name> <operator>=</operator> <call><name>tsl_compress_chunk_wrapper</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>if_not_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_OID</name><argument_list>(<argument><expr><name>uncompressed_chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>tsl_decompress_chunk</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>uncompressed_chunk_id</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>InvalidOid</name></expr> </then><else>: <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>if_compressed</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TS_PREVENT_FUNC_IF_READ_ONLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>uncompressed_chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>uncompressed_chunk_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>uncompressed_chunk</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown chunk id %d"</literal></expr></argument>, <argument><expr><name>uncompressed_chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_FOREIGN_TABLE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Updating the chunk compression status of the Access Node BEFORE executing remote
		 * decompression. In the event of failure, the compressed status will be cleared. The
		 * distributed compression policy will attempt to compress again, which is idempotent, thus
		 * the metadata are eventually consistent.
		 * If CHUNK_STATUS_COMPRESSED is cleared, then it is probable that a remote compress_chunk()
		 * has not taken place, but not certain. For this above reason, this flag should not be
		 * assumed to be consistent (when it is cleared) for Access-Nodes. When used in distributed
		 * hypertables one should take advantage of the idempotent properties of remote
		 * compress_chunk() and distributed compression policy to make progress.
		 */</comment>
		<expr_stmt><expr><call><name>ts_chunk_clear_compressed_chunk</name><argument_list>(<argument><expr><name>uncompressed_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decompress_remote_chunk</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>uncompressed_chunk</name></expr></argument>, <argument><expr><name>if_compressed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_OID</name><argument_list>(<argument><expr><name>uncompressed_chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decompress_chunk_impl</name><argument_list>(<argument><expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
							   <argument><expr><name>uncompressed_chunk_id</name></expr></argument>,
							   <argument><expr><name>if_compressed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_OID</name><argument_list>(<argument><expr><name>uncompressed_chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>tsl_recompress_chunk_wrapper</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>uncompressed_chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>uncompressed_chunk_relid</name> <init>= <expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ts_chunk_is_unordered</name><argument_list>(<argument><expr><name>uncompressed_chunk</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decompress_chunk_impl</name><argument_list>(<argument><expr><name><name>uncompressed_chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
								   <argument><expr><name>uncompressed_chunk_relid</name></expr></argument>,
								   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>uncompressed_chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_chunk_is_compressed</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsl_compress_chunk_wrapper</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
