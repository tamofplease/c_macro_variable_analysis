<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/compression/datum_serialize.c">
<comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/sortsupport.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/typcache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/datum.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/tupmacs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq/pqformat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datum_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DatumSerializer</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>type_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>type_by_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>type_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>type_align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>type_storage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>type_send</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>type_out</name></decl>;</decl_stmt>

	<comment type="block">/* lazy load */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>send_info_set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type> <name>send_flinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>use_binary_send</name></decl>;</decl_stmt>
}</block></struct></type> <name>DatumSerializer</name>;</typedef>

<function><type><name>DatumSerializer</name> <modifier>*</modifier></type>
<name>create_datum_serializer</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* we use the syscache and not the type cache here b/c we need the
	 * send/recv in/out functions that aren't in type cache */</comment>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>DatumSerializer</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>type_oid</name> <operator>=</operator> <name>type_oid</name></expr>,
		<expr><operator>.</operator><name>type_by_val</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typbyval</name></name></expr>,
		<expr><operator>.</operator><name>type_len</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typlen</name></name></expr>,
		<expr><operator>.</operator><name>type_align</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typalign</name></name></expr>,
		<expr><operator>.</operator><name>type_storage</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typstorage</name></name></expr>,
		<expr><operator>.</operator><name>type_send</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typsend</name></name></expr>,
		<expr><operator>.</operator><name>type_out</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typoutput</name></name></expr>,
		<expr><operator>.</operator><name>use_binary_send</name> <operator>=</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>typsend</name></name></expr></argument>)</argument_list></call></expr>,
	}</block></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>datum_serializer_value_may_be_toasted</name><parameter_list>(<parameter><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>serializer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>load_send_fn</name><parameter_list>(<parameter><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>ser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>send_info_set</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ser</name><operator>-&gt;</operator><name>send_info_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ser</name><operator>-&gt;</operator><name>use_binary_send</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name><name>ser</name><operator>-&gt;</operator><name>type_send</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ser</name><operator>-&gt;</operator><name>send_flinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name><name>ser</name><operator>-&gt;</operator><name>type_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ser</name><operator>-&gt;</operator><name>send_flinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_IS_PACKABLE</name><parameter_list>(<parameter><type><name>typlen</name></type></parameter>, <parameter><type><name>typstorage</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((typlen) == -1 &amp;&amp; (typstorage) != 'p')</cpp:value></cpp:define>

<comment type="block">/* Inspired by datum_compute_size in rangetypes.c */</comment>
<function><type><name>Size</name></type>
<name>datum_get_bytes_size</name><parameter_list>(<parameter><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>serializer</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>start_offset</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>data_length</name> <init>= <expr><name>start_offset</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* varlena */</comment>
		<decl_stmt><decl><type><name>Pointer</name></type> <name>ptr</name> <init>= <expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Throw error, because we should never get a toasted datum.
			 * Caller should have detoasted it.
			 */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"datum should be detoasted before passed to datum_get_bytes_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TYPE_IS_PACKABLE</name><argument_list>(<argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_storage</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>VARATT_CAN_MAKE_SHORT</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * we're anticipating converting to a short varlena header, so adjust
		 * length and don't count any alignment (the case where the Datum is already
		 * in short format is handled by att_align_datum)
		 */</comment>
		<expr_stmt><expr><name>data_length</name> <operator>+=</operator> <call><name>VARATT_CONVERTED_SHORT_SIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>data_length</name> <operator>=</operator>
			<call><name>att_align_datum</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_align</name></name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>att_addlength_datum</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>data_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BinaryStringEncoding</name></type>
<name>datum_serializer_binary_string_encoding</name><parameter_list>(<parameter><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>serializer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>serializer</name><operator>-&gt;</operator><name>use_binary_send</name></name></expr> ?</condition><then> <expr><name>BINARY_ENCODING</name></expr> </then><else>: <expr><name>TEXT_ENCODING</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_allowed_data_len</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>data_length</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&lt;</operator> <name>data_length</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"trying to serialize more data than was allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>align_and_zero</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type_align</name></decl></parameter>, <parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_pos</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>type_align</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_pos</name> <operator>!=</operator> <name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type> <name>padding</name> <init>= <expr><name>new_pos</name> <operator>-</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>check_allowed_data_len</name><argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><operator>*</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>max_size</name> <operator>=</operator> <operator>*</operator><name>max_size</name> <operator>-</operator> <name>padding</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>new_pos</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Inspired by datum_write in rangetypes.c. This reduces the max_size by the data length before
 * exiting */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>datum_to_bytes_and_advance</name><parameter_list>(<parameter><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>serializer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>max_size</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>data_length</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>serializer</name><operator>-&gt;</operator><name>type_by_val</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* pass-by-value */</comment>
		<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>align_and_zero</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_align</name></name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_length</name> <operator>=</operator> <name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check_allowed_data_len</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><operator>*</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>store_att_byval</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* varlena */</comment>
		<decl_stmt><decl><type><name>Pointer</name></type> <name>val</name> <init>= <expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Throw error, because we should never get a toast datum.
			 *  Caller should have detoasted it.
			 */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"datum should be detoasted before passed to datum_to_bytes_and_advance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* keep compiler quiet */</comment>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_SHORT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* no alignment for short varlenas */</comment>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>VARSIZE_SHORT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>check_allowed_data_len</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><operator>*</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TYPE_IS_PACKABLE</name><argument_list>(<argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_storage</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				 <call><name>VARATT_CAN_MAKE_SHORT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* convert to short varlena -- no alignment */</comment>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>VARATT_CONVERTED_SHORT_SIZE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>check_allowed_data_len</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><operator>*</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_VARSIZE_SHORT</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* full 4-byte header varlena */</comment>
			<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>align_and_zero</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_align</name></name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>check_allowed_data_len</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><operator>*</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* cstring ... never needs alignment */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_align</name></name> <operator>==</operator> <literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check_allowed_data_len</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><operator>*</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* fixed-length pass-by-reference */</comment>
		<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>align_and_zero</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_align</name></name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_length</name> <operator>=</operator> <name><name>serializer</name><operator>-&gt;</operator><name>type_len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check_allowed_data_len</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><operator>*</operator><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>data_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>max_size</name> <operator>=</operator> <operator>*</operator><name>max_size</name> <operator>-</operator> <name>data_length</name></expr>;</expr_stmt>

	<return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>DatumDeserializer</name>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>type_by_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>type_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>type_align</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>type_storage</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>type_recv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>type_in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>type_io_param</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>type_mod</name></decl>;</decl_stmt>
	<comment type="block">/* lazy load */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>recv_info_set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type> <name>recv_flinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>use_binary_recv</name></decl>;</decl_stmt>
}</block></struct></type> <name>DatumDeserializer</name>;</typedef>

<function><type><name>DatumDeserializer</name> <modifier>*</modifier></type>
<name>create_datum_deserializer</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DatumDeserializer</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* we use the syscache and not the type cache here b/c we need the
	 * send/recv in/out functions that aren't in type cache */</comment>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>DatumDeserializer</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>type_by_val</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typbyval</name></name></expr>,
		<expr><operator>.</operator><name>type_len</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typlen</name></name></expr>,
		<expr><operator>.</operator><name>type_align</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typalign</name></name></expr>,
		<expr><operator>.</operator><name>type_storage</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typstorage</name></name></expr>,
		<expr><operator>.</operator><name>type_recv</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typreceive</name></name></expr>,
		<expr><operator>.</operator><name>type_in</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typinput</name></name></expr>,
		<expr><operator>.</operator><name>type_io_param</name> <operator>=</operator> <call><name>getTypeIOParam</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>type_mod</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>typtypmod</name></name></expr>,
	}</block></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>load_recv_fn</name><parameter_list>(<parameter><decl><type><name>DatumDeserializer</name> <modifier>*</modifier></type><name>des</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_binary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>des</name><operator>-&gt;</operator><name>recv_info_set</name></name> <operator>&amp;&amp;</operator> <name><name>des</name><operator>-&gt;</operator><name>use_binary_recv</name></name> <operator>==</operator> <name>use_binary</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>des</name><operator>-&gt;</operator><name>recv_info_set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>des</name><operator>-&gt;</operator><name>use_binary_recv</name></name> <operator>=</operator> <name>use_binary</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>des</name><operator>-&gt;</operator><name>use_binary_recv</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name><name>des</name><operator>-&gt;</operator><name>type_recv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>des</name><operator>-&gt;</operator><name>recv_flinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name><name>des</name><operator>-&gt;</operator><name>type_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>des</name><operator>-&gt;</operator><name>recv_flinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Loosely based on `range_deserialize` in rangetypes.c */</comment>
<function><type><name>Datum</name></type>
<name>bytes_to_datum_and_advance</name><parameter_list>(<parameter><decl><type><name>DatumDeserializer</name> <modifier>*</modifier></type><name>deserializer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>res</name></decl>;</decl_stmt>

	<comment type="block">/* att_align_pointer can handle the case where an unaligned short-varlen follows any other
	 * varlen by detecting padding. padding bytes _must always_ be set to 0, while the first byte of
	 * a varlen header is _never_ 0. This means that if the next byte is non-zero, it must be the
	 * start of a short-varlen, otherwise we need to align the pointer.
	 */</comment>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator>
		<operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>att_align_pointer</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_align</name></name></expr></argument>, <argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_len</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fetch_att</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_by_val</name></name></expr></argument>, <argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <call><name>att_addlength_pointer</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_len</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>type_append_to_binary_string</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>type_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>namespace_name</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>type_tuple</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>namespace_name</name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>type_tuple</name><operator>-&gt;</operator><name>typnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>namespace_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>type_tuple</name><operator>-&gt;</operator><name>typname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Oid</name></type>
<name>binary_string_get_type</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>element_type_namespace</name> <init>= <expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>element_type_name</name> <init>= <expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>namespace_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>type_oid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>namespace_oid</name> <operator>=</operator> <call><name>LookupExplicitNamespace</name><argument_list>(<argument><expr><name>element_type_namespace</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>type_oid</name> <operator>=</operator> <call><name>GetSysCacheOid2</name><argument_list>(<argument><expr><name>TYPENAMENSP</name></expr></argument>,
							   <argument><expr><name>Anum_pg_type_oid</name></expr></argument>,
							   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>element_type_name</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>namespace_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find type %s.%s"</literal></expr></argument>, <argument><expr><name>element_type_namespace</name></expr></argument>, <argument><expr><name>element_type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>type_oid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>datum_append_to_binary_string</name><parameter_list>(<parameter><decl><type><name>DatumSerializer</name> <modifier>*</modifier></type><name>serializer</name></decl></parameter>, <parameter><decl><type><name>BinaryStringEncoding</name></type> <name>encoding</name></decl></parameter>,
							  <parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>load_send_fn</name><argument_list>(<argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>MESSAGE_SPECIFIES_ENCODING</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>serializer</name><operator>-&gt;</operator><name>use_binary_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>!=</operator> <call><name>datum_serializer_binary_string_encoding</name><argument_list>(<argument><expr><name>serializer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect encoding chosen in datum_append_to_binary_string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>serializer</name><operator>-&gt;</operator><name>use_binary_send</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bytea</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>SendFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serializer</name><operator>-&gt;</operator><name>send_flinfo</name></name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pq_sendbytes</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>OutputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>serializer</name><operator>-&gt;</operator><name>send_flinfo</name></name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>binary_string_to_datum</name><parameter_list>(<parameter><decl><type><name>DatumDeserializer</name> <modifier>*</modifier></type><name>deserializer</name></decl></parameter>, <parameter><decl><type><name>BinaryStringEncoding</name></type> <name>encoding</name></decl></parameter>,
					   <parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>use_binary_recv</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>encoding</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BINARY_ENCODING</name></expr>:</case>
			<expr_stmt><expr><name>use_binary_recv</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TEXT_ENCODING</name></expr>:</case>
			<expr_stmt><expr><name>use_binary_recv</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MESSAGE_SPECIFIES_ENCODING</name></expr>:</case>
			<expr_stmt><expr><name>use_binary_recv</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>load_recv_fn</name><argument_list>(<argument><expr><name>deserializer</name></expr></argument>, <argument><expr><name>use_binary_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_binary_recv</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>data_size</name> <init>= <expr><call><name>pq_getmsgint32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytes</name> <init>= <expr><call><name>pq_getmsgbytes</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringInfoData</name></type> <name>d</name> <init>= <expr><block>{
			<expr><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>bytes</name></expr>,
			<expr><operator>.</operator><name>len</name> <operator>=</operator> <name>data_size</name></expr>,
			<expr><operator>.</operator><name>maxlen</name> <operator>=</operator> <name>data_size</name></expr>,
		}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ReceiveFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deserializer</name><operator>-&gt;</operator><name>recv_flinfo</name></name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>,
								  <argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_io_param</name></name></expr></argument>,
								  <argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>InputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deserializer</name><operator>-&gt;</operator><name>recv_flinfo</name></name></expr></argument>,
								<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>string</name></expr></argument>,
								<argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_io_param</name></name></expr></argument>,
								<argument><expr><name><name>deserializer</name><operator>-&gt;</operator><name>type_mod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
