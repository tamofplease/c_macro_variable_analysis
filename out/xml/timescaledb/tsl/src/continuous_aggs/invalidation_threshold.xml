<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/continuous_aggs/invalidation_threshold.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/memnodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lockdefs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scanner.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scan_iterator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time_utils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time_bucket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/continuous_agg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"continuous_aggs/materialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"invalidation_threshold.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Invalidation threshold.
 *
 * The invalidation threshold acts as a dampener on a hypertable to make sure
 * that invalidations written during inserts won't cause too much write
 * amplification in "hot" regions---typically the "head" of the table. The
 * presumption is that most inserts happen at recent time intervals, and those
 * intervals will be invalid until writes move out of them. Therefore, it
 * isn't worth writing invalidations in that region since it is presumed
 * out-of-date anyway. Further, although it is possible to refresh a
 * continuous aggregate in those "hot" regions, it will lead to partially
 * filled buckets. Thus, refreshing those intervals is discouraged since the
 * aggregate will be immediately out-of-date until the buckets are filled. The
 * invalidation threshold is, in other words, used as a marker that lags
 * behind the head of the hypertable, where invalidations are written before
 * the threshold but not after it.
 *
 * The invalidation threshold is moved forward (and only forward) by refreshes
 * on continuous aggregates when it covers a window that stretches beyond the
 * current threshold. The invalidation threshold needs to be moved in its own
 * transaction, with exclusive access, before the refresh starts to
 * materialize data. This is to avoid losing any invalidations that occur
 * between the start of the transaction that moves the threshold and its end
 * (when the new threshold becomes visible).
 *
 * ______________________________________________
 * |_______________________________________|_____| recent data
 *                                        ^
 *      invalidations written here        |  no invalidations
 *                                        |
 *                               invalidation threshold
 *
 * Transactions that use an isolation level stronger than READ COMMITTED will
 * not be able to "see" changes to the invalidation threshold that may have
 * been made while they were running. Therefore, they always create records
 * in the hypertable invalidation log. See the cache_inval_entry_write()
 * implementation in tsl/src/continuous_aggs/insert.c
 */</comment>

<typedef>typedef <type><struct>struct <name>InvalidationThresholdData</name>
<block>{
	<decl_stmt><decl><type><name>int64</name></type> <name>threshold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>was_updated</name></decl>;</decl_stmt>
}</block></struct></type> <name>InvalidationThresholdData</name>;</typedef>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>scan_update_invalidation_threshold</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InvalidationThresholdData</name> <modifier>*</modifier></type><name>invthresh</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ts_scanner_fetch_heap_tuple</name><argument_list>(<argument><expr><name>ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_continuous_aggs_invalidation_threshold</name></type> <name>form</name> <init>=
		<expr><operator>(</operator><name>Form_continuous_aggs_invalidation_threshold</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>invthresh</name><operator>-&gt;</operator><name>threshold</name></name> <operator>&gt;</operator> <name><name>form</name><operator>-&gt;</operator><name>watermark</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>new_tuple</name> <init>= <expr><call><name>heap_copytuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>form</name> <operator>=</operator> <operator>(</operator><name>Form_continuous_aggs_invalidation_threshold</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>form</name><operator>-&gt;</operator><name>watermark</name></name> <operator>=</operator> <name><name>invthresh</name><operator>-&gt;</operator><name>threshold</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_catalog_update</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>invthresh</name><operator>-&gt;</operator><name>was_updated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
			 <argument><expr><literal type="string">"hypertable %d existing watermark &gt;= new invalidation threshold "</literal> <name>INT64_FORMAT</name>
			 <literal type="string">" "</literal> <name>INT64_FORMAT</name></expr></argument>,
			 <argument><expr><name><name>form</name><operator>-&gt;</operator><name>hypertable_id</name></name></expr></argument>,
			 <argument><expr><name><name>form</name><operator>-&gt;</operator><name>watermark</name></name></expr></argument>,
			 <argument><expr><name><name>invthresh</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>invthresh</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <name><name>form</name><operator>-&gt;</operator><name>watermark</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SCAN_DONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set a new invalidation threshold.
 *
 * The threshold is only updated if the new threshold is greater than the old
 * one.
 *
 * On success, the new threshold is returned, otherwise the existing threshold
 * is returned instead.
 */</comment>
<function><type><name>int64</name></type>
<name>invalidation_threshold_set_or_get</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>raw_hypertable_id</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>invalidation_threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>threshold_found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InvalidationThresholdData</name></type> <name>data</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>threshold</name> <operator>=</operator> <name>invalidation_threshold</name></expr>,
		<expr><operator>.</operator><name>was_updated</name> <operator>=</operator> <name>false</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_continuous_aggs_invalidation_threshold_pkey_hypertable_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>raw_hypertable_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* NOTE: this function deliberately takes an AccessExclusiveLock when updating the invalidation
	 * threshold, instead of the weaker RowExclusiveLock lock normally held for such operations: in
	 * order to ensure we do not lose invalidations from concurrent mutations, we must ensure that
	 * all transactions which read the invalidation threshold have either completed, or not yet read
	 * the value; if we used a RowExclusiveLock we could race such a transaction and update the
	 * threshold between the time it is read but before the other transaction commits. This would
	 * cause us to lose the updates. The AccessExclusiveLock ensures no one else can possibly be
	 * reading the threshold.
	 */</comment>
	<expr_stmt><expr><name>threshold_found</name> <operator>=</operator>
		<call><name>ts_catalog_scan_one</name><argument_list>(<argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD</name></expr></argument> <comment type="block">/*=table*/</comment>,
							<argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD_PKEY</name></expr></argument> <comment type="block">/*=indexid*/</comment>,
							<argument><expr><name>scankey</name></expr></argument> <comment type="block">/*=scankey*/</comment>,
							<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/*=num_keys*/</comment>,
							<argument><expr><name>scan_update_invalidation_threshold</name></expr></argument> <comment type="block">/*=tuple_found*/</comment>,
							<argument><expr><name>AccessExclusiveLock</name></expr></argument> <comment type="block">/*=lockmode*/</comment>,
							<argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD_TABLE_NAME</name></expr></argument> <comment type="block">/*=table_name*/</comment>,
							<argument><expr><operator>&amp;</operator><name>data</name></expr></argument> <comment type="block">/*=data*/</comment>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>threshold_found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* NOTE: this function deliberately takes a stronger lock than RowExclusive, see the comment
		 * above for the rationale
		 */</comment>
		<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>=
			<expr><call><name>table_open</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>desc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_continuous_aggs_invalidation_threshold</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_continuous_aggs_invalidation_threshold</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_continuous_aggs_invalidation_threshold_hypertable_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>raw_hypertable_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_continuous_aggs_invalidation_threshold_watermark</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>invalidation_threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ts_catalog_insert_values</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>data</name><operator>.</operator><name>threshold</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>invalidation_threshold_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name> <modifier>*</modifier></type><name>threshold</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>datum</name> <init>=
		<expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name>Anum_continuous_aggs_invalidation_threshold_watermark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>threshold</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64</name></type>
<name>invalidation_threshold_get</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>hypertable_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>threshold</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_continuous_aggs_invalidation_threshold_pkey_hypertable_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>hypertable_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_catalog_scan_one</name><argument_list>(<argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD</name></expr></argument> <comment type="block">/*=table*/</comment>,
							 <argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD_PKEY</name></expr></argument> <comment type="block">/*=indexid*/</comment>,
							 <argument><expr><name>scankey</name></expr></argument> <comment type="block">/*=scankey*/</comment>,
							 <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/*=num_keys*/</comment>,
							 <argument><expr><name>invalidation_threshold_tuple_found</name></expr></argument> <comment type="block">/*=tuple_found*/</comment>,
							 <argument><expr><name>AccessShareLock</name></expr></argument> <comment type="block">/*=lockmode*/</comment>,
							 <argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD_TABLE_NAME</name></expr></argument> <comment type="block">/*=table_name*/</comment>,
							 <argument><expr><operator>&amp;</operator><name>threshold</name></expr></argument> <comment type="block">/*=data*/</comment>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find invalidation threshold for hypertable %d"</literal></expr></argument>, <argument><expr><name>hypertable_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>threshold</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>invalidation_threshold_htid_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tinfo</name><operator>-&gt;</operator><name>lockresult</name></name> <operator>!=</operator> <name>TM_Ok</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not acquire lock for invalidation threshold row %d"</literal></expr></argument>,
						<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>lockresult</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Retry the operation again."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SCAN_DONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* lock row corresponding to hypertable id in
 * continuous_aggs_invalidation_threshold table in AccessExclusive mode,
 * block till lock is acquired.
 */</comment>
<function><type><name>void</name></type>
<name>invalidation_threshold_lock</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>raw_hypertable_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanTupLock</name></type> <name>scantuplock</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>waitpolicy</name> <operator>=</operator> <name>LockWaitBlock</name></expr>,
		<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>LockTupleExclusive</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScannerCtx</name></type> <name>scanctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_continuous_aggs_invalidation_threshold_pkey_hypertable_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>raw_hypertable_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* lock table in AccessShare mode and the row with AccessExclusive */</comment>
	<expr_stmt><expr><name>scanctx</name> <operator>=</operator> <operator>(</operator><name>ScannerCtx</name><operator>)</operator><block>{ <expr><operator>.</operator><name>table</name> <operator>=</operator> <call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>,
														  <argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD</name></expr></argument>)</argument_list></call></expr>,
							<expr><operator>.</operator><name>index</name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>,
													   <argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD</name></expr></argument>,
													   <argument><expr><name>CONTINUOUS_AGGS_INVALIDATION_THRESHOLD_PKEY</name></expr></argument>)</argument_list></call></expr>,
							<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <literal type="number">1</literal></expr>,
							<expr><operator>.</operator><name>scankey</name> <operator>=</operator> <name>scankey</name></expr>,
							<expr><operator>.</operator><name>limit</name> <operator>=</operator> <literal type="number">1</literal></expr>,
							<expr><operator>.</operator><name>tuple_found</name> <operator>=</operator> <name>invalidation_threshold_htid_found</name></expr>,
							<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>AccessShareLock</name></expr>,
							<expr><operator>.</operator><name>scandirection</name> <operator>=</operator> <name>ForwardScanDirection</name></expr>,
							<expr><operator>.</operator><name>result_mctx</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>,
							<expr><operator>.</operator><name>tuplock</name> <operator>=</operator> <operator>&amp;</operator><name>scantuplock</name></expr> }</block></expr>;</expr_stmt>
	<expr_stmt><expr><name>retcnt</name> <operator>=</operator> <call><name>ts_scanner_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retcnt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"found multiple invalidation rows for hypertable %d"</literal></expr></argument>, <argument><expr><name>raw_hypertable_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Compute a new invalidation threshold.
 *
 * The new invalidation threshold returned is the end of the given refresh
 * window, unless it ends at "infinity" in which case the threshold is capped
 * at the end of the last bucket materialized.
 */</comment>
<function><type><name>int64</name></type>
<name>invalidation_threshold_compute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>InternalTimeRange</name> <modifier>*</modifier></type><name>refresh_window</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>max_refresh</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>raw_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_refresh</name> <operator>=</operator> <call><name>TS_TIME_IS_END</name><argument_list>(<argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
					  <call><name>TS_TIME_IS_NOEND</name><argument_list>(<argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_refresh</name> <operator>=</operator> <call><name>TS_TIME_IS_MAX</name><argument_list>(<argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_refresh</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>maxdat</name> <init>= <expr><call><name>ts_hypertable_get_open_dim_max_value</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* No data in hypertable */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ts_continuous_agg_bucket_width_variable</name><argument_list>(<argument><expr><name>cagg</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * To determine inscribed/circumscribed refresh window for variable-sized
				 * buckets we should be able to calculate time_bucket(window.begin) and
				 * time_bucket(window.end). This, however, is not possible in general case.
				 * As an example, the minimum date is 4714-11-24 BC, which is before any
				 * reasonable default `origin` value. Thus for variable-sized buckets
				 * instead of minimum date we use -infinity since time_bucket(-infinity)
				 * is well-defined as -infinity.
				 *
				 * For more details see:
				 * - ts_compute_inscribed_bucketed_refresh_window_variable()
				 * - ts_compute_circumscribed_bucketed_refresh_window_variable()
				 */</comment>
				<return>return <expr><call><name>ts_time_get_nobegin</name><argument_list>(<argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* For fixed-sized buckets return min (start of time) */</comment>
				<return>return <expr><call><name>ts_time_get_min</name><argument_list>(<argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int64</name></type> <name>maxval</name> <init>= <expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><name>maxdat</name></expr></argument>, <argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ts_continuous_agg_bucket_width_variable</name><argument_list>(<argument><expr><name>cagg</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><call><name>ts_compute_beginning_of_the_next_bucket_variable</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>,
																		<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>bucket_function</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>int64</name></type> <name>bucket_width</name> <init>= <expr><call><name>ts_continuous_agg_bucket_width</name><argument_list>(<argument><expr><name>cagg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int64</name></type> <name>bucket_start</name> <init>= <expr><call><name>ts_time_bucket_by_type</name><argument_list>(<argument><expr><name>bucket_width</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>, <argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/* Add one bucket to get to the end of the last bucket */</comment>
			<return>return <expr><call><name>ts_time_saturating_add</name><argument_list>(<argument><expr><name>bucket_start</name></expr></argument>, <argument><expr><name>bucket_width</name></expr></argument>, <argument><expr><name><name>refresh_window</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>refresh_window</name><operator>-&gt;</operator><name>end</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
