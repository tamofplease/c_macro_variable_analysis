<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/continuous_aggs/options.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/view.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/optimizer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rewrite/rewriteManip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression_with_clause.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/continuous_agg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"continuous_aggs/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan_iterator.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_materialized_only</name><parameter_list>(<parameter><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>agg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>materialized_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>iterator</name> <init>=
		<expr><call><name>ts_scan_iterator_create</name><argument_list>(<argument><expr><name>CONTINUOUS_AGG</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>.</operator><name>ctx</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CONTINUOUS_AGG</name></expr></argument>, <argument><expr><name>CONTINUOUS_AGG_PKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>,
								   <argument><expr><name>Anum_continuous_agg_pkey_mat_hypertable_id</name></expr></argument>,
								   <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
								   <argument><expr><name>F_INT4EQ</name></expr></argument>,
								   <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>agg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mat_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>ts_scanner_foreach</name><argument_list>(<argument>&amp;iterator</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><call><name>ts_scan_iterator_tuple_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_continuous_agg</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_continuous_agg</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>doReplace</name><index>[<expr><name>Natts_continuous_agg</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ts_scan_iterator_fetch_heap_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>new_tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><call><name>ts_scan_iterator_tupledesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>doReplace</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_continuous_agg_materialize_only</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_continuous_agg_materialize_only</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>materialized_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>new_tuple</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>doReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ts_catalog_update</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<break>break;</break>
	</block_content>}</block>
	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function is responsible to return a list of column names used in
 * GROUP BY clause of the cagg query. It behaves a bit different depending
 * of the type of the Continuous Aggregate.
 *
 * 1) Partials form (finalized=false)
 *
 *    Retrieve the "user view query" and find the GROUP BY clause and
 *    "time_bucket" clause. Map them to the column names (of mat.hypertable)
 *
 *    Note that the "user view query" has 2 forms:
 *    - with UNION
 *    - without UNION
 *
 *    We have to extract the part of the query that has "finalize_agg" on
 *    the materialized hypertable to find the GROUP BY clauses.
 *    (see continuous_aggs/create.c for more info on the query structure)
 *
 * 2) Finals form (finalized=true) (&gt;= 2.7)
 *
 *    Retrieve the "direct view query" and find the GROUP BY clause and
 *    "time_bucket" clause. We use the "direct view query" because in the
 *    "user view query" we removed the re-aggregation in the part that query
 *    the materialization hypertable so we don't have a GROUP BY clause
 *    anymore.
 *
 *    Get the column name from the GROUP BY clause because all the column
 *    names are the same in all underlying objects (user view, direct view,
 *    partial view and materialization hypertable).
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>cagg_find_groupingcols</name><parameter_list>(<parameter><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>agg</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>mat_ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>retlist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>cagg_view_query</name> <init>= <expr><call><name>ts_continuous_agg_get_query</name><argument_list>(<argument><expr><name>agg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>mat_relid</name> <init>= <expr><name><name>mat_ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>finalize_query</name></decl>;</decl_stmt>

	<comment type="block">/* The view rule has dummy old and new range table entries as the 1st and 2nd entries */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>cagg_view_query</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cagg_view_query</name><operator>-&gt;</operator><name>setOperations</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* This corresponds to the union view.
		 * the 3rd RTE entry has the SELECT 1 query from the union view. */</comment>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>finalize_query_rte</name> <init>= <expr><call><name>lthird</name><argument_list>(<argument><expr><name><name>cagg_view_query</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>finalize_query_rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>!=</operator> <name>RTE_SUBQUERY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_UNEXPECTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected rte type for view %d"</literal></expr></argument>, <argument><expr><name><name>finalize_query_rte</name><operator>-&gt;</operator><name>rtekind</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>finalize_query</name> <operator>=</operator> <name><name>finalize_query_rte</name><operator>-&gt;</operator><name>subquery</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>finalize_query</name> <operator>=</operator> <name>cagg_view_query</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>finalize_query-&gt;groupClause</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SortGroupClause</name> <modifier>*</modifier></type><name>cagg_gc</name> <init>= <expr><operator>(</operator><name>SortGroupClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>cagg_tle</name> <init>= <expr><call><name>get_sortgroupclause_tle</name><argument_list>(<argument><expr><name>cagg_gc</name></expr></argument>, <argument><expr><name><name>finalize_query</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ContinuousAggIsFinalized</name><argument_list>(<argument><expr><name>agg</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* "resname" is the same as "mat column names" in the finalized version */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cagg_tle</name><operator>-&gt;</operator><name>resjunk</name></name> <operator>&amp;&amp;</operator> <name><name>cagg_tle</name><operator>-&gt;</operator><name>resname</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>retlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>retlist</name></expr></argument>, <argument><expr><name><name>cagg_tle</name><operator>-&gt;</operator><name>resname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* groupby clauses are columns from the mat hypertable */</comment>
			<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>mat_var</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name><name>cagg_tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>retlist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>retlist</name></expr></argument>, <argument><expr><call><name>get_attname</name><argument_list>(<argument><expr><name>mat_relid</name></expr></argument>, <argument><expr><name><name>mat_var</name><operator>-&gt;</operator><name>varattno</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>retlist</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* get the compression parameters for cagg. The parameters are
 * derived from the cagg view definition.
 * Computes:
 * compress_segmentby = GROUP BY columns from cagg query
 * compress_orderby = time_bucket column from cagg query
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>cagg_get_compression_params</name><parameter_list>(<parameter><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>agg</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>mat_ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>defelems</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>mat_ht_dim</name> <init>= <expr><call><name>hyperspace_get_open_dimension</name><argument_list>(<argument><expr><name><name>mat_ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mat_ht_timecolname</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>mat_ht_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>column_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>ordby</name> <init>= <expr><call><name>makeDefElemExtended</name><argument_list>(<argument><expr><literal type="string">"timescaledb"</literal></expr></argument>,
										 <argument><expr><literal type="string">"compress_orderby"</literal></expr></argument>,
										 <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>mat_ht_timecolname</name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><name>DEFELEM_UNSPEC</name></expr></argument>,
										 <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>defelems</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>defelems</name></expr></argument>, <argument><expr><name>ordby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>grp_colnames</name> <init>= <expr><call><name>cagg_find_groupingcols</name><argument_list>(<argument><expr><name>agg</name></expr></argument>, <argument><expr><name>mat_ht</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>grp_colnames</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<comment type="block">/* we have column names. they are guaranteed to be at most
		 * NAMEDATALEN
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>seglen</name> <init>= <expr><operator>(</operator><operator>(</operator><name>NAMEDATALEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>grp_colnames</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>segmentby</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>seglen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>segidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>grp_colnames</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>collen</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>grpcol</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/* skip time dimension col if it appears in group-by list */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>(</operator><name>Name</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>mat_ht_dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>column_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>grpcol</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>segidx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>seglen</name> <operator>-</operator> <name>segidx</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>segmentby</name> <operator>+</operator> <name>segidx</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>segidx</name> <operator>=</operator> <name>segidx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>collen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>grpcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>seglen</name> <operator>-</operator> <name>segidx</name> <operator>&gt;</operator> <name>collen</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>segmentby</name> <operator>+</operator> <name>segidx</name></expr></argument>, <argument><expr><name>grpcol</name></expr></argument>, <argument><expr><name>collen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>segidx</name> <operator>=</operator> <name>segidx</name> <operator>+</operator> <name>collen</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s not enough space to copy segment by column (%d %d %d)"</literal></expr></argument>,
								<argument><expr><name>__func__</name></expr></argument>,
								<argument><expr><name>seglen</name></expr></argument>,
								<argument><expr><name>segidx</name></expr></argument>,
								<argument><expr><name>collen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block>
		<if_stmt><if>if <condition>(<expr><name>segidx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>segby</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>segmentby</name><index>[<expr><name>segidx</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>segby</name> <operator>=</operator> <call><name>makeDefElemExtended</name><argument_list>(<argument><expr><literal type="string">"timescaledb"</literal></expr></argument>,
										<argument><expr><literal type="string">"compress_segmentby"</literal></expr></argument>,
										<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><name>segmentby</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name>DEFELEM_UNSPEC</name></expr></argument>,
										<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>defelems</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>defelems</name></expr></argument>, <argument><expr><name>segby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>defelems</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* enable/disable compression on continuous aggregate */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cagg_alter_compression</name><parameter_list>(<parameter><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>agg</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>mat_ht</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compress_enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>defelems</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mat_ht</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>compress_enable</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>defelems</name> <operator>=</operator> <call><name>cagg_get_compression_params</name><argument_list>(<argument><expr><name>agg</name></expr></argument>, <argument><expr><name>mat_ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>enable</name> <init>= <expr><call><name>makeDefElemExtended</name><argument_list>(<argument><expr><literal type="string">"timescaledb"</literal></expr></argument>,
										  <argument><expr><literal type="string">"compress"</literal></expr></argument>,
										  <argument><expr><ternary><condition><expr><name>compress_enable</name></expr> ?</condition><then> <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>:
															<expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
										  <argument><expr><name>DEFELEM_UNSPEC</name></expr></argument>,
										  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>defelems</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>defelems</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name> <init>= <expr><call><name>ts_compress_hypertable_set_clause_parse</name><argument_list>(<argument><expr><name>defelems</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AlterTableCmd</name></type> <name>alter_cmd</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_AlterTableCmd</name></expr>,
		<expr><operator>.</operator><name>subtype</name> <operator>=</operator> <name>AT_SetRelOptions</name></expr>,
		<expr><operator>.</operator><name>def</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>defelems</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>tsl_process_compress_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alter_cmd</name></expr></argument>, <argument><expr><name>mat_ht</name></expr></argument>, <argument><expr><name>with_clause_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>continuous_agg_update_options</name><parameter_list>(<parameter><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>agg</name></decl></parameter>, <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>ContinuousEnabled</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot disable continuous aggregates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>ContinuousViewOptionMaterializedOnly</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>materialized_only</name> <init>=
			<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>with_clause_options</name><index>[<expr><name>ContinuousViewOptionMaterializedOnly</name></expr>]</index></name><operator>.</operator><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name> <init>= <expr><call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>mat_ht</name> <init>=
			<expr><call><name>ts_hypertable_cache_get_entry_by_id</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name><name>agg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mat_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>materialized_only</name> <operator>==</operator> <name><name>agg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>materialized_only</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* nothing changed, so just return */</comment>
			<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mat_ht</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>cagg_flip_realtime_view_definition</name><argument_list>(<argument><expr><name>agg</name></expr></argument>, <argument><expr><name>mat_ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update_materialized_only</name><argument_list>(<argument><expr><name>agg</name></expr></argument>, <argument><expr><name>materialized_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>ContinuousViewOptionCompress</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>compress_enable</name> <init>=
			<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>with_clause_options</name><index>[<expr><name>ContinuousViewOptionCompress</name></expr>]</index></name><operator>.</operator><name>parsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name> <init>= <expr><call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>mat_ht</name> <init>=
			<expr><call><name>ts_hypertable_cache_get_entry_by_id</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name><name>agg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mat_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mat_ht</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>cagg_alter_compression</name><argument_list>(<argument><expr><name>agg</name></expr></argument>, <argument><expr><name>mat_ht</name></expr></argument>, <argument><expr><name>compress_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>ContinuousViewOptionCreateGroupIndex</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot alter create_group_indexes option for continuous aggregates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>with_clause_options</name><index>[<expr><name>ContinuousViewOptionFinalized</name></expr>]</index></name><operator>.</operator><name>is_default</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot alter finalized option for continuous aggregates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
