<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/nodes/gapfill/interpolate.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/datum.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/typcache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/numeric.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gapfill_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interpolate.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPOLATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>x0</name></type></parameter>, <parameter><type><name>x1</name></type></parameter>, <parameter><type><name>y0</name></type></parameter>, <parameter><type><name>y1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((y0) * ((x1) - (x)) + (y1) * ((x) - (x0))) / ((x1) - (x0)))</cpp:value></cpp:define>

<comment type="block">/*
 * gapfill_interpolate_initialize gets called when plan is initialized for every interpolate column
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_interpolate_initialize</name><parameter_list>(<parameter><decl><type><name>GapFillInterpolateColumnState</name> <modifier>*</modifier></type><name>interpolate</name></decl></parameter>, <parameter><decl><type><name>GapFillState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
							   <parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>function</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>interpolate</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>interpolate</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>function</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>interpolate</name><operator>-&gt;</operator><name>lookup_before</name></name> <operator>=</operator>
			<call><name>gapfill_adjust_varnos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>function</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>function</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>interpolate</name><operator>-&gt;</operator><name>lookup_after</name></name> <operator>=</operator>
			<call><name>gapfill_adjust_varnos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>lthird</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>function</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * gapfill_interpolate_group_change gets called when a new aggregation group becomes active
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_interpolate_group_change</name><parameter_list>(<parameter><decl><type><name>GapFillInterpolateColumnState</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>,
								 <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>isnull</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typbyval</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * gapfill_interpolate_tuple_fetched gets called when a new tuple is fetched from subplan
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_interpolate_tuple_fetched</name><parameter_list>(<parameter><decl><type><name>GapFillInterpolateColumnState</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>,
								  <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>isnull</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typbyval</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * gapfill_interpolate_tuple_returned gets called when subplan tuple is returned
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_interpolate_tuple_returned</name><parameter_list>(<parameter><decl><type><name>GapFillInterpolateColumnState</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>isnull</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>time</name></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typbyval</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Do out of bounds lookup for interpolation
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gapfill_fetch_sample</name><parameter_list>(<parameter><decl><type><name>GapFillState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>GapFillInterpolateColumnState</name> <modifier>*</modifier></type><name>column</name></decl></parameter>,
					 <parameter><decl><type><name>GapFillInterpolateSample</name> <modifier>*</modifier></type><name>sample</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>lookup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>th</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTupleData</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>datum</name> <init>= <expr><call><name>gapfill_exec_expr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>lookup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>DatumGetHeapTupleHeader</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleHeaderGetNatts</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"interpolate RECORD arguments must have 2 elements"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Extract type information from the tuple itself */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>RECORDOID</name> <operator>==</operator> <call><name>HeapTupleHeaderGetTypeId</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>lookup_rowtype_tupdesc</name><argument_list>(<argument><expr><call><name>HeapTupleHeaderGetTypeId</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HeapTupleHeaderGetTypMod</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build a temporary HeapTuple control structure */</comment>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_len</name></name> <operator>=</operator> <call><name>HeapTupleHeaderGetDatumLength</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ItemPointerSetInvalid</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tuple</name><operator>.</operator><name>t_self</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_tableOid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_data</name></name> <operator>=</operator> <name>th</name></expr>;</expr_stmt>

	<comment type="block">/* check first element in record matches timestamp datatype */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypid</name> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>time_index</name></name></expr>]</index></name><operator>-&gt;</operator><name>typid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"first argument of interpolate returned record must match used timestamp "</literal>
						<literal type="string">"datatype"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* check second element in record matches interpolate datatype */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypid</name> <operator>!=</operator> <name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"second argument of interpolate returned record must match used "</literal>
						<literal type="string">"interpolate datatype"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sample</name><operator>-&gt;</operator><name>isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sample</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <call><name>gapfill_datum_get_internal</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>gapfill_typid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tuple</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sample</name><operator>-&gt;</operator><name>isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sample</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>sample</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typbyval</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Calculate the interpolation using numerics, returning the result as a numeric datum */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>interpolate_numeric</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>x_i</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>x0_i</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>x1_i</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>y1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>x0</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>x0_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>x1</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>x1_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>x</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>x_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>x1_sub_x</name> <init>= <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_sub</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>x_sub_x0</name> <init>= <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_sub</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>y0_mul_x1_sub_x</name> <init>= <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_mul</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1_sub_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>y1_mul_x_sub_x0</name> <init>= <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_mul</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x_sub_x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>numerator</name> <init>= <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_add</name></expr></argument>, <argument><expr><name>y0_mul_x1_sub_x</name></expr></argument>, <argument><expr><name>y1_mul_x_sub_x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>denominator</name> <init>= <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_sub</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_div</name></expr></argument>, <argument><expr><name>numerator</name></expr></argument>, <argument><expr><name>denominator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * gapfill_interpolate_calculate gets called for every gapfilled tuple to calculate values
 *
 * Calculate linear interpolation value
 * y = (y0(x1-x) + y1(x-x0))/(x1-x0)
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_interpolate_calculate</name><parameter_list>(<parameter><decl><type><name>GapFillInterpolateColumnState</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>GapFillState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
							  <parameter><decl><type><name>int64</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>

	<comment type="block">/* only evaluate expr for first tuple */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>isnull</name></name> <operator>&amp;&amp;</operator> <name><name>column</name><operator>-&gt;</operator><name>lookup_before</name></name> <operator>&amp;&amp;</operator> <name>time</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>gapfill_start</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gapfill_fetch_sample</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>column</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>lookup_before</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>isnull</name></name> <operator>&amp;&amp;</operator> <name><name>column</name><operator>-&gt;</operator><name>lookup_after</name></name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>FETCHED_LAST</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>||</operator> <name>FETCHED_NEXT_GROUP</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>state</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gapfill_fetch_sample</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>column</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>lookup_after</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>isnull</name></name> <operator>||</operator> <name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>isnull</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>prev</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>next</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typid</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* All integer types must use numeric-based interpolation calculations since they are
		 * multiplied by int64 and this could cause an overflow. numerics also interpolate better
		 * because the answer is rounded and not truncated. We can't use float8 because that
		 doesn't handle really big ints exactly. We can't use the Postgres INT128 implementation
		 because it doesn't support division. */</comment>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator>
				<call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_int2</name></expr></argument>,
									<argument><expr><call><name>interpolate_numeric</name><argument_list>(<argument><expr><name>x</name></expr></argument>,
														<argument><expr><name>x0</name></expr></argument>,
														<argument><expr><name>x1</name></expr></argument>,
														<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int2_numeric</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int2_numeric</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator>
				<call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_int4</name></expr></argument>,
									<argument><expr><call><name>interpolate_numeric</name><argument_list>(<argument><expr><name>x</name></expr></argument>,
														<argument><expr><name>x0</name></expr></argument>,
														<argument><expr><name>x1</name></expr></argument>,
														<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4_numeric</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4_numeric</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator>
				<call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_int8</name></expr></argument>,
									<argument><expr><call><name>interpolate_numeric</name><argument_list>(<argument><expr><name>x</name></expr></argument>,
														<argument><expr><name>x0</name></expr></argument>,
														<argument><expr><name>x1</name></expr></argument>,
														<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<comment type="block">/* Shortcircuit calculation when y0 == y1 for float because otherwise
			 * output will be unstable for certain values due to float rounding. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator>
					<call><name>Float4GetDatum</name><argument_list>(<argument><expr><call><name>INTERPOLATE</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<comment type="block">/* Shortcircuit calculation when y0 == y1 for float because otherwise
			 * output will be unstable for certain values due to float rounding. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>y0</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator>
					<call><name>Float8GetDatum</name><argument_list>(<argument><expr><call><name>INTERPOLATE</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>

			<comment type="block">/*
			 * should never happen since interpolate is not defined for other
			 * datatypes
			 */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported datatype for interpolate: %s"</literal></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
