<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/nodes/gapfill/locf.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/datum.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gapfill_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locf.h"</cpp:file></cpp:include>

<comment type="block">/*
 * gapfill_locf_initialize gets called when plan is initialized for every locf column
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_locf_initialize</name><parameter_list>(<parameter><decl><type><name>GapFillLocfColumnState</name> <modifier>*</modifier></type><name>locf</name></decl></parameter>, <parameter><decl><type><name>GapFillState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>function</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>locf</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* check if out of boundary lookup expression was supplied */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>function</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>locf</name><operator>-&gt;</operator><name>lookup_last</name></name> <operator>=</operator> <call><name>gapfill_adjust_varnos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>function</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* check if treat_null_as_missing was supplied */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>function</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>treat_null_as_missing</name> <init>= <expr><call><name>lthird</name><argument_list>(<argument><expr><name><name>function</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>treat_null_as_missing</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>treat_null_as_missing</name><operator>-&gt;</operator><name>consttype</name></name> <operator>!=</operator> <name>BOOLOID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(
						 <argument><expr><literal type="string">"invalid locf argument: treat_null_as_missing must be a BOOL literal"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>treat_null_as_missing</name><operator>-&gt;</operator><name>constisnull</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>locf</name><operator>-&gt;</operator><name>treat_null_as_missing</name></name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>treat_null_as_missing</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * gapfill_locf_group_change gets called when a new aggregation group becomes active
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_locf_group_change</name><parameter_list>(<parameter><decl><type><name>GapFillLocfColumnState</name> <modifier>*</modifier></type><name>locf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>locf</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * gapfill_locf_tuple_returned gets called when subplan tuple is returned
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_locf_tuple_returned</name><parameter_list>(<parameter><decl><type><name>GapFillLocfColumnState</name> <modifier>*</modifier></type><name>locf</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>locf</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name>isnull</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>locf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>locf</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typbyval</name></name></expr></argument>, <argument><expr><name><name>locf</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * gapfill_locf_calculate gets called for every gapfilled tuple to calculate values
 */</comment>
<function><type><name>void</name></type>
<name>gapfill_locf_calculate</name><parameter_list>(<parameter><decl><type><name>GapFillLocfColumnState</name> <modifier>*</modifier></type><name>locf</name></decl></parameter>, <parameter><decl><type><name>GapFillState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* only evaluate expr for first tuple */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>locf</name><operator>-&gt;</operator><name>isnull</name></name> <operator>&amp;&amp;</operator> <name><name>locf</name><operator>-&gt;</operator><name>lookup_last</name></name> <operator>&amp;&amp;</operator> <name>time</name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>gapfill_start</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>locf</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>gapfill_exec_expr</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>locf</name><operator>-&gt;</operator><name>lookup_last</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>locf</name><operator>-&gt;</operator><name>isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>locf</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name><name>locf</name><operator>-&gt;</operator><name>isnull</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
