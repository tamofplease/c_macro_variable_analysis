<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/nodes/decompress_chunk/qual_pushdown.c"><comment type="block">/* * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/optimizer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/restrictinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_func.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/typcache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decompress_chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qual_pushdown.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/hypertable_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"custom_type_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/segment_meta.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>QualPushdownContext</name>
<block>{
	<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>chunk_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>compressed_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>chunk_rte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>compressed_rte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>compression_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>can_pushdown</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>needs_recheck</name></decl>;</decl_stmt>
}</block></struct></type> <name>QualPushdownContext</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>modify_expression</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>QualPushdownContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>pushdown_quals</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>chunk_rel</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>compressed_rel</name></decl></parameter>,
			   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>compression_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>decompress_clauses</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QualPushdownContext</name></type> <name>context</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>chunk_rel</name> <operator>=</operator> <name>chunk_rel</name></expr>,
		<expr><operator>.</operator><name>compressed_rel</name> <operator>=</operator> <name>compressed_rel</name></expr>,
		<expr><operator>.</operator><name>chunk_rte</name> <operator>=</operator> <call><name>planner_rt_fetch</name><argument_list>(<argument><expr><name><name>chunk_rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>compressed_rte</name> <operator>=</operator> <call><name>planner_rt_fetch</name><argument_list>(<argument><expr><name><name>compressed_rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>compression_info</name> <operator>=</operator> <name>compression_info</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>chunk_rel-&gt;baserestrictinfo</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

		<comment type="block">/* pushdown is not safe for volatile expressions */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>ri</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>decompress_clauses</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>decompress_clauses</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>context</name><operator>.</operator><name>can_pushdown</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>.</operator><name>needs_recheck</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expr</name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>modify_expression</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>ri</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>.</operator><name>can_pushdown</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>BoolExpr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>BoolExpr</name> <operator>*</operator><operator>)</operator> <name>expr</name><operator>)</operator><operator>-&gt;</operator><name>boolop</name> <operator>==</operator> <name>AND_EXPR</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* have to separate out and expr into different restrict infos */</comment>
				<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc_and</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>BoolExpr</name> <modifier>*</modifier></type><name>bool_expr</name> <init>= <expr><operator>(</operator><name>BoolExpr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></init></decl>;</decl_stmt>
				<macro><name>foreach</name> <argument_list>(<argument>lc_and</argument>, <argument>bool_expr-&gt;args</argument>)</argument_list></macro>
				<block>{<block_content>
					<expr_stmt><expr><name><name>compressed_rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name> <operator>=</operator>
						<call><name>lappend</name><argument_list>(<argument><expr><name><name>compressed_rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr></argument>,
								<argument><expr><call><name>make_simple_restrictinfo_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc_and</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>compressed_rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name> <operator>=</operator>
					<call><name>lappend</name><argument_list>(<argument><expr><name><name>compressed_rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr></argument>,
							<argument><expr><call><name>make_simple_restrictinfo_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* We need to check the restriction clause on the decompress node if the clause can't be
		 * pushed down or needs re-checking */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>context</name><operator>.</operator><name>can_pushdown</name></name> <operator>||</operator> <name><name>context</name><operator>.</operator><name>needs_recheck</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>decompress_clauses</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>decompress_clauses</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name><name>chunk_rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name> <operator>=</operator> <name>decompress_clauses</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>FormData_hypertable_compression</name> <modifier>*</modifier></type>
<name>get_compression_info_from_var</name><parameter_list>(<parameter><decl><type><name>QualPushdownContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>column_name</name></decl>;</decl_stmt>
	<comment type="block">/* Not on the chunk we expect */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Index</name><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>!=</operator> <name><name>context</name><operator>-&gt;</operator><name>chunk_rel</name><operator>-&gt;</operator><name>relid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ignore system attibutes or whole row references */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>column_name</name> <operator>=</operator> <call><name>get_attname</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>chunk_rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>get_column_compressioninfo</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>compression_info</name></name></expr></argument>, <argument><expr><name>column_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OpExpr</name> <modifier>*</modifier></type>
<name>make_segment_meta_opexpr</name><parameter_list>(<parameter><decl><type><name>QualPushdownContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opno</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>meta_column_attno</name></decl></parameter>,
						 <parameter><decl><type><name>Var</name> <modifier>*</modifier></type><name>uncompressed_var</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>compare_to_expr</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>meta_var</name> <init>= <expr><call><name>makeVar</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>compressed_rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>,
							<argument><expr><name>meta_column_attno</name></expr></argument>,
							<argument><expr><name><name>uncompressed_var</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><name>InvalidOid</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <call><name>make_opclause</name><argument_list>(<argument><expr><name>opno</name></expr></argument>,
									<argument><expr><name>BOOLOID</name></expr></argument>,
									<argument><expr><name>false</name></expr></argument>,
									<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>meta_var</name></expr></argument>,
									<argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><name>compare_to_expr</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>InvalidOid</name></expr></argument>,
									<argument><expr><name><name>uncompressed_var</name><operator>-&gt;</operator><name>varcollid</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AttrNumber</name></type>
<name>get_segment_meta_min_attr_number</name><parameter_list>(<parameter><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>compression_info</name></decl></parameter>,
								 <parameter><decl><type><name>Oid</name></type> <name>compressed_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>meta_col_name</name> <init>= <expr><call><name>compression_column_segment_min_name</name><argument_list>(<argument><expr><name>compression_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>meta_col_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find meta column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>get_attnum</name><argument_list>(<argument><expr><name>compressed_relid</name></expr></argument>, <argument><expr><name>meta_col_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AttrNumber</name></type>
<name>get_segment_meta_max_attr_number</name><parameter_list>(<parameter><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>compression_info</name></decl></parameter>,
								 <parameter><decl><type><name>Oid</name></type> <name>compressed_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>meta_col_name</name> <init>= <expr><call><name>compression_column_segment_max_name</name><argument_list>(<argument><expr><name>compression_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>meta_col_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find meta column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>get_attnum</name><argument_list>(<argument><expr><name>compressed_relid</name></expr></argument>, <argument><expr><name>meta_col_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>get_pushdownsafe_expr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QualPushdownContext</name> <modifier>*</modifier></type><name>input_context</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* do not mess up the input_context, so create a new one */</comment>
	<decl_stmt><decl><type><name>QualPushdownContext</name></type> <name>test_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_context</name></expr></argument>, <argument><expr><name>input_context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>test_context</name><operator>.</operator><name>can_pushdown</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>expr</name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>modify_expression</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>test_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>test_context</name><operator>.</operator><name>can_pushdown</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>expr</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>FormData_hypertable_compression</name> <modifier>*</modifier></type>
<name>get_compression_info_for_column_with_segment_meta</name><parameter_list>(<parameter><decl><type><name>QualPushdownContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>compression_info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>compression_info</name> <operator>=</operator> <call><name>get_compression_info_from_var</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Only order by vars have segment meta */</comment>
	<if_stmt><if>if <condition>(<expr><name>compression_info</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>compression_info</name><operator>-&gt;</operator><name>orderby_column_index</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>compression_info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>pushdown_op_to_segment_meta_min_max</name><parameter_list>(<parameter><decl><type><name>QualPushdownContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>expr_args</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>op_oid</name></decl></parameter>,
									<parameter><decl><type><name>Oid</name></type> <name>op_collation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>leftop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rightop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>var_with_segment_meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tce</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>strategy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>compression_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>expr_type_id</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>expr_args</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>leftop</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>expr_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rightop</name> <operator>=</operator> <call><name>lsecond</name><argument_list>(<argument><expr><name>expr_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>leftop</name></expr></argument>, <argument><expr><name>RelabelType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>leftop</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RelabelType</name> <operator>*</operator><operator>)</operator> <name>leftop</name><operator>)</operator><operator>-&gt;</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>rightop</name></expr></argument>, <argument><expr><name>RelabelType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>rightop</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RelabelType</name> <operator>*</operator><operator>)</operator> <name>rightop</name><operator>)</operator><operator>-&gt;</operator><name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Find the side that has var with segment meta set expr to the other side */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>compression_info</name> <operator>=</operator> <call><name>get_compression_info_for_column_with_segment_meta</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>leftop</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
		<name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>var_with_segment_meta</name> <operator>=</operator> <operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>leftop</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expr</name> <operator>=</operator> <name>rightop</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>compression_info</name> <operator>=</operator>
				  <call><name>get_compression_info_for_column_with_segment_meta</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>rightop</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>var_with_segment_meta</name> <operator>=</operator> <operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>rightop</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expr</name> <operator>=</operator> <name>leftop</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>op_oid</name> <operator>=</operator> <call><name>get_commutator</name><argument_list>(<argument><expr><name>op_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

	<comment type="block">/* May be able to allow non-strict operations as well.
	 * Next steps: Think through edge cases, either allow and write tests or figure out why we must
	 * block strict operations
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>op_oid</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>op_strict</name><argument_list>(<argument><expr><name>op_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If the collation to be used by the OP doesn't match the column's collation do not push down
	 * as the materialized min/max value do not match the semantics of what we need here */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>var_with_segment_meta</name><operator>-&gt;</operator><name>varcollid</name></name> <operator>!=</operator> <name>op_collation</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tce</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name><name>var_with_segment_meta</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>, <argument><expr><name>TYPECACHE_BTREE_OPFAMILY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>strategy</name> <operator>=</operator> <call><name>get_op_opfamily_strategy</name><argument_list>(<argument><expr><name>op_oid</name></expr></argument>, <argument><expr><name><name>tce</name><operator>-&gt;</operator><name>btree_opf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>strategy</name> <operator>==</operator> <name>InvalidStrategy</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>get_pushdownsafe_expr</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>expr_type_id</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* var = expr implies min &lt; expr and max &gt; expr */</comment>
			<decl_stmt><decl><type><name>Oid</name></type> <name>opno_le</name> <init>= <expr><call><name>get_opfamily_member</name><argument_list>(<argument><expr><name><name>tce</name><operator>-&gt;</operator><name>btree_opf</name></name></expr></argument>,
											  <argument><expr><name><name>tce</name><operator>-&gt;</operator><name>type_id</name></name></expr></argument>,
											  <argument><expr><name>expr_type_id</name></expr></argument>,
											  <argument><expr><name>BTLessEqualStrategyNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type> <name>opno_ge</name> <init>= <expr><call><name>get_opfamily_member</name><argument_list>(<argument><expr><name><name>tce</name><operator>-&gt;</operator><name>btree_opf</name></name></expr></argument>,
											  <argument><expr><name><name>tce</name><operator>-&gt;</operator><name>type_id</name></name></expr></argument>,
											  <argument><expr><name>expr_type_id</name></expr></argument>,
											  <argument><expr><name>BTGreaterEqualStrategyNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>opno_le</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>opno_ge</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<return>return <expr><call><name>make_andclause</name><argument_list>(<argument><expr><call><name>list_make2</name><argument_list>(
				<argument><expr><call><name>make_segment_meta_opexpr</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
										 <argument><expr><name>opno_le</name></expr></argument>,
										 <argument><expr><call><name>get_segment_meta_min_attr_number</name><argument_list>(<argument><expr><name>compression_info</name></expr></argument>,
																		  <argument><expr><name><name>context</name><operator>-&gt;</operator><name>compressed_rte</name>
																			  <operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><name>var_with_segment_meta</name></expr></argument>,
										 <argument><expr><name>expr</name></expr></argument>,
										 <argument><expr><name>BTLessEqualStrategyNumber</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>make_segment_meta_opexpr</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
										 <argument><expr><name>opno_ge</name></expr></argument>,
										 <argument><expr><call><name>get_segment_meta_max_attr_number</name><argument_list>(<argument><expr><name>compression_info</name></expr></argument>,
																		  <argument><expr><name><name>context</name><operator>-&gt;</operator><name>compressed_rte</name>
																			  <operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><name>var_with_segment_meta</name></expr></argument>,
										 <argument><expr><name>expr</name></expr></argument>,
										 <argument><expr><name>BTGreaterEqualStrategyNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
		<case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
			<comment type="block">/* var &lt; expr  implies min &lt; expr */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type> <name>opno</name> <init>=
					<expr><call><name>get_opfamily_member</name><argument_list>(<argument><expr><name><name>tce</name><operator>-&gt;</operator><name>btree_opf</name></name></expr></argument>, <argument><expr><name><name>tce</name><operator>-&gt;</operator><name>type_id</name></name></expr></argument>, <argument><expr><name>expr_type_id</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

				<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator>
					<call><name>make_segment_meta_opexpr</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
											 <argument><expr><name>opno</name></expr></argument>,
											 <argument><expr><call><name>get_segment_meta_min_attr_number</name><argument_list>(<argument><expr><name>compression_info</name></expr></argument>,
																			  <argument><expr><name><name>context</name>
																				  <operator>-&gt;</operator><name>compressed_rte</name>
																				  <operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>var_with_segment_meta</name></expr></argument>,
											 <argument><expr><name>expr</name></expr></argument>,
											 <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block>

		<case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
		<case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
			<comment type="block">/* var &gt; expr  implies max &gt; expr */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type> <name>opno</name> <init>=
					<expr><call><name>get_opfamily_member</name><argument_list>(<argument><expr><name><name>tce</name><operator>-&gt;</operator><name>btree_opf</name></name></expr></argument>, <argument><expr><name><name>tce</name><operator>-&gt;</operator><name>type_id</name></name></expr></argument>, <argument><expr><name>expr_type_id</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

				<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator>
					<call><name>make_segment_meta_opexpr</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
											 <argument><expr><name>opno</name></expr></argument>,
											 <argument><expr><call><name>get_segment_meta_max_attr_number</name><argument_list>(<argument><expr><name>compression_info</name></expr></argument>,
																			  <argument><expr><name><name>context</name>
																				  <operator>-&gt;</operator><name>compressed_rte</name>
																				  <operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>var_with_segment_meta</name></expr></argument>,
											 <argument><expr><name>expr</name></expr></argument>,
											 <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block>
		<default>default:</default>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type>
<name>modify_expression</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>QualPushdownContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>opexpr</name> <init>= <expr><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>opexpr</name><operator>-&gt;</operator><name>opresulttype</name></name> <operator>==</operator> <name>BOOLOID</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><call><name>pushdown_op_to_segment_meta_min_max</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
															   <argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>,
															   <argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>opno</name></name></expr></argument>,
															   <argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>inputcollid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>pd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>needs_recheck</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<comment type="block">/* pd is on the compressed table so do not mutate further */</comment>
					<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>pd</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* opexpr will still be checked for segment by columns */</comment>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_RelabelType</name></expr>:</case>
		<case>case <expr><name>T_ScalarArrayOpExpr</name></expr>:</case>
		<case>case <expr><name>T_List</name></expr>:</case>
		<case>case <expr><name>T_Const</name></expr>:</case>
		<case>case <expr><name>T_NullTest</name></expr>:</case>
		<case>case <expr><name>T_Param</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>T_Var</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>compressioninfo</name> <init>=
				<expr><call><name>get_compression_info_from_var</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AttrNumber</name></type> <name>compressed_attno</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>compressioninfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>can_pushdown</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* we can only push down quals for segmentby columns */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>compressioninfo</name><operator>-&gt;</operator><name>segmentby_column_index</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>can_pushdown</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>compressed_attno</name> <operator>=</operator>
				<call><name>get_attnum</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>compressed_rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name><name>compressioninfo</name><operator>-&gt;</operator><name>attname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>compressed_rel</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name> <operator>=</operator> <name>compressed_attno</name></expr>;</expr_stmt>

			<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>var</name></expr>;</return>
		</block_content>}</block>
		<default>default:</default>
			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>can_pushdown</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><call><name>expression_tree_mutator</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>modify_expression</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
