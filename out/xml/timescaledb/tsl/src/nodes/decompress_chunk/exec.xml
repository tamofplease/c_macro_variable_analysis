<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/nodes/decompress_chunk/exec.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/sysattr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/executor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/bitmapset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rewrite/rewriteManip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/datum.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/typcache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression/compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/decompress_chunk/decompress_chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/decompress_chunk/exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/decompress_chunk/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/hypertable_compression.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>DecompressChunkColumnType</name>
<block>{
	<decl><name>SEGMENTBY_COLUMN</name></decl>,
	<decl><name>COMPRESSED_COLUMN</name></decl>,
	<decl><name>COUNT_COLUMN</name></decl>,
	<decl><name>SEQUENCE_NUM_COLUMN</name></decl>,
}</block></enum></type> <name>DecompressChunkColumnType</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DecompressChunkColumnState</name>
<block>{
	<decl_stmt><decl><type><name>DecompressChunkColumnType</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>typid</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Attno of the decompressed column in the output of DecompressChunk node.
	 * Negative values are special columns that do not have a representation in
	 * the uncompressed chunk, but are still used for decompression. They should
	 * have the respective `type` field.
	 */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type> <name>output_attno</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Attno of the compressed column in the input compressed chunk scan.
	 */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type> <name>compressed_scan_attno</name></decl>;</decl_stmt>

	<union>union
	<block>{
		<struct>struct
		<block>{
			<decl_stmt><decl><type><name>Datum</name></type> <name>value</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
		}</block> <decl><name>segmentby</name></decl>;</struct>
		<struct>struct
		<block>{
			<decl_stmt><decl><type><name>DecompressionIterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
		}</block> <decl><name>compressed</name></decl>;</struct>
	}</block>;</union>
}</block></struct></type> <name>DecompressChunkColumnState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DecompressChunkState</name>
<block>{
	<decl_stmt><decl><type><name>CustomScanState</name></type> <name>csstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>decompression_map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_columns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DecompressChunkColumnState</name> <modifier>*</modifier></type><name>columns</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>initialized</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>reverse</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>hypertable_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>hypertable_compression_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_batch_context</name></decl>;</decl_stmt>
}</block></struct></type> <name>DecompressChunkState</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>decompress_chunk_exec</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decompress_chunk_begin</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decompress_chunk_end</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>decompress_chunk_rescan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>decompress_chunk_create_tuple</name><parameter_list>(<parameter><decl><type><name>DecompressChunkState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>CustomExecMethods</name></type> <name>decompress_chunk_state_methods</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>BeginCustomScan</name> <operator>=</operator> <name>decompress_chunk_begin</name></expr>,
	<expr><operator>.</operator><name>ExecCustomScan</name> <operator>=</operator> <name>decompress_chunk_exec</name></expr>,
	<expr><operator>.</operator><name>EndCustomScan</name> <operator>=</operator> <name>decompress_chunk_end</name></expr>,
	<expr><operator>.</operator><name>ReScanCustomScan</name> <operator>=</operator> <name>decompress_chunk_rescan</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Node</name> <modifier>*</modifier></type>
<name>decompress_chunk_state_create</name><parameter_list>(<parameter><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>cscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DecompressChunkState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>settings</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>DecompressChunkState</name> <operator>*</operator><operator>)</operator> <call><name>newNode</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DecompressChunkState</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>T_CustomScanState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>csstate</name><operator>.</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>decompress_chunk_state_methods</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_id</name></name> <operator>=</operator> <call><name>linitial_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>chunk_relid</name></name> <operator>=</operator> <call><name>lsecond_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>reverse</name></name> <operator>=</operator> <call><name>lthird_int</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>decompression_map</name></name> <operator>=</operator> <call><name>lsecond</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * initialize column state
 *
 * the column state indexes are based on the index
 * of the columns of the uncompressed chunk because
 * that is the tuple layout we are creating
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>initialize_column_state</name><parameter_list>(<parameter><decl><type><name>DecompressChunkState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><name>ScanState</name> <operator>*</operator><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>desc</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>decompression_map</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no columns specified to decompress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>columns</name></name> <operator>=</operator>
		<call><name>palloc0</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>decompression_map</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DecompressChunkColumnState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AttrNumber</name></type> <name>next_compressed_scan_attno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>num_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>state-&gt;decompression_map</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>next_compressed_scan_attno</name><operator>++</operator></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>AttrNumber</name></type> <name>output_attno</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>output_attno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* We are asked not to decompress this column, skip it. */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>DecompressChunkColumnState</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>num_columns</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>num_columns</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>output_attno</name></name> <operator>=</operator> <name>output_attno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>compressed_scan_attno</name></name> <operator>=</operator> <name>next_compressed_scan_attno</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>output_attno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* normal column that is also present in uncompressed chunk */</comment>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attribute</name> <init>=
				<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>output_attno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FormData_hypertable_compression</name> <modifier>*</modifier></type><name>ht_info</name> <init>=
				<expr><call><name>get_column_compressioninfo</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_compression_info</name></name></expr></argument>,
										   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>attribute</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>typid</name></name> <operator>=</operator> <name><name>attribute</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>ht_info</name><operator>-&gt;</operator><name>segmentby_column_index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SEGMENTBY_COLUMN</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COMPRESSED_COLUMN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* metadata columns */</comment>
			<switch>switch <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>output_attno</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>DECOMPRESS_CHUNK_COUNT_ID</name></expr>:</case>
					<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>COUNT_COLUMN</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>DECOMPRESS_CHUNK_SEQUENCE_NUM_ID</name></expr>:</case>
					<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SEQUENCE_NUM_COLUMN</name></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid column attno \"%d\""</literal></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>output_attno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ConstifyTableOidContext</name>
<block>{
	<decl_stmt><decl><type><name>Index</name></type> <name>chunk_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>made_changes</name></decl>;</decl_stmt>
}</block></struct></type> <name>ConstifyTableOidContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type>
<name>constify_tableoid_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ConstifyTableOidContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Index</name><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_index</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name> <operator>==</operator> <name>TableOidAttributeNumber</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>made_changes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator>
				<name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeConst</name><argument_list>(<argument><expr><name>OIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_relid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * we doublecheck system columns here because projection will
		 * segfault if any system columns get through
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name> <operator>&lt;</operator> <name>SelfItemPointerAttributeNumber</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"transparent decompression only supports tableoid system column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>node</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>expression_tree_mutator</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>constify_tableoid_walker</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>constify_tableoid</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>chunk_index</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ConstifyTableOidContext</name></type> <name>ctx</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>chunk_index</name> <operator>=</operator> <name>chunk_index</name></expr>,
		<expr><operator>.</operator><name>chunk_relid</name> <operator>=</operator> <name>chunk_relid</name></expr>,
		<expr><operator>.</operator><name>made_changes</name> <operator>=</operator> <name>false</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>constify_tableoid_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>made_changes</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Complete initialization of the supplied CustomScanState.
 *
 * Standard fields have been initialized by ExecInitCustomScan,
 * but any private fields should be initialized here.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>decompress_chunk_begin</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DecompressChunkState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>DecompressChunkState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>cscan</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>CustomScan</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>compressed_scan</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ProjInfo</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * if we are projecting we need to constify tableoid references here
		 * because decompressed tuple are virtual tuples and don't have
		 * system columns.
		 *
		 * We do the constify in executor because even after plan creation
		 * our targetlist might still get modified by parent nodes pushing
		 * down targetlist.
		 */</comment>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>targetlist</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>modified_tlist</name> <init>= <expr><call><name>constify_tableoid</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>chunk_relid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>modified_tlist</name> <operator>!=</operator> <name>tlist</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ProjInfo</name></name> <operator>=</operator>
				<call><name>ExecBuildProjectionInfo</name><argument_list>(<argument><expr><name>modified_tlist</name></expr></argument>,
										<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ExprContext</name></name></expr></argument>,
										<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name></name></expr></argument>,
										<argument><expr><name>ps</name></expr></argument>,
										<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_compression_info</name></name> <operator>=</operator> <call><name>ts_hypertable_compression_get</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initialize_column_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name></expr></argument>, <argument><expr><call><name>ExecInitNode</name><argument_list>(<argument><expr><name>compressed_scan</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>per_batch_context</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
													 <argument><expr><literal type="string">"DecompressChunk per_batch"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>initialize_batch</name><parameter_list>(<parameter><decl><type><name>DecompressChunkState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>per_batch_context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>per_batch_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DecompressChunkColumnState</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>COMPRESSED_COLUMN</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>compressed_scan_attno</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>CompressedDataHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>CompressedDataHeader</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iterator</name></name> <operator>=</operator>
						<call><call><name>tsl_get_decompression_iterator_init</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>compression_algorithm</name></name></expr></argument>,
															<argument><expr><name><name>state</name><operator>-&gt;</operator><name>reverse</name></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>,
																			<argument><expr><name><name>column</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<break>break;</break>
			</block_content>}</block>
			<case>case <expr><name>SEGMENTBY_COLUMN</name></expr>:</case>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>compressed_scan_attno</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>segmentby</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>segmentby</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>segmentby</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>isnull</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>COUNT_COLUMN</name></expr>:</case>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>compressed_scan_attno</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* count column should never be NULL */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SEQUENCE_NUM_COLUMN</name></expr>:</case>
				<comment type="block">/*
				 * nothing to do here for sequence number
				 * we only needed this for sorting in node below
				 */</comment>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>decompress_chunk_exec</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DecompressChunkState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>DecompressChunkState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><call><name>decompress_chunk_create_tuple</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>

		<comment type="block">/* Reset expression memory context to clean out any cruft from
		 * previous tuple. */</comment>
		<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ExecQual</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>InstrCountFiltered1</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>slot</name></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decompress_chunk_rescan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>DecompressChunkState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>initialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decompress_chunk_end</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>DecompressChunkState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>per_batch_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create generated tuple according to column state
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>decompress_chunk_create_tuple</name><parameter_list>(<parameter><decl><type><name>DecompressChunkState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>csstate</name><operator>.</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>batch_done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>subslot</name> <init>= <expr><call><name>ExecProcNode</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>csstate</name><operator>.</operator><name>custom_ps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>subslot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>batch_done</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>initialize_batch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>subslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DecompressChunkColumnState</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<switch>switch <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>COUNT_COLUMN</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>counter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<comment type="block">/*
						 * we continue checking other columns even if counter
						 * reaches zero to sanity check all columns are in sync
						 * and agree about batch end
						 */</comment>
						<expr_stmt><expr><name>batch_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>counter</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<break>break;</break>
				<case>case <expr><name>COMPRESSED_COLUMN</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>AttrNumber</name></type> <name>attr</name> <init>= <expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>output_attno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>column</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iterator</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>attr</name></expr>]</index></name> <operator>=</operator> <call><name>getmissingattr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>,
																<argument><expr><name>attr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
																<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>attr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<decl_stmt><decl><type><name>DecompressResult</name></type> <name>result</name></decl>;</decl_stmt>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>column</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iterator</name><operator>-&gt;</operator><name>try_next</name></name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>compressed</name><operator>.</operator><name>iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>is_done</name></name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>batch_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
							<continue>continue;</continue>
						</block_content>}</block></if>
						<if type="elseif">else if <condition>(<expr><name>batch_done</name></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * since the count column is the first column batch_done
							 * might be true if compressed column is out of sync with
							 * the batch counter.
							 */</comment>
							<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"compressed column out of sync with batch counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>attr</name></expr>]</index></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>attr</name></expr>]</index></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>is_null</name></name></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<break>break;</break>
				</block_content>}</block>
				<case>case <expr><name>SEGMENTBY_COLUMN</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>AttrNumber</name></type> <name>attr</name> <init>= <expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>output_attno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>attr</name></expr>]</index></name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>segmentby</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>attr</name></expr>]</index></name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>segmentby</name><operator>.</operator><name>isnull</name></name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
				<case>case <expr><name>SEQUENCE_NUM_COLUMN</name></expr>:</case>
					<comment type="block">/*
					 * nothing to do here for sequence number
					 * we only needed this for sorting in node below
					 */</comment>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>batch_done</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ExecStoreVirtualTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>slot</name></expr>;</return>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
