<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/data_fetcher.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FETCH_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>data_fetcher_init</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
				  <parameter><decl><type><name>TupleFactory</name> <modifier>*</modifier></type><name>tf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>df</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DataFetcher</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>tuples</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>stmt</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>stmt_params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>tf</name></name> <operator>=</operator> <name>tf</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplefactory_set_per_tuple_mctx_reset</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>batch_mctx</name></name> <operator>=</operator>
		<call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"cursor tuple data"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>tuple_mctx</name></name> <operator>=</operator> <name><name>df</name><operator>-&gt;</operator><name>batch_mctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>req_mctx</name></name> <operator>=</operator>
		<call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"async req/resp"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>fetch_size</name></name> <operator>=</operator> <name>DEFAULT_FETCH_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>data_fetcher_validate</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ANALYZE command is accessing random tuples so we should never fail here when running ANALYZE
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name> <operator>&lt;</operator> <name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid cursor state. sql: %s"</literal></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Shouldn't fetch new data before consuming existing."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>data_fetcher_store_tuple</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* No point in another fetch if we already detected EOF, though. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>df</name><operator>-&gt;</operator><name>eof</name></name> <operator>||</operator> <call><name><name>df</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>fetch_data</name></name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* More data was fetched so need to reset row index */</comment>
		<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>row</name> <operator>==</operator> <name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>tuples</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Return the next tuple. Must force the tuple into the slot since
	 * CustomScan initializes ss_ScanTupleSlot to a VirtualTupleTableSlot
	 * while we're storing a HeapTuple.
	 */</comment>
	<expr_stmt><expr><call><name>ExecForceStoreHeapTuple</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>tuples</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <comment type="block">/* shouldFree = */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>data_fetcher_store_next_tuple</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>data_fetcher_store_tuple</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name> <operator>&lt;=</operator> <name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>data_fetcher_set_fetch_size</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>fetch_size</name></name> <operator>=</operator> <name>fetch_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>data_fetcher_set_tuple_mctx</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>tuple_mctx</name></name> <operator>=</operator> <name>mctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>data_fetcher_reset</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>tuples</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>batch_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>req_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>batch_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>data_fetcher_free</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>df</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
