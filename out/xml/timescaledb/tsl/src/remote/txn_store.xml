<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/txn_store.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/hsearch.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection_cache.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NUM_ITEMS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><name>RemoteTxnStore</name> <modifier>*</modifier></type>
<name>remote_txn_store_create</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RemoteTxnStore</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteTxnStore</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSConnectionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <call><name>remote_txn_size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>mctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>store</name> <operator>=</operator> <operator>(</operator><name>RemoteTxnStore</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>hashtable</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"RemoteTxnStore"</literal></expr></argument>,
								 <argument><expr><name>DEFAULT_NUM_ITEMS</name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
								 <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>mctx</name> <operator>=</operator> <name>mctx</name></expr>,
	}</block></expr>;</expr_stmt>
	<return>return <expr><name>store</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RemoteTxn</name> <modifier>*</modifier></type>
<name>remote_txn_store_get</name><parameter_list>(<parameter><decl><type><name>RemoteTxnStore</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>TSConnectionId</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

		<comment type="block">/* Get a connection from the connection cache. We do this even for
		 * existing remote transactions because it will run checks on connections
		 * to ensure they're in a good state. We validate below that connections
		 * aren't remade for existing transactions. Always getting a connection
		 * from the cache avoids having to redo the same checks here and we can
		 * keep connection validation in one place. */</comment>
		<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>remote_connection_cache_get_connection</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* For existing transactions, we'd expect to continue on the same
			 * connection */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>conn</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					 <argument><expr><literal type="string">"unexpected connection state for remote transaction on node \"%s\""</literal></expr></argument>,
					 <argument><expr><call><name>remote_connection_node_name</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>remote_txn_init</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>remote_txn_store_remove</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found_out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>found_out</name> <operator>=</operator> <name>found</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remote_txn_store_remove</name><parameter_list>(<parameter><decl><type><name>RemoteTxnStore</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>TSConnectionId</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_cache_remove</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remote_txn_store_destroy</name><parameter_list>(<parameter><decl><type><name>RemoteTxnStore</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>txn</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>remote_txn_check_for_leaked_prepared_statements</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hashtable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
