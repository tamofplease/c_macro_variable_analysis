<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/dist_txn.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xlog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/hsearch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dist_txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DistTransactionEventHandler</name> <modifier>*</modifier></type><name>event_handler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>eventnames</name><index>[<expr><name>MAX_DTXN_EVENT</name></expr>]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>DTXN_EVENT_ANY</name></expr>]</index> <operator>=</operator> <literal type="string">"any"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_PRE_COMMIT</name></expr>]</index> <operator>=</operator> <literal type="string">"pre-commit"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_WAIT_COMMIT</name></expr>]</index> <operator>=</operator> <literal type="string">"waiting-commit"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_PRE_ABORT</name></expr>]</index> <operator>=</operator> <literal type="string">"pre-abort"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_PRE_PREPARE</name></expr>]</index> <operator>=</operator> <literal type="string">"pre-prepare-transaction"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_WAIT_PREPARE</name></expr>]</index> <operator>=</operator> <literal type="string">"waiting-prepare-transaction"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_POST_PREPARE</name></expr>]</index> <operator>=</operator> <literal type="string">"post-prepare-transaction"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_PRE_COMMIT_PREPARED</name></expr>]</index> <operator>=</operator> <literal type="string">"pre-commit-prepared"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_WAIT_COMMIT_PREPARED</name></expr>]</index> <operator>=</operator> <literal type="string">"waiting-commit-prepared"</literal></expr>,
	<expr><index>[<expr><name>DTXN_EVENT_SUB_XACT_ABORT</name></expr>]</index> <operator>=</operator> <literal type="string">"subxact-abort"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>remote_dist_txn_set_event_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DistTransactionEventHandler</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>event_handler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>eventcallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DistTransactionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>event_handler</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>event_handler</name><operator>-&gt;</operator><name>handler</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>event_handler</name><operator>-&gt;</operator><name>handler</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>event_handler</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>DistTransactionEvent</name></type>
<name>remote_dist_txn_event_from_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>eventname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_DTXN_EVENT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eventname</name></expr></argument>, <argument><expr><name><name>eventnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid event name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>remote_dist_txn_event_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DistTransactionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>eventnames</name><index>[<expr><name>event</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eventcallback</name><parameter_list>(<parameter><type><name>event</name></type></parameter>)</parameter_list></cpp:macro>                                                                       \
	<cpp:value>do                                                                                             \
	{                                                                                              \
	} while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>RemoteTxnStore</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Get a connection which can be used to execute queries on the remote PostgreSQL
 * data node with the user's authorization.  A new connection is established
 * if we don't already have a suitable one, and a transaction is opened at
 * the right subtransaction nesting depth if we didn't do that already.
 *
 * will_prep_stmt must be true if caller intends to create any prepared
 * statements.  Since those don't go away automatically at transaction end
 * (not even on error), we need this flag to cue manual cleanup.
 */</comment>
<function><type><name>TSConnection</name> <modifier>*</modifier></type>
<name>remote_dist_txn_get_connection</name><parameter_list>(<parameter><decl><type><name>TSConnectionId</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>RemoteTxnPrepStmtOption</name></type> <name>prep_stmt_opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>

	<comment type="block">/* First time through, initialize the remote_txn_store */</comment>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>remote_txn_store_create</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>remote_txn</name> <operator>=</operator> <call><name>remote_txn_store_get</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_begin</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>, <argument><expr><call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_set_will_prep_statement</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>, <argument><expr><name>prep_stmt_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This potentially deallocates prepared statements that were created in a subtxn
 * that aborted before it deallocated the statement.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_deallocate_prepared_stmts_if_needed</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>

	<comment type="block">/* below deallocate only happens on error so not worth making async */</comment>
	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>remote_txn_deallocate_prepared_stmts_if_needed</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* Perform actions on one-phase pre-commit.
 * Mainly just send a COMMIT to all remote nodes and wait for successes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_xact_callback_1pc_pre_commit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncRequestSet</name> <modifier>*</modifier></type><name>ars</name> <init>= <expr><call><name>async_request_set_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_PRE_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * In 1PC, we don't need to add entries to the remote_txn table. However
	 * we do need to take a SHARE lock on it to interlock with any distributed
	 * restore point activity that might be happening in parallel.
	 *
	 * The catalog table lock is kept until the transaction completes in order to
	 * synchronize with distributed restore point creation
	 */</comment>
	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>catalog</name><operator>-&gt;</operator><name>tables</name><index>[<expr><name>REMOTE_TXN</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send a commit to all connections */</comment>
	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Commit all remote transactions during pre-commit */</comment>
		<expr_stmt><expr><call><name>async_request_set_add</name><argument_list>(<argument><expr><name>ars</name></expr></argument>, <argument><expr><call><name>remote_txn_async_send_commit</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_WAIT_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* async collect all the replies */</comment>
	<expr_stmt><expr><call><name>async_request_set_wait_all_ok_commands</name><argument_list>(<argument><expr><name>ars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dist_txn_deallocate_prepared_stmts_if_needed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Abort on the access node.
 *
 * The access node needs to send aborts to all of the remote endpoints. This
 * code should not throw errors itself, since we are already in abort due to a
 * previous error. Instead, we try to emit errors as warnings. For safety, we
 * should probaby try-catch and swallow any potential lower-layer errors given
 * that we're doing remote calls over the network. But the semantics for
 * capturing and proceeding after such recursive errors are unclear.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_xact_callback_abort</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_PRE_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>remote_txn_is_ongoing</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>remote_txn_abort</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				 <argument><expr><literal type="string">"transaction rollback on data node \"%s\" failed"</literal></expr></argument>,
				 <argument><expr><call><name>remote_connection_node_name</name><argument_list>(<argument><expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Reject transactions that didn't successfully complete a transaction
 * transition at some point.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reject_transaction_with_incomplete_transition</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TSConnection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>remote_connection_xact_is_transitioning</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NameData</name></type> <name>nodename</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nodename</name></expr></argument>, <argument><expr><call><name>remote_connection_node_name</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_txn_store_remove</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>remote_txn_get_connection_id</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"connection to data node \"%s\" was lost"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>reject_transactions_with_incomplete_transitions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>

	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>reject_transaction_with_incomplete_transition</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_at_end_of_transaction</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>

	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* The connection could have failed at START TRANSACTION, in which
		 * case the depth is 0. Otherwise, we'd expect depth 1. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>pgconn</name> <init>= <expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Indicate we're out of the transaction */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>remote_connection_xact_depth_dec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Cleanup connections with failed transactions */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name> <operator>||</operator> <call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name>pgconn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PQTRANS_IDLE</name> <operator>||</operator>
				<call><name>remote_connection_xact_is_transitioning</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"discarding connection %p"</literal></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>remote_txn_store_remove</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>remote_txn_get_connection_id</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>remote_txn_store_destroy</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>store</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * cursor are per-connection and txn so it's safe to reset at the end of
	 * the txn.
	 */</comment>
	<expr_stmt><expr><call><name>remote_connection_reset_cursor_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Transaction callback for one-phase commits.
 *
 * With one-phase commits, we send a remote commit during local pre-commit or
 * a remote abort during local abort.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_xact_callback_1pc</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>event</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XACT_EVENT_PRE_COMMIT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_PARALLEL_PRE_COMMIT</name></expr>:</case>
			<expr_stmt><expr><call><name>reject_transactions_with_incomplete_transitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dist_txn_xact_callback_1pc_pre_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XACT_EVENT_PRE_PREPARE</name></expr>:</case>

			<comment type="block">/*
			 * Cannot prepare stuff on the access node.
			 */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot prepare a transaction that modified "</literal>
							<literal type="string">"remote tables"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XACT_EVENT_PARALLEL_COMMIT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_COMMIT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_PREPARE</name></expr>:</case>
			<comment type="block">/* Pre-commit should have closed the open transaction in 1pc */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missed cleaning up connection during pre-commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XACT_EVENT_PARALLEL_ABORT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_ABORT</name></expr>:</case>
			<expr_stmt><expr><call><name>dist_txn_xact_callback_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* In one-phase commit, we're done irrespective of event */</comment>
	<expr_stmt><expr><call><name>cleanup_at_end_of_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_send_prepare_transaction</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncRequestSet</name> <modifier>*</modifier></type><name>ars</name> <init>= <expr><call><name>async_request_set_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>error_response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_PRE_PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send a prepare transaction to all connections */</comment>
	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>remote_txn_write_persistent_record</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>remote_txn_async_send_prepare_transaction</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>async_request_set_add</name><argument_list>(<argument><expr><name>ars</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_WAIT_PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * async collect the replies. Since errors in PREPARE TRANSACTION are not
	 * uncommon, handle them gracefully: delay throwing errors in results
	 * until all responses collected since you need to mark
	 * changing_xact_state correctly. So throw errors on connection errors but
	 * not errors in results.
	 */</comment>
	<expr_stmt><expr><name>error_response</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>async_request_set_wait_any_response</name><argument_list>(<argument><expr><name>ars</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><call><name>async_response_get_type</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RESPONSE_COMMUNICATION_ERROR</name></expr>:</case>
			<case>case <expr><name>RESPONSE_ERROR</name></expr>:</case>
			<case>case <expr><name>RESPONSE_ROW</name></expr>:</case>
			<case>case <expr><name>RESPONSE_TIMEOUT</name></expr>:</case>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"error during second phase of two-phase commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>async_response_report_error</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			<case>case <expr><name>RESPONSE_RESULT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>response_result</name> <init>= <expr><operator>(</operator><name>AsyncResponseResult</name> <operator>*</operator><operator>)</operator> <name>res</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>=
					<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name>response_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
					<name>PGRES_COMMAND_OK</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* save first error, warn about subsequent errors */</comment>
					<if_stmt><if>if <condition>(<expr><name>error_response</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>error_response</name> <operator>=</operator> <operator>(</operator><name>AsyncResponse</name> <operator>*</operator><operator>)</operator> <name>response_result</name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>async_response_report_error</name><argument_list>(<argument><expr><operator>(</operator><name>AsyncResponse</name> <operator>*</operator><operator>)</operator> <name>response_result</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>async_response_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			</block_content>}</block>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>error_response</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>async_response_report_error</name><argument_list>(<argument><expr><name>error_response</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_POST_PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_send_commit_prepared_transaction</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncRequestSet</name> <modifier>*</modifier></type><name>ars</name> <init>= <expr><call><name>async_request_set_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * send a commit transaction to all connections and asynchronously collect
	 * the replies
	 */</comment>
	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>remote_txn_async_send_commit_prepared</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"error during second phase of two-phase commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>async_request_set_add</name><argument_list>(<argument><expr><name>ars</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_WAIT_COMMIT_PREPARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* async collect the replies */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>async_request_set_wait_any_response</name><argument_list>(<argument><expr><name>ars</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* throw WARNINGS not ERRORS here */</comment>
		<comment type="block">/*
		 * NOTE: warnings make sure that all data nodes get a commit prepared.
		 * But, there is arguably some weirdness here in terms of RYOW if
		 * there is an error.
		 */</comment>
		<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>response_result</name></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><call><name>async_response_get_type</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RESPONSE_COMMUNICATION_ERROR</name></expr>:</case>
			<case>case <expr><name>RESPONSE_ERROR</name></expr>:</case>
			<case>case <expr><name>RESPONSE_ROW</name></expr>:</case>
			<case>case <expr><name>RESPONSE_TIMEOUT</name></expr>:</case>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"error during second phase of two-phase commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>async_response_report_error</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			<case>case <expr><name>RESPONSE_RESULT</name></expr>:</case>
				<expr_stmt><expr><name>response_result</name> <operator>=</operator> <operator>(</operator><name>AsyncResponseResult</name> <operator>*</operator><operator>)</operator> <name>res</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name>response_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator>
					<name>PGRES_COMMAND_OK</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>async_response_report_error</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>async_response_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Transaction callback for two-phase commit.
 *
 * With two-phase commits, we write a persistent record and send a remote
 * PREPARE TRANSACTION during local pre-commit. After commit we send a remote
 * COMMIT TRANSACTION.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_xact_callback_2pc</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>event</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XACT_EVENT_PARALLEL_PRE_COMMIT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_PRE_COMMIT</name></expr>:</case>
			<expr_stmt><expr><call><name>reject_transactions_with_incomplete_transitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dist_txn_send_prepare_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dist_txn_deallocate_prepared_stmts_if_needed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XACT_EVENT_PRE_PREPARE</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_PREPARE</name></expr>:</case>

			<comment type="block">/*
			 * Cannot prepare stuff on the access node.
			 */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot prepare a transaction that modified "</literal>
							<literal type="string">"remote tables"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XACT_EVENT_PARALLEL_COMMIT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_COMMIT</name></expr>:</case>
			<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_PRE_COMMIT_PREPARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * We send a commit here so that future commands on this
			 * connection get read-your-own-writes semantics. Later, we can
			 * optimize latency on connections by doing this in a background
			 * process and using IPC to assure RYOW
			 */</comment>
			<expr_stmt><expr><call><name>dist_txn_send_commit_prepared_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * NOTE: You cannot delete the remote_txn_persistent_record here
			 * because you are out of transaction. Therefore cleanup of those
			 * entries has to happen in a background process or manually.
			 */</comment>
			<expr_stmt><expr><call><name>cleanup_at_end_of_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XACT_EVENT_PARALLEL_ABORT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_ABORT</name></expr>:</case>
			<expr_stmt><expr><call><name>dist_txn_xact_callback_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>cleanup_at_end_of_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_xact_callback</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>use_2pc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xactReadOnly</name></decl>;</decl_stmt>

	<comment type="block">/* Quick exit if no connections were touched in this transaction. */</comment>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Windows MSVC builds have linking issues for GUC variables from postgres for
	 * use inside this extension. So we use GetConfigOptionByName
	 */</comment>
	<expr_stmt><expr><name>xactReadOnly</name> <operator>=</operator> <call><name>GetConfigOptionByName</name><argument_list>(<argument><expr><literal type="string">"transaction_read_only"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The decision to use 2PC rests on multiple factors:
	 *
	 * 1) if ts_guc_enable_2pc is enabled and it's a regular backend use it
	 *
	 * 2) if ts_guc_enable_2pc is enabled but we are running a read only txn, don't use it
	 *
	 * We might be tempted to use 1PC if just one DN is involved in the transaction.
	 * However, it's possible that a transaction which involves data on AN and the one DN could get
	 * a failure at the end of the COMMIT processing on the AN due to issues in local AN data. In
	 * such a case since we send a COMMIT at "XACT_EVENT_PRE_COMMIT" event time to the DN, we might
	 * end up with a COMMITTED DN but an aborted AN! Hence this optimization is not possible to
	 * guarantee transactional semantics.
	 */</comment>
	<expr_stmt><expr><name>use_2pc</name> <operator>=</operator> <operator>(</operator><name>ts_guc_enable_2pc</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>xactReadOnly</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"use 2PC: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>use_2pc</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>use_2pc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dist_txn_xact_callback_2pc</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dist_txn_xact_callback_1pc</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Subtransaction callback handler.
 *
 * If the subtxn was committed, send a RELEASE SAVEPOINT to the remote nodes.
 * If the subtxn was aborted, send a ROLLBACK SAVEPOINT and set a deferred
 * error if that fails.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_txn_subxact_callback</name><parameter_list>(<parameter><decl><type><name>SubXactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>mySubid</name></decl></parameter>,
						  <parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>remote_txn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>curlevel</name></decl>;</decl_stmt>

	<comment type="block">/* Quick exit if no connections were touched in this transaction. */</comment>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>event</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SUBXACT_EVENT_START_SUB</name></expr>:</case>
		<case>case <expr><name>SUBXACT_EVENT_COMMIT_SUB</name></expr>:</case>
			<comment type="block">/* Nothing to do at subxact start, nor after commit. */</comment>
			<return>return;</return>
		<case>case <expr><name>SUBXACT_EVENT_PRE_COMMIT_SUB</name></expr>:</case>
			<expr_stmt><expr><call><name>reject_transactions_with_incomplete_transitions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SUBXACT_EVENT_ABORT_SUB</name></expr>:</case>
			<expr_stmt><expr><call><name>eventcallback</name><argument_list>(<argument><expr><name>DTXN_EVENT_SUB_XACT_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>curlevel</name> <operator>=</operator> <call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<macro><name>remote_txn_store_foreach</name><argument_list>(<argument>store</argument>, <argument>remote_txn</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>remote_txn_get_connection</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remote_txn_is_at_sub_txn_level</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>, <argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>SUBXACT_EVENT_PRE_COMMIT_SUB</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>reject_transaction_with_incomplete_transition</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>remote_txn_sub_txn_pre_commit</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>, <argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>event</name> <operator>==</operator> <name>SUBXACT_EVENT_ABORT_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>remote_txn_sub_txn_abort</name><argument_list>(<argument><expr><name>remote_txn</name></expr></argument>, <argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>remote_connection_xact_depth_dec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_remote_dist_txn_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RegisterXactCallback</name><argument_list>(<argument><expr><name>dist_txn_xact_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterSubXactCallback</name><argument_list>(<argument><expr><name>dist_txn_subxact_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_remote_dist_txn_fini</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="block">/* can't unregister callbacks */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>store</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>remote_txn_store_destroy</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>store</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
