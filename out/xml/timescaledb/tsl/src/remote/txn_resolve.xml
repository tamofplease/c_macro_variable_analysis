<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/txn_resolve.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgrprotos.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgroids.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/transam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn_resolve.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn.h"</cpp:file></cpp:include>

<function><type><name>RemoteTxnResolution</name></type>
<name>remote_txn_resolution</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>foreign_server</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RemoteTxnId</name> <modifier>*</modifier></type><name>transaction_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>remote_txn_is_still_in_progress_on_access_node</name><argument_list>(<argument><expr><name><name>transaction_id</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* transaction still ongoing; don't know its state */</comment>
		<return>return <expr><name>REMOTE_TXN_RESOLUTION_IN_PROGRESS</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If an entry exists in the "remote_txn" table and is visible then it means
	 * that the transaction committed on the AN
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>remote_txn_persistent_record_exists</name><argument_list>(<argument><expr><name>transaction_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REMOTE_TXN_RESOLUTION_COMMIT</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If the txn is not in progress and is not committed as per the "remote_txn"
	 * table then it's presumed to be aborted.
	 *
	 * We could ask PG machinery to confirm the abort but as long as we are sticking
	 * to one uniform behavior consistently it should be ok for now.
	 */</comment>
	<return>return <expr><name>REMOTE_TXN_RESOLUTION_ABORT</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Resolve any unresolved 2-pc transaction on a data node.
 * Since the remote_txn log can be long, and most txn there
 * will have been resolved, do not iterate that list.
 *
 * Instead query the data node for the list of unresolved txns
 * via the pg_prepared_xacts view. Using that list, then check
 * remote_txn. Use this as an opportunity to clean up remote_txn
 * as well.
 *
 * Note that pg_prepared_xacts shared across other databases which
 * also could be distributed. Right now we interested only in
 * the current one.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PREPARED_XACT_SQL</name></cpp:macro>                                                                      \
	<cpp:value>"SELECT gid FROM pg_prepared_xacts WHERE database = current_database()"</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>remote_txn_heal_data_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>foreign_server_oid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>remote_connection_open</name><argument_list>(<argument><expr><name>foreign_server_oid</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>resolved</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Use a raw connection since you need to be out of transaction to do
	 * COMMIT/ROLLBACK PREPARED
	 */</comment>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>in_progress_txn_gids</name> <init>= <expr><name>NIL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>healed_txn_gids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>non_ts_txns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ntuples</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type> <name>n_gid_errors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* how many errors to induce? */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * This function cannot be called inside a transaction block since effects
	 * cannot be rolled back
	 */</comment>
	<expr_stmt><expr><call><name>PreventInTransactionBlock</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"remote_txn_heal_data_node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>remote_connection_query_ok</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>GET_PREPARED_XACT_SQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ntuples</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>ntuples</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>id_string</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RemoteTxnId</name> <modifier>*</modifier></type><name>tpc_gid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RemoteTxnResolution</name></type> <name>resolution</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remote_txn_id_matches_prepared_txn</name><argument_list>(<argument><expr><name>id_string</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>non_ts_txns</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>tpc_gid</name> <operator>=</operator> <call><name>remote_txn_id_in</name><argument_list>(<argument><expr><name>id_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>resolution</name> <operator>=</operator> <call><name>remote_txn_resolution</name><argument_list>(<argument><expr><name>foreign_server_oid</name></expr></argument>, <argument><expr><name>tpc_gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
		<comment type="block">/*
		 * Induce an error in the GID so that the remote side errors out when it tries
		 * to heal it.
		 *
		 * We inject the error by checking the value of the below session variable. Not
		 * a full GUC, just a tool to allow us to randomly inject error for testing
		 * purposes. Depending on the value we will inject an error in the GID and also
		 * additionally change the resolution as per the accepted value:
		 *
		 * "commit"  : change GID + set resolution as COMMITTED
		 * "abort"   : change GID + set resolution as ABORTED
		 * "inprogress" : set resolution as IN_PROGRESS
		 *
		 * Any other setting will not have any effect
		 *
		 * We currently induce error in one GID processing. If needed this can be
		 * changed in the future via another session variable to set to a specific
		 * number of errors to induce. Note that this variable is incremented only
		 * for valid values of "timescaledb.debug_inject_gid_error.
		 *
		 * Current logic also means that the first GID being processed will always
		 * induce a change in resolution behavior. But that's ok, we could randomize
		 * it later to any arbitrary integer value less than ntuples in the future.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>n_gid_errors</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inject_gid_error</name> <init>=
				<expr><call><name>GetConfigOption</name><argument_list>(<argument><expr><literal type="string">"timescaledb.debug_inject_gid_error"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* increment the user_id field to cause mismatch in GID */</comment>
			<if_stmt><if>if <condition>(<expr><name>inject_gid_error</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>inject_gid_error</name></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>tpc_gid</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>user_id</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>resolution</name> <operator>=</operator> <name>REMOTE_TXN_RESOLUTION_ABORT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>n_gid_errors</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>inject_gid_error</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>tpc_gid</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>user_id</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>resolution</name> <operator>=</operator> <name>REMOTE_TXN_RESOLUTION_COMMIT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>n_gid_errors</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>inject_gid_error</name></expr></argument>, <argument><expr><literal type="string">"inprogress"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>resolution</name> <operator>=</operator> <name>REMOTE_TXN_RESOLUTION_IN_PROGRESS</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>n_gid_errors</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* any other value is simply ignored, n_gid_errors is also not incremented */</comment>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/*
		 * We don't expect these commands to fail, but if they do, continue and move on to
		 * healing up the next GID in the list. The ones that failed will get retried if
		 * they are still around on the datanodes the next time over.
		 */</comment>
		<switch>switch <condition>(<expr><name>resolution</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>REMOTE_TXN_RESOLUTION_COMMIT</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(
						<argument><expr><call><name>remote_connection_exec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><call><name>remote_txn_id_commit_prepared_sql</name><argument_list>(<argument><expr><name>tpc_gid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
					<name>PGRES_COMMAND_OK</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>healed_txn_gids</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>healed_txn_gids</name></expr></argument>, <argument><expr><name>id_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>resolved</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not commit prepared transaction on data node \"%s\""</literal></expr></argument>,
									<argument><expr><call><name>remote_connection_node_name</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To retry, manually run \"COMMIT PREPARED %s\" on the data "</literal>
									 <literal type="string">"node or run the healing function again."</literal></expr></argument>,
									 <argument><expr><name>id_string</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>REMOTE_TXN_RESOLUTION_ABORT</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><call><name>remote_connection_exec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
														  <argument><expr><call><name>remote_txn_id_rollback_prepared_sql</name><argument_list>(
															  <argument><expr><name>tpc_gid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>healed_txn_gids</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>healed_txn_gids</name></expr></argument>, <argument><expr><name>id_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>resolved</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not roll back prepared transaction on data node \"%s\""</literal></expr></argument>,
									<argument><expr><call><name>remote_connection_node_name</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To retry, manually run \"ROLLBACK PREPARED %s\" on the data "</literal>
									 <literal type="string">"node or run the healing function again."</literal></expr></argument>,
									 <argument><expr><name>id_string</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>REMOTE_TXN_RESOLUTION_IN_PROGRESS</name></expr>:</case>
				<expr_stmt><expr><name>in_progress_txn_gids</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>in_progress_txn_gids</name></expr></argument>, <argument><expr><name>id_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>non_ts_txns</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"skipping %d non-TimescaleDB prepared transaction"</literal></expr></argument>, <argument><expr><name>non_ts_txns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Perform cleanup of all records if there are no in progress txns and if the number of
	 * resolved entities is same as the number of rows obtained from the datanode.
	 *
	 * In a heavily loaded system there's a possibility of ongoing transactions always being
	 * present in which case we will never get a chance to clean up entries in "remote_txn"
	 * table. So, we track healed gids in a list and delete those specific rows to keep the
	 * "remote_txn" table from growing up indefinitely.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>in_progress_txn_gids</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>resolved</name> <operator>==</operator> <name>ntuples</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>remote_txn_persistent_record_delete_for_data_node</name><argument_list>(<argument><expr><name>foreign_server_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>resolved</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>healed_txn_gids</name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>healed_txn_gids</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>remote_txn_persistent_record_delete_for_data_node</name><argument_list>(<argument><expr><name>foreign_server_oid</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>remote_result_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>resolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
