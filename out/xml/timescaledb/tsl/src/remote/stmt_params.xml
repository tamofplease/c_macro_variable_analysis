<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/stmt_params.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/pathnodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stmt_params.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PG_STMT_PARAMS</name></cpp:macro>                                                                         \
	<cpp:value>USHRT_MAX</cpp:value></cpp:define> <comment type="block">/* PostgreSQL limitation of max parameters in the statement                          \
			   */</comment>

<typedef>typedef <type><struct>struct <name>StmtParams</name>
<block>{
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>conv_funcs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>formats</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lengths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_params</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_tuples</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>converted_tuples</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ctid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>target_attr_nums</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl>;</decl_stmt>	   <comment type="block">/* where we allocate param values */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tmp_ctx</name></decl>;</decl_stmt> <comment type="block">/* used for converting values */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>preset</name></decl>;</decl_stmt>		   <comment type="block">/* idicating if we set values explicitly */</comment>
}</block></struct></type> <name>StmtParams</name>;</typedef>

<comment type="block">/*
 * Check that chosen num_tuples value does not reach the maximum number of
 * prepared statement parameters.
 *
 * Otherwise recalculate and return max num_tuples value that will
 * respect the limit.
 */</comment>
<function><type><name>int</name></type>
<name>stmt_params_validate_num_tuples</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_tuples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>num_params</name> <operator>&lt;=</operator> <name>MAX_PG_STMT_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Sanity check num_params and avoid division by zero */</comment>
	<if_stmt><if>if <condition>(<expr><name>num_params</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>num_params</name> <operator>*</operator> <name>num_tuples</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_PG_STMT_PARAMS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>MAX_PG_STMT_PARAMS</name> <operator>/</operator> <name>num_params</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>num_tuples</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ctid should be set to true if we're going to send it
 * num_tuples is used for batching
 * mctx memory context where we'll allocate StmtParams with all the values
 */</comment>
<function><type><name>StmtParams</name> <modifier>*</modifier></type>
<name>stmt_params_create</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>target_attr_nums</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ctid</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tuple_desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_tuples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>typefnoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isbinary</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tup_cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tmp_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
								<argument><expr><literal type="string">"stmt params mem context"</literal></expr></argument>,
								<argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp_ctx</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="string">"stmt params conversion"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StmtParams</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>=</operator> <ternary><condition><expr><name>ctid</name></expr> ?</condition><then> <expr><call><name>list_length</name><argument_list>(<argument><expr><name>target_attr_nums</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><call><name>list_length</name><argument_list>(<argument><expr><name>target_attr_nums</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>num_tuples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>*</operator> <name>num_tuples</name> <operator>&gt;</operator> <name>MAX_PG_STMT_PARAMS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many parameters in prepared statement. Max is %d"</literal></expr></argument>, <argument><expr><name>MAX_PG_STMT_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>conv_funcs</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>num_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>*</operator> <name>num_tuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>lengths</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>*</operator> <name>num_tuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>*</operator> <name>num_tuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>ctid</name></name> <operator>=</operator> <name>ctid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>target_attr_nums</name></name> <operator>=</operator> <name>target_attr_nums</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>num_tuples</name></name> <operator>=</operator> <name>num_tuples</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>converted_tuples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>mctx</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>tmp_ctx</name></name> <operator>=</operator> <name>tmp_ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>preset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>ctid</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>typefnoid</name> <operator>=</operator> <call><name>data_format_get_type_output_func</name><argument_list>(<argument><expr><name>TIDOID</name></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>isbinary</name></expr></argument>,
													 <argument><expr><operator>!</operator><name>ts_guc_enable_connection_binary_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>typefnoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isbinary</name></expr> ?</condition><then> <expr><name>FORMAT_BINARY</name></expr> </then><else>: <expr><name>FORMAT_TEXT</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>target_attr_nums</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>attr_num</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tuple_desc</name></expr></argument>, <argument><expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>attr_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>typefnoid</name> <operator>=</operator> <call><name>data_format_get_type_output_func</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>isbinary</name></expr></argument>,
													 <argument><expr><operator>!</operator><name>ts_guc_enable_connection_binary_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isbinary</name></expr> ?</condition><then> <expr><name>FORMAT_BINARY</name></expr> </then><else>: <expr><name>FORMAT_TEXT</name></expr></else></ternary></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>typefnoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>==</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>tup_cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>tup_cnt</name> <operator>&lt;</operator> <name><name>params</name><operator>-&gt;</operator><name>num_tuples</name></name></expr>;</condition> <incr><expr><name>tup_cnt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name></name> <operator>+</operator> <name>tup_cnt</name> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>num_params</name></name></expr></argument>,
			   <argument><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>num_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>params</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>StmtParams</name> <modifier>*</modifier></type>
<name>stmt_params_create_from_values</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>param_values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>new</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n_params</name> <operator>&gt;</operator> <name>MAX_PG_STMT_PARAMS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many parameters in prepared statement. Max is %d"</literal></expr></argument>, <argument><expr><name>MAX_PG_STMT_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
								<argument><expr><literal type="string">"stmt params mem context"</literal></expr></argument>,
								<argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StmtParams</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StmtParams</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>mctx</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>=</operator> <name>n_params</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>param_values</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>preset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>params</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>all_values_in_binary_format</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>formats</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_params</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>FORMAT_BINARY</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * tupleid is ctid. If ctid was set to true tupleid has to be provided
 */</comment>
<function><type><name>void</name></type>
<name>stmt_params_convert_values</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>tupleid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nest_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>all_binary</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>param_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>num_params</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>converted_tuples</name></name> <operator>*</operator> <name><name>params</name><operator>-&gt;</operator><name>num_params</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>converted_tuples</name></name> <operator>&lt;</operator> <name><name>params</name><operator>-&gt;</operator><name>num_tuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>tmp_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tupleid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bytea</name> <modifier>*</modifier></type><name>output_bytes</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>ctid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>FORMAT_BINARY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>output_bytes</name> <operator>=</operator>
				<call><name>SendFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>param_idx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>tupleid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>output_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>output_bytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator>
				<call><name>OutputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>param_idx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>tupleid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>param_idx</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>ctid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"was configured to use ctid, but tupleid is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>all_binary</name> <operator>=</operator> <call><name>all_values_in_binary_format</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>num_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>all_binary</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nest_level</name> <operator>=</operator> <call><name>set_transmission_modes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>params-&gt;target_attr_nums</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>attr_num</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>attr_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>FORMAT_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>OutputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>param_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>FORMAT_BINARY</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bytea</name> <modifier>*</modifier></type><name>output_bytes</name> <init>= <expr><call><name>SendFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>param_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>output_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>lengths</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>output_bytes</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected parameter format: %d"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>formats</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>param_idx</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>converted_tuples</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>all_binary</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>reset_transmission_modes</name><argument_list>(<argument><expr><name>nest_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>stmt_params_reset</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>tmp_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>tmp_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>converted_tuples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free params memory context and child context we've used for converting values to binary or text
 */</comment>
<function><type><name>void</name></type>
<name>stmt_params_free</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type>
<name>stmt_params_formats</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>stmt_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stmt_params</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>stmt_params</name><operator>-&gt;</operator><name>formats</name></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type>
<name>stmt_params_lengths</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>stmt_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stmt_params</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>stmt_params</name><operator>-&gt;</operator><name>lengths</name></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type>
<name>stmt_params_values</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>stmt_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stmt_params</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>stmt_params</name><operator>-&gt;</operator><name>values</name></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>stmt_params_num_params</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>stmt_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stmt_params</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>stmt_params</name><operator>-&gt;</operator><name>num_params</name></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>stmt_params_total_values</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>stmt_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stmt_params</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>stmt_params</name><operator>-&gt;</operator><name>preset</name></name></expr> ?</condition><then> <expr><name><name>stmt_params</name><operator>-&gt;</operator><name>num_params</name></name></expr> </then><else>:
									 <expr><name><name>stmt_params</name><operator>-&gt;</operator><name>converted_tuples</name></name> <operator>*</operator> <name><name>stmt_params</name><operator>-&gt;</operator><name>num_params</name></name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>stmt_params_converted_tuples</name><parameter_list>(<parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>stmt_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>stmt_params</name><operator>-&gt;</operator><name>converted_tuples</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
