<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/txn.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/procarray.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq-fe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/txn_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn_id.h"</cpp:file></cpp:include>

<comment type="block">/* This seemingly long timeout matches what postgres_fdw uses. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_EXEC_CLEANUP_TIMEOUT_MS</name></cpp:macro> <cpp:value>30000</cpp:value></cpp:define>

<comment type="block">/*
 * This RemoteTxn represents one remote end in a distributed txn.
 * Thus, a distributed txn is made up of a collection remote txn.
 * Each remote txn corresponds to one remote connection and there
 * is a unique remote connection per TSConnectionId used in the
 * distributed txn. Because of this uniqueness property,
 * the connection id appears first in the object, to allow
 * it to be a hash key.
 *
 * The "conn" pointer can be NULL if we don't currently have a live connection.
 * When we do have a connection, xact_depth tracks the current depth of
 * transactions and subtransactions open on the remote side.  We need to issue
 * commands at the same nesting depth on the remote as we're executing at
 * ourselves, so that rolling back a subtransaction will kill the right
 * queries and not the wrong ones.
 */</comment>

<typedef>typedef <type><struct>struct <name>RemoteTxn</name>
<block>{
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id</name></decl>;</decl_stmt>	<comment type="block">/* hash key (must be first) */</comment>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt> <comment type="block">/* connection to data node, or NULL */</comment>
	<comment type="block">/* Remaining fields are invalid when conn is NULL: */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>have_prep_stmt</name></decl>;</decl_stmt>	<comment type="block">/* have we prepared any stmts in this xact? */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>have_subtxn_error</name></decl>;</decl_stmt> <comment type="block">/* have any subxacts aborted in this xact? */</comment>
	<decl_stmt><decl><type><name>RemoteTxnId</name> <modifier>*</modifier></type><name>remote_txn_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>RemoteTxn</name>;</typedef>

<comment type="block">/*
 * Start remote transaction or subtransaction, if it hasn't been
 * already started (e.g. by a previous command in the same txn).
 *
 * We always use at least REPEATABLE READ in the remote session.
 * This is important even for cases where we use the a single connection to
 * a data node. This is because a single command from the access node may cause
 * multiple remote commands to be executed (e.g. a join of two tables on one remote
 * node might not be pushed down and instead two different queries are sent
 * to the remote node, one for each table in the join). Since in READ
 * COMMITTED the snapshot is refreshed on each command, the semantics are off
 * when multiple commands are meant to be part of the same one.
 *
 * This isn't great but we have no alternative unless we ensure that each access
 * node command always translates to one data node query or if we had some other way to
 * control which remote queries share a snapshot or when a snapshot is refreshed.
 *
 * NOTE: this does not guarantee any kind of snapshot isolation to different connections
 * to the same data node. That only happens if we use multiple connection ids to the same data node
 * in one access node transaction. Thus, such connections that use different users will potentially
 * see inconsistent results. To solve this problem of inconsistent results, we could export the
 * snapshot of the first connection to a remote node using pg_export_snapshot() and then use that
 * using SET TRANSACTION SNAPSHOT xxxx across all other connections to that node during the
 * transaction. However, given that we currently don't have snapshot isolation across different
 * nodes, we don't want to commit to the overhead of exporting snapshots at this time.
 */</comment>
<function><type><name>void</name></type>
<name>remote_txn_begin</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curlevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>xact_depth</name> <init>= <expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Start main transaction if we haven't yet */</comment>
	<if_stmt><if>if <condition>(<expr><name>xact_depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StringInfoData</name></type> <name>sql</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xactReadOnly</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_get_status</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONN_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"starting remote transaction on connection %p"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"START TRANSACTION ISOLATION LEVEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IsolationIsSerializable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">" SERIALIZABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">" REPEATABLE READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * Windows MSVC builds have linking issues for GUC variables from postgres for
		 * use inside this extension. So we use GetConfigOptionByName
		 */</comment>
		<expr_stmt><expr><name>xactReadOnly</name> <operator>=</operator> <call><name>GetConfigOptionByName</name><argument_list>(<argument><expr><literal type="string">"transaction_read_only"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If we are initiating connection from a standby (of an AN for example),
		 * then the remote connection transaction needs to be also set up as a
		 * READ ONLY one. This will catch any commands that are sent from the
		 * read only AN to datanodes but which could have potential read-write
		 * side effects on data nodes.
		 *
		 * Note that when the STANDBY gets promoted then the ongoing transaction
		 * will remain READ ONLY till its completion. New transactions will be
		 * suitably READ WRITE. This is a slight change in behavior as compared to
		 * regular Postgres, but promotion is not a routine activity, so it should
		 * be acceptable and typically users would be reconnecting to the new
		 * promoted AN anyways.
		 *
		 * Note that the below will also handle the case when primary AN has a
		 * transaction which does an explicit "BEGIN TRANSACTION READ ONLY;". The
		 * treatment is the same, mark the remote DN transaction as READ ONLY
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>xactReadOnly</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">" READ ONLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_connection_cmd_ok</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_connection_xact_transition_end</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xact_depth</name> <operator>=</operator> <call><name>remote_connection_xact_depth_inc</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* If the connection is in COPY mode, then exit out of it */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>remote_connection_get_status</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONN_COPY_IN</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSConnectionError</name></type> <name>err</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remote_connection_end_copy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>remote_connection_error_elog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If we're in a subtransaction, stack up savepoints to match our level.
	 * This ensures we can rollback just the desired effects when a
	 * subtransaction aborts.
	 */</comment>
	<while>while <condition>(<expr><name>xact_depth</name> <operator>&lt;</operator> <name>curlevel</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_connection_cmdf_ok</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"SAVEPOINT s%d"</literal></expr></argument>, <argument><expr><name>xact_depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_connection_xact_transition_end</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xact_depth</name> <operator>=</operator> <call><name>remote_connection_xact_depth_inc</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Check if the access node transaction which is driving the 2PC on the datanodes is
 * still in progress.
 */</comment>
<function><type><name>bool</name></type>
<name>remote_txn_is_still_in_progress_on_access_node</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>access_node_xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdIsCurrentTransactionId</name><argument_list>(<argument><expr><name>access_node_xid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"checking if a commit is still in progress on same txn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>TransactionIdIsInProgress</name><argument_list>(<argument><expr><name>access_node_xid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>remote_txn_size</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteTxn</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remote_txn_init</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reset all transient state fields, to be sure all are clean */</comment>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_prep_stmt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_subtxn_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Now try to make the connection */</comment>
	<comment type="block">/* in connection  */</comment>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>,
		 <argument><expr><literal type="string">"new connection %p for data node \"%s\" (server "</literal>
		 <literal type="string">"oid %u, userid %u)"</literal></expr></argument>,
		 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
		 <argument><expr><call><name>remote_connection_node_name</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>,
		 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>server_id</name></name></expr></argument>,
		 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>user_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RemoteTxn</name> <modifier>*</modifier></type>
<name>remote_txn_begin_on_connection</name><parameter_list>(<parameter><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteTxn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>remote_txn_init</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_txn_begin</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>txn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remote_txn_set_will_prep_statement</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>RemoteTxnPrepStmtOption</name></type> <name>prep_stmt_option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>will_prep_stmt</name> <init>= <expr><operator>(</operator><name>prep_stmt_option</name> <operator>==</operator> <name>REMOTE_TXN_USE_PREP_STMT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_prep_stmt</name></name> <operator>|=</operator> <name>will_prep_stmt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TSConnection</name> <modifier>*</modifier></type>
<name>remote_txn_get_connection</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>txn</name><operator>-&gt;</operator><name>conn</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSConnectionId</name></type>
<name>remote_txn_get_connection_id</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>txn</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remote_txn_report_prepare_transaction_result</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function submits commands to remote nodes during (sub)abort processing.
 * Because remote nodes can be in a weird state and at the same time errors should
 * not be thrown here, the processing here is a bit different.
 *
 * We submit a query during and wait up to 30 seconds for the result. All errors
 * are reported as WARNINGS into the log.
 *
 * If the query is executed without error, the return value is true.
 * If the query can't be sent, errors out, or times out, the return value is false.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>exec_cleanup_command</name><parameter_list>(<parameter><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>end_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pg_result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If it takes too long to execute a cleanup query, assume the connection
	 * is dead.  It's fairly likely that this is why we aborted in the first
	 * place (e.g. statement timeout, user cancel), so the timeout shouldn't
	 * be too long.
	 */</comment>
	<expr_stmt><expr><name>end_time</name> <operator>=</operator> <call><name>TimestampTzPlusMilliseconds</name><argument_list>(<argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_EXEC_CLEANUP_TIMEOUT_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Send the query. Since we don't use non-blocking mode, this also can
	 * block. But its risk is relatively small, so we ignore that for now.
	 */</comment>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send_with_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Wait until the command completes or there is a timeout or error */</comment>
	<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>async_request_cleanup_result</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>response</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>async_response_get_type</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RESPONSE_TIMEOUT</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"abort processing: timeout executing %s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESPONSE_COMMUNICATION_ERROR</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"abort processing: communication error executing %s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESPONSE_ERROR</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"abort processing: error while executing %s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RESPONSE_RESULT</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>AsyncResponseResult</name> <operator>*</operator><operator>)</operator> <name>response</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pg_result</name> <operator>=</operator> <call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pg_result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"abort processing: error in result executing %s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>RESPONSE_ROW</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>,
				 <argument><expr><literal type="string">"abort processing: unexpected response type %d while executing %s"</literal></expr></argument>,
				 <argument><expr><call><name>async_response_get_type</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>async_response_report_error</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>async_response_close</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<comment type="block">/* Prepared statements can leak if the were created during a subtxn
 * and the subtxn rolled back before the prepared stmt was deallocated.
 * This function checks for such leaks inside of tests (thus only compiled
 * in DEBUG mode). It can be quite expensive so not run under normal operations.
 */</comment>
<function><type><name>void</name></type>
<name>remote_txn_check_for_leaked_prepared_statements</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>count_string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecStatusType</name></type> <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>PQTRANS_IDLE</name> <operator>!=</operator> <call><name>PQtransactionStatus</name><argument_list>(<argument><expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>remote_connection_exec</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT count(*) FROM pg_prepared_statements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGRES_TUPLES_OK</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>count_string</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>count_string</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"leak check: connection leaked prepared statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"leak check: unexpected number of rows or columns returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGRES_FATAL_ERROR</name></expr>:</case>
		<case>case <expr><name>PGRES_NONFATAL_ERROR</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"leak check: ERROR [\"%s\"]"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"leak check: unexpected result state %u"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>remote_result_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type>
<name>remote_txn_abort</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abort_sql</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Rollback a regular (non two-phase commit) transaction */</comment>
		<expr_stmt><expr><name>abort_sql</name> <operator>=</operator> <literal type="string">"ROLLBACK TRANSACTION"</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Rollback a transaction prepared for two-phase commit (PREPARE
		 * TRANSACTION) */</comment>
		<expr_stmt><expr><name>abort_sql</name> <operator>=</operator> <call><name>remote_txn_id_rollback_prepared_sql</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"aborting remote transaction on connection %p"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Already in bad state */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>remote_connection_xact_is_transitioning</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>in_error_recursion_trouble</name><argument_list>()</argument_list></call> <operator>||</operator>
			 <call><name>PQstatus</name><argument_list>(<argument><expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Don't try to recover the connection if we're already in error
		 * recursion trouble or the connection is bad. Instead, mark it as a
		 * failed transition. This is a really bad case and so controlled
		 * cleanup cannot happen here. The calling function will instead break
		 * this ongoing connection and so no cleanup is necessary.
		 */</comment>
		<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Mark the connection as transitioning to new transaction state */</comment>
	<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check if a command has been submitted to the data node by using an
	 * asynchronous execution function and the command had not yet completed.
	 * If so, request cancellation of the command.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>PQTRANS_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>remote_connection_cancel_query</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* At this point any on going queries should have completed */</comment>
		<expr_stmt><expr><call><name>remote_connection_set_status</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>CONN_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>exec_cleanup_command</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>abort_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Assume we might may have not deallocated all the prepared statements we
	 * created because the deallocation would have happened after the abort.
	 *
	 * prepared stmts are per session not per transaction. But we don't want
	 * prepared_stmts to survive transactions in our use case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>have_prep_stmt</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>exec_cleanup_command</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"DEALLOCATE ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_prep_stmt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_subtxn_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<comment type="block">/* Everything succeeded, so we have finished transitioning */</comment>
		<expr_stmt><expr><call><name>remote_connection_xact_transition_end</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if there is ongoing transaction on the remote node */</comment>
<function><type><name>bool</name></type>
<name>remote_txn_is_ongoing</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * If there were any errors in subtransactions, and we made prepared
 * statements, those prepared statements may not have been cleared
 * because of the subtxn error. Thus, do a DEALLOCATE ALL to make sure
 * we get rid of all prepared statements.
 *
 * This is annoying and not terribly bulletproof, but it's
 * probably not worth trying harder.
 */</comment>
<function><type><name>void</name></type>
<name>remote_txn_deallocate_prepared_stmts_if_needed</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>have_prep_stmt</name></name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>have_subtxn_error</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AsyncRequestSet</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><call><name>async_request_set_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>response</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>async_request_set_add</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><call><name>async_request_send</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"DEALLOCATE ALL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>async_request_set_wait_any_response</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>async_response_report_error_or_close</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>async_request_set_wait_any_response</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>response</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_prep_stmt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_subtxn_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Ensure state changes are marked successful when a remote transaction
 * completes asynchronously and successfully.
 *
 * We do this in a callback which is guaranteed to be called when a reponse is
 * received or a timeout occurs.
 *
 * There is no decision on whether to fail or not in this callback; this is
 * only to guarantee that we're always updating the internal connection
 * state. Someone still has to handle the responses elsewehere.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>on_remote_txn_response</name><parameter_list>(<parameter><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>async_request_get_connection</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>async_response_get_type</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RESPONSE_RESULT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>AsyncResponseResult</name> <operator>*</operator><operator>)</operator> <name>rsp</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pgres</name> <init>= <expr><call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>remote_connection_xact_transition_end</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_commit_or_commit_prepared_response</name><parameter_list>(<parameter><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>on_remote_txn_response</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>AsyncRequest</name> <modifier>*</modifier></type>
<name>remote_txn_async_send_commit</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"committing remote transaction on connection %p"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"COMMIT TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>async_request_set_response_callback</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>on_commit_or_commit_prepared_response</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remote_txn_write_persistent_record</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>=</operator> <call><name>remote_txn_persistent_record_write</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_prepare_transaction_response</name><parameter_list>(<parameter><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>AsyncResponse</name> <modifier>*</modifier></type><name>rsp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>on_remote_txn_response</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* If the prepare is not successful, reset the remote transaction ID
		 * to indicate we need to do a rollback */</comment>
		<expr_stmt><expr><name><name>txn</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>AsyncRequest</name> <modifier>*</modifier></type>
<name>remote_txn_async_send_prepare_transaction</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>,
		 <argument><expr><literal type="string">"2pc: preparing remote transaction on connection %p: %s"</literal></expr></argument>,
		 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
		 <argument><expr><call><name>remote_txn_id_out</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
							 <argument><expr><call><name>remote_txn_id_prepare_transaction_sql</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>async_request_set_response_callback</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>on_prepare_transaction_response</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AsyncRequest</name> <modifier>*</modifier></type>
<name>remote_txn_async_send_commit_prepared</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>,
		 <argument><expr><literal type="string">"2pc: commiting remote transaction on connection %p: '%s'"</literal></expr></argument>,
		 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
		 <argument><expr><call><name>remote_txn_id_out</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send_with_error</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>,
										<argument><expr><call><name>remote_txn_id_commit_prepared_sql</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>remote_txn_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>async_request_set_response_callback</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>on_commit_or_commit_prepared_response</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rollback a subtransaction to a given savepoint.
 */</comment>
<function><type><name>bool</name></type>
<name>remote_txn_sub_txn_abort</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curlevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>pg_conn</name> <init>= <expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>in_error_recursion_trouble</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>remote_connection_xact_is_transitioning</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remote_connection_xact_is_transitioning</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StringInfoData</name></type> <name>sql</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>have_subtxn_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If a command has been submitted to the data node by using an
		 * asynchronous execution function, the command might not have yet
		 * completed. Check to see if a command is still being processed by the
		 * data node, and if so, request cancellation of the command.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name>pg_conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PQTRANS_ACTIVE</name> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>remote_connection_cancel_query</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Rollback all remote subtransactions during abort */</comment>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK TO SAVEPOINT s%d"</literal></expr></argument>, <argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>exec_cleanup_command</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><literal type="string">"RELEASE SAVEPOINT s%d"</literal></expr></argument>, <argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>exec_cleanup_command</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>sql</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>remote_connection_xact_transition_end</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>remote_txn_is_at_sub_txn_level</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curlevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>xact_depth</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We only care about connections with open remote subtransactions of the
	 * current level.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>xact_depth</name> <operator>=</operator> <call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xact_depth</name> <operator>&lt;</operator> <name>curlevel</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>xact_depth</name> <operator>&gt;</operator> <name>curlevel</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missed cleaning up remote subtransaction at level %d"</literal></expr></argument>, <argument><expr><name>xact_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xact_depth</name> <operator>==</operator> <name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>remote_txn_sub_txn_pre_commit</name><parameter_list>(<parameter><decl><type><name>RemoteTxn</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curlevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>remote_connection_xact_depth_get</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>remote_connection_xact_is_transitioning</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>remote_connection_xact_transition_begin</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_cmdf_ok</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="string">"RELEASE SAVEPOINT s%d"</literal></expr></argument>, <argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_xact_transition_end</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Functions for storing a persistent transaction records for two-phase
 * commit.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>persistent_record_pkey_scan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RemoteTxnId</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>tuple_found_func</name></type> <name>tuple_found</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lock_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScannerCtx</name></type> <name>scanctx</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <name><name>catalog</name><operator>-&gt;</operator><name>tables</name><index>[<expr><name>REMOTE_TXN</name></expr>]</index></name><operator>.</operator><name>id</name></expr>,
		<expr><operator>.</operator><name>index</name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>REMOTE_TXN</name></expr></argument>, <argument><expr><name>REMOTE_TXN_PKEY_IDX</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>scankey</name> <operator>=</operator> <name>scankey</name></expr>,
		<expr><operator>.</operator><name>tuple_found</name> <operator>=</operator> <name>tuple_found</name></expr>,
		<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>lock_mode</name></expr>,
		<expr><operator>.</operator><name>limit</name> <operator>=</operator> <literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>scandirection</name> <operator>=</operator> <name>ForwardScanDirection</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_remote_txn_pkey_idx_remote_transaction_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_TEXTEQ</name></expr></argument>,
				<argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>remote_txn_id_out</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_scanner_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>remote_txn_persistent_record_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RemoteTxnId</name> <modifier>*</modifier></type><name>parsed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>persistent_record_pkey_scan</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>persistent_record_tuple_delete</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_catalog_delete_tid</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><call><name>ts_scanner_get_tuple_tid</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* If gid is NULL, then delete all entries belonging to the provided datanode.  */</comment>
<function><type><name>int</name></type>
<name>remote_txn_persistent_record_delete_for_data_node</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>foreign_server_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScannerCtx</name></type> <name>scanctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>scanidx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>GetForeignServer</name><argument_list>(<argument><expr><name>foreign_server_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>gid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_remote_txn_data_node_name_idx_data_node_name</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
					<argument><expr><name>F_NAMEEQ</name></expr></argument>,
					<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scanidx</name> <operator>=</operator> <name>REMOTE_TXN_DATA_NODE_NAME_IDX</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_remote_txn_pkey_idx_remote_transaction_id</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
					<argument><expr><name>F_TEXTEQ</name></expr></argument>,
					<argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scanidx</name> <operator>=</operator> <name>REMOTE_TXN_PKEY_IDX</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>scanctx</name> <operator>=</operator> <operator>(</operator><name>ScannerCtx</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <name><name>catalog</name><operator>-&gt;</operator><name>tables</name><index>[<expr><name>REMOTE_TXN</name></expr>]</index></name><operator>.</operator><name>id</name></expr>,
		<expr><operator>.</operator><name>index</name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>REMOTE_TXN</name></expr></argument>, <argument><expr><name>scanidx</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>scankey</name> <operator>=</operator> <name>scankey</name></expr>,
		<expr><operator>.</operator><name>tuple_found</name> <operator>=</operator> <name>persistent_record_tuple_delete</name></expr>,
		<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>RowExclusiveLock</name></expr>,
		<expr><operator>.</operator><name>snapshot</name> <operator>=</operator> <call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr>,
		<expr><operator>.</operator><name>scandirection</name> <operator>=</operator> <name>ForwardScanDirection</name></expr>,
	}</block></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_scanner_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>persistent_record_insert_relation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>RemoteTxnId</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>desc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_remote_txn</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_remote_txn</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>GetForeignServer</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>server_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_remote_txn_data_node_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_remote_txn_remote_transaction_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>remote_txn_id_out</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_insert_values</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add a commit record to catalog.
 */</comment>
<function><type><name>RemoteTxnId</name> <modifier>*</modifier></type>
<name>remote_txn_persistent_record_write</name><parameter_list>(<parameter><decl><type><name>TSConnectionId</name></type> <name>cid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RemoteTxnId</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>remote_txn_id_create</name><argument_list>(<argument><expr><call><name>GetTopTransactionId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>catalog</name><operator>-&gt;</operator><name>tables</name><index>[<expr><name>REMOTE_TXN</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>persistent_record_insert_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Keep the table lock until transaction completes in order to
	 * synchronize with distributed restore point creation */</comment>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
