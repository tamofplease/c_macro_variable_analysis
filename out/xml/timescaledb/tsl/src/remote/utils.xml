<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/utils.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<comment type="block">/*
 * This file contains source code that was copied and/or modified from
 * the PostgreSQL database, which is licensed under the open-source
 * PostgreSQL License. Please see the NOTICE at the top level
 * directory for a copy of the PostgreSQL License.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/reloptions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Force assorted GUC parameters to settings that ensure that we'll output
 * data values in a form that is unambiguous to the data node.
 *
 * This is rather expensive and annoying to do once per row, but there's
 * little choice if we want to be sure values are transmitted accurately;
 * we can't leave the settings in place between rows for fear of affecting
 * user-visible computations.
 *
 * We use the equivalent of a function SET option to allow the settings to
 * persist only until the caller calls reset_transmission_modes().  If an
 * error is thrown in between, guc.c will take care of undoing the settings.
 *
 * The return value is the nestlevel that must be passed to
 * reset_transmission_modes() to undo things.
 */</comment>
<function><type><name>int</name></type>
<name>set_transmission_modes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nestlevel</name> <init>= <expr><call><name>NewGUCNestLevel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * The values set here should match what pg_dump does.  See also
	 * configure_remote_session in connection.c.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>DateStyle</name> <operator>!=</operator> <name>USE_ISO_DATES</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>set_config_option</name><argument_list>(<argument><expr><literal type="string">"datestyle"</literal></expr></argument>,
								 <argument><expr><literal type="string">"ISO"</literal></expr></argument>,
								 <argument><expr><name>PGC_USERSET</name></expr></argument>,
								 <argument><expr><name>PGC_S_SESSION</name></expr></argument>,
								 <argument><expr><name>GUC_ACTION_SAVE</name></expr></argument>,
								 <argument><expr><name>true</name></expr></argument>,
								 <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>IntervalStyle</name> <operator>!=</operator> <name>INTSTYLE_POSTGRES</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>set_config_option</name><argument_list>(<argument><expr><literal type="string">"intervalstyle"</literal></expr></argument>,
								 <argument><expr><literal type="string">"postgres"</literal></expr></argument>,
								 <argument><expr><name>PGC_USERSET</name></expr></argument>,
								 <argument><expr><name>PGC_S_SESSION</name></expr></argument>,
								 <argument><expr><name>GUC_ACTION_SAVE</name></expr></argument>,
								 <argument><expr><name>true</name></expr></argument>,
								 <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>extra_float_digits</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>set_config_option</name><argument_list>(<argument><expr><literal type="string">"extra_float_digits"</literal></expr></argument>,
								 <argument><expr><literal type="string">"3"</literal></expr></argument>,
								 <argument><expr><name>PGC_USERSET</name></expr></argument>,
								 <argument><expr><name>PGC_S_SESSION</name></expr></argument>,
								 <argument><expr><name>GUC_ACTION_SAVE</name></expr></argument>,
								 <argument><expr><name>true</name></expr></argument>,
								 <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>nestlevel</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Undo the effects of set_transmission_modes().
 */</comment>
<function><type><name>void</name></type>
<name>reset_transmission_modes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nestlevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>AtEOXact_GUC</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>nestlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
