<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/dist_commands.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq-fe.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dist_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dist_txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"connection_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dist_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deparse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_point.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DistPreparedStmt</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_node_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PreparedStmt</name> <modifier>*</modifier></type><name>prepared_stmt</name></decl>;</decl_stmt>
}</block></struct></type> <name>DistPreparedStmt</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DistCmdResponse</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
}</block></struct></type> <name>DistCmdResponse</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DistCmdResult</name>
<block>{
	<decl_stmt><decl><type><name>Size</name></type> <name>num_responses</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeFuncClass</name></type> <name>funcclass</name></decl>;</decl_stmt> <comment type="block">/* Function class of invoked function, if any */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>typeid</name></decl>;</decl_stmt>				 <comment type="block">/* Expected result type, or InvalidOid */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>		 <comment type="block">/* Tuple descriptor of invoked function
							  * result. Set if typeid is valid and has a
							  * composite return value */</comment>
	<decl_stmt><decl><type><name>DistCmdResponse</name></type> <name><name>responses</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>DistCmdResult</name>;</typedef>

<function><type><specifier>static</specifier> <name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_collect_responses</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>requests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequestSet</name> <modifier>*</modifier></type><name>rs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>ar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>async_request_set_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DistCmdResult</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DistCmdResponse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>requests</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>async_request_set_add</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ar</name> <operator>=</operator> <call><name>async_request_set_wait_ok_result</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DistCmdResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><operator>&amp;</operator><name><name>results</name><operator>-&gt;</operator><name>responses</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>ar</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>response</name><operator>-&gt;</operator><name>data_node</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>async_response_result_get_user_data</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>results</name><operator>-&gt;</operator><name>num_responses</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Invoke multiple SQL statements (commands) on the given data nodes.
 *
 * The list of data nodes can either be a list of data node names, or foreign
 * server OIDs.
 *
 * If "transactional" is false then it means that the SQL should be executed
 * in autocommit (implicit statement level commit) mode without the need for
 * an explicit 2PC from the access node.
 */</comment>
<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_multi_cmds_params_invoke_on_data_nodes</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>cmd_descriptors</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>,
											   <parameter><decl><type><name>bool</name></type> <name>transactional</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc_data_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lc_cmd_descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>requests</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>data_nodes</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no data nodes to execute command on"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Add data nodes before executing a distributed command."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>cmd_descriptors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_OidList</name></expr>:</case>
			<expr_stmt><expr><name>data_nodes</name> <operator>=</operator> <call><name>data_node_oids_to_node_name_list</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>ACL_NO_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_List</name></expr>:</case>
			<comment type="block">/* Already in the format we want */</comment>
			<expr_stmt><expr><call><name>data_node_name_list_check_acl</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>ACL_NO_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid list type %u"</literal></expr></argument>, <argument><expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<macro><name>forboth</name> <argument_list>(<argument>lc_data_node</argument>, <argument>data_nodes</argument>, <argument>lc_cmd_descr</argument>, <argument>cmd_descriptors</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc_data_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>connection</name> <init>=
			<expr><call><name>data_node_get_connection</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>REMOTE_TXN_NO_PREP_STMT</name></expr></argument>, <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DistCmdDescr</name> <modifier>*</modifier></type><name>cmd_descr</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc_cmd_descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name><name>cmd_descr</name><operator>-&gt;</operator><name>sql</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>cmd_descr</name><operator>-&gt;</operator><name>params</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"sending \"%s\" to data node \"%s\""</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>params</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send_with_params</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>FORMAT_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>async_request_attach_user_data</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>requests</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>requests</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>ts_dist_cmd_collect_responses</name><argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ts_dist_cmd_response_count</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>Size</name><operator>)</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_params_invoke_on_data_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>,
										<parameter><decl><type><name>bool</name></type> <name>transactional</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>cmd_descriptors</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdDescr</name></type> <name>cmd_descr</name> <init>= <expr><block>{ <expr><operator>.</operator><name>sql</name> <operator>=</operator> <name>sql</name></expr>, <expr><operator>.</operator><name>params</name> <operator>=</operator> <name>params</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>cmd_descriptors</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>cmd_descriptors</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>results</name> <operator>=</operator>
		<call><name>ts_dist_multi_cmds_params_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd_descriptors</name></expr></argument>, <argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>cmd_descriptors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_invoke_on_data_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>transactional</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_dist_cmd_params_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_invoke_on_data_nodes_using_search_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>search_path</name></decl></parameter>,
												   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>node_names</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>transactional</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>set_result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>set_search_path</name> <init>= <expr><name>search_path</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>DEBUG_WAITPOINT</name><argument_list>(<argument><expr><literal type="string">"dist_cmd_using_search_path_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * As a workaround for non-transactional execution, we expect the same connection
	 * to be present after we set search_path.
	 */</comment>
	<expr_stmt><expr><call><name>remote_connection_cache_invalidation_ignore</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>set_search_path</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>set_request</name> <init>= <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SET search_path = %s, pg_catalog"</literal></expr></argument>, <argument><expr><name>search_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>set_result</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>set_request</name></expr></argument>, <argument><expr><name>node_names</name></expr></argument>, <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>set_result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>set_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>set_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>DEBUG_WAITPOINT</name><argument_list>(<argument><expr><literal type="string">"dist_cmd_using_search_path_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>node_names</name></expr></argument>, <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>set_search_path</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>set_result</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><literal type="string">"SET search_path = pg_catalog"</literal></expr></argument>,
													  <argument><expr><name>node_names</name></expr></argument>,
													  <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>set_result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>set_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>remote_connection_cache_invalidation_ignore</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_multi_cmds_invoke_on_data_nodes_using_search_path</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>cmd_descriptors</name></decl></parameter>,
														  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>search_path</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>node_names</name></decl></parameter>,
														  <parameter><decl><type><name>bool</name></type> <name>transactional</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>set_result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>set_search_path</name> <init>= <expr><name>search_path</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>remote_connection_cache_invalidation_ignore</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>set_search_path</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>set_request</name> <init>= <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SET search_path = %s, pg_catalog"</literal></expr></argument>, <argument><expr><name>search_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>set_result</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>set_request</name></expr></argument>, <argument><expr><name>node_names</name></expr></argument>, <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>set_result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>set_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>set_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>results</name> <operator>=</operator>
		<call><name>ts_dist_multi_cmds_params_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd_descriptors</name></expr></argument>, <argument><expr><name>node_names</name></expr></argument>, <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>set_search_path</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>set_result</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><literal type="string">"SET search_path = pg_catalog"</literal></expr></argument>,
													  <argument><expr><name>node_names</name></expr></argument>,
													  <argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>set_result</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>set_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>remote_connection_cache_invalidation_ignore</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_invoke_on_all_data_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>data_node_get_node_name_list</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Relay a function call to data nodes.
 *
 * A NIL list of data nodes means invoke on ALL data nodes.
 */</comment>
<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_invoke_func_call_on_data_nodes</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NIL</name> <operator>==</operator> <name>data_nodes</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>data_nodes</name> <operator>=</operator> <call><name>data_node_get_node_name_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><call><name>deparse_func_call</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize result conversion info in case caller wants to convert the
	 * result to datums. */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>funcclass</name></name> <operator>=</operator> <call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>typeid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_invoke_func_call_on_all_data_nodes</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><call><name>deparse_func_call</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><call><name>data_node_get_node_name_list</name><argument_list>()</argument_list></call></expr></argument>,
											<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Relay a function call to data nodes.
 *
 * This version throws away the result.
 */</comment>
<function><type><name>void</name></type>
<name>ts_dist_cmd_func_call_on_data_nodes</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>ts_dist_cmd_invoke_func_call_on_data_nodes</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PGresult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_get_result_by_node_name</name><parameter_list>(<parameter><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>response</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>response</name><operator>-&gt;</operator><name>num_responses</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DistCmdResponse</name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><operator>&amp;</operator><name><name>response</name><operator>-&gt;</operator><name>responses</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><name><name>resp</name><operator>-&gt;</operator><name>data_node</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the n:th command result.
 *
 * Returns the n:th command result as given by the index, or NULL if no such
 * result.
 *
 * Optionally get the name of the node that the result was from via the
 * node_name parameter.
 */</comment>
<function><type><name>PGresult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_get_result_by_index</name><parameter_list>(<parameter><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>response</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistCmdResponse</name> <modifier>*</modifier></type><name>rsp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>response</name><operator>-&gt;</operator><name>num_responses</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>rsp</name> <operator>=</operator> <operator>&amp;</operator><name><name>response</name><operator>-&gt;</operator><name>responses</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>node_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>node_name</name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>data_node</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the number of responses in a distributed command result.
 */</comment>
<function><type><name>Size</name></type>
<name>ts_dist_cmd_response_count</name><parameter_list>(<parameter><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>num_responses</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type>
<name>ts_dist_cmd_total_row_count</name><parameter_list>(<parameter><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>num_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>num_responses</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DistCmdResponse</name> <modifier>*</modifier></type><name>resp</name> <init>= <expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>responses</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>num_rows</name> <operator>+=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>num_rows</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert an expected scalar return value.
 *
 * Convert the result of a remote function invokation returning a single
 * scalar value. For example, a function returning a bool.
 */</comment>
<function><type><name>Datum</name></type>
<name>ts_dist_cmd_get_single_scalar_result_by_index</name><parameter_list>(<parameter><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>,
											  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>node_name_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pgres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>typioparam</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>typinfunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>typeid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid result type of distributed command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>funcclass</name></name> <operator>!=</operator> <name>TYPEFUNC_SCALAR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"distributed command result is not scalar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pgres</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_index</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pgres</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid index for distributed command result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>node_name_out</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>node_name_out</name> <operator>=</operator> <name>node_name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name> <operator>||</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_UNEXPECTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected response from data node \"%s\""</literal></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>getTypeInputInfo</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>typeid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typinfunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typioparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>typinfunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>OidInputFunctionCall</name><argument_list>(<argument><expr><name>typinfunc</name></expr></argument>, <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>typioparam</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dist_cmd_clear_result_by_index</name><parameter_list>(<parameter><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>response</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistCmdResponse</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>response</name><operator>-&gt;</operator><name>num_responses</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no response for index %zu"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>resp</name> <operator>=</operator> <operator>&amp;</operator><name><name>response</name><operator>-&gt;</operator><name>responses</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>result</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>async_response_result_close</name><argument_list>(<argument><expr><name><name>resp</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>resp</name><operator>-&gt;</operator><name>data_node</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>resp</name><operator>-&gt;</operator><name>data_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>resp</name><operator>-&gt;</operator><name>data_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dist_cmd_close_response</name><parameter_list>(<parameter><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>response</name><operator>-&gt;</operator><name>num_responses</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_dist_cmd_clear_result_by_index</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>PreparedDistCmd</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_prepare_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_params</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>node_names</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncRequestSet</name> <modifier>*</modifier></type><name>prep_requests</name> <init>= <expr><call><name>async_request_set_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>async_resp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>node_names</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid data nodes list"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Must specify a non-empty list of data nodes."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>node_names</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>data_node_get_connection</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>REMOTE_TXN_USE_PREP_STMT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DistPreparedStmt</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DistPreparedStmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>ar</name> <init>= <expr><call><name>async_request_send_prepare</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>n_params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>data_node_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>async_request_attach_user_data</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>prepared_stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>async_request_set_add</name><argument_list>(<argument><expr><name>prep_requests</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<while>while <condition>(<expr><operator>(</operator><name>async_resp</name> <operator>=</operator> <call><name>async_request_set_wait_ok_result</name><argument_list>(<argument><expr><name>prep_requests</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>PreparedStmt</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>async_response_result_get_user_data</name><argument_list>(<argument><expr><name>async_resp</name></expr></argument>)</argument_list></call> <operator>=</operator>
			<call><name>async_response_result_generate_prepared_stmt</name><argument_list>(<argument><expr><name>async_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>async_response_result_close</name><argument_list>(<argument><expr><name>async_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PreparedDistCmd</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_prepare_command_on_all_data_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_dist_cmd_prepare_command</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>n_params</name></expr></argument>, <argument><expr><call><name>data_node_get_node_name_list</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>DistCmdResult</name> <modifier>*</modifier></type>
<name>ts_dist_cmd_invoke_prepared_command</name><parameter_list>(<parameter><decl><type><name>PreparedDistCmd</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>param_values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>reqs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>command</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DistPreparedStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>async_request_send_prepared_stmt</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>prepared_stmt</name></name></expr></argument>, <argument><expr><name>param_values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>async_request_attach_user_data</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>data_node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>reqs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>reqs</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>ts_dist_cmd_collect_responses</name><argument_list>(<argument><expr><name>reqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>reqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dist_cmd_close_prepared_command</name><parameter_list>(<parameter><decl><type><name>PreparedDistCmd</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>command</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>prepared_stmt_close</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>DistPreparedStmt</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>prepared_stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>list_free_deep</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_dist_cmd_exec</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>data_nodes</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>transactional</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>data_node_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>search_path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>transactional</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TS_PREVENT_IN_TRANSACTION_BLOCK</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>query</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"empty command string"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dist_util_membership</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>DIST_MEMBER_ACCESS_NODE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function must be run on the access node only"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data_nodes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>data_node_list</name> <operator>=</operator> <call><name>data_node_get_node_name_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ndatanodes</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid data nodes list"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The array of data nodes cannot be multi-dimensional."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ARR_HASNULL</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid data nodes list"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The array of data nodes cannot contain null values."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ndatanodes</name> <operator>=</operator> <call><name>ArrayGetNItems</name><argument_list>(<argument><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ndatanodes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid data nodes list"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The array of data nodes cannot be empty."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>data_node_list</name> <operator>=</operator> <call><name>data_node_array_to_node_name_list</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Assert that the data node list is not empty. Since we checked that the
	 * function is run on an access node above, the list of data nodes must
	 * per definition be non-empty for the case when not specifying an
	 * explicit list of data nodes. For the case of explicitly specifying data
	 * nodes, we already checked for a non-empty array, and then validated all
	 * the specified data nodes. If there was a node in the list that is not a
	 * data node, we would already have thrown an error. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data_node_list</name> <operator>!=</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>search_path</name> <operator>=</operator> <call><name>GetConfigOption</name><argument_list>(<argument><expr><literal type="string">"search_path"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes_using_search_path</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
																<argument><expr><name>search_path</name></expr></argument>,
																<argument><expr><name>data_node_list</name></expr></argument>,
																<argument><expr><name>transactional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>data_node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
