<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/healthcheck.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"healthcheck.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dist_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dist_util.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Functions and data structures for printing a health check result.
 */</comment>
<enum>enum <name>Anum_show_conn</name>
<block>{
	<decl><name>Anum_health_node_name</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>Anum_health_healthy</name></decl>,
	<decl><name>Anum_health_in_recovery</name></decl>,
	<decl><name>Anum_health_error</name></decl>,
	<decl><name>_Anum_health_max</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Natts_health</name></cpp:macro> <cpp:value>(_Anum_health_max - 1)</cpp:value></cpp:define>

<comment type="block">/*
 * Health check result.
 *
 * Produces a tuple with four columns:
 *
 * 1. Node name (NULL for the access node itself)
 *
 * 2. A "healthy" boolean. An access node returns "false" in case a data node
 * is not responding.
 *
 * 3. A boolean telling if the node is in recovery. Note that the "healthy"
 * status will be "true" while the node is in recovery.
 *
 * 4. An optional error message explaining the reason for "healthy" being
 * false.
 */</comment>
<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>create_health_check_tuple</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>in_recovery</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_health</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_health</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>data_node</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NameData</name> <modifier>*</modifier></type><name>node_name</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NameData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>, <argument><expr><name>data_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_node_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>NameGetDatum</name><argument_list>(<argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_node_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_healthy</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><ternary><condition><expr><name>in_recovery</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_healthy</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_in_recovery</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>in_recovery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_in_recovery</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>IOFuncSelector</name></type>
<name>get_io_func_selector_from_format</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>format</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* text format */</comment>
			<return>return <expr><name>IOFunc_input</name></expr>;</return>
		<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* binary format */</comment>
			<return>return <expr><name>IOFunc_receive</name></expr>;</return>
		<default>default:</default>
			<comment type="block">/* reserved for future, so likely won't happen */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected format of data node response"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Silence Windows compiler */</comment>
	<return>return <expr><name>IOFunc_input</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_in_result_error</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_health</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_health</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errormsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_error</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>errormsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_error</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_dist_health_check</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function returning record called in context "</literal>
							<literal type="string">"that cannot accept type record"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>dist_util_membership</name><argument_list>()</argument_list></call> <operator>==</operator> <name>DIST_MEMBER_ACCESS_NODE</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>data_node_list</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>StringInfo</name></type> <name>cmd</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type> <name>fnamespaceid</name> <init>= <expr><call><name>get_func_namespace</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,
							 <argument><expr><literal type="string">"SELECT * FROM %s.%s()"</literal></expr></argument>,
							 <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name>fnamespaceid</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>get_func_name</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_node_list</name> <operator>=</operator> <call><name>data_node_get_node_name_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_on_data_nodes_using_search_path</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
																		<argument><expr><name>NULL</name></expr></argument>,
																		<argument><expr><name>data_node_list</name></expr></argument>,
																		<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>data_node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>dist_util_membership</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DIST_MEMBER_ACCESS_NODE</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>call_cnt</name> <init>= <expr><name><name>funcctx</name><operator>-&gt;</operator><name>call_cntr</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>call_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* On call count 0, produce a tuple for health of AN itself */</comment>
				<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>create_health_check_tuple</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* No result from data nodes, so nothing to do. This probably
				 * cannot happen in practice. */</comment>
				<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>call_cnt</name> <operator>&gt;</operator> <call><name>ts_dist_cmd_response_count</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* No more responses so no more tuples to produce */</comment>
				<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * Produce a tuple from a data node's response.
				 *
				 * TODO: Currently, the remote commands to data nodes will
				 * either succeed or throw an error if one of the data nodes
				 * cannot be contacted. Therefore, the access node will never
				 * produce a result showing a data node as unhealthy (unless a
				 * node is in recovery). This needs to be changed so that
				 * connection issues (or errors from data node) won't result
				 * in throwing an error here. Instead, the result should be
				 * "unhealthy" with the appropriate error string if available.
				 */</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>NameData</name></type> <name>data_node_name</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pgres</name> <init>= <expr><call><name>ts_dist_cmd_get_result_by_index</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>call_cnt</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TupleDesc</name></type> <name>return_tupdesc</name> <init>= <expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_health</name></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_health</name></expr>]</index></name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data_node_name</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_node_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_node_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
					<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data_node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_error</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
						<call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_error</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>PQnfields</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>StringInfo</name></type> <name>error</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>error</name></expr></argument>,
									 <argument><expr><literal type="string">"unexpected number of fields in data node response (%d vs %d) "</literal>
									 <literal type="string">"%s"</literal></expr></argument>,
									 <argument><expr><call><name>PQnfields</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>,
									 <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>fill_in_result_error</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>StringInfo</name></type> <name>error</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>error</name></expr></argument>,
									 <argument><expr><literal type="string">"unexpected number of rows in data node response (%d vs %d)"</literal></expr></argument>,
									 <argument><expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>fill_in_result_error</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>return_tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<comment type="block">/* Data nodes don't return their own name, and it was already filled in */</comment>
						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_health_node_name</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* row */</comment>, <argument><expr><name>i</name></expr></argument> <comment type="block">/* column */</comment>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<if type="elseif">else if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* row */</comment>, <argument><expr><name>i</name></expr></argument> <comment type="block">/* column */</comment>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<decl_stmt><decl><type><name>Oid</name></type> <name>typid</name> <init>= <expr><call><name>PQftype</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><call><name>PQfformat</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>IOFuncSelector</name></type> <name>iofuncsel</name> <init>= <expr><call><name>get_io_func_selector_from_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>int16</name></type> <name>typlen</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>bool</name></type> <name>typbyval</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>char</name></type> <name>typalign</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>char</name></type> <name>typdelim</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>Oid</name></type> <name>typioparam</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>Oid</name></type> <name>typfuncid</name></decl>;</decl_stmt>

							<if_stmt><if>if <condition>(<expr><name>typid</name> <operator>!=</operator> <name><name>return_tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atttypid</name></expr>)</condition>
							<block>{<block_content>
								<decl_stmt><decl><type><name>StringInfo</name></type> <name>error</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>error</name></expr></argument>,
												 <argument><expr><literal type="string">"unexpected field type in data node response %u "</literal>
												 <literal type="string">"vs %u"</literal></expr></argument>,
												 <argument><expr><name>typid</name></expr></argument>,
												 <argument><expr><name><name>return_tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attrelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

								<expr_stmt><expr><call><name>fill_in_result_error</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name><name>error</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>
							</block_content>}</block></if></if_stmt>

							<expr_stmt><expr><call><name>get_type_io_data</name><argument_list>(<argument><expr><name>typid</name></expr></argument>,
											 <argument><expr><name>iofuncsel</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>typlen</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>typbyval</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>typalign</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>typdelim</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>typioparam</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>typfuncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<if_stmt><if>if <condition>(<expr><name>iofuncsel</name> <operator>==</operator> <name>IOFunc_receive</name></expr>)</condition>
							<block>{<block_content>
								<decl_stmt><decl><type><name>StringInfo</name></type> <name>data</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
													   <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>PQgetlength</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>OidReceiveFunctionCall</name><argument_list>(<argument><expr><name>typfuncid</name></expr></argument>,
																   <argument><expr><name>data</name></expr></argument>,
																   <argument><expr><name>typioparam</name></expr></argument>,
																   <argument><expr><call><name>PQfmod</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>iofuncsel</name> <operator>==</operator> <name>IOFunc_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>OidInputFunctionCall</name><argument_list>(<argument><expr><name>typfuncid</name></expr></argument>,
																 <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
																 <argument><expr><name>typioparam</name></expr></argument>,
																 <argument><expr><call><name>PQfmod</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>

							<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></for>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>DIST_MEMBER_DATA_NODE</name></expr>:</case>
		<case>case <expr><name>DIST_MEMBER_NONE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>funcctx</name><operator>-&gt;</operator><name>call_cntr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>create_health_check_tuple</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
