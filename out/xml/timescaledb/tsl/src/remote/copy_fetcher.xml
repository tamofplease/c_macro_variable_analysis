<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/copy_fetcher.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;port/pg_bswap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq-fe.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuplefactory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>CopyFetcher</name>
<block>{
	<decl_stmt><decl><type><name>DataFetcher</name></type> <name>state</name></decl>;</decl_stmt>

	<comment type="block">/* Data for virtual tuples of the current retrieved batch. */</comment>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>batch_values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>batch_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>file_trailer_received</name></decl>;</decl_stmt>
}</block></struct></type> <name>CopyFetcher</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_fetcher_send_fetch_request</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_fetcher_reset</name><parameter_list>(<parameter><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>copy_fetcher_fetch_data</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_fetcher_set_fetch_size</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_fetcher_set_tuple_memcontext</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_fetcher_store_next_tuple</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_fetcher_rescan</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_fetcher_close</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>DataFetcherFuncs</name></type> <name>funcs</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>send_fetch_request</name> <operator>=</operator> <name>copy_fetcher_send_fetch_request</name></expr>,
	<expr><operator>.</operator><name>fetch_data</name> <operator>=</operator> <name>copy_fetcher_fetch_data</name></expr>,
	<expr><operator>.</operator><name>set_fetch_size</name> <operator>=</operator> <name>copy_fetcher_set_fetch_size</name></expr>,
	<expr><operator>.</operator><name>set_tuple_mctx</name> <operator>=</operator> <name>copy_fetcher_set_tuple_memcontext</name></expr>,
	<expr><operator>.</operator><name>store_next_tuple</name> <operator>=</operator> <name>copy_fetcher_store_next_tuple</name></expr>,
	<expr><operator>.</operator><name>rewind</name> <operator>=</operator> <name>copy_fetcher_rescan</name></expr>,
	<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>copy_fetcher_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_set_fetch_size</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>data_fetcher_set_fetch_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>fetch_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_set_tuple_memcontext</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>data_fetcher_set_tuple_mctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_reset</name><parameter_list>(<parameter><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>file_trailer_received</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>data_fetcher_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_send_fetch_request</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* data request has already been sent */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* make sure to have a clean state */</comment>
	<expr_stmt><expr><call><name>copy_fetcher_reset</name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>copy_query</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_query</name></expr></argument>, <argument><expr><literal type="string">"copy (%s) to stdout with (format binary)"</literal></expr></argument>, <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>req_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>tuplefactory_is_binary</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send_with_stmt_params_elevel_res_format</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>,
																	<argument><expr><name><name>copy_query</name><operator>.</operator><name>data</name></name></expr></argument>,
																	<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stmt_params</name></name></expr></argument>,
																	<argument><expr><name>ERROR</name></expr></argument>,
																	<argument><expr><name>FORMAT_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Single-row mode doesn't really influence the COPY queries, but setting
		 * it here is a convenient way to prevent concurrent COPY requests on the
		 * same connection. This can happen if we have multiple tables on the same
		 * data node and still use the row-by-row fetcher.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>async_request_set_single_row_mode</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_FAILURE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not set single-row mode on connection to \"%s\""</literal></expr></argument>,
							<argument><expr><call><name>remote_connection_node_name</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The aborted statement is: %s."</literal></expr></argument>, <argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stmt</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Copy fetcher is not supported together with sub-queries."</literal>
							 <literal type="string">" Use cursor fetcher instead."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>PQgetResult</name><argument_list>(<argument><expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Shouldn't really happen but technically possible. */</comment>
			<decl_stmt><decl><type><name>TSConnectionError</name></type> <name>err</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>remote_connection_get_error</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>remote_connection_error_elog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COPY_OUT</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TSConnectionError</name></type> <name>err</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>remote_connection_get_result_error</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>remote_connection_error_elog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_data_consume_bytes</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>copy_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes_to_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bytes_read</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>bytes_to_read</name></expr></argument>, <argument><expr><name><name>copy_data</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>copy_data</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>copy_data</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>copy_data</name><operator>-&gt;</operator><name>cursor</name></name> <operator>&lt;=</operator> <name><name>copy_data</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>bytes_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>copy_data_read_bytes</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>copy_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes_to_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>&amp;</operator><name><name>copy_data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>copy_data</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bytes_read</name> <init>= <expr><call><name>copy_data_consume_bytes</name><argument_list>(<argument><expr><name>copy_data</name></expr></argument>, <argument><expr><name>bytes_to_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <name>bytes_to_read</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"could not read the requested %d bytes of COPY data, read %d instead"</literal></expr></argument>,
			 <argument><expr><name>bytes_to_read</name></expr></argument>,
			 <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16</name></type>
<name>copy_data_read_int16</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>copy_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>&amp;</operator><name><name>copy_data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>copy_data</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>aligned_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>copy_data_consume_bytes</name><argument_list>(<argument><expr><name>copy_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to read int16 from COPY data: not enough bytes left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>TYPEALIGN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aligned_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>aligned_buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>AssertPointerAlignment</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int16</name><operator>)</operator> <call><name>pg_ntoh16</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>copy_data_read_int32</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>copy_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>&amp;</operator><name><name>copy_data</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>copy_data</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>aligned_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>copy_data_consume_bytes</name><argument_list>(<argument><expr><name>copy_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to read int32 from COPY data: not enough bytes left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>TYPEALIGN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aligned_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>aligned_buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>AssertPointerAlignment</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>pg_ntoh32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_data_check_header</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>copy_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>required_signature</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><literal type="string">"PGCOPY\n\377\r\n\0"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>actual_signature</name> <init>= <expr><call><name>copy_data_read_bytes</name><argument_list>(<argument><expr><name>copy_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>required_signature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>required_signature</name></expr></argument>, <argument><expr><name>actual_signature</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>required_signature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrong COPY data signature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int32</name></type> <name>flags</name> <init>= <expr><call><name>copy_data_read_int32</name><argument_list>(<argument><expr><name>copy_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"wrong COPY flags: %d, should be 0"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Header extension area length
	 * 32-bit integer, length in bytes of remainder of header, not including
	 * self. Currently, this is zero, and the first tuple follows
	 * immediately. Future changes to the format might allow additional data
	 * to be present in the header. A reader should silently skip over any
	 * header extension data it does not know what to do with.
	 */</comment>
	<decl_stmt><decl><type><name>int32</name></type> <name>header_extension_length</name> <init>= <expr><call><name>copy_data_read_int32</name><argument_list>(<argument><expr><name>copy_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bytes_read</name> <init>= <expr><call><name>copy_data_consume_bytes</name><argument_list>(<argument><expr><name>copy_data</name></expr></argument>, <argument><expr><name>header_extension_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>!=</operator> <name>header_extension_length</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"failed to read COPY header extension: expected %d bytes, read %d"</literal></expr></argument>,
			 <argument><expr><name>header_extension_length</name></expr></argument>,
			 <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * End the COPY after receiving EOF or canceling a query (e.g., due to a LIMIT
 * being reached).
 *
 * This should be called after canceling a query, or, after reading all data,
 * the file trailer, and getting an EOF return value.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>end_copy</name><parameter_list>(<parameter><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>canceled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>final_pgres</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pgres</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecStatusType</name></type> <name>received_status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Read results until NULL */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>pgres</name> <operator>=</operator> <call><name>PQgetResult</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>final_pgres</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>final_pgres</name> <operator>=</operator> <name>pgres</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>remote_result_close</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>received_status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>final_pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_result_close</name><argument_list>(<argument><expr><name>final_pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>canceled</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If the query was canceled during query execution by the access node
		 * (e.g., due to reaching a LIMIT), expect either PGRES_COMMAND_OK
		 * (query completed before cancel happened) or PGRES_FATAL_ERROR
		 * (query abandoned before completion) */</comment>
		<if_stmt><if>if <condition>(<expr><name>received_status</name> <operator>!=</operator> <name>PGRES_COMMAND_OK</name> <operator>&amp;&amp;</operator> <name>received_status</name> <operator>!=</operator> <name>PGRES_FATAL_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>remote_connection_elog</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>received_status</name> <operator>!=</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>received_status</name> <operator>==</operator> <name>PGRES_FATAL_ERROR</name> <operator>||</operator> <name>received_status</name> <operator>==</operator> <name>PGRES_NONFATAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_connection_elog</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_set_status</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>CONN_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Prematurely end the COPY before EOF is received.
 *
 * This happens for queries that are abandoned before reaching EOF, e.g., when
 * using LIMITs.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>end_copy_before_eof</name><parameter_list>(<parameter><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * The fetcher state might not be open if the fetcher got initialized but
	 * never executed due to executor constraints.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_connection_cancel_query</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>end_copy</name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process response for ongoing async request
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_fetcher_complete</name><parameter_list>(<parameter><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Marked as volatile since it's modified in PG_TRY used in PG_CATCH */</comment>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>dataptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>remote_connection_get_pg_conn</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>data_fetcher_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We'll store the tuples in the batch_mctx.  First, flush the previous
	 * batch.
	 */</comment>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><call><name>tuplefactory_get_tupdesc</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>retrieved_attrs</name> <init>= <expr><call><name>tuplefactory_get_retrieved_attrs</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tupdesc_natts</name> <init>= <expr><name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>retrieved_natts</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>retrieved_attrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>total</name> <init>= <expr><name>tupdesc_natts</name> <operator>*</operator> <name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fetch_size</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>batch_nulls</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>batch_nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>batch_values</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fetch_size</name></name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>req_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>StringInfoData</name></type> <name>copy_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>copy_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>PQgetCopyData</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name><name>copy_data</name><operator>.</operator><name>data</name></name></expr></argument>,
										  <comment type="block">/* async = */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Set dataptr to ensure data is freed with PQfreemem() in
			 * PG_CATCH() clause in case error is thrown. */</comment>
			<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name><name>copy_data</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>copy_data</name><operator>.</operator><name>len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Note: it is possible to get EOF without having received the
				 * file trailer in case there's e.g., a remote error. */</comment>
				<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<comment type="block">/* Should read final result with PQgetResult() until it
				 * returns NULL. This happens below. */</comment>
				<break>break;</break>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>copy_data</name><operator>.</operator><name>len</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Error. The docs say: consult PQerrorMessage() for the reason.
				 * remote_connection_elog() will do this for us.
				 */</comment>
				<expr_stmt><expr><call><name>remote_connection_elog</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>copy_data</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name><name>copy_data</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>copy_data</name><operator>.</operator><name>cursor</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>copy_data_check_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><specifier>const</specifier> <name>AttConvInMetadata</name> <modifier>*</modifier></type><name>attconv</name> <init>= <expr><call><name>tuplefactory_get_attconv</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>attconv</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int16</name></type> <name>natts</name> <init>= <expr><call><name>copy_data_read_int16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>natts</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>file_trailer_received</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/*
				 * From the PostgreSQL (libpq) docs: The file trailer consists
				 * of a 16-bit integer word containing -1. This is easily
				 * distinguished from a tuple's field-count word. A reader
				 * should report an error if a field-count word is neither -1
				 * nor the expected number of columns. This provides an extra
				 * check against somehow getting out of sync with the data.
				 */</comment>
				<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>file_trailer_received</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

				<comment type="block">/* Next PQgetCopyData() should return -1, indicating EOF and
				 * that the remote side ended the copy. The final result
				 * (PGRES_COMMAND_OK) should then be read with
				 * PQgetResult(). */</comment>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>file_trailer_received</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/*
				 * There is also one case where no tupdesc attributes are retrieved.
				 * This is when we do `select count(*) from t`, and
				 * `enable_partitionwise_aggregate` is 0, so the data node queries
				 * become `select null from ...` and we should get 1 NULL attribute
				 * from COPY.
				 */</comment>
				<decl_stmt><decl><type><name>int16</name></type> <name>expected_natts</name> <init>= <expr><call><name>Max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>retrieved_natts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>natts</name> <operator>!=</operator> <name>expected_natts</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						 <argument><expr><literal type="string">"wrong number of attributes for a COPY tuple: expected %d, got %d"</literal></expr></argument>,
						 <argument><expr><name>expected_natts</name></expr></argument>,
						 <argument><expr><name>natts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name> <init>= <expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>batch_values</name><index>[<expr><name>tupdesc_natts</name> <operator>*</operator> <name>row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name> <init>= <expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>batch_nulls</name><index>[<expr><name>tupdesc_natts</name> <operator>*</operator> <name>row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tupdesc_natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></for>

				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tuple_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>retrieved_natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>att</name> <init>= <expr><call><name>list_nth_int</name><argument_list>(<argument><expr><name>retrieved_attrs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>att</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>att</name> <operator>&lt;</operator> <name>tupdesc_natts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>att_bytes</name> <init>= <expr><call><name>copy_data_read_int32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name>att_bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/*
						 * NULL. From the Postgres docs:
						 * Usually, a receive function should be declared STRICT; if
						 * it is not, it will be called with a NULL first parameter
						 * when reading a NULL input value. The function must still
						 * return NULL in this case, unless it raises an error.
						 * (This case is mainly meant to support domain receive
						 * functions, which might need to reject NULL inputs.)
						 * https://www.postgresql.org/docs/current/sql-createtype.html
						 */</comment>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attconv</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>att</name></expr>]</index></name><operator>.</operator><name>fn_strict</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>values</name><index>[<expr><name>att</name></expr>]</index></name> <operator>=</operator> <call><name>ReceiveFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>attconv</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>att</name></expr>]</index></name></expr></argument>,
															  <argument><expr><name>NULL</name></expr></argument>,
															  <argument><expr><name><name>attconv</name><operator>-&gt;</operator><name>ioparams</name><index>[<expr><name>att</name></expr>]</index></name></expr></argument>,
															  <argument><expr><name><name>attconv</name><operator>-&gt;</operator><name>typmods</name><index>[<expr><name>att</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><name><name>values</name><index>[<expr><name>att</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
						<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>att</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>

					<decl_stmt><decl><type><name>StringInfoData</name></type> <name>att_data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>att_data</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>copy_data_read_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copy_data</name></expr></argument>, <argument><expr><name>att_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>att_data</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>att_bytes</name></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>values</name><index>[<expr><name>att</name></expr>]</index></name> <operator>=</operator> <call><name>ReceiveFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>attconv</name><operator>-&gt;</operator><name>conv_funcs</name><index>[<expr><name>att</name></expr>]</index></name></expr></argument>,
													  <argument><expr><operator>&amp;</operator><name>att_data</name></expr></argument>,
													  <argument><expr><name><name>attconv</name><operator>-&gt;</operator><name>ioparams</name><index>[<expr><name>att</name></expr>]</index></name></expr></argument>,
													  <argument><expr><name><name>attconv</name><operator>-&gt;</operator><name>typmods</name><index>[<expr><name>att</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>att</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name><name>copy_data</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Don't count the file trailer as a row if this was the last batch */</comment>
		<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>num_tuples</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fetcher</name><operator>-&gt;</operator><name>file_trailer_received</name></name></expr> ?</condition><then> <expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>row</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>next_tuple_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/* Must be EOF if we didn't get as many tuples as we asked for. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>num_tuples</name></name> <operator>&lt;</operator> <name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fetch_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_count</name></name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* Finish the COPY here instead of at scan end (fetcher close) in
		 * order to not leave the connection in COPY_OUT mode. This is
		 * necessary to handle, e.g., remote EXPLAINs (together with ANALYZE)
		 * where tuples are first fetched in COPY mode, then a remote explain
		 * is performed on the same connection within the same scan. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>end_copy</name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>response</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>async_response_result_close</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>dataptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>dataptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>num_tuples</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_fetcher_fetch_data</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>copy_fetcher_send_fetch_request</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>copy_fetcher_complete</name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_store_tuple</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>df</name><operator>-&gt;</operator><name>eof</name></name> <operator>||</operator> <call><name><name>df</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>fetch_data</name></name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>row</name> <operator>==</operator> <name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>batch_values</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>batch_nulls</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nattrs</name> <init>= <expr><call><name>tuplefactory_get_nattrs</name><argument_list>(<argument><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>batch_values</name><index>[<expr><name>nattrs</name> <operator>*</operator> <name>row</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>batch_nulls</name><index>[<expr><name>nattrs</name> <operator>*</operator> <name>row</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecStoreVirtualTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_store_next_tuple</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>copy_fetcher_store_tuple</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>next_tuple_idx</name></name> <operator>&lt;=</operator> <name><name>df</name><operator>-&gt;</operator><name>num_tuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DataFetcher</name> <modifier>*</modifier></type>
<name>copy_fetcher_create_for_scan</name><parameter_list>(<parameter><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
							 <parameter><decl><type><name>TupleFactory</name> <modifier>*</modifier></type><name>tf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>data_fetcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CopyFetcherType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>funcs</name></name> <operator>=</operator> <operator>&amp;</operator><name>funcs</name></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_close</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>df</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>fetcher</name><operator>-&gt;</operator><name>file_trailer_received</name></name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>df</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check for premature ending of COPY (i.e., before reaching EOF). Note,
	 * if EOF was reached, we closed already in the main processing loop so no
	 * need to end_copy() here in that case. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>end_copy_before_eof</name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>copy_fetcher_reset</name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_fetcher_rescan</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CopyFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we're over the first batch so we need to close fetcher and restart from clean state */</comment>
		<expr_stmt><expr><call><name>copy_fetcher_close</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/* we can reuse current batch of results */</comment>
		<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>next_tuple_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
