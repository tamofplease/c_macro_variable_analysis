<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/remote/cursor_fetcher.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<comment type="block">/*
 * This file contains source code that was copied and/or modified from
 * the PostgreSQL database, which is licensed under the open-source
 * PostgreSQL License. Please see the NOTICE at the top level
 * directory for a copy of the PostgreSQL License.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lib/stringinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stmt_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuplefactory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cursor_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_fetcher.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Cursor for fetching data from a data node.
 *
 * The cursor fetcher splits the query result into multiple fetches, which
 * allows multiplexing on-going sub-queries on the same connection without
 * having to fetch the full result for each sub-query in one go (thus not
 * over-running memory).
 *
 * When a query consists of multiple subqueries that fetch data from the same
 * data nodes, and the sub-queries are joined using, e.g., a nested loop, then
 * a CURSOR is necessary to run the two sub-queries over the same connection.
 *
 * The downside of using a CURSOR, however, is that the plan on the remote
 * node cannot execute in parallel.
 *
 * https://www.postgresql.org/docs/current/when-can-parallel-query-be-used.html
 */</comment>
<typedef>typedef <type><struct>struct <name>CursorFetcher</name>
<block>{
	<decl_stmt><decl><type><name>DataFetcher</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>fetch_stmt</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>	  <comment type="block">/* cursor fetch statement */</comment>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>create_req</name></decl>;</decl_stmt> <comment type="block">/* a request to create cursor */</comment>
}</block></struct></type> <name>CursorFetcher</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cursor_fetcher_send_fetch_request</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cursor_fetcher_fetch_data</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cursor_fetcher_set_fetch_size</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cursor_fetcher_set_tuple_memcontext</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cursor_fetcher_store_next_tuple</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cursor_fetcher_rewind</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cursor_fetcher_close</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>DataFetcherFuncs</name></type> <name>funcs</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>send_fetch_request</name> <operator>=</operator> <name>cursor_fetcher_send_fetch_request</name></expr>,
	<expr><operator>.</operator><name>fetch_data</name> <operator>=</operator> <name>cursor_fetcher_fetch_data</name></expr>,
	<expr><operator>.</operator><name>set_fetch_size</name> <operator>=</operator> <name>cursor_fetcher_set_fetch_size</name></expr>,
	<expr><operator>.</operator><name>set_tuple_mctx</name> <operator>=</operator> <name>cursor_fetcher_set_tuple_memcontext</name></expr>,
	<expr><operator>.</operator><name>store_next_tuple</name> <operator>=</operator> <name>cursor_fetcher_store_next_tuple</name></expr>,
	<expr><operator>.</operator><name>rewind</name> <operator>=</operator> <name>cursor_fetcher_rewind</name></expr>,
	<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>cursor_fetcher_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_create_req</name><parameter_list>(<parameter><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"DECLARE c%u CURSOR FOR\n%s"</literal></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>req_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stmt_params</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send_with_params</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>,
												 <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>,
												 <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>stmt_params</name></name></expr></argument>,
												 <argument><expr><name>FORMAT_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Complete ongoing cursor create request if needed and return cursor.
 * If cursor is in async mode then we will dispatch a request to fetch data.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_fetcher_wait_until_open</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* nothing to do */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid cursor state"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Cannot wait on unsent cursor request."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>async_request_wait_ok_command</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DataFetcher</name> <modifier>*</modifier></type>
<name>cursor_fetcher_create_for_scan</name><parameter_list>(<parameter><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
							   <parameter><decl><type><name>TupleFactory</name> <modifier>*</modifier></type><name>tf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>data_fetcher_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>CursorFetcherType</name></expr>;</expr_stmt>
	<comment type="block">/* Assign a unique ID for my cursor */</comment>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>remote_connection_get_cursor_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>create_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* send a request to DECLARE cursor  */</comment>
	<expr_stmt><expr><call><name>cursor_create_req</name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fetcher</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>funcs</name></name> <operator>=</operator> <operator>&amp;</operator><name>funcs</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cursor_fetcher_wait_until_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>fetcher</name><operator>-&gt;</operator><name>state</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_fetcher_set_fetch_size</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>data_fetcher_set_fetch_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>fetch_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>fetch_stmt</name></name></expr></argument>,
			 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>fetch_stmt</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"FETCH %u FROM c%u"</literal></expr></argument>,
			 <argument><expr><name>fetch_size</name></expr></argument>,
			 <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_fetcher_set_tuple_memcontext</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>data_fetcher_set_tuple_mctx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send async req to fetch data from cursor.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_fetcher_send_fetch_request</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_CURSOR_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid cursor state"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Cannot fetch new data while previous request is ongoing."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* We use a separate mem context because batch mem context is getting reset once we fetch
		 * new batch and here we need our async request to survive */</comment>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>req_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>tuplefactory_is_binary</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send_binary</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>fetch_stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>fetch_stmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Retrieve data from ongoing async fetch request
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cursor_fetcher_fetch_data_complete</name><parameter_list>(<parameter><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>numrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>data_fetcher_validate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We'll store the tuples in the batch_mctx.  First, flush the previous
	 * batch.
	 */</comment>
	<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tuples</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>req_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>async_request_wait_any_result</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>format</name> <operator>=</operator> <call><name>PQbinaryTuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* On error, report the original query, not the FETCH. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* remote_result_elog will call PQclear() on the result, so need
			 * to mark the response as NULL to avoid double PQclear() */</comment>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>response</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>remote_result_elog</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Convert the data into HeapTuples */</comment>
		<expr_stmt><expr><name>numrows</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tuples</name></name> <operator>=</operator> <operator>(</operator><name>HeapTuple</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>numrows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HeapTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>num_tuples</name></name> <operator>=</operator> <name>numrows</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>next_tuple_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/* Allow creating tuples in alternative memory context if user has set
		 * it explicitly, otherwise same as batch_mctx */</comment>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tuple_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numrows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tuples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tuplefactory_make_tuple</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>tuplefactory_reset_mctx</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Update batch count to indicate we are no longer in the first
		 * batch. When we are on the second batch or greater, a rewind of the
		 * cursor needs to refetch the first batch. If we are still in the
		 * first batch, however, a rewind can be done by simply resetting the
		 * tuple index to 0 within the batch. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_count</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Must be EOF if we didn't get as many tuples as we asked for. */</comment>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name> <operator>=</operator> <operator>(</operator><name>numrows</name> <operator>&lt;</operator> <name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>fetch_size</name></name><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>async_response_result_close</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>response</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>response</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>async_response_result_close</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>numrows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cursor_fetcher_fetch_data</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>cursor_fetcher_wait_until_open</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>cursor_fetcher_send_fetch_request</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>cursor_fetcher_fetch_data_complete</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_fetcher_store_next_tuple</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>data_fetcher_store_next_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remote_cursor_exec_cmd</name><parameter_list>(<parameter><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We don't use a PG_TRY block here, so be careful not to throw error
	 * without releasing the PGresult.
	 */</comment>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>async_request_wait_ok_command</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>data_fetcher_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_fetcher_rewind</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* We need to make sure that cursor is opened */</comment>
	<expr_stmt><expr><call><name>cursor_fetcher_wait_until_open</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>batch_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name> <operator>||</operator> <name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>async_request_discard_response</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* We are beyond the first fetch, so need to rewind the remote end */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"MOVE BACKWARD ALL IN c%u"</literal></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remote_cursor_exec_cmd</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* We have done zero or one fetch, so we can simply re-read what we
		 * have in memory, if anything */</comment>
		<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>next_tuple_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cursor_fetcher_close</name><parameter_list>(<parameter><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CursorFetcher</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>cast_fetcher</name><argument_list>(<argument><expr><name>CursorFetcher</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name> <operator>&amp;&amp;</operator> <name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>async_request_discard_response</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>create_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>async_request_discard_response</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>data_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"CLOSE c%u"</literal></expr></argument>, <argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remote_cursor_exec_cmd</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
