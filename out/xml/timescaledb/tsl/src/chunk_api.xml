<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/chunk_api.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/multixact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/visibilitymap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/indexing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_class.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_inherits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_operator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/vacuum.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/array.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/jsonb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypercube.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/dist_txn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/stmt_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/dist_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/tuplefactory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/chunk_data_node.h"</cpp:file></cpp:include>

<comment type="block">/*
 * These values come from the pg_type table.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT4_TYPELEN</name></cpp:macro> <cpp:value>sizeof(float4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT4_TYPEBYVAL</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT4_TYPEALIGN</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTRING_TYPELEN</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTRING_TYPEBYVAL</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTRING_TYPEALIGN</name></cpp:macro> <cpp:value>'c'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT4_TYPELEN</name></cpp:macro> <cpp:value>sizeof(int32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT4_TYPEBYVAL</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT4_TYPEALIGN</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OID_TYPELEN</name></cpp:macro> <cpp:value>sizeof(Oid)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OID_TYPEBYVAL</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OID_TYPEALIGN</name></cpp:macro> <cpp:value>'i'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTRING_ARY_TYPELEN</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<comment type="block">/*
 * Convert a hypercube to a JSONB value.
 *
 * For instance, a two-dimensional hypercube, with dimensions "time" and
 * "device", might look as follows:
 *
 * {"time": [1514419200000000, 1515024000000000],
 *  "device": [-9223372036854775808, 1073741823]}
 */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>hypercube_to_jsonb_value</name><parameter_list>(<parameter><decl><type><name>Hypercube</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>, <parameter><decl><type><name>Hyperspace</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>num_dimensions</name></name> <operator>==</operator> <name><name>hc</name><operator>-&gt;</operator><name>num_slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hc</name><operator>-&gt;</operator><name>num_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonbValue</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dim_name</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>dimensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fd</name><operator>.</operator><name>column_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>range_start</name> <init>=
			<expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>hc</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>range_end</name> <init>=
			<expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>hc</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>range_end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>dimensions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fd</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>hc</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>k</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>k</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dim_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>k</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>dim_name</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>WJB_BEGIN_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>range_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>WJB_ELEM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>range_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>WJB_ELEM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>WJB_END_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a hypercube from a JSONB object.
 *
 * Takes a JSONB object with a hypercube's dimensional constraints and outputs
 * a Hypercube. The JSONB is the same format as output by
 * hypercube_to_jsonb_value() above, i.e.:
 *
 * {"time": [1514419200000000, 1515024000000000],
 *  "device": [-9223372036854775808, 1073741823]}
 */</comment>
<function><type><specifier>static</specifier> <name>Hypercube</name> <modifier>*</modifier></type>
<name>hypercube_from_jsonb</name><parameter_list>(<parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hyperspace</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>parse_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIteratorToken</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypercube</name> <modifier>*</modifier></type><name>hc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>JsonbIteratorInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WJB_BEGIN_OBJECT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"invalid JSON format"</literal></expr>;</expr_stmt>
		<goto>goto <name>out_err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>object</name><operator>.</operator><name>nPairs</name></name> <operator>!=</operator> <name><name>hs</name><operator>-&gt;</operator><name>num_dimensions</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"invalid number of hypercube dimensions"</literal></expr>;</expr_stmt>
		<goto>goto <name>out_err</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>ts_hypercube_alloc</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>num_dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>dim</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name><name>range</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>WJB_END_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WJB_KEY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"invalid JSON format"</literal></expr>;</expr_stmt>
			<goto>goto <name>out_err</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>ts_hyperspace_get_dimension_by_name</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>DIMENSION_TYPE_ANY</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dim</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"dimension \"%s\" does not exist in hypertable"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>out_err</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WJB_BEGIN_ARRAY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"invalid JSON format"</literal></expr>;</expr_stmt>
			<goto>goto <name>out_err</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>array</name><operator>.</operator><name>nElems</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"unexpected number of dimensional bounds for dimension \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>out_err</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WJB_ELEM</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"invalid JSON format"</literal></expr>;</expr_stmt>
				<goto>goto <name>out_err</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>jbvNumeric</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"constraint for dimension \"%s\" is not numeric"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>out_err</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
				<call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_int8</name></expr></argument>, <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WJB_END_ARRAY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">"invalid JSON format"</literal></expr>;</expr_stmt>
			<goto>goto <name>out_err</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ts_hypercube_add_slice_from_range</name><argument_list>(<argument><expr><name>hc</name></expr></argument>, <argument><expr><name><name>dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>range</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

<label><name>out_err</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>parse_error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>parse_error</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>hc</name></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>Anum_create_chunk</name>
<block>{
	<decl><name>Anum_create_chunk_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>Anum_create_chunk_hypertable_id</name></decl>,
	<decl><name>Anum_create_chunk_schema_name</name></decl>,
	<decl><name>Anum_create_chunk_table_name</name></decl>,
	<decl><name>Anum_create_chunk_relkind</name></decl>,
	<decl><name>Anum_create_chunk_slices</name></decl>,
	<decl><name>Anum_create_chunk_created</name></decl>,
	<decl><name>_Anum_create_chunk_max</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Natts_create_chunk</name></cpp:macro> <cpp:value>(_Anum_create_chunk_max - 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>chunk_form_tuple</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>created</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_create_chunk</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_create_chunk</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jv</name> <init>= <expr><call><name>hypercube_to_jsonb_value</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>cube</name></name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>jv</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_hypertable_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_schema_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_table_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_relkind</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_slices</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>JsonbPGetDatum</name><argument_list>(<argument><expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>jv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_created</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>chunk_show</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>chunk_relid</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>InvalidOid</name></expr> </then><else>: <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name> <init>= <expr><call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>=
		<expr><call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function returning record called in context "</literal>
						<literal type="string">"that cannot accept type record"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We use the create_chunk tuple for show_chunk, because they only differ
	 * in the created column at the end. That column will not be included here
	 * since it is not part of the tuple descriptor.
	 */</comment>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>chunk_form_tuple</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tuple</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create tuple from chunk"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_privileges_for_creating_chunk</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>hyper_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AclResult</name></type> <name>acl_result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>acl_result</name> <operator>=</operator> <call><name>pg_class_aclcheck</name><argument_list>(<argument><expr><name>hyper_relid</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ACL_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_result</name> <operator>!=</operator> <name>ACLCHECK_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"permission denied for table \"%s\""</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>hyper_relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Insert privileges required on \"%s\" to create chunks."</literal></expr></argument>,
						   <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>hyper_relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Hypercube</name> <modifier>*</modifier></type>
<name>get_hypercube_from_slices</name><parameter_list>(<parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>slices</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hypercube</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_err</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>hypercube_from_jsonb</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parse_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid hypercube for hypertable \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>parse_err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>hc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a chunk and its metadata.
 *
 * This function will create a chunk, either from an existing table or by
 * creating a new table. If chunk_table_relid is InvalidOid, the chunk table
 * will be created, otherwise the table referenced by the relid will be
 * used. The chunk will be associated with the hypertable given by
 * hypertable_relid.
 */</comment>
<function><type><name>Datum</name></type>
<name>chunk_create</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>hypertable_relid</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>InvalidOid</name></expr> </then><else>: <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>slices</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema_name</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_name</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>chunk_table_relid</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>InvalidOid</name></expr> </then><else>: <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name> <init>= <expr><call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name>hypertable_relid</name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypercube</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>created</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_privileges_for_creating_chunk</name><argument_list>(<argument><expr><name>hypertable_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>slices</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid slices"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function returning record called in context "</literal>
						<literal type="string">"that cannot accept type record"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>get_hypercube_from_slices</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ts_chunk_find_or_create_without_cuts</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,
												 <argument><expr><name>hc</name></expr></argument>,
												 <argument><expr><name>schema_name</name></expr></argument>,
												 <argument><expr><name>table_name</name></expr></argument>,
												 <argument><expr><name>chunk_table_relid</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>chunk_form_tuple</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tuple</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create tuple from chunk"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_CHUNK_FUNCTION_NAME</name></cpp:macro> <cpp:value>"create_chunk"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_CHUNK_NUM_ARGS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_CREATE_STMT</name></cpp:macro>                                                                          \
	<cpp:value>"SELECT * FROM " INTERNAL_SCHEMA_NAME "." CREATE_CHUNK_FUNCTION_NAME "($1, $2, $3, $4, $5)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESTIMATE_JSON_STR_SIZE</name><parameter_list>(<parameter><type><name>num_dims</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(60 * (num_dims))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name><name>create_chunk_argtypes</name><index>[<expr><name>CREATE_CHUNK_NUM_ARGS</name></expr>]</index></name> <init>= <expr><block>{
	<expr><name>REGCLASSOID</name></expr>, <expr><name>JSONBOID</name></expr>, <expr><name>NAMEOID</name></expr>, <expr><name>NAMEOID</name></expr>, <expr><name>REGCLASSOID</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Fill in / get the TupleDesc for the result type of the create_chunk()
 * function.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_create_chunk_result_type</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name> <modifier>*</modifier></type><name>tupdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>funcoid</name> <init>= <expr><call><name>ts_get_function_oid</name><argument_list>(<argument><expr><name>CREATE_CHUNK_FUNCTION_NAME</name></expr></argument>,
									  <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>,
									  <argument><expr><name>CREATE_CHUNK_NUM_ARGS</name></expr></argument>,
									  <argument><expr><name>create_chunk_argtypes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>get_func_result_type</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function returning record called in context "</literal>
						<literal type="string">"that cannot accept type record"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_result_datums</name><parameter_list>(<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>numvals</name></decl></parameter>, <parameter><decl><type><name>AttInMetadata</name> <modifier>*</modifier></type><name>attinmeta</name></decl></parameter>,
				  <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numvals</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>InputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>attinmeta</name><operator>-&gt;</operator><name>attinfuncs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
										  <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name><name>attinmeta</name><operator>-&gt;</operator><name>attioparams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
										  <argument><expr><name><name>attinmeta</name><operator>-&gt;</operator><name>atttypmods</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>chunk_api_dimension_slices_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jv</name> <init>= <expr><call><name>hypercube_to_jsonb_value</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>cube</name></name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>hcjson</name> <init>= <expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>jv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>JsonbToCString</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hcjson</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><call><name>ESTIMATE_JSON_STR_SIZE</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name><operator>-&gt;</operator><name>num_dimensions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a replica of a chunk on all its assigned or specified list of data nodes.
 *
 * If "data_nodes" list is explicitly specified use that instead of the list of
 * data nodes from the chunk.
 */</comment>
<function><type><name>void</name></type>
<name>chunk_api_create_on_data_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
							   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_chunk_name</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequestSet</name> <modifier>*</modifier></type><name>reqset</name> <init>= <expr><call><name>async_request_set_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>params</name><index>[<expr><name>CREATE_CHUNK_NUM_ARGS</name></expr>]</index></name> <init>= <expr><block>{
		<expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>chunk_api_dimension_slices_json</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>,
		<expr><name>remote_chunk_name</name> <operator>?</operator> <name>remote_chunk_name</name> <operator>:</operator> <name>NULL</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttInMetadata</name> <modifier>*</modifier></type><name>attinmeta</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In case of "unavailable" datanodes, the chunk-&gt;data_nodes list is already pruned
	 * and doesn't contain "unavailable" datanodes. So this chunk creation will never
	 * happen on such "unavailable" datanodes. By the same logic, metadata update on the
	 * AN for the chunk-&gt;datanode mappings will only happen for the listed "live" DNs
	 * and not for the "unavailable" ones
	 */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>target_data_nodes</name> <init>= <expr><ternary><condition><expr><name>data_nodes</name></expr> ?</condition><then> <expr><name>data_nodes</name></expr> </then><else>: <expr><name><name>chunk</name><operator>-&gt;</operator><name>data_nodes</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>get_create_chunk_result_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>attinmeta</name> <operator>=</operator> <call><name>TupleDescGetAttInMetadata</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>target_data_nodes</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ChunkDataNode</name> <modifier>*</modifier></type><name>cdn</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id</name> <init>= <expr><call><name>remote_connection_id</name><argument_list>(<argument><expr><name><name>cdn</name><operator>-&gt;</operator><name>foreign_server_oid</name></name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>remote_dist_txn_get_connection</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>REMOTE_TXN_NO_PREP_STMT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send_with_params</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
											 <argument><expr><name>CHUNK_CREATE_STMT</name></expr></argument>,
											 <argument><expr><call><name>stmt_params_create_from_values</name><argument_list>(<argument><expr><name>params</name></expr></argument>,
																			<argument><expr><name>CREATE_CHUNK_NUM_ARGS</name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>FORMAT_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>async_request_attach_user_data</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>cdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>async_request_set_add</name><argument_list>(<argument><expr><name>reqset</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<while>while <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>async_request_set_wait_ok_result</name><argument_list>(<argument><expr><name>reqset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pgres</name> <init>= <expr><call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ChunkDataNode</name> <modifier>*</modifier></type><name>cdn</name> <init>= <expr><call><name>async_response_result_get_user_data</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_create_chunk</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_create_chunk</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>created</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>Natts_create_chunk</name> <operator>==</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>get_result_datums</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>, <argument><expr><name>attinmeta</name></expr></argument>, <argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>created</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_created</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Sanity check the result. Use error rather than an assert since this
		 * is the result of a remote call to a data node that could potentially
		 * run a different version of the remote function than we'd expect.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>created</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"chunk creation failed on data node \"%s\""</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cdn</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>||</operator>
			<name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_schema_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>||</operator>
			<name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_table_name</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected chunk creation result on data node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>schema_name</name> <operator>=</operator>
			<call><name>DatumGetCString</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_schema_name</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>table_name</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_table_name</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>(</operator><name>Name</name><operator>)</operator> <operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>namestrcmp</name><argument_list>(<argument><expr><operator>(</operator><name>Name</name><operator>)</operator> <operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"remote chunk has mismatching schema or table name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>cdn</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>node_chunk_id</name></name> <operator>=</operator>
			<call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_create_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<enum>enum <name>Anum_chunk_relstats</name>
<block>{
	<decl><name>Anum_chunk_relstats_chunk_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>Anum_chunk_relstats_hypertable_id</name></decl>,
	<decl><name>Anum_chunk_relstats_num_pages</name></decl>,
	<decl><name>Anum_chunk_relstats_num_tuples</name></decl>,
	<decl><name>Anum_chunk_relstats_num_allvisible</name></decl>,
	<decl><name>_Anum_chunk_relstats_max</name></decl>,
}</block>;</enum>

<comment type="block">/*
 * Construct a tuple for the get_chunk_relstats SQL function.
 */</comment>
<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>chunk_get_single_stats_tuple</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>ctup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>pgcform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>_Anum_chunk_relstats_max</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>_Anum_chunk_relstats_max</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>reltuples</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"pg_class entry for chunk \"%s.%s\" not found"</literal></expr></argument>,
			 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pgcform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_hypertable_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_num_pages</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>pgcform</name><operator>-&gt;</operator><name>relpages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reltuples</name> <operator>=</operator> <call><name>Float4GetDatum</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>pgcform</name><operator>-&gt;</operator><name>reltuples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>pgcform</name><operator>-&gt;</operator><name>reltuples</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_num_tuples</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>reltuples</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_num_allvisible</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>pgcform</name><operator>-&gt;</operator><name>relallvisible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<enum>enum <name>Anum_chunk_colstats</name>
<block>{
	<decl><name>Anum_chunk_colstats_chunk_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>Anum_chunk_colstats_hypertable_id</name></decl>,
	<decl><name>Anum_chunk_colstats_column_id</name></decl>,
	<decl><name>Anum_chunk_colstats_nullfrac</name></decl>,
	<decl><name>Anum_chunk_colstats_width</name></decl>,
	<decl><name>Anum_chunk_colstats_distinct</name></decl>,
	<decl><name>Anum_chunk_colstats_slot_kinds</name></decl>,
	<decl><name>Anum_chunk_colstats_slot_op_strings</name></decl>,
	<decl><name>Anum_chunk_colstats_slot_collations</name></decl>,
	<decl><name>Anum_chunk_colstats_slot1_numbers</name></decl>,
	<decl><name>Anum_chunk_colstats_slot2_numbers</name></decl>,
	<decl><name>Anum_chunk_colstats_slot3_numbers</name></decl>,
	<decl><name>Anum_chunk_colstats_slot4_numbers</name></decl>,
	<decl><name>Anum_chunk_colstats_slot5_numbers</name></decl>,
	<decl><name>Anum_chunk_colstats_slot_valtype_strings</name></decl>,
	<decl><name>Anum_chunk_colstats_slot1_values</name></decl>,
	<decl><name>Anum_chunk_colstats_slot2_values</name></decl>,
	<decl><name>Anum_chunk_colstats_slot3_values</name></decl>,
	<decl><name>Anum_chunk_colstats_slot4_values</name></decl>,
	<decl><name>Anum_chunk_colstats_slot5_values</name></decl>,
	<decl><name>_Anum_chunk_colstats_max</name></decl>,
}</block>;</enum>

<comment type="block">/*
 * It's not safe to send OIDs for operations or types between postgres instances for user defined
 * types. Instead convert the operation OID to strings and then look up the local OID for the
 * corresponding names on the other node. A single op OID will need 6 strings {op_name,
 * op_namespace, larg_name, larg_namespace, rarg_name, rarg_namespace}
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGS_PER_TYPE_OID</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGS_PER_OP_OID</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<enum>enum <name>StringArrayTypeIdx</name>
<block>{
	<decl><name>ENCODED_TYPE_NAME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>ENCODED_TYPE_NAMESPACE</name></decl>
}</block>;</enum>

<enum>enum <name>OpArrayTypeIdx</name>
<block>{
	<decl><name>ENCODED_OP_NAME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>ENCODED_OP_NAMESPACE</name></decl>,
	<decl><name>ENCODED_OP_LARG_NAME</name></decl>,
	<decl><name>ENCODED_OP_LARG_NAMESPACE</name></decl>,
	<decl><name>ENCODED_OP_RARG_NAME</name></decl>,
	<decl><name>ENCODED_OP_RARG_NAMESPACE</name></decl>,
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LargSubarrayForOpArray</name><parameter_list>(<parameter><type><name>op_string_array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(op_string_array)[ENCODED_OP_LARG_NAME])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RargSubarrayForOpArray</name><parameter_list>(<parameter><type><name>op_string_array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;(op_string_array)[ENCODED_OP_RARG_NAME])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>convert_type_oid_to_strings</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_id</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>result_strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_namespace</name></type> <name>namespace</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>namespace_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>type_tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>type_tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result_strings</name><index>[<expr><name>ENCODED_TYPE_NAME</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>typname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>namespace_tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>NAMESPACEOID</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>typnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>namespace_tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>namespace</name> <operator>=</operator> <operator>(</operator><name>Form_pg_namespace</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>namespace_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result_strings</name><index>[<expr><name>ENCODED_TYPE_NAMESPACE</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>namespace</name><operator>-&gt;</operator><name>nspname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>namespace_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>convert_op_oid_to_strings</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>op_id</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>result_strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_operator</name></type> <name>operator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_namespace</name></type> <name>namespace</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>operator_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>namespace_tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>operator_tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><name>op_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>operator_tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>operator</name><operator>=</operator><operator>(</operator><name>Form_pg_operator</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>operator_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result_strings</name><index>[<expr><name>ENCODED_OP_NAME</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>operator</name><operator>-&gt;</operator><name>oprname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>namespace_tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>NAMESPACEOID</name></expr></argument>, <argument><expr><name><name>operator</name><operator>-&gt;</operator><name>oprnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>namespace_tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>namespace</name> <operator>=</operator> <operator>(</operator><name>Form_pg_namespace</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>namespace_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result_strings</name><index>[<expr><name>ENCODED_OP_NAMESPACE</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>namespace</name><operator>-&gt;</operator><name>nspname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>namespace_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>convert_type_oid_to_strings</name><argument_list>(<argument><expr><name><name>operator</name><operator>-&gt;</operator><name>oprleft</name></name></expr></argument>, <argument><expr><call><name>LargSubarrayForOpArray</name><argument_list>(<argument><expr><name>result_strings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convert_type_oid_to_strings</name><argument_list>(<argument><expr><name><name>operator</name><operator>-&gt;</operator><name>oprright</name></name></expr></argument>, <argument><expr><call><name>RargSubarrayForOpArray</name><argument_list>(<argument><expr><name>result_strings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>operator_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>convert_strings_to_type_id</name><parameter_list>(<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>input_strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>arg_namespace</name> <init>= <expr><call><name>GetSysCacheOid1</name><argument_list>(<argument><expr><name>NAMESPACENAME</name></expr></argument>,
										<argument><expr><name>Anum_pg_namespace_oid</name></expr></argument>,
										<argument><expr><name><name>input_strings</name><index>[<expr><name>ENCODED_TYPE_NAMESPACE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>arg_namespace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetSysCacheOid2</name><argument_list>(<argument><expr><name>TYPENAMENSP</name></expr></argument>,
							 <argument><expr><name>Anum_pg_type_oid</name></expr></argument>,
							 <argument><expr><name><name>input_strings</name><index>[<expr><name>ENCODED_TYPE_NAME</name></expr>]</index></name></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>arg_namespace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>convert_strings_to_op_id</name><parameter_list>(<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>input_strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>proc_namespace</name> <init>=
		<expr><call><name>GetSysCacheOid1</name><argument_list>(<argument><expr><name>NAMESPACENAME</name></expr></argument>, <argument><expr><name>Anum_pg_namespace_oid</name></expr></argument>, <argument><expr><name><name>input_strings</name><index>[<expr><name>ENCODED_OP_NAMESPACE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>larg</name> <init>= <expr><call><name>convert_strings_to_type_id</name><argument_list>(<argument><expr><call><name>LargSubarrayForOpArray</name><argument_list>(<argument><expr><name>input_strings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>rarg</name> <init>= <expr><call><name>convert_strings_to_type_id</name><argument_list>(<argument><expr><call><name>RargSubarrayForOpArray</name><argument_list>(<argument><expr><name>input_strings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>proc_namespace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetSysCacheOid4</name><argument_list>(<argument><expr><name>OPERNAMENSP</name></expr></argument>,
							 <argument><expr><name>Anum_pg_operator_oid</name></expr></argument>,
							 <argument><expr><name><name>input_strings</name><index>[<expr><name>ENCODED_OP_NAME</name></expr>]</index></name></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>larg</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>rarg</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>proc_namespace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>collect_colstat_slots</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Form_pg_statistic</name></type> <name>formdata</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Fetching the values and/or numbers fields for a slot requires knowledge of which fields are
	 * present for each kind of stats. Note that this doesn't support custom statistics.
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>statistic_kind_slot_fields</name><index>[<expr><name>STATISTIC_KIND_BOUNDS_HISTOGRAM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0</literal></expr>,
		<expr><name>ATTSTATSSLOT_VALUES</name> <operator>|</operator> <name>ATTSTATSSLOT_NUMBERS</name></expr>, <comment type="block">/* MCV */</comment>
		<expr><name>ATTSTATSSLOT_VALUES</name></expr>,						<comment type="block">/* HISTOGRAM */</comment>
		<expr><name>ATTSTATSSLOT_NUMBERS</name></expr>,						<comment type="block">/* CORRELATION */</comment>
		<expr><name>ATTSTATSSLOT_VALUES</name> <operator>|</operator> <name>ATTSTATSSLOT_NUMBERS</name></expr>, <comment type="block">/* MCELEM */</comment>
		<expr><name>ATTSTATSSLOT_NUMBERS</name></expr>,						<comment type="block">/* DECHIST */</comment>
		<comment type="block">/* ATTSTATSSLOT_VALUES is not always present for all HISTOGRAM operators.. */</comment>
		<expr><name>ATTSTATSSLOT_NUMBERS</name></expr>, <comment type="block">/* RANGE_LENGTH_HISTOGRAM */</comment>
		<expr><name>ATTSTATSSLOT_VALUES</name></expr>	  <comment type="block">/* BOUNDS_HISTOGRAM */</comment>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>slotkind</name><index>[<expr><name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>op_strings</name><index>[<expr><name>STRINGS_PER_OP_OID</name> <operator>*</operator> <name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>slot_collation</name><index>[<expr><name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>value_type_strings</name><index>[<expr><name>STRINGS_PER_TYPE_OID</name> <operator>*</operator> <name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nopstrings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nvalstrings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STATISTIC_NUM_SLOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int16</name></type> <name>kind</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int16</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>formdata</name><operator>-&gt;</operator><name>stakind1</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>slot_op</name> <init>= <expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>formdata</name><operator>-&gt;</operator><name>staop1</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttStatsSlot</name></type> <name>stat_slot</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>slot_fields</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>numbers_idx</name> <init>= <expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot1_numbers</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>values_idx</name> <init>= <expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot1_values</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>slot_collation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>formdata</name><operator>-&gt;</operator><name>stacoll1</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>slotkind</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * As per comments in pg_statistic_d.h, "kind" codes from 0 - 99 are reserved
		 * for assignment by the core PostgreSQL project. Beyond that are for PostGIS
		 * and other projects
		 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STATS_KINDS_MAX</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>kind</name> <operator>&gt;</operator> <name>PG_STATS_KINDS_MAX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>numbers_idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>values_idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* slot_op can be invalid for some "kinds" like STATISTIC_KIND_BOUNDS_HISTOGRAM */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>slot_op</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>convert_op_oid_to_strings</name><argument_list>(<argument><expr><name>slot_op</name></expr></argument>, <argument><expr><name>op_strings</name> <operator>+</operator> <name>nopstrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nopstrings</name> <operator>+=</operator> <name>STRINGS_PER_OP_OID</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&gt;</operator> <name>STATISTIC_KIND_BOUNDS_HISTOGRAM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unable to fetch user defined statistics from data nodes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>slot_fields</name> <operator>=</operator> <name><name>statistic_kind_slot_fields</name><index>[<expr><name>kind</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>get_attstatsslot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stat_slot</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>slot_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>slot_fields</name> <operator>&amp;</operator> <name>ATTSTATSSLOT_NUMBERS</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>stanumbers</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>stat_slot</name><operator>.</operator><name>nnumbers</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>stat_slot</name><operator>.</operator><name>nnumbers</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>stanumbers</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>Float4GetDatum</name><argument_list>(<argument><expr><name><name>stat_slot</name><operator>.</operator><name>numbers</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

			<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>construct_array</name><argument_list>(<argument><expr><name>stanumbers</name></expr></argument>,
									<argument><expr><name><name>stat_slot</name><operator>.</operator><name>nnumbers</name></name></expr></argument>,
									<argument><expr><name>FLOAT4OID</name></expr></argument>,
									<argument><expr><name>FLOAT4_TYPELEN</name></expr></argument>,
									<argument><expr><name>FLOAT4_TYPEBYVAL</name></expr></argument>,
									<argument><expr><name>FLOAT4_TYPEALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>numbers_idx</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>numbers_idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>slot_fields</name> <operator>&amp;</operator> <name>ATTSTATSSLOT_VALUES</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>encoded_value_ary</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>stat_slot</name><operator>.</operator><name>nvalues</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type> <name>type_tuple</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><name><name>stat_slot</name><operator>.</operator><name>valuetype</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>type</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>convert_type_oid_to_strings</name><argument_list>(<argument><expr><name><name>stat_slot</name><operator>.</operator><name>valuetype</name></name></expr></argument>, <argument><expr><name>value_type_strings</name> <operator>+</operator> <name>nvalstrings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nvalstrings</name> <operator>+=</operator> <name>STRINGS_PER_TYPE_OID</name></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>stat_slot</name><operator>.</operator><name>nvalues</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>encoded_value_ary</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>OidFunctionCall1</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>typoutput</name></name></expr></argument>, <argument><expr><name><name>stat_slot</name><operator>.</operator><name>values</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

			<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>construct_array</name><argument_list>(<argument><expr><name>encoded_value_ary</name></expr></argument>,
									<argument><expr><name><name>stat_slot</name><operator>.</operator><name>nvalues</name></name></expr></argument>,
									<argument><expr><name>CSTRINGOID</name></expr></argument>,
									<argument><expr><name>CSTRING_TYPELEN</name></expr></argument>,
									<argument><expr><name>CSTRING_TYPEBYVAL</name></expr></argument>,
									<argument><expr><name>CSTRING_TYPEALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>values_idx</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>values_idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>free_attstatsslot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stat_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>construct_array</name><argument_list>(<argument><expr><name>slotkind</name></expr></argument>,
							<argument><expr><name>STATISTIC_NUM_SLOTS</name></expr></argument>,
							<argument><expr><name>INT4OID</name></expr></argument>,
							<argument><expr><name>INT4_TYPELEN</name></expr></argument>,
							<argument><expr><name>INT4_TYPEBYVAL</name></expr></argument>,
							<argument><expr><name>INT4_TYPEALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_kinds</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>construct_array</name><argument_list>(<argument><expr><name>op_strings</name></expr></argument>,
							<argument><expr><name>nopstrings</name></expr></argument>,
							<argument><expr><name>CSTRINGOID</name></expr></argument>,
							<argument><expr><name>CSTRING_TYPELEN</name></expr></argument>,
							<argument><expr><name>CSTRING_TYPEBYVAL</name></expr></argument>,
							<argument><expr><name>CSTRING_TYPEALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_op_strings</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>construct_array</name><argument_list>(<argument><expr><name>slot_collation</name></expr></argument>,
							<argument><expr><name>STATISTIC_NUM_SLOTS</name></expr></argument>,
							<argument><expr><name>OIDOID</name></expr></argument>,
							<argument><expr><name>OID_TYPELEN</name></expr></argument>,
							<argument><expr><name>OID_TYPEBYVAL</name></expr></argument>,
							<argument><expr><name>OID_TYPEALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_collations</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>construct_array</name><argument_list>(<argument><expr><name>value_type_strings</name></expr></argument>,
							<argument><expr><name>nvalstrings</name></expr></argument>,
							<argument><expr><name>CSTRINGOID</name></expr></argument>,
							<argument><expr><name>CSTRING_TYPELEN</name></expr></argument>,
							<argument><expr><name>CSTRING_TYPEBYVAL</name></expr></argument>,
							<argument><expr><name>CSTRING_TYPEALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_valtype_strings</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Construct a tuple for the get_chunk_relstats SQL function.
 */</comment>
<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>chunk_get_single_colstats_tuple</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>ctup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_statistic</name></type> <name>pgsform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>_Anum_chunk_colstats_max</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>_Anum_chunk_colstats_max</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>dropped</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>row_security_active</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ctup</name> <operator>=</operator> <call><name>SearchSysCache2</name><argument_list>(<argument><expr><name>ATTNUM</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dropped</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Form_pg_attribute</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>attisdropped</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dropped</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>has_column_privilege_id_attnum</name></expr></argument>,
										  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ctup</name> <operator>=</operator> <call><name>SearchSysCache3</name><argument_list>(<argument><expr><name>STATRELATTINH</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pg_statistics will not have an entry for an unanalyzed table */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pgsform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_statistic</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_hypertable_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_column_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_nullfrac</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Float4GetDatum</name><argument_list>(<argument><expr><name><name>pgsform</name><operator>-&gt;</operator><name>stanullfrac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_width</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>pgsform</name><operator>-&gt;</operator><name>stawidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_distinct</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Float4GetDatum</name><argument_list>(<argument><expr><name><name>pgsform</name><operator>-&gt;</operator><name>stadistinct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>collect_colstat_slots</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>, <argument><expr><name>pgsform</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>ctup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_update_colstats</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>attnum</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>nullfract</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>distinct</name></decl></parameter>,
					  <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>kind_array</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>collations</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>slot_ops</name></decl></parameter>,
					  <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot_numbers</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>value_kinds</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot_values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>sd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_pg_statistic</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_pg_statistic</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>replaces</name><index>[<expr><name>Natts_pg_statistic</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>stup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>oldtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>slot_kinds</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>try_relation_open</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>ShareUpdateExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If a vacuum is running we might not be able to grab the lock, so just
	 * raise an error and let the user try again. */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rel</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_LOCK_NOT_AVAILABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unable to acquire table lock to update column statistics on \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>StatisticRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Natts_pg_statistic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>replaces</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Natts_pg_statistic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_starelid</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_staattnum</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stainherit</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stanullfrac</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Float4GetDatum</name><argument_list>(<argument><expr><name>nullfract</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stawidth</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stadistinct</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Float4GetDatum</name><argument_list>(<argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stakind1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot_kinds</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>kind_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>STATISTIC_NUM_SLOTS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>slot_kinds</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <comment type="block">/* stakindN */</comment>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stacoll1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>STATISTIC_NUM_SLOTS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>collations</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <comment type="block">/* stacollN */</comment>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_staop1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>STATISTIC_NUM_SLOTS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>slot_ops</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <comment type="block">/* staopN */</comment>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stanumbers1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>STATISTIC_NUM_SLOTS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>slot_numbers</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>slot_numbers</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for> <comment type="block">/* stanumbersN */</comment>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_pg_statistic_stavalues1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>STATISTIC_NUM_SLOTS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>value_oid</name> <init>= <expr><name><name>value_kinds</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>type_tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>type</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nelems</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>decoded_data</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>value_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>type_tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><name>value_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>slot_values</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nelems</name> <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name><name>slot_values</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

		<expr_stmt><expr><name>decoded_data</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>nelems</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>nelems</name></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Datum</name></type> <name>d</name> <init>= <expr><call><name>array_get_element</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>slot_values</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><literal type="number">1</literal></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>,
										<argument><expr><name>CSTRING_ARY_TYPELEN</name></expr></argument>,
										<argument><expr><name>CSTRING_TYPELEN</name></expr></argument>,
										<argument><expr><name>CSTRING_TYPEBYVAL</name></expr></argument>,
										<argument><expr><name>CSTRING_TYPEALIGN</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>decoded_data</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
				<call><name>OidFunctionCall3</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>typinput</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>typtypmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>construct_array</name><argument_list>(<argument><expr><name>decoded_data</name></expr></argument>,
													  <argument><expr><name>nelems</name></expr></argument>,
													  <argument><expr><name>value_oid</name></expr></argument>,
													  <argument><expr><name><name>type</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>,
													  <argument><expr><name><name>type</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>,
													  <argument><expr><name><name>type</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>type_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>SearchSysCache3</name><argument_list>(<argument><expr><name>STATRELATTINH</name></expr></argument>,
							 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>stup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oldtup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>stup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>stup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>stup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>stup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ShareUpdateExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * StatsProcessContext filters out duplicate stats from replica chunks.
 *
 * When processing chunk stats from data nodes, we might receive the same
 * stats from multiple data nodes when native replication is enabled. With the
 * StatsProcessContext we can filter out the duplicates, and ensure we only
 * add the stats once. Without the filtering, we will get errors (e.g., unique
 * violations).
 *
 * We could elide the filtering if we requested stats only for the chunks that
 * are "primary", but that requires the ability to specify the specific remote
 * chunks to retrieve stats for rather than specifying "all chunks" for the
 * given hypertable.
 */</comment>
<typedef>typedef <type><struct>struct <name>ChunkAttKey</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name></type> <name>attnum</name></decl>;</decl_stmt>
}</block></struct></type> <name>ChunkAttKey</name>;</typedef>

<typedef>typedef <type><struct>struct <name>StatsProcessContext</name>
<block>{
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>htab</name></decl>;</decl_stmt>
}</block></struct></type> <name>StatsProcessContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>stats_process_context_init</name><parameter_list>(<parameter><decl><type><name>StatsProcessContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nstats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>ctl</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChunkAttKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ChunkAttKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>htab</name></name> <operator>=</operator>
		<call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"StatsProcessContext"</literal></expr></argument>, <argument><expr><name>nstats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>stats_process_context_add_chunk_attributed</name><parameter_list>(<parameter><decl><type><name>StatsProcessContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>attnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkAttKey</name></type> <name>key</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>chunk_relid</name> <operator>=</operator> <name>relid</name></expr>,
		<expr><operator>.</operator><name>attnum</name> <operator>=</operator> <name>attnum</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ChunkAttKey</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>htab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>chunk_relid</name></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>stats_process_context_finish</name><parameter_list>(<parameter><decl><type><name>StatsProcessContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>htab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_process_remote_colstats_row</name><parameter_list>(<parameter><decl><type><name>StatsProcessContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>TupleFactory</name> <modifier>*</modifier></type><name>tf</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>,
								  <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>_Anum_chunk_colstats_max</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>_Anum_chunk_colstats_max</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>chunk_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ChunkDataNode</name> <modifier>*</modifier></type><name>cdn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>col_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>nullfract</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>width</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>distinct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>kind_array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>collation_array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>op_strings</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name><name>op_oids</name><index>[<expr><name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name><name>number_arrays</name><index>[<expr><name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>valtype_strings</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name><name>valtype_oids</name><index>[<expr><name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name><name>value_arrays</name><index>[<expr><name>STATISTIC_NUM_SLOTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>slot_kinds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>os_idx</name></decl>, <decl><type ref="prev"/><name>vt_idx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>tuplefactory_make_tuple</name><argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>PQbinaryTuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk_id</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cdn</name> <operator>=</operator> <call><name>ts_chunk_data_node_scan_by_remote_chunk_id_and_node_name</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>,
																   <argument><expr><name>node_name</name></expr></argument>,
																   <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_id</name><argument_list>(<argument><expr><name><name>cdn</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>chunk_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>col_id</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_column_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nullfract</name> <operator>=</operator> <call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_nullfrac</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_width</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>distinct</name> <operator>=</operator> <call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_distinct</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>kind_array</name> <operator>=</operator>
		<call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_kinds</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>collation_array</name> <operator>=</operator>
		<call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_collations</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>op_strings</name> <operator>=</operator> <name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_op_strings</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>valtype_strings</name> <operator>=</operator> <name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot_valtype_strings</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot_kinds</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>kind_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>os_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vt_idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Filter out chunk cols we've already added. This happens when there are
	 * replica chunks */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>stats_process_context_add_chunk_attributed</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>col_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STATISTIC_NUM_SLOTS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>strings</name><index>[<expr><name>STRINGS_PER_OP_OID</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>d</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>op_oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>number_arrays</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>value_arrays</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>valtype_oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * As per comments in pg_statistic_d.h, "kind" codes from 0 - 99 are reserved
		 * for assignment by the core PostgreSQL project. Beyond that are for PostGIS
		 * and other projects
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>slot_kinds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>slot_kinds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>PG_STATS_KINDS_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>STRINGS_PER_OP_OID</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>strings</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>array_get_element</name><argument_list>(<argument><expr><name>op_strings</name></expr></argument>,
										   <argument><expr><literal type="number">1</literal></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>os_idx</name></expr></argument>,
										   <argument><expr><name>CSTRING_ARY_TYPELEN</name></expr></argument>,
										   <argument><expr><name>CSTRING_TYPELEN</name></expr></argument>,
										   <argument><expr><name>CSTRING_TYPEBYVAL</name></expr></argument>,
										   <argument><expr><name>CSTRING_TYPEALIGN</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>os_idx</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>op_oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>convert_strings_to_op_id</name><argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot1_numbers</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>number_arrays</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_colstats_slot1_values</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>value_arrays</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>STRINGS_PER_TYPE_OID</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>strings</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>array_get_element</name><argument_list>(<argument><expr><name>valtype_strings</name></expr></argument>,
											   <argument><expr><literal type="number">1</literal></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>vt_idx</name></expr></argument>,
											   <argument><expr><name>CSTRING_ARY_TYPELEN</name></expr></argument>,
											   <argument><expr><name>CSTRING_TYPELEN</name></expr></argument>,
											   <argument><expr><name>CSTRING_TYPEBYVAL</name></expr></argument>,
											   <argument><expr><name>CSTRING_TYPEALIGN</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>vt_idx</name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name><name>valtype_oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>convert_strings_to_type_id</name><argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>chunk_update_colstats</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>,
						  <argument><expr><name>col_id</name></expr></argument>,
						  <argument><expr><name>nullfract</name></expr></argument>,
						  <argument><expr><name>width</name></expr></argument>,
						  <argument><expr><name>distinct</name></expr></argument>,
						  <argument><expr><name>kind_array</name></expr></argument>,
						  <argument><expr><name>collation_array</name></expr></argument>,
						  <argument><expr><name>op_oids</name></expr></argument>,
						  <argument><expr><name>number_arrays</name></expr></argument>,
						  <argument><expr><name>valtype_oids</name></expr></argument>,
						  <argument><expr><name>value_arrays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update the stats in the pg_class catalog entry for a chunk.
 *
 * Similar to code for vacuum/analyze.
 *
 * We do not update pg_class.relhasindex because vac_update_relstats() only
 * sets that field if it reverts back to false (see internal implementation).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_update_relstats</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>num_pages</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>num_tuples</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>num_allvisible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>try_relation_open</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>, <argument><expr><name>ShareUpdateExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If a vacuum is running we might not be able to grab the lock, so just
	 * raise an error and let the user try again. */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rel</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_LOCK_NOT_AVAILABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"skipping relstats update of \"%s\" --- lock not available"</literal></expr></argument>,
						<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>vac_update_relstats</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
						<argument><expr><name>num_pages</name></expr></argument>,
						<argument><expr><name>num_tuples</name></expr></argument>,
						<argument><expr><name>num_allvisible</name></expr></argument>,
						<argument><expr><name>true</name></expr></argument>,
						<argument><expr><name>InvalidTransactionId</name></expr></argument>,
						<argument><expr><name>InvalidMultiXactId</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG15_GE</name></expr></cpp:if>
						<argument><expr><name>NULL</name></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ShareUpdateExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_process_remote_relstats_row</name><parameter_list>(<parameter><decl><type><name>TupleFactory</name> <modifier>*</modifier></type><name>tf</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>,
								  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>_Anum_chunk_relstats_max</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>_Anum_chunk_relstats_max</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>chunk_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ChunkDataNode</name> <modifier>*</modifier></type><name>cdn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>num_pages</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>num_tuples</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>num_allvisible</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>tuplefactory_make_tuple</name><argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>PQbinaryTuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk_id</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cdn</name> <operator>=</operator> <call><name>ts_chunk_data_node_scan_by_remote_chunk_id_and_node_name</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>,
																   <argument><expr><name>node_name</name></expr></argument>,
																   <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_id</name><argument_list>(<argument><expr><name><name>cdn</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>chunk_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_pages</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_num_pages</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_tuples</name> <operator>=</operator> <call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_num_tuples</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_allvisible</name> <operator>=</operator>
		<call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_relstats_num_allvisible</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>chunk_update_relstats</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>num_pages</name></expr></argument>, <argument><expr><name>num_tuples</name></expr></argument>, <argument><expr><name>num_allvisible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fetch chunk relation or column stats from remote data nodes.
 *
 * This will remotely fetch, and locally update, relation stats (relpages,
 * reltuples, relallvisible in pg_class) for all chunks in a distributed
 * hypertable.
 *
 * For relation stats, we do not fetch 'relhasindex' because there is no way to set it
 * using vac_update_relstats() unless the values reverts back to 'false' (see
 * internal implementation of PG's vac_update_relstats).
 *
 * Note that we currently fetch stats from all chunk replicas, i.e., we might
 * fetch stats for a local chunk multiple times (once for each
 * replica). Presumably, stats should be the same for all replicas, but they
 * might vary if ANALYZE didn't run recently on the data node. We currently
 * don't care, however, and the "last" chunk replica will win w.r.t. which
 * stats will take precedence. We might consider optimizing this in the
 * future.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fetch_remote_chunk_stats</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>col_stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StatsProcessContext</name></type> <name>statsctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>cmdres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleFactory</name> <modifier>*</modifier></type><name>tf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>num_rows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>num_stats</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function returning record called in context "</literal>
						<literal type="string">"that cannot accept type record"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data_nodes</name> <operator>=</operator> <call><name>ts_hypertable_get_data_node_name_list</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cmdres</name> <operator>=</operator> <call><name>ts_dist_cmd_invoke_func_call_on_data_nodes</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Expect TEXT response format since dist command API currently defaults
	 * to requesting TEXT */</comment>
	<expr_stmt><expr><name>tf</name> <operator>=</operator> <call><name>tuplefactory_create_for_tupdesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_rows</name> <operator>=</operator> <call><name>ts_dist_cmd_total_row_count</name><argument_list>(<argument><expr><name>cmdres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Estimate the number of non-duplicate stats to use for initial size of
	 * StatsProcessContext. Use slightly bigger than strictly necessary to
	 * avoid a resize. */</comment>
	<expr_stmt><expr><name>num_stats</name> <operator>=</operator> <operator>(</operator><literal type="number">5</literal> <operator>*</operator> <name>num_rows</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>replication_factor</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>stats_process_context_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statsctx</name></expr></argument>, <argument><expr><name>num_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <comment type="block">/* exit when res == NULL below */</comment><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_index</name><argument_list>(<argument><expr><name>cmdres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>col_stats</name></expr>)</condition><block type="pseudo"><block_content>
			<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>chunk_process_remote_colstats_row</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statsctx</name></expr></argument>, <argument><expr><name>tf</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>chunk_process_remote_relstats_row</name><argument_list>(<argument><expr><name>tf</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

		<comment type="block">/* Early cleanup of PGresult protects against ballooning memory usage
		 * when there are a lot of rows */</comment>
		<expr_stmt><expr><call><name>ts_dist_cmd_clear_result_by_index</name><argument_list>(<argument><expr><name>cmdres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>stats_process_context_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statsctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>cmdres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>chunk_api_generate_relstats_context</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>list_copy</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>chunk_api_fetch_next_relstats_tuple</name><parameter_list>(<parameter><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_oids</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>chunk_oids</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>linitial_oid</name><argument_list>(<argument><expr><name>chunk_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>chunk_get_single_stats_tuple</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_api_iterate_relstats_context</name><parameter_list>(<parameter><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_oids</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>chunk_oids</name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name>chunk_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <name>chunk_oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ColStatContext</name>
<block>{
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_oids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>col_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nattrs</name></decl>;</decl_stmt>
}</block></struct></type> <name>ColStatContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>chunk_api_generate_colstats_context</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>oids</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>ht_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ColStatContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ColStatContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_oids</name></name> <operator>=</operator> <call><name>list_copy</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nattrs</name></name> <operator>=</operator> <call><name>ts_get_relnatts</name><argument_list>(<argument><expr><name>ht_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>chunk_api_fetch_next_colstats_tuple</name><parameter_list>(<parameter><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ColStatContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_oids</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><call><name>linitial_oid</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_oids</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>chunk_get_single_colstats_tuple</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name></expr></argument>, <argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* This loop looks a bit odd as col_id tracks the postgres column id, which is indexed
		 * starting at 1 */</comment>
		<while>while <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nattrs</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>chunk_get_single_colstats_tuple</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name></expr></argument>, <argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_oids</name></name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>tuple</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_api_iterate_colstats_context</name><parameter_list>(<parameter><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ColStatContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nattrs</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_oids</name></name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>col_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CHUNK_RELSTATS_NAME</name></cpp:macro> <cpp:value>"get_chunk_relstats"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CHUNK_COLSTATS_NAME</name></cpp:macro> <cpp:value>"get_chunk_colstats"</cpp:value></cpp:define>

<comment type="block">/*
 * Fetch and locally update stats for a distributed hypertable by table id.
 *
 * This function reconstructs the fcinfo argument of the
 * chunk_api_get_chunk_stats() function in order to call
 * fetch_remote_chunk_stats() and execute either
 * _timescaledb_internal.get_chunk_relstats() or
 * _timescaledb_internal.get_chunk_colstats() remotely (depending on the
 * passed `col_stats` bool).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_api_update_distributed_hypertable_chunk_stats</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>table_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>col_stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type> <name>flinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>funcoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name><name>get_chunk_stats_argtypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>REGCLASSOID</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>hcache</name> <operator>=</operator> <call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name>table_id</name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_HYPERTABLE_NOT_DISTRIBUTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"hypertable \"%s\" is not distributed"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>table_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Prepare fcinfo context for remote execution of _timescaledb_internal.get_chunk_relstats() */</comment>
	<expr_stmt><expr><name>funcoid</name> <operator>=</operator> <call><name>ts_get_function_oid</name><argument_list>(<argument><expr><ternary><condition><expr><name>col_stats</name></expr> ?</condition><then> <expr><name>GET_CHUNK_COLSTATS_NAME</name></expr> </then><else>: <expr><name>GET_CHUNK_RELSTATS_NAME</name></expr></else></ternary></expr></argument>,
								  <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>,
								  <argument><expr><literal type="number">1</literal></expr></argument>,
								  <argument><expr><name>get_chunk_stats_argtypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flinfo</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FC_ARG</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>table_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FC_NULL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fetch_remote_chunk_stats</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>col_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chunk_api_update_distributed_hypertable_stats</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>table_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Update stats for hypertable */</comment>
	<expr_stmt><expr><call><name>chunk_api_update_distributed_hypertable_chunk_stats</name><argument_list>(<argument><expr><name>table_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>chunk_api_update_distributed_hypertable_chunk_stats</name><argument_list>(<argument><expr><name>table_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get relation stats or column stats for chunks.
 *
 * This function takes a hypertable or chunk as input (regclass). In case of a
 * hypertable, it will get the relstats for all the chunks in the hypertable,
 * otherwise only the given chunk.
 *
 * If a hypertable is distributed, the function will first refresh the local
 * chunk stats by fetching stats from remote data nodes.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>chunk_api_get_chunk_stats</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>col_stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>InvalidOid</name></expr> </then><else>: <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_oids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>ht_relid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>CACHE_FLAG_MISSING_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ht</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>chunk</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be a hypertable or chunk"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>chunk_oids</name> <operator>=</operator> <call><name>list_make1_oid</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* We'll need the hypertable if fetching column stats */</comment>
			<if_stmt><if>if <condition>(<expr><name>col_stats</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* If this is a distributed hypertable, we fetch stats from
				 * remote nodes */</comment>
				<expr_stmt><expr><call><name>fetch_remote_chunk_stats</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>col_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Make updated stats visible so that we can retreive them locally below */</comment>
				<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>chunk_oids</name> <operator>=</operator> <call><name>find_inheritance_children</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ht</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ht_relid</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function returning record called in context "</literal>
							<literal type="string">"that cannot accept type record"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Save the chunk oid list on the multi-call memory context so that it
		 * survives across multiple calls to this function (until SRF is
		 * done). */</comment>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <ternary><condition><expr><name>col_stats</name></expr> ?</condition><then> <expr><call><name>chunk_api_generate_colstats_context</name><argument_list>(<argument><expr><name>chunk_oids</name></expr></argument>, <argument><expr><name>ht_relid</name></expr></argument>)</argument_list></call></expr> </then><else>:
										 <expr><call><name>chunk_api_generate_relstats_context</name><argument_list>(<argument><expr><name>chunk_oids</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <ternary><condition><expr><name>col_stats</name></expr> ?</condition><then> <expr><call><name>chunk_api_fetch_next_colstats_tuple</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr> </then><else>:
						<expr><call><name>chunk_api_fetch_next_relstats_tuple</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>col_stats</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>chunk_api_iterate_colstats_context</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>chunk_api_iterate_relstats_context</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>chunk_api_get_chunk_colstats</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>chunk_api_get_chunk_stats</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>chunk_api_get_chunk_relstats</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>chunk_api_get_chunk_stats</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>chunk_create_empty_table</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>hypertable_relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>slices</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier><specifier>const</specifier></type> <name>hcache</name> <init>= <expr><call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypercube</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>uid</name></decl>, <decl><type ref="prev"/><name>saved_uid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sec_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETARG_NOTNULL_OID</name><argument_list>(<argument><expr><name>hypertable_relid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"hypertable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GETARG_NOTNULL_NULLABLE</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"slices"</literal></expr></argument>, <argument><expr><name>JSONB_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GETARG_NOTNULL_NULLABLE</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"chunk schema name"</literal></expr></argument>, <argument><expr><name>CSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GETARG_NOTNULL_NULLABLE</name><argument_list>(<argument><expr><name>table_name</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"chunk table name"</literal></expr></argument>, <argument><expr><name>CSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>, <argument><expr><name>hypertable_relid</name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ht</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the chunk is created in the internal schema, become the catalog
	 * owner, otherwise become the hypertable owner
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>owner_uid</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relowner</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saved_uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>!=</operator> <name>saved_uid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sec_ctx</name> <operator>|</operator> <name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>get_hypercube_from_slices</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_chunk_create_only_table</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Need to restore security context */</comment>
	<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>!=</operator> <name>saved_uid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>saved_uid</name></expr></argument>, <argument><expr><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE_CHUNK_TABLE_NAME</name></cpp:macro> <cpp:value>"create_chunk_table"</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>chunk_api_call_create_empty_chunk_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,
										<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>create_cmd</name> <init>=
		<expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT %s.%s($1, $2, $3, $4)"</literal></expr></argument>, <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>CREATE_CHUNK_TABLE_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
														 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
							  <expr><call><name>chunk_api_dimension_slices_json</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>,
							  <expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr>,
							  <macro><name>NameStr</name><argument_list>(<argument>chunk-&gt;fd.table_name</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(
		<argument><expr><call><name>ts_dist_cmd_params_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>create_cmd</name></expr></argument>,
												<argument><expr><call><name>stmt_params_create_from_values</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>node_name</name></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chunk_api_call_chunk_drop_replica</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node_name</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>serverid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>drop_cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Drop chunk on the data node using a regular "DROP TABLE".
	 * Note that CASCADE is not required as it takes care of dropping compressed
	 * chunk (if any).
	 *
	 * If there are any other non-TimescaleDB objects attached to this table due
	 * to some manual user activity then they should be dropped by the user
	 * before invoking this function.
	 */</comment>

	<expr_stmt><expr><name>drop_cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"DROP TABLE %s.%s"</literal></expr></argument>,
						<argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>data_nodes</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>drop_cmd</name></expr></argument>, <argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This chunk might have this data node as primary, change that association
	 * if so. Then delete the chunk_id and node_name association.
	 */</comment>
	<expr_stmt><expr><call><name>chunk_update_foreign_server_if_needed</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>serverid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_chunk_data_node_delete_by_chunk_id_and_node_name</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
