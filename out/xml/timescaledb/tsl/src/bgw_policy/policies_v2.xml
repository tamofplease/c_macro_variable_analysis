<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/bgw_policy/policies_v2.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_coerce.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"policy_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsonb_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_policy/job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_policy/continuous_aggregate_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_policy/policies_v2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<comment type="block">/* Check if the provided argument is infinity */</comment>
<function><type><name>bool</name></type>
<name>ts_if_offset_is_infinity</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>argtype</name> <operator>!=</operator> <name>UNKNOWNOID</name> <operator>&amp;&amp;</operator> <name>argtype</name> <operator>!=</operator> <name>FLOAT8OID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argtype</name> <operator>!=</operator> <name>FLOAT8OID</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>num</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>have_error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>float8in_internal_opt_error</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"double precision"</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>have_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>have_error</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>result</name> <init>= <expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>result</name> <operator>==</operator> <operator>-</operator><call><name>get_float8_infinity</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>is_start</name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name>result</name> <operator>==</operator> <call><name>get_float8_infinity</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_start</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>emit_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>offset_to_int64</name><parameter_list>(<parameter><decl><type><name>NullableDatum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>partition_type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>.</operator><name>isnull</name></name> <operator>||</operator> <call><name>ts_if_offset_is_infinity</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>argtype</name></expr></argument>, <argument><expr><name>is_start</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_start</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>ts_time_get_max</name><argument_list>(<argument><expr><name>partition_type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><call><name>ts_time_get_min</name><argument_list>(<argument><expr><name>partition_type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>interval_to_int64</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>argtype</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * Check different conditions if the requested policy parameters
 * are compatible with each other and then create/update the
 * provided policies.
 */</comment>
<function><type><name>bool</name></type>
<name>validate_and_create_policies</name><parameter_list>(<parameter><decl><type><name>policies_info</name></type> <name>all_policies</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>if_exists</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>refresh_job_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>compression_job_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>retention_job_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>refresh_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>compress_after</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>drop_after</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>drop_after_HT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>start_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>refresh_window_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>refresh_total_interval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>orig_ht_reten_job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_gap_refresh</name> <init>= <expr><literal type="string">"there are gaps in refresh policy"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_refresh_compress_overlap</name> <init>= <expr><literal type="string">"refresh and compression policies overlap"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_refresh_reten_overlap</name> <init>= <expr><literal type="string">"refresh and retention policies overlap"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_refresh_reten_ht_overlap</name> <init>= <expr><literal type="string">"refresh policy of continuous aggregate and retention "</literal>
										 <literal type="string">"policy of underlying hypertable overlap"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err_compress_reten_overlap</name> <init>= <expr><literal type="string">"compression and retention policies overlap"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>jobs</name> <operator>=</operator> <call><name>ts_bgw_job_find_by_proc_and_hypertable_id</name><argument_list>(<argument><expr><name>POLICY_RETENTION_PROC_NAME</name></expr></argument>,
													 <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>,
													 <argument><expr><name><name>all_policies</name><operator>.</operator><name>original_HT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>jobs</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>orig_ht_reten_job</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>refresh</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>start_offset</name> <operator>=</operator> <call><name>offset_to_int64</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name></name></expr></argument>,
									   <argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset_type</name></name></expr></argument>,
									   <argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>,
									   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>end_offset</name> <operator>=</operator> <call><name>offset_to_int64</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name></name></expr></argument>,
									 <argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset_type</name></name></expr></argument>,
									 <argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>,
									 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>refresh_interval</name> <operator>=</operator>
			<call><name>interval_to_int64</name><argument_list>(<argument><expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>schedule_interval</name></name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>refresh_total_interval</name> <operator>=</operator> <name>start_offset</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<name>refresh_total_interval</name> <operator>!=</operator> <call><name>ts_time_get_max</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>refresh_total_interval</name> <operator>+=</operator> <name>refresh_interval</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>compress</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>compress_after</name> <operator>=</operator> <call><name>interval_to_int64</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after</name></name></expr></argument>,
										   <argument><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>retention</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>drop_after</name> <operator>=</operator> <call><name>interval_to_int64</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after</name></name></expr></argument>,
									   <argument><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>orig_ht_reten_job</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>drop_after_HT</name> <operator>=</operator> <call><name>ts_jsonb_get_int64_field</name><argument_list>(<argument><expr><name><name>orig_ht_reten_job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>,
													 <argument><expr><name>POL_RETENTION_CONF_KEY_DROP_AFTER</name></expr></argument>,
													 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>drop_after_HT</name> <operator>=</operator> <call><name>interval_to_int64</name><argument_list>(
				<argument><expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><call><name>ts_jsonb_get_interval_field</name><argument_list>(<argument><expr><name><name>orig_ht_reten_job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>,
															  <argument><expr><name>POL_RETENTION_CONF_KEY_DROP_AFTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Per policy checks */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>refresh</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Check if there are any gaps in the refresh policy */</comment>
		<expr_stmt><expr><name>refresh_window_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>start_offset</name> <operator>==</operator> <call><name>ts_time_get_max</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
							   <name>end_offset</name> <operator>==</operator> <call><name>ts_time_get_min</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
								  <expr><name>start_offset</name></expr> </then><else>:
								  <expr><name>start_offset</name> <operator>-</operator> <name>end_offset</name></expr></else></ternary></expr>;</expr_stmt>

		<comment type="block">/* if refresh_interval is greater than half of refresh_window_size, then there are gaps */</comment>
		<if_stmt><if>if <condition>(<expr><name>refresh_interval</name> <operator>&gt;</operator> <name>refresh_window_size</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>emit_error</name><argument_list>(<argument><expr><name>err_gap_refresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Disallow refreshed data to be deleted */</comment>
		<if_stmt><if>if <condition>(<expr><name>orig_ht_reten_job</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>refresh_total_interval</name> <operator>&gt;</operator> <name>drop_after_HT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>emit_error</name><argument_list>(<argument><expr><name>err_refresh_reten_ht_overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Cross policy checks */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>refresh</name></name> <operator>&amp;&amp;</operator> <name><name>all_policies</name><operator>.</operator><name>compress</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Check if refresh policy does not overlap with compression */</comment>
		<if_stmt><if>if <condition>(<expr><name>refresh_total_interval</name> <operator>&gt;</operator> <name>compress_after</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>emit_error</name><argument_list>(<argument><expr><name>err_refresh_compress_overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>refresh</name></name> <operator>&amp;&amp;</operator> <name><name>all_policies</name><operator>.</operator><name>retention</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Check if refresh policy does not overlap with retention */</comment>
		<if_stmt><if>if <condition>(<expr><name>refresh_total_interval</name> <operator>&gt;</operator> <name>drop_after</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>emit_error</name><argument_list>(<argument><expr><name>err_refresh_reten_overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>retention</name></name> <operator>&amp;&amp;</operator> <name><name>all_policies</name><operator>.</operator><name>compress</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Check if compression and retention policy overlap */</comment>
		<if_stmt><if>if <condition>(<expr><name>compress_after</name> <operator>==</operator> <name>drop_after</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>emit_error</name><argument_list>(<argument><expr><name>err_compress_reten_overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Create policies as required, delete the old ones if coming from alter */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>refresh</name></name> <operator>&amp;&amp;</operator> <name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>create_policy</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>is_alter_policy</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>policy_refresh_cagg_remove_internal</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>refresh_job_id</name> <operator>=</operator> <call><name>policy_refresh_cagg_add_internal</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name></expr></argument>,
														  <argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset_type</name></name></expr></argument>,
														  <argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name></name></expr></argument>,
														  <argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset_type</name></name></expr></argument>,
														  <argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name></name></expr></argument>,
														  <argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>schedule_interval</name></name></expr></argument>,
														  <argument><expr><name>false</name></expr></argument>,
														  <argument><expr><name>false</name></expr></argument>,
														  <argument><expr><name>DT_NOBEGIN</name></expr></argument>,
														  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>compress</name></name> <operator>&amp;&amp;</operator> <name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>create_policy</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>is_alter_policy</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>policy_compression_remove_internal</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>compression_job_id</name> <operator>=</operator>
			<call><name>policy_compression_add_internal</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name></expr></argument>,
											<argument><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after</name></name></expr></argument>,
											<argument><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after_type</name></name></expr></argument>,
											<argument><expr><name>DEFAULT_COMPRESSION_SCHEDULE_INTERVAL</name></expr></argument>,
											<argument><expr><name>false</name></expr></argument>,
											<argument><expr><name>if_exists</name></expr></argument>,
											<argument><expr><name>false</name></expr></argument>,
											<argument><expr><name>DT_NOBEGIN</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>retention</name></name> <operator>&amp;&amp;</operator> <name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>create_policy</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>is_alter_policy</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>policy_retention_remove_internal</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>retention_job_id</name> <operator>=</operator>
			<call><name>policy_retention_add_internal</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name></expr></argument>,
										  <argument><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after_type</name></name></expr></argument>,
										  <argument><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after</name></name></expr></argument>,
										  <argument><expr><operator>(</operator><name>Interval</name><operator>)</operator> <name>DEFAULT_RETENTION_SCHEDULE_INTERVAL</name></expr></argument>,
										  <argument><expr><name>false</name></expr></argument>,
										  <argument><expr><name>false</name></expr></argument>,
										  <argument><expr><name>DT_NOBEGIN</name></expr></argument>,
										  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>refresh_job_id</name> <operator>||</operator> <name>compression_job_id</name> <operator>||</operator> <name>retention_job_id</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>policies_add</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>rel_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>if_not_exists</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>policies_info</name></type> <name>all_policies</name> <init>= <expr><block>{ <expr><operator>.</operator><name>refresh</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>compress</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>retention</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>refresh_policy</name></type> <name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>compression_policy</name></type> <name>comp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>retention_policy</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel_oid</name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>if_not_exists</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cagg</name> <operator>=</operator> <call><name>ts_continuous_agg_find_by_relid</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cagg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a continuous aggregate"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name> <operator>=</operator> <name>rel_oid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>is_alter_policy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>original_HT</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>raw_hypertable_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NullableDatum</name></type> <name>start_offset</name></decl>, <decl><type ref="prev"/><name>end_offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>start_offset_type</name></decl>, <decl><type ref="prev"/><name>end_offset_type</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>start_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>end_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>start_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>end_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>start_offset_type</name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>end_offset_type</name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>refresh_policy</name></type> <name>tmp</name> <init>= <expr><block>{
			<expr><operator>.</operator><name>create_policy</name> <operator>=</operator> <name>true</name></expr>,
			<expr><operator>.</operator><name>start_offset</name> <operator>=</operator> <name>start_offset</name></expr>,
			<expr><operator>.</operator><name>end_offset</name> <operator>=</operator> <name>end_offset</name></expr>,
			<expr><operator>.</operator><name>schedule_interval</name> <operator>=</operator> <operator>*</operator><name>DEFAULT_REFRESH_SCHEDULE_INTERVAL</name></expr>,
			<expr><operator>.</operator><name>start_offset_type</name> <operator>=</operator> <name>start_offset_type</name></expr>,
			<expr><operator>.</operator><name>end_offset_type</name> <operator>=</operator> <name>end_offset_type</name></expr>,
		}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name></name> <operator>=</operator> <operator>&amp;</operator><name>ref</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>compression_policy</name></type> <name>tmp</name> <init>= <expr><block>{ <expr><operator>.</operator><name>create_policy</name> <operator>=</operator> <name>true</name></expr>,
								   <expr><operator>.</operator><name>compress_after</name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
								   <expr><operator>.</operator><name>compress_after_type</name> <operator>=</operator> <macro><name>get_fn_expr_argtype</name><argument_list>(<argument>fcinfo-&gt;flinfo</argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>comp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name></name> <operator>=</operator> <operator>&amp;</operator><name>comp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>retention_policy</name></type> <name>tmp</name> <init>= <expr><block>{ <expr><operator>.</operator><name>create_policy</name> <operator>=</operator> <name>true</name></expr>,
								 <expr><operator>.</operator><name>drop_after</name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>,
								 <expr><operator>.</operator><name>drop_after_type</name> <operator>=</operator> <macro><name>get_fn_expr_argtype</name><argument_list>(<argument>fcinfo-&gt;flinfo</argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name></name> <operator>=</operator> <operator>&amp;</operator><name>ret</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>validate_and_create_policies</name><argument_list>(<argument><expr><name>all_policies</name></expr></argument>, <argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>Datum</name></type>
<name>policies_remove</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>cagg_oid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>policy_array</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>if_exists</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>policy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>npolicies</name></decl>, <decl><type ref="prev"/><name>failures</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>policy_array</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>policy_array</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>policy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>npolicies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>npolicies</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>curr_policy</name> <init>= <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name><name>policy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>curr_policy</name></expr></argument>, <argument><expr><name>POLICY_REFRESH_CAGG_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>policy_refresh_cagg_remove_internal</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>curr_policy</name></expr></argument>, <argument><expr><name>POLICY_COMPRESSION_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>policy_compression_remove_internal</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>curr_policy</name></expr></argument>,
								<argument><expr><name>POLICY_RETENTION_PROC_NAME</name></expr></argument>,
								<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>POLICY_RETENTION_PROC_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>policy_retention_remove_internal</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"No relevant policy found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>failures</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>success</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>failures</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>policies_remove_all</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>cagg_oid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>if_exists</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>if_exists</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>failures</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name> <init>= <expr><call><name>ts_continuous_agg_find_by_relid</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cagg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a continuous aggregate"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>jobs</name> <operator>=</operator> <call><name>ts_bgw_job_find_by_hypertable_id</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mat_hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>jobs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_REFRESH_CAGG_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>policy_refresh_cagg_remove_internal</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_COMPRESSION_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>policy_compression_remove_internal</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_RETENTION_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>policy_retention_remove_internal</name><argument_list>(<argument><expr><name>cagg_oid</name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Ignoring custom job"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>failures</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>success</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name>failures</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>policies_alter</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>rel_oid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>if_exists</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>found</name></decl>, <decl><type ref="prev"/><name>start_found</name></decl>, <decl><type ref="prev"/><name>end_found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>policies_info</name></type> <name>all_policies</name> <init>= <expr><block>{ <expr><operator>.</operator><name>refresh</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>compress</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>retention</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>refresh_policy</name></type> <name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>compression_policy</name></type> <name>comp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>retention_policy</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cagg</name> <operator>=</operator> <call><name>ts_continuous_agg_find_by_relid</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cagg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a continuous aggregate"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>is_alter_policy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>rel_oid</name></name> <operator>=</operator> <name>rel_oid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>original_HT</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>raw_hypertable_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>partition_type</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>jobs</name> <operator>=</operator> <call><name>ts_bgw_job_find_by_hypertable_id</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mat_hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>NIL</name> <operator>==</operator> <name>jobs</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no jobs found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>jobs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_REFRESH_CAGG_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>refresh_policy</name></type> <name>tmp</name> <init>= <expr><block>{ <expr><operator>.</operator><name>create_policy</name> <operator>=</operator> <name>false</name></expr>,
								   <expr><operator>.</operator><name>end_offset</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
								   <expr><operator>.</operator><name>end_offset_type</name> <operator>=</operator> <name>InvalidOid</name></expr>,
								   <expr><operator>.</operator><name>start_offset</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,
								   <expr><operator>.</operator><name>start_offset_type</name> <operator>=</operator> <name>InvalidOid</name></expr>,
								   <expr><operator>.</operator><name>schedule_interval</name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schedule_interval</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name></name> <operator>=</operator> <operator>&amp;</operator><name>ref</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int64</name></type> <name>start_value</name> <init>= <expr><call><name>ts_jsonb_get_int64_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>,
															 <argument><expr><name>POL_REFRESH_CONF_KEY_START_OFFSET</name></expr></argument>,
															 <argument><expr><operator>&amp;</operator><name>start_found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int64</name></type> <name>end_value</name> <init>= <expr><call><name>ts_jsonb_get_int64_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>,
														   <argument><expr><name>POL_REFRESH_CONF_KEY_END_OFFSET</name></expr></argument>,
														   <argument><expr><operator>&amp;</operator><name>end_found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="block">/*
				 * If there is job then start_offset has to be there because policy is
				 * not created without it. However if found it to be NULL, then we
				 * want to keep it to NULL in this alter command also.
				 */</comment>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <operator>!</operator><name>start_found</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset_type</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <operator>!</operator><name>end_found</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset_type</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr>;</expr_stmt>
				<switch>switch <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset_type</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator>
							<call><name>Int16GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int16</name><operator>)</operator> <name>start_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int16</name><operator>)</operator> <name>end_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>INT4OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator>
							<call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>start_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>end_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>INT8OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>start_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>end_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>IntervalPGetDatum</name><argument_list>(
					<argument><expr><call><name>ts_jsonb_get_interval_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>POL_REFRESH_CONF_KEY_START_OFFSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator>
					<operator>(</operator><call><name>DatumGetIntervalP</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset_type</name></name> <operator>=</operator> <name>INTERVALOID</name></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>IntervalPGetDatum</name><argument_list>(
					<argument><expr><call><name>ts_jsonb_get_interval_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>POL_REFRESH_CONF_KEY_END_OFFSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator>
					<operator>(</operator><call><name>DatumGetIntervalP</name><argument_list>(<argument><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset_type</name></name> <operator>=</operator> <name>INTERVALOID</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_COMPRESSION_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>compression_policy</name></type> <name>tmp</name> <init>= <expr><block>{ <expr><operator>.</operator><name>compress_after</name> <operator>=</operator> <literal type="number">0</literal></expr>,
									   <expr><operator>.</operator><name>compress_after_type</name> <operator>=</operator> <name>InvalidOid</name></expr>,
									   <expr><operator>.</operator><name>create_policy</name> <operator>=</operator> <name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>comp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name></name> <operator>=</operator> <operator>&amp;</operator><name>comp</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int64</name></type> <name>compress_value</name> <init>=
					<expr><call><name>ts_jsonb_get_int64_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>,
											 <argument><expr><name>POL_COMPRESSION_CONF_KEY_COMPRESS_AFTER</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after_type</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr>;</expr_stmt>
				<switch>switch <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after_type</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after</name></name> <operator>=</operator>
							<call><name>Int16GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int16</name><operator>)</operator> <name>compress_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>INT4OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after</name></name> <operator>=</operator>
							<call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>compress_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>INT8OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after</name></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>compress_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after</name></name> <operator>=</operator> <call><name>IntervalPGetDatum</name><argument_list>(
					<argument><expr><call><name>ts_jsonb_get_interval_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>,
												<argument><expr><name>POL_COMPRESSION_CONF_KEY_COMPRESS_AFTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after_type</name></name> <operator>=</operator> <name>INTERVALOID</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_RETENTION_PROC_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>retention_policy</name></type> <name>tmp</name> <init>= <expr><block>{ <expr><operator>.</operator><name>create_policy</name> <operator>=</operator> <name>false</name></expr>,
									 <expr><operator>.</operator><name>drop_after</name> <operator>=</operator> <literal type="number">0</literal></expr>,
									 <expr><operator>.</operator><name>drop_after_type</name> <operator>=</operator> <name>InvalidOid</name></expr> }</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name></name> <operator>=</operator> <operator>&amp;</operator><name>ret</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int64</name></type> <name>drop_value</name> <init>= <expr><call><name>ts_jsonb_get_int64_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>,
															<argument><expr><name>POL_RETENTION_CONF_KEY_DROP_AFTER</name></expr></argument>,
															<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after_type</name></name> <operator>=</operator> <name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr>;</expr_stmt>
				<switch>switch <condition>(<expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after_type</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>INT2OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after</name></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int16</name><operator>)</operator> <name>drop_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>INT4OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after</name></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <name>drop_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>INT8OID</name></expr>:</case>
						<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after</name></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>drop_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after</name></name> <operator>=</operator> <call><name>IntervalPGetDatum</name><argument_list>(
					<argument><expr><call><name>ts_jsonb_get_interval_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>POL_RETENTION_CONF_KEY_DROP_AFTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after_type</name></name> <operator>=</operator> <name>INTERVALOID</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>all_policies</name><operator>.</operator><name>refresh</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no refresh job found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset_type</name></name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>start_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>create_policy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>all_policies</name><operator>.</operator><name>refresh</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no refresh job found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset_type</name></name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>end_offset</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>refresh</name><operator>-&gt;</operator><name>create_policy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>all_policies</name><operator>.</operator><name>compress</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no compress job found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after</name></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>compress_after_type</name></name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>compress</name><operator>-&gt;</operator><name>create_policy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>all_policies</name><operator>.</operator><name>retention</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no retention job found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after</name></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>drop_after_type</name></name> <operator>=</operator> <call><name>get_fn_expr_argtype</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>all_policies</name><operator>.</operator><name>retention</name><operator>-&gt;</operator><name>create_policy</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>validate_and_create_policies</name><argument_list>(<argument><expr><name>all_policies</name></expr></argument>, <argument><expr><name>if_exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>push_to_json</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name></decl></parameter>, <parameter><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>job</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>json_label</name></decl></parameter>,
			 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>show_config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name>value</name> <init>= <expr><call><name>ts_jsonb_get_int64_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>json_label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_null</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>show_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>show_config</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>ts_jsonb_get_interval_field</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>config</name></name></expr></argument>, <argument><expr><name>json_label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_null</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>show_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_interval</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>show_config</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>policies_show</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>rel_oid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>jobs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>cagg</name> <operator>=</operator> <call><name>ts_continuous_agg_find_by_relid</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cagg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a continuous aggregate"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>rel_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><call><name>IS_TIMESTAMP_TYPE</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>INTERVALOID</name></expr> </then><else>: <expr><name><name>cagg</name><operator>-&gt;</operator><name>partition_type</name></name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Use top-level memory context to preserve the global static list */</comment>
		<expr_stmt><expr><name>jobs</name> <operator>=</operator> <call><name>ts_bgw_job_find_by_hypertable_id</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mat_hypertable_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lc</name> <operator>=</operator> <operator>(</operator><name>ListCell</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * clang doesn't understand that jobs won't be NIL due to the above FIRSTCALL. However
	 * it's also possible that the ts_bgw_job_find_by_hypertable_id function above doesn't
	 * find a job for this hypertable
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>lc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>jobs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_REFRESH_CAGG_PROC_NAME</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>SHOW_POLICY_KEY_POLICY_NAME</name></expr></argument>,
							 <argument><expr><name>POLICY_REFRESH_CAGG_PROC_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>push_to_json</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
						 <argument><expr><name>parse_state</name></expr></argument>,
						 <argument><expr><name>job</name></expr></argument>,
						 <argument><expr><name>POL_REFRESH_CONF_KEY_START_OFFSET</name></expr></argument>,
						 <argument><expr><name>SHOW_POLICY_KEY_REFRESH_START_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>push_to_json</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
						 <argument><expr><name>parse_state</name></expr></argument>,
						 <argument><expr><name>job</name></expr></argument>,
						 <argument><expr><name>POL_REFRESH_CONF_KEY_END_OFFSET</name></expr></argument>,
						 <argument><expr><name>SHOW_POLICY_KEY_REFRESH_END_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ts_jsonb_add_interval</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
								  <argument><expr><name>SHOW_POLICY_KEY_REFRESH_INTERVAL</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schedule_interval</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_COMPRESSION_PROC_NAME</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>SHOW_POLICY_KEY_POLICY_NAME</name></expr></argument>,
							 <argument><expr><name>POLICY_COMPRESSION_PROC_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>push_to_json</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
						 <argument><expr><name>parse_state</name></expr></argument>,
						 <argument><expr><name>job</name></expr></argument>,
						 <argument><expr><name>POL_COMPRESSION_CONF_KEY_COMPRESS_AFTER</name></expr></argument>,
						 <argument><expr><name>SHOW_POLICY_KEY_COMPRESS_AFTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ts_jsonb_add_interval</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
								  <argument><expr><name>SHOW_POLICY_KEY_COMPRESS_INTERVAL</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schedule_interval</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLICY_RETENTION_PROC_NAME</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>SHOW_POLICY_KEY_POLICY_NAME</name></expr></argument>, <argument><expr><name>POLICY_RETENTION_PROC_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>push_to_json</name><argument_list>(<argument><expr><name>type</name></expr></argument>,
						 <argument><expr><name>parse_state</name></expr></argument>,
						 <argument><expr><name>job</name></expr></argument>,
						 <argument><expr><name>POL_RETENTION_CONF_KEY_DROP_AFTER</name></expr></argument>,
						 <argument><expr><name>SHOW_POLICY_KEY_DROP_AFTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ts_jsonb_add_interval</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
								  <argument><expr><name>SHOW_POLICY_KEY_RETENTION_INTERVAL</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schedule_interval</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" unsupported proc"</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <call><name>lnext_compat</name><argument_list>(<argument><expr><name>jobs</name></expr></argument>, <argument><expr><operator>(</operator><name>ListCell</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
