<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/bgw_policy/policy_utils.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/continuous_agg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsonb_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"policy_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time_utils.h"</cpp:file></cpp:include>

<comment type="block">/* Helper function to compare jsonb label value in the config
 * with passed in value.
 * This function is used for labels defined on the hypertable's dimension
 * Parameters:
 * config - jsonb config value
 * label - label we are looking for inside the config
 * partitioning_type - Oid for hypertable's dimension column
 * lag_value - value we will compare against the config's
 *             value for the label
 * lag_type - Oid for lag_value
 * Returns:
 *    True, if config value is equal to lag_value
 */</comment>
<function><type><name>bool</name></type>
<name>policy_config_check_hypertable_lag_equality</name><parameter_list>(<parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_label</name></decl></parameter>,
											<parameter><decl><type><name>Oid</name></type> <name>partitioning_type</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>lag_type</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>lag_datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>partitioning_type</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name>config_value</name> <init>= <expr><call><name>ts_jsonb_get_int64_field</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>json_label</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find %s in config for existing job"</literal></expr></argument>, <argument><expr><name>json_label</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<switch>switch <condition>(<expr><name>lag_type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>INT2OID</name></expr>:</case>
				<return>return <expr><name>config_value</name> <operator>==</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>lag_datum</name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>INT4OID</name></expr>:</case>
				<return>return <expr><name>config_value</name> <operator>==</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>lag_datum</name></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>INT8OID</name></expr>:</case>
				<return>return <expr><name>config_value</name> <operator>==</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>lag_datum</name></expr></argument>)</argument_list></call></expr>;</return>
			<default>default:</default>
				<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>lag_type</name> <operator>!=</operator> <name>INTERVALOID</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>config_value</name> <init>= <expr><call><name>ts_jsonb_get_interval_field</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>json_label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>config_value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find %s in config for job"</literal></expr></argument>, <argument><expr><name>json_label</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><call><name>DatumGetBool</name><argument_list>(
			<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>interval_eq</name></expr></argument>, <argument><expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>config_value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lag_datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>subtract_interval_from_now</name><parameter_list>(<parameter><decl><type><name>Interval</name> <modifier>*</modifier></type><name>lag</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>time_dim_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>Datum</name></type> <name>res</name> <init>= <expr><call><name>ts_get_mock_time_or_current_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>Datum</name></type> <name>res</name> <init>= <expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<switch>switch <condition>(<expr><name>time_dim_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamptz_timestamp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamp_mi_interval</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>res</name></expr>;</return>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamptz_mi_interval</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>res</name></expr>;</return>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamptz_timestamp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamp_mi_interval</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamp_date</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>res</name></expr>;</return>
		<default>default:</default>
			<comment type="block">/* this should never happen as otherwise hypertable has unsupported time type */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported time type %s"</literal></expr></argument>, <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>time_dim_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type>
<name>get_open_dimension_for_hypertable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>mat_id</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_IS_INTERNAL_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid operation on compressed hypertable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>open_dim</name> <init>= <expr><call><name>hyperspace_get_open_dimension</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>partitioning_type</name> <init>= <expr><call><name>ts_dimension_get_partition_type</name><argument_list>(<argument><expr><name>open_dim</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_INTEGER_TYPE</name><argument_list>(<argument><expr><name>partitioning_type</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* if this a materialization hypertable related to cont agg
		 * then need to get the right dimension which has
		 * integer_now function
		 */</comment>

		<expr_stmt><expr><name>open_dim</name> <operator>=</operator> <call><name>ts_continuous_agg_find_integer_now_func_by_materialization_id</name><argument_list>(<argument><expr><name>mat_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>open_dim</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_UNEXPECTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing integer_now function for hypertable \"%s\" "</literal></expr></argument>,
							<argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>open_dim</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>policy_get_verbose_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Jsonb</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>verbose_log</name> <init>= <expr><call><name>ts_jsonb_get_bool_field</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>CONFIG_KEY_VERBOSE_LOG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>found</name></expr> ?</condition><then> <expr><name>verbose_log</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
