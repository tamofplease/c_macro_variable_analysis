<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/fdw/fdw_utils.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/pathnode.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/extensible.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw/relinfo.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>

<comment type="block">/*
 * Copy a path.
 *
 * The returned path is a shallow copy that includes deep copies of a few
 * fields of interest when printing debug information. Doing a deep copy of a
 * Path is a lot of work so we only copy the fields we need.
 *
 * The copied path is intended to be used only in debug.c.
 *
 * Note that PostgreSQL's copyObject does not support copying Path(s) so we
 * have our own copy function.
 */</comment>
<function><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type>
<name>copy_path</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RelOptInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>parent</name> <operator>=</operator> <operator>*</operator><name><name>in</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_CustomPath</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cp_copy</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CustomPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>CustomPath</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

			<expr_stmt><expr><operator>*</operator><name>cp_copy</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cp_copy</name><operator>-&gt;</operator><name>custom_paths</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

			<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>cp-&gt;custom_paths</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>copy_path</name><argument_list>(<argument><expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>cp_copy</name><operator>-&gt;</operator><name>custom_paths</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>cp_copy</name><operator>-&gt;</operator><name>custom_paths</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><name>path</name> <operator>=</operator> <operator>&amp;</operator><name><name>cp_copy</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_ForeignPath</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ForeignPath</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ForeignPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>fp</name> <operator>=</operator> <operator>*</operator><call><name>castNode</name><argument_list>(<argument><expr><name>ForeignPath</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>path</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<default>default:</default>
			<comment type="block">/* Not supported */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>in</name></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

	<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ConsideredPath</name> <modifier>*</modifier></type>
<name>create_considered_path</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ConsideredPath</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsideredPath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>copy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>origin</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>path</name></expr>;</expr_stmt>

	<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fdw_utils_add_path</name><parameter_list>(<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>new_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwRelInfo</name> <modifier>*</modifier></type><name>fdw_info</name> <init>= <expr><call><name>fdw_relinfo_get</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConsideredPath</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>create_considered_path</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Since add_path will deallocate thrown paths we need to create a copy here so we can print it
	 * later on */</comment>
	<expr_stmt><expr><name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_path</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_CustomPath</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator><name>CustomPath</name> <operator>*</operator><operator>)</operator> <name>path</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>cp-&gt;custom_paths</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>custom_paths</name></name> <operator>=</operator> <call><name>list_delete_ptr</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>custom_paths</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_path</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deallocate path copy
 */</comment>
<function><type><name>void</name></type>
<name>fdw_utils_free_path</name><parameter_list>(<parameter><decl><type><name>ConsideredPath</name> <modifier>*</modifier></type><name>cpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_path</name><argument_list>(<argument><expr><name><name>cpath</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TS_DEBUG */</comment>
</unit>
