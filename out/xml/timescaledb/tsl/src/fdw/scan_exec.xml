<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/fdw/scan_exec.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/executor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/explain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;remote/dist_txn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;remote/async.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;remote/stmt_params.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;remote/utils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan_exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/data_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/copy_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/cursor_fetcher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Indexes of FDW-private information stored in fdw_private lists.
 *
 * These items are indexed with the enum FdwScanPrivateIndex, so an item
 * can be fetched with list_nth().  For example, to get the SELECT statement:
 *		sql = strVal(list_nth(fdw_private, FdwScanPrivateSelectSql));
 */</comment>
<enum>enum <name>FdwScanPrivateIndex</name>
<block>{
	<comment type="block">/* SQL statement to execute remotely (as a String node) */</comment>
	<decl><name>FdwScanPrivateSelectSql</name></decl>,
	<comment type="block">/* Integer list of attribute numbers retrieved by the SELECT */</comment>
	<decl><name>FdwScanPrivateRetrievedAttrs</name></decl>,
	<comment type="block">/* Integer representing the desired fetch_size */</comment>
	<decl><name>FdwScanPrivateFetchSize</name></decl>,

	<comment type="block">/* Integer for the OID of the foreign server, used by EXPLAIN */</comment>
	<decl><name>FdwScanPrivateServerId</name></decl>,
	<comment type="block">/* OID list of chunk oids, used by EXPLAIN */</comment>
	<decl><name>FdwScanPrivateChunkOids</name></decl>,
	<comment type="block">/*
	 * String describing join i.e. names of relations being joined and types
	 * of join, added when the scan is join
	 */</comment>
	<decl><name>FdwScanPrivateRelations</name></decl>
}</block>;</enum>

<comment type="block">/*
 * Fill an array with query parameter values in text format.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_query_params_array</name><parameter_list>(<parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>param_flinfo</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>param_exprs</name></decl></parameter>,
						<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>param_values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nestlevel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nestlevel</name> <operator>=</operator> <call><name>set_transmission_modes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>param_exprs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>expr_state</name> <init>= <expr><operator>(</operator><name>ExprState</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>expr_value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>is_null</name></decl>;</decl_stmt>

		<comment type="block">/* Evaluate the parameter expression */</comment>
		<expr_stmt><expr><name>expr_value</name> <operator>=</operator> <call><name>ExecEvalExpr</name><argument_list>(<argument><expr><name>expr_state</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Get string representation of each parameter value by invoking
		 * type-specific output function, unless the value is null.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>is_null</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>param_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>param_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>OutputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param_flinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>expr_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>reset_transmission_modes</name><argument_list>(<argument><expr><name>nestlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create data fetcher for node's query with current parameter values.
 */</comment>
<function><type><name>DataFetcher</name> <modifier>*</modifier></type>
<name>create_data_fetcher</name><parameter_list>(<parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>TsFdwScanState</name> <modifier>*</modifier></type><name>fsstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_params</name> <init>= <expr><name><name>fsstate</name><operator>-&gt;</operator><name>num_params</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><name><name>fsstate</name><operator>-&gt;</operator><name>param_values</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StmtParams</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Construct array of query parameter values in text format.  We do the
	 * conversions in the short-lived per-tuple context, so as not to cause a
	 * memory leak over repeated scans.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>num_params</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_tuple_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fill_query_params_array</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>, <argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>param_flinfo</name></name></expr></argument>, <argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>param_exprs</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Notice that we do not specify param types, thus forcing the data
		 * node to infer types for all parameters.  Since we explicitly cast
		 * every parameter (see deparse.c), the "inference" is trivial and
		 * will produce the desired result.  This allows us to avoid assuming
		 * that the data node has the same OIDs we do for the parameters'
		 * types.
		 */</comment>
		<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>stmt_params_create_from_values</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>num_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>TupleFactory</name> <modifier>*</modifier></type><name>tf</name> <init>= <expr><call><name>tuplefactory_create_for_scan</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>retrieved_attrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tuplefactory_is_binary</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>fsstate</name><operator>-&gt;</operator><name>planned_fetcher_type</name></name> <operator>==</operator> <name>CopyFetcherType</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ts_guc_remote_data_fetcher</name> <operator>==</operator> <name>AutoFetcherType</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * The user-set fetcher type was auto, and the planner decided to
			 * use COPY fetcher, but at execution time (now) we found out
			 * there is no binary serialization for some data types. In this
			 * case we can revert to cursor fetcher which supports text
			 * serialization.
			 */</comment>
			<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>planned_fetcher_type</name></name> <operator>=</operator> <name>CursorFetcherType</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot use COPY fetcher because some of the column types do not "</literal>
							<literal type="string">"have binary serialization"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * COPY fetcher uses COPY statement that don't work with prepared
	 * statements. If this plan is parameterized, this means we'll have to
	 * revert to cursor fetcher.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>num_params</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fsstate</name><operator>-&gt;</operator><name>planned_fetcher_type</name></name> <operator>==</operator> <name>CopyFetcherType</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ts_guc_remote_data_fetcher</name> <operator>==</operator> <name>AutoFetcherType</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>planned_fetcher_type</name></name> <operator>=</operator> <name>CursorFetcherType</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot use COPY fetcher because the plan is parameterized"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Set \"timescaledb.remote_data_fetcher\" to \"cursor\" to explicitly "</literal>
							 <literal type="string">"set the fetcher type or use \"auto\" to select the fetcher type "</literal>
							 <literal type="string">"automatically."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fsstate</name><operator>-&gt;</operator><name>planned_fetcher_type</name></name> <operator>==</operator> <name>CursorFetcherType</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>fetcher</name> <operator>=</operator> <call><name>cursor_fetcher_create_for_scan</name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * The fetcher type must have been determined by the planner at this
		 * point, so we shouldn't see 'auto' here.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>planned_fetcher_type</name></name> <operator>==</operator> <name>CopyFetcherType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fetcher</name> <operator>=</operator> <call><name>copy_fetcher_create_for_scan</name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name> <operator>=</operator> <name>fetcher</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>fetcher</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>set_fetch_size</name></name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetch_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fetcher</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare for processing of parameters used in remote query.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>prepare_query_params</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_exprs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_params</name></decl></parameter>, <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>param_flinfo</name></decl></parameter>,
					 <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>param_exprs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>param_values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>num_params</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Prepare for output conversion of parameters used in remote query. */</comment>
	<expr_stmt><expr><operator>*</operator><name>param_flinfo</name> <operator>=</operator> <operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>fdw_exprs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>param_expr</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>typefnoid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isvarlena</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>getTypeOutputInfo</name><argument_list>(<argument><expr><call><name>exprType</name><argument_list>(<argument><expr><name>param_expr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>typefnoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isvarlena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>typefnoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>param_flinfo</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * Prepare remote-parameter expressions for evaluation.  (Note: in
	 * practice, we expect that all these expressions will be just Params, so
	 * we could possibly do something more efficient than using the full
	 * expression-eval machinery for this.  But probably there would be little
	 * benefit, and it'd require the foreign data wrapper to know more than is
	 * desirable about Param evaluation.)
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>param_exprs</name> <operator>=</operator> <call><name>ExecInitExprList</name><argument_list>(<argument><expr><name>fdw_exprs</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Allocate buffer for text form of query parameters. */</comment>
	<expr_stmt><expr><operator>*</operator><name>param_values</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>num_params</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
<comment type="block">/* Allow tests to specify the time to push down in place of now() */</comment>
<decl_stmt><decl><type><name>TimestampTz</name></type> <name>ts_current_timestamp_override_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>fdw_scan_debug_override_current_timestamp</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>ts_current_timestamp_override_value</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>TSConnection</name> <modifier>*</modifier></type>
<name>get_connection</name><parameter_list>(<parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <specifier>const</specifier></type> <name>server_id</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>scanrelids</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>exprs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Scan</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name><name>ss</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSConnectionId</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>rtindex</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Identify which user to do the remote access as.  This should match what
	 * ExecCheckRTEPerms() does.  In case of a join or aggregate, use the
	 * lowest-numbered member RTE as a representative; we would get the same
	 * result from any.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>scanrelid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>rtindex</name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>scanrelid</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>rtindex</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name>scanrelids</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>rte</name> <operator>=</operator> <call><name>rt_fetch</name><argument_list>(<argument><expr><name>rtindex</name></expr></argument>, <argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_range_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>remote_connection_id_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>server_id</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>rte</name><operator>-&gt;</operator><name>checkAsUser</name></name></expr> ?</condition><then> <expr><name><name>rte</name><operator>-&gt;</operator><name>checkAsUser</name></name></expr> </then><else>: <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>remote_dist_txn_get_connection</name><argument_list>(<argument><expr><name>id</name></expr></argument>,
										  <argument><expr><ternary><condition><expr><call><name>list_length</name><argument_list>(<argument><expr><name>exprs</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>REMOTE_TXN_USE_PREP_STMT</name></expr> </then><else>:
															   <expr><name>REMOTE_TXN_NO_PREP_STMT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fdw_scan_init</name><parameter_list>(<parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>TsFdwScanState</name> <modifier>*</modifier></type><name>fsstate</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>scanrelids</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_private</name></decl></parameter>,
			  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_exprs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>num_params</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>server_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_EXPLAIN_ONLY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>ts_guc_enable_remote_explain</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Check if the server is "available" for use before setting up a connection to it */</comment>
	<expr_stmt><expr><name>server_oid</name> <operator>=</operator> <call><name>intVal</name><argument_list>(<argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateServerId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>GetForeignServer</name><argument_list>(<argument><expr><name>server_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_data_node_is_available_by_server</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"data node \"%s\" is not available"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Get connection to the foreign server.  Connection manager will
	 * establish new connection if necessary.
	 */</comment>
	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>get_connection</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>server_oid</name></expr></argument>, <argument><expr><name>scanrelids</name></expr></argument>, <argument><expr><name>fdw_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get private info created by planner functions. */</comment>
	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateSelectSql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>retrieved_attrs</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateRetrievedAttrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetch_size</name></name> <operator>=</operator> <call><name>intVal</name><argument_list>(<argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateFetchSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Prepare for processing of parameters used in remote query, if any.
	 */</comment>
	<expr_stmt><expr><name>num_params</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>fdw_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>num_params</name></name> <operator>=</operator> <name>num_params</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>num_params</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prepare_query_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ss</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>,
							 <argument><expr><name>fdw_exprs</name></expr></argument>,
							 <argument><expr><name>num_params</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>fsstate</name><operator>-&gt;</operator><name>param_flinfo</name></name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>fsstate</name><operator>-&gt;</operator><name>param_exprs</name></name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>fsstate</name><operator>-&gt;</operator><name>param_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>fdw_scan_iterate</name><parameter_list>(<parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>TsFdwScanState</name> <modifier>*</modifier></type><name>fsstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>fetcher</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fetcher</name> <operator>=</operator> <call><name>create_data_fetcher</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>fsstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>fetcher</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>store_next_tuple</name></name><argument_list>(<argument><expr><name>fetcher</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fdw_scan_rescan</name><parameter_list>(<parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>TsFdwScanState</name> <modifier>*</modifier></type><name>fsstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DataFetcher</name> <modifier>*</modifier></type><name>fetcher</name> <init>= <expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If we haven't created the cursor yet, nothing to do. */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<comment type="block">/*
	 * If any internal parameters affecting this node have changed, we'd
	 * better destroy and recreate the cursor.  Otherwise, rewinding it should
	 * be good enough.  If we've only fetched zero or one batch, we needn't
	 * even rewind the cursor, just rescan what we have.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>chgParam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>data_fetcher_free</name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>fetcher</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>rewind</name></name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fdw_scan_end</name><parameter_list>(<parameter><decl><type><name>TsFdwScanState</name> <modifier>*</modifier></type><name>fsstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* if fsstate is NULL, we are in EXPLAIN; nothing to do */</comment>
	<if_stmt><if>if <condition>(<expr><name>fsstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Close the cursor if open, to prevent accumulation of cursors */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>data_fetcher_free</name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Release remote connection */</comment>
	<expr_stmt><expr><name><name>fsstate</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* MemoryContexts will be deleted automatically. */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_data_node_explain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>TSConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AsyncRequest</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AsyncResponseResult</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>explain_sql</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"EXPLAIN (VERBOSE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>analyze</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">", ANALYZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>costs</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">", COSTS OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">", BUFFERS ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>es</name><operator>-&gt;</operator><name>timing</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">", TIMING OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>summary</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">", SUMMARY ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">", SUMMARY OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>explain_sql</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pg_res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>async_request_send</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>explain_sql</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>async_request_wait_ok_result</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pg_res</name> <operator>=</operator> <call><name>async_response_result_get_pg_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>pg_res</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfoSpaces</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>pg_res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>async_response_result_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>async_response_result_close</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>explain_fetcher_type</name><parameter_list>(<parameter><decl><type><name>DataFetcherType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AutoFetcherType</name></expr>:</case>
			<return>return <expr><literal type="string">"Auto"</literal></expr>;</return>
		<case>case <expr><name>CopyFetcherType</name></expr>:</case>
			<return>return <expr><literal type="string">"COPY"</literal></expr>;</return>
		<case>case <expr><name>CursorFetcherType</name></expr>:</case>
			<return>return <expr><literal type="string">"Cursor"</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="string">""</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fdw_scan_explain</name><parameter_list>(<parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_private</name></decl></parameter>, <parameter><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl></parameter>, <parameter><decl><type><name>TsFdwScanState</name> <modifier>*</modifier></type><name>fsstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relations</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Add names of relation handled by the foreign scan when the scan is an
	 * upper rel.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>FdwScanPrivateRelations</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>relations</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateRelations</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Relations"</literal></expr></argument>, <argument><expr><name>relations</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Add remote query, data node name, and chunks when VERBOSE option is specified.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>server_id</name> <init>= <expr><call><name>intVal</name><argument_list>(<argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateServerId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>GetForeignServer</name><argument_list>(<argument><expr><name>server_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_oids</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateChunkOids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Data node"</literal></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* fsstate or fetcher can be NULL, so check that first */</comment>
		<if_stmt><if>if <condition>(<expr><name>fsstate</name> <operator>&amp;&amp;</operator> <name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Fetcher Type"</literal></expr></argument>, <argument><expr><call><name>explain_fetcher_type</name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>fetcher</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>chunk_oids</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>StringInfoData</name></type> <name>chunk_names</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chunk_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>chunk_oids</argument>)</argument_list></macro>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chunk_names</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chunk_names</name></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Chunks"</literal></expr></argument>, <argument><expr><name><name>chunk_names</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>FdwScanPrivateSelectSql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Remote SQL"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* fsstate should be set up but better check again to avoid crashes */</comment>
		<if_stmt><if>if <condition>(<expr><name>ts_guc_enable_remote_explain</name> <operator>&amp;&amp;</operator> <name>fsstate</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data_node_explain</name></decl>;</decl_stmt>

			<comment type="block">/* EXPLAIN barfs on parameterized queries, so check that first */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>fsstate</name><operator>-&gt;</operator><name>num_params</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>data_node_explain</name> <operator>=</operator> <literal type="string">"Unavailable due to parameterized query"</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>data_node_explain</name> <operator>=</operator> <call><name>get_data_node_explain</name><argument_list>(<argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name><name>fsstate</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Remote EXPLAIN"</literal></expr></argument>, <argument><expr><name>data_node_explain</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
