<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/fdw/fdw.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/appendinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/planmain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/pathnode.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/plannodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/execnodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/reloptions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/sysattr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/defrem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/fdwapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/foreign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;guc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_node_scan_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modify_exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"modify_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"relinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan_exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scan_plan.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Parse options from foreign table and apply them to fpinfo.
 *
 * New options might also require tweaking merge_fdw_options().
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>apply_table_options</name><parameter_list>(<parameter><decl><type><name>ForeignTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>TsFdwRelInfo</name> <modifier>*</modifier></type><name>fpinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>table-&gt;options</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"fetch_size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fpinfo</name><operator>-&gt;</operator><name>fetch_size</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* This creates the fdw_relation_info object for hypertables and foreign table
 * type objects. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_foreign_rel_size</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>foreigntableid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>planner_rt_fetch</name><argument_list>(<argument><expr><name><name>baserel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* A base hypertable is a regular table and not a foreign table. It is the only
	 * kind of regular table that will ever have this callback called on it. */</comment>
	<if_stmt><if>if <condition>(<expr><name>RELKIND_RELATION</name> <operator>==</operator> <name><name>rte</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fdw_relinfo_create</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>baserel</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>foreigntableid</name></expr></argument>, <argument><expr><name>TS_FDW_RELINFO_HYPERTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>ForeignTable</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><call><name>GetForeignTable</name><argument_list>(<argument><expr><name>foreigntableid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>fdw_relinfo_create</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
						   <argument><expr><name>baserel</name></expr></argument>,
						   <argument><expr><name><name>table</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>,
						   <argument><expr><name>foreigntableid</name></expr></argument>,
						   <argument><expr><name>TS_FDW_RELINFO_FOREIGN_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>apply_table_options</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name>fdw_relinfo_get</name><argument_list>(<argument><expr><name>baserel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_foreign_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>baserel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>foreigntableid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwRelInfo</name> <modifier>*</modifier></type><name>fpinfo</name> <init>= <expr><call><name>fdw_relinfo_get</name><argument_list>(<argument><expr><name>baserel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fpinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TS_FDW_RELINFO_HYPERTABLE_DATA_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fpinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TS_FDW_RELINFO_HYPERTABLE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ts_guc_enable_per_data_node_queries</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>data_node_scan_add_node_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>baserel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>baserel</name><operator>-&gt;</operator><name>reloptkind</name></name> <operator>==</operator> <name>RELOPT_JOINREL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"foreign joins are not supported"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Create simplest ForeignScan path node and add it to baserel.  This path
	 * corresponds to SeqScan path of regular tables (though depending on what
	 * baserestrict conditions we were able to send to remote, there might
	 * actually be an indexscan happening there).  We already did all the work
	 * to estimate cost and size of this path.
	 */</comment>
	<expr_stmt><expr><name>path</name> <operator>=</operator> <operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>create_foreignscan_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
											<argument><expr><name>baserel</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* default pathtarget */</comment>
											<argument><expr><name><name>fpinfo</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>,
											<argument><expr><name><name>fpinfo</name><operator>-&gt;</operator><name>startup_cost</name></name></expr></argument>,
											<argument><expr><name><name>fpinfo</name><operator>-&gt;</operator><name>total_cost</name></name></expr></argument>,
											<argument><expr><name>NIL</name></expr></argument>,  <comment type="block">/* no pathkeys */</comment>
											<argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* no outer rel either */</comment>
											<argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* no extra plan */</comment>
											<argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* no fdw_private list */</comment>
	<expr_stmt><expr><call><name>fdw_utils_add_path</name><argument_list>(<argument><expr><name>baserel</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add paths with pathkeys */</comment>
	<expr_stmt><expr><call><name>fdw_add_paths_with_pathkeys_for_rel</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
										<argument><expr><name>baserel</name></expr></argument>,
										<argument><expr><name>NULL</name></expr></argument>,
										<argument><expr><operator>(</operator><name>CreatePathFunc</name><operator>)</operator> <name>create_foreignscan_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>ts_debug_optimizer_flags</name><operator>.</operator><name>show_rel</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tsl_debug_log_rel_with_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>baserel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ForeignScan</name> <modifier>*</modifier></type>
<name>get_foreign_plan</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>foreignrel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>foreigntableid</name></decl></parameter>,
				 <parameter><decl><type><name>ForeignPath</name> <modifier>*</modifier></type><name>best_path</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>scan_clauses</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>outer_plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanInfo</name></type> <name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fdw_scan_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>foreignrel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>best_path</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>scan_clauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create the ForeignScan node for the given relation.
	 *
	 * Note that the remote parameter expressions are stored in the fdw_exprs
	 * field of the finished plan node; we can't keep them in private state
	 * because then they wouldn't be subject to later planner processing.
	 */</comment>
	<return>return <expr><call><name>make_foreignscan</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>,
							<argument><expr><name><name>info</name><operator>.</operator><name>local_exprs</name></name></expr></argument>,
							<argument><expr><name><name>info</name><operator>.</operator><name>scan_relid</name></name></expr></argument>,
							<argument><expr><name><name>info</name><operator>.</operator><name>params_list</name></name></expr></argument>,
							<argument><expr><name><name>info</name><operator>.</operator><name>fdw_private</name></name></expr></argument>,
							<argument><expr><name><name>info</name><operator>.</operator><name>fdw_scan_tlist</name></name></expr></argument>,
							<argument><expr><name><name>info</name><operator>.</operator><name>fdw_recheck_quals</name></name></expr></argument>,
							<argument><expr><name>outer_plan</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>begin_foreign_scan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ForeignScan</name> <modifier>*</modifier></type><name>fsplan</name> <init>= <expr><operator>(</operator><name>ForeignScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_EXPLAIN_ONLY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>ts_guc_enable_remote_explain</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name> <operator>=</operator> <operator>(</operator><name>TsFdwScanState</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TsFdwScanState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fdw_scan_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>,
				  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></argument>,
				  <argument><expr><name><name>fsplan</name><operator>-&gt;</operator><name>fs_relids</name></name></expr></argument>,
				  <argument><expr><name><name>fsplan</name><operator>-&gt;</operator><name>fdw_private</name></name></expr></argument>,
				  <argument><expr><name><name>fsplan</name><operator>-&gt;</operator><name>fdw_exprs</name></name></expr></argument>,
				  <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>iterate_foreign_scan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwScanState</name> <modifier>*</modifier></type><name>fsstate</name> <init>= <expr><operator>(</operator><name>TsFdwScanState</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>fdw_scan_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>fsstate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>end_foreign_scan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fdw_scan_end</name><argument_list>(<argument><expr><operator>(</operator><name>TsFdwScanState</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rescan_foreign_scan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fdw_scan_rescan</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><operator>(</operator><name>TsFdwScanState</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>exec_foreign_update</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rri</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
					<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>plan_slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwModifyState</name> <modifier>*</modifier></type><name>fmstate</name> <init>= <expr><operator>(</operator><name>TsFdwModifyState</name> <operator>*</operator><operator>)</operator> <name><name>rri</name><operator>-&gt;</operator><name>ri_FdwState</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>fdw_exec_foreign_update_or_delete</name><argument_list>(<argument><expr><name>fmstate</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>plan_slot</name></expr></argument>, <argument><expr><name>UPDATE_CMD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>exec_foreign_delete</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rri</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
					<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>plan_slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwModifyState</name> <modifier>*</modifier></type><name>fmstate</name> <init>= <expr><operator>(</operator><name>TsFdwModifyState</name> <operator>*</operator><operator>)</operator> <name><name>rri</name><operator>-&gt;</operator><name>ri_FdwState</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>fdw_exec_foreign_update_or_delete</name><argument_list>(<argument><expr><name>fmstate</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>plan_slot</name></expr></argument>, <argument><expr><name>DELETE_CMD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>end_foreign_modify</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwModifyState</name> <modifier>*</modifier></type><name>fmstate</name> <init>= <expr><operator>(</operator><name>TsFdwModifyState</name> <operator>*</operator><operator>)</operator> <name><name>rri</name><operator>-&gt;</operator><name>ri_FdwState</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If fmstate is NULL, we are in EXPLAIN; nothing to do */</comment>
	<if_stmt><if>if <condition>(<expr><name>fmstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Destroy the execution state */</comment>
	<expr_stmt><expr><call><name>fdw_finish_foreign_modify</name><argument_list>(<argument><expr><name>fmstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add resjunk column(s) needed for update/delete on a foreign table
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_foreign_update_targets</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>parsetree</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>target_rte</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>target_relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attrname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In timescaledb_fdw, what we need is the ctid, same as for a regular
	 * table.
	 */</comment>

	<comment type="block">/* Make a Var representing the desired value */</comment>
	<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name><name>parsetree</name><operator>-&gt;</operator><name>resultRelation</name></name></expr></argument>,
				  <argument><expr><name>SelfItemPointerAttributeNumber</name></expr></argument>,
				  <argument><expr><name>TIDOID</name></expr></argument>,
				  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
				  <argument><expr><name>InvalidOid</name></expr></argument>,
				  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wrap it in a resjunk TLE with the right name ... */</comment>
	<expr_stmt><expr><name>attrname</name> <operator>=</operator> <literal type="string">"ctid"</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>tle</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>,
						  <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>parsetree</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
						  <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>attrname</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ... and add it to the query's targetlist */</comment>
	<expr_stmt><expr><name><name>parsetree</name><operator>-&gt;</operator><name>targetList</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>parsetree</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>, <argument><expr><name>tle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_foreign_update_targets</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>rtindex</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>target_rte</name></decl></parameter>,
						   <parameter><decl><type><name>Relation</name></type> <name>target_relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * In timescaledb_fdw, what we need is the ctid, same as for a regular
	 * table.
	 */</comment>

	<comment type="block">/* Make a Var representing the desired value */</comment>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>makeVar</name><argument_list>(<argument><expr><name>rtindex</name></expr></argument>, <argument><expr><name>SelfItemPointerAttributeNumber</name></expr></argument>, <argument><expr><name>TIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Register it as a row-identity column needed by this target rel */</comment>
	<expr_stmt><expr><call><name>add_row_identity_var</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>rtindex</name></expr></argument>, <argument><expr><literal type="string">"ctid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>exec_foreign_insert</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rri</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
					<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>planslot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwModifyState</name> <modifier>*</modifier></type><name>fmstate</name> <init>= <expr><operator>(</operator><name>TsFdwModifyState</name> <operator>*</operator><operator>)</operator> <name><name>rri</name><operator>-&gt;</operator><name>ri_FdwState</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>fdw_exec_foreign_insert</name><argument_list>(<argument><expr><name>fmstate</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>planslot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_foreign_rel_updatable</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CMD_INSERT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CMD_DELETE</name><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CMD_UPDATE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>explain_foreign_scan</name><parameter_list>(<parameter><decl><type><name>ForeignScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ExplainState</name></name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_private</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ForeignScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name><operator>)</operator><operator>-&gt;</operator><name>fdw_private</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fdw_scan_explain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>es</name></expr></argument>, <argument><expr><operator>(</operator><name>TsFdwScanState</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>fdw_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>begin_foreign_modify</name><parameter_list>(<parameter><decl><type><name>ModifyTableState</name> <modifier>*</modifier></type><name>mtstate</name></decl></parameter>, <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rri</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_private</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>subplan_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
	<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>subplan</name> <init>= <expr><name><name>mtstate</name><operator>-&gt;</operator><name>mt_plans</name><index>[<expr><name>subplan_index</name></expr>]</index></name><operator>-&gt;</operator><name>plan</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>subplan</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>mtstate</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>plan</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Do nothing in EXPLAIN (no ANALYZE) case.  rri-&gt;ri_FdwState stays NULL.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_EXPLAIN_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fdw_begin_foreign_modify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>, <argument><expr><name>rri</name></expr></argument>, <argument><expr><name><name>mtstate</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>, <argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>subplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>explain_foreign_modify</name><parameter_list>(<parameter><decl><type><name>ModifyTableState</name> <modifier>*</modifier></type><name>mtstate</name></decl></parameter>, <parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>rri</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>fdw_private</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>subplan_index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ExplainState</name></name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fdw_explain_modify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mtstate</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>, <argument><expr><name>rri</name></expr></argument>, <argument><expr><name>fdw_private</name></expr></argument>, <argument><expr><name>subplan_index</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>plan_foreign_modify</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>ModifyTable</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>result_relation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subplan_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fdw_plan_foreign_modify</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>plan</name></expr></argument>, <argument><expr><name>result_relation</name></expr></argument>, <argument><expr><name>subplan_index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_foreign_upper_paths
 *		Add paths for post-join operations like aggregation, grouping etc. if
 *		corresponding operations are safe to push down.
 *
 * Right now, we only support aggregate, grouping and having clause pushdown.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_foreign_upper_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>UpperRelationKind</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>input_rel</name></decl></parameter>,
						<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>output_rel</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwRelInfo</name> <modifier>*</modifier></type><name>fpinfo</name> <init>= <expr><ternary><condition><expr><name><name>input_rel</name><operator>-&gt;</operator><name>fdw_private</name></name></expr> ?</condition><then> <expr><call><name>fdw_relinfo_get</name><argument_list>(<argument><expr><name>input_rel</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fpinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* We abuse the FDW API's GetForeignUpperPaths callback because, for some
	 * reason, the regular create_upper_paths_hook is never called for
	 * partially grouped rels, so we cannot use if for server rels. See end of
	 * PostgreSQL planner.c:create_partial_grouping_paths(). */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fpinfo</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TS_FDW_RELINFO_HYPERTABLE_DATA_NODE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>data_node_scan_create_upper_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>, <argument><expr><name>input_rel</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fdw_create_upper_paths</name><argument_list>(<argument><expr><name>fpinfo</name></expr></argument>,
							   <argument><expr><name>root</name></expr></argument>,
							   <argument><expr><name>stage</name></expr></argument>,
							   <argument><expr><name>input_rel</name></expr></argument>,
							   <argument><expr><name>output_rel</name></expr></argument>,
							   <argument><expr><name>extra</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>CreateUpperPathFunc</name><operator>)</operator> <name>create_foreign_upper_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>ts_debug_optimizer_flags</name><operator>.</operator><name>show_upper</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>stage</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tsl_debug_log_rel_with_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>FdwRoutine</name></type> <name>timescaledb_fdw_routine</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_FdwRoutine</name></expr>,
	<comment type="block">/* scan (mandatory) */</comment>
	<expr><operator>.</operator><name>GetForeignRelSize</name> <operator>=</operator> <name>get_foreign_rel_size</name></expr>,
	<expr><operator>.</operator><name>GetForeignPaths</name> <operator>=</operator> <name>get_foreign_paths</name></expr>,
	<expr><operator>.</operator><name>GetForeignPlan</name> <operator>=</operator> <name>get_foreign_plan</name></expr>,
	<expr><operator>.</operator><name>BeginForeignScan</name> <operator>=</operator> <name>begin_foreign_scan</name></expr>,
	<expr><operator>.</operator><name>IterateForeignScan</name> <operator>=</operator> <name>iterate_foreign_scan</name></expr>,
	<expr><operator>.</operator><name>EndForeignScan</name> <operator>=</operator> <name>end_foreign_scan</name></expr>,
	<expr><operator>.</operator><name>ReScanForeignScan</name> <operator>=</operator> <name>rescan_foreign_scan</name></expr>,
	<expr><operator>.</operator><name>GetForeignUpperPaths</name> <operator>=</operator> <name>get_foreign_upper_paths</name></expr>,
	<comment type="block">/* update */</comment>
	<expr><operator>.</operator><name>IsForeignRelUpdatable</name> <operator>=</operator> <name>is_foreign_rel_updatable</name></expr>,
	<expr><operator>.</operator><name>PlanForeignModify</name> <operator>=</operator> <name>plan_foreign_modify</name></expr>,
	<expr><operator>.</operator><name>BeginForeignModify</name> <operator>=</operator> <name>begin_foreign_modify</name></expr>,
	<expr><operator>.</operator><name>ExecForeignInsert</name> <operator>=</operator> <name>exec_foreign_insert</name></expr>,
	<expr><operator>.</operator><name>ExecForeignDelete</name> <operator>=</operator> <name>exec_foreign_delete</name></expr>,
	<expr><operator>.</operator><name>ExecForeignUpdate</name> <operator>=</operator> <name>exec_foreign_update</name></expr>,
	<expr><operator>.</operator><name>EndForeignModify</name> <operator>=</operator> <name>end_foreign_modify</name></expr>,
	<expr><operator>.</operator><name>AddForeignUpdateTargets</name> <operator>=</operator> <name>add_foreign_update_targets</name></expr>,
	<comment type="block">/* explain/analyze */</comment>
	<expr><operator>.</operator><name>ExplainForeignScan</name> <operator>=</operator> <name>explain_foreign_scan</name></expr>,
	<expr><operator>.</operator><name>ExplainForeignModify</name> <operator>=</operator> <name>explain_foreign_modify</name></expr>,
	<expr><operator>.</operator><name>AnalyzeForeignTable</name> <operator>=</operator> <name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Datum</name></type>
<name>timescaledb_fdw_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timescaledb_fdw_routine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>timescaledb_fdw_validator</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>options_list</name> <init>= <expr><call><name>untransformRelOptions</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>catalog</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>option_validate</name><argument_list>(<argument><expr><name>options_list</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
