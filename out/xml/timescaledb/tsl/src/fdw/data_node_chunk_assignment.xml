<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/fdw/data_node_chunk_assignment.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/foreign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/hsearch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgrprotos.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/bitmapset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_node_chunk_assignment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypercube.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/chunk_data_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"relinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Find an existing data node chunk assignment or initialize a new one.
 */</comment>
<function><type><specifier>static</specifier> <name>DataNodeChunkAssignment</name> <modifier>*</modifier></type>
<name>get_or_create_sca</name><parameter_list>(<parameter><decl><type><name>DataNodeChunkAssignments</name> <modifier>*</modifier></type><name>scas</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>serverid</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DataNodeChunkAssignment</name> <modifier>*</modifier></type><name>sca</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rel</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rel</name><operator>-&gt;</operator><name>serverid</name></name> <operator>==</operator> <name>serverid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sca</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>scas</name><operator>-&gt;</operator><name>assignments</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serverid</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* New entry */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sca</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sca</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sca</name><operator>-&gt;</operator><name>node_server_oid</name></name> <operator>=</operator> <name>serverid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>sca</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type>
<name>get_slice_for_dimension</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_hypercube_get_slice_by_dimension_id</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>cube</name></name></expr></argument>, <argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Assign the given chunk relation to a data node.
 *
 * The chunk is assigned according to the strategy set in the
 * DataNodeChunkAssignments state.
 */</comment>
<function><type><name>DataNodeChunkAssignment</name> <modifier>*</modifier></type>
<name>data_node_chunk_assignment_assign_chunk</name><parameter_list>(<parameter><decl><type><name>DataNodeChunkAssignments</name> <modifier>*</modifier></type><name>scas</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>chunkrel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DataNodeChunkAssignment</name> <modifier>*</modifier></type><name>sca</name> <init>= <expr><call><name>get_or_create_sca</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><name><name>chunkrel</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimescaleDBPrivate</name> <modifier>*</modifier></type><name>chunk_private</name> <init>= <expr><call><name>ts_get_private_reloptinfo</name><argument_list>(<argument><expr><name>chunkrel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>

	<comment type="block">/* Should never assign the same chunk twice */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name><name>chunkrel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name><name>sca</name><operator>-&gt;</operator><name>chunk_relids</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If this is the first chunk we assign to this data node, increment the
	 * number of data nodes with one or more chunks on them */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>sca</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>num_nodes_with_chunks</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>total_num_chunks</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Use the cached ChunkDataNode data to find the relid of the chunk on the
	 * data node.
	 */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>remote_chunk_relid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>chunk_private-&gt;chunk-&gt;data_nodes</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ChunkDataNode</name> <modifier>*</modifier></type><name>cdn</name> <init>= <expr><operator>(</operator><name>ChunkDataNode</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cdn</name><operator>-&gt;</operator><name>foreign_server_oid</name></name> <operator>==</operator> <name><name>chunkrel</name><operator>-&gt;</operator><name>serverid</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>remote_chunk_relid</name> <operator>=</operator> <name><name>cdn</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>node_chunk_id</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>remote_chunk_relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fill the data node chunk assignment struct.
	 */</comment>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>scas</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sca</name><operator>-&gt;</operator><name>chunk_relids</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>sca</name><operator>-&gt;</operator><name>chunk_relids</name></name></expr></argument>, <argument><expr><name><name>chunkrel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sca</name><operator>-&gt;</operator><name>chunks</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>sca</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><name><name>chunk_private</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sca</name><operator>-&gt;</operator><name>remote_chunk_ids</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>sca</name><operator>-&gt;</operator><name>remote_chunk_ids</name></name></expr></argument>, <argument><expr><name>remote_chunk_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sca</name><operator>-&gt;</operator><name>pages</name></name> <operator>+=</operator> <name><name>chunkrel</name><operator>-&gt;</operator><name>pages</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sca</name><operator>-&gt;</operator><name>rows</name></name> <operator>+=</operator> <name><name>chunkrel</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sca</name><operator>-&gt;</operator><name>tuples</name></name> <operator>+=</operator> <name><name>chunkrel</name><operator>-&gt;</operator><name>tuples</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>sca</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a new chunk assignment state with a specific assignment strategy.
 */</comment>
<function><type><name>void</name></type>
<name>data_node_chunk_assignments_init</name><parameter_list>(<parameter><decl><type><name>DataNodeChunkAssignments</name> <modifier>*</modifier></type><name>scas</name></decl></parameter>,
								 <parameter><decl><type><name>DataNodeChunkAssignmentStrategy</name></type> <name>strategy</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
								 <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nrels_hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>hctl</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>keysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>entrysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DataNodeChunkAssignment</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>hcxt</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>mctx</name></name> <operator>=</operator> <name><name>hctl</name><operator>.</operator><name>hcxt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>total_num_chunks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>num_nodes_with_chunks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scas</name><operator>-&gt;</operator><name>assignments</name></name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"data node chunk assignments"</literal></expr></argument>,
									<argument><expr><name>nrels_hint</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>hctl</name></expr></argument>,
									<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_CONTEXT</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Assign chunks to data nodes.
 *
 * Each chunk in the chunkrels array is a assigned a data node using the strategy
 * set in the DataNodeChunkAssignments state.
 */</comment>
<function><type><name>DataNodeChunkAssignments</name> <modifier>*</modifier></type>
<name>data_node_chunk_assignment_assign_chunks</name><parameter_list>(<parameter><decl><type><name>DataNodeChunkAssignments</name> <modifier>*</modifier></type><name>scas</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunkrels</name></decl></parameter>,
										 <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nrels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>scas</name><operator>-&gt;</operator><name>assignments</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>scas</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>chunkrel</name> <init>= <expr><name><name>chunkrels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IS_SIMPLE_REL</name><argument_list>(<argument><expr><name>chunkrel</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>chunkrel</name><operator>-&gt;</operator><name>fdw_private</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>data_node_chunk_assignment_assign_chunk</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><name>chunkrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>scas</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the data node assignment for the given relation (chunk).
 */</comment>
<function><type><name>DataNodeChunkAssignment</name> <modifier>*</modifier></type>
<name>data_node_chunk_assignment_get_or_create</name><parameter_list>(<parameter><decl><type><name>DataNodeChunkAssignments</name> <modifier>*</modifier></type><name>scas</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>get_or_create_sca</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if a dimension slice overlaps with other slices.
 *
 * This is a naive implementation that runs in linear time. A more efficient
 * approach would be to use, e.g., an interval tree.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>dimension_slice_overlaps_with_others</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>other_slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>other_slices</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>other_slice</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ts_dimension_slices_collide</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>other_slice</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DataNodeSlice: a hash table entry to track the data node a chunk slice is placed
 * on.
 */</comment>
<typedef>typedef <type><struct>struct <name>DataNodeSlice</name>
<block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>sliceid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>node_serverid</name></decl>;</decl_stmt>
}</block></struct></type> <name>DataNodeSlice</name>;</typedef>

<comment type="block">/*
 * Check whether chunks are assigned in an overlapping way.
 *
 * Assignments are overlapping if any data node has a chunk that overlaps (in the
 * given paritioning dimension) with a chunk on another data node. There are two
 * cases when this can happen:
 *
 * 1. The same slice exists on multiple data nodes (we optimize for detecting
 * this).
 *
 * 2. Two different slices overlap while existing on different data nodes (this
 * case is more costly to detect).
 */</comment>
<function><type><name>bool</name></type>
<name>data_node_chunk_assignments_are_overlapping</name><parameter_list>(<parameter><decl><type><name>DataNodeChunkAssignments</name> <modifier>*</modifier></type><name>scas</name></decl></parameter>,
											<parameter><decl><type><name>int32</name></type> <name>partitioning_dimension_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>hashctl</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>keysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>entrysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DataNodeSlice</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>hcxt</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>all_data_node_slice_htab</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DataNodeChunkAssignment</name> <modifier>*</modifier></type><name>sca</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>all_data_node_slices</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* No overlapping can occur if there are chunks on only one data node (this
	 * covers also the case of a single chunk) */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>scas</name><operator>-&gt;</operator><name>num_nodes_with_chunks</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If there are multiple data nodes with chunks and they are not placed along
	 * a closed "space" dimension, we assume overlapping */</comment>
	<if_stmt><if>if <condition>(<expr><name>partitioning_dimension_id</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Use a hash table to track slice data node mappings by slice ID. The same
	 * slice can exist on multiple data nodes, causing an overlap across data nodes
	 * in the slice dimension. This hash table is used to quickly detect such
	 * "same-slice overlaps" and avoids having to do a more expensive range
	 * overlap check.
	 */</comment>
	<expr_stmt><expr><name>all_data_node_slice_htab</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"all_data_node_slices"</literal></expr></argument>,
										   <argument><expr><name><name>scas</name><operator>-&gt;</operator><name>total_num_chunks</name></name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>hashctl</name></expr></argument>,
										   <argument><expr><name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name> <operator>|</operator> <name>HASH_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name><name>scas</name><operator>-&gt;</operator><name>assignments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>sca</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>data_node_slices</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<comment type="block">/* Check each slice on the data node against the slices on other
		 * data nodes */</comment>
		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>sca-&gt;chunks</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>Chunk</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DataNodeSlice</name> <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>get_slice_for_dimension</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>partitioning_dimension_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Get or create a new entry in the global slice set */</comment>
			<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>all_data_node_slice_htab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>sliceid</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ss</name><operator>-&gt;</operator><name>node_serverid</name></name> <operator>=</operator> <name><name>sca</name><operator>-&gt;</operator><name>node_server_oid</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>data_node_slices</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>data_node_slices</name></expr></argument>, <argument><expr><call><name>ts_dimension_slice_copy</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* First detect "same-slice overlap", and then do a more expensive
			 * range overlap check */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>ss</name><operator>-&gt;</operator><name>node_serverid</name></name> <operator>!=</operator> <name><name>sca</name><operator>-&gt;</operator><name>node_server_oid</name></name> <operator>||</operator>
				<comment type="block">/* Check if the slice overlaps with the accumulated slices of
				 * other data nodes. This can be made more efficient by using an
				 * interval tree. */</comment>
				<call><name>dimension_slice_overlaps_with_others</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>all_data_node_slices</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* The same slice exists on (at least) two data nodes, or it
				 * overlaps with a different slice on another data node */</comment>
				<expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name>all_data_node_slice_htab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/* Add the data node's slice set to the set of all data nodes checked so
		 * far */</comment>
		<expr_stmt><expr><name>all_data_node_slices</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>all_data_node_slices</name></expr></argument>, <argument><expr><name>data_node_slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name>all_data_node_slice_htab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
