<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/debug.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>

<comment type="block">/*
 * This file contains source code that was copied and/or modified from
 * the PostgreSQL database, which is licensed under the open-source
 * PostgreSQL License. Please see the NOTICE at the top level
 * directory for a copy of the PostgreSQL License.
 */</comment>

<comment type="block">/*
 * The code is partially copied from nodes/print.c and
 * backend/optimizer/path/allpaths.c in the PostgreSQL source code, but we
 * cannot use it out of the box for two reasons:
 *
 * The first reason is that the PostgreSQL code prints to standard output
 * (hence to the log) and we want to build a string buffer to send back in a
 * notice, we cannot use the functions as they are but have re-implement them.
 *
 * We want to send back paths and plans in a notice to the client, to make it
 * possible to interactively investigate what paths and plans that queries
 * generate without having to access the log.
 *
 * The second reason is that the PostgreSQL code is not aware of our custom
 * nodes and the hierarchy below them, so we need to have special handling of
 * custom nodes to get out more information.
 *
 * (A third reason is that the printing functions are incomplete and do not
 * print items below certain nodes, such as Append and MergeAppend, and we are
 * using them for our purposes and need to have more information about
 * subpaths than what PostgreSQL prints.)
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/fdwapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/printtup.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/pg_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/clauses.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/varlena.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/extensible.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw/relinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw/fdw_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>append_expr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tsl_debug_append_pathlist</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>pathlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>,
									  <parameter><decl><type><name>bool</name></type> <name>isconsidered</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>reloptkind_name</name><index>[]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>RELOPT_BASEREL</name></expr>]</index> <operator>=</operator> <literal type="string">"BASEREL"</literal></expr>,
	<expr><index>[<expr><name>RELOPT_JOINREL</name></expr>]</index> <operator>=</operator> <literal type="string">"JOINREL"</literal></expr>,
	<expr><index>[<expr><name>RELOPT_OTHER_MEMBER_REL</name></expr>]</index> <operator>=</operator> <literal type="string">"OTHER_MEMBER_REL"</literal></expr>,
	<expr><index>[<expr><name>RELOPT_OTHER_JOINREL</name></expr>]</index> <operator>=</operator> <literal type="string">"OTHER_JOINREL"</literal></expr>,
	<expr><index>[<expr><name>RELOPT_UPPER_REL</name></expr>]</index> <operator>=</operator> <literal type="string">"UPPER_REL"</literal></expr>,
	<expr><index>[<expr><name>RELOPT_OTHER_UPPER_REL</name></expr>]</index> <operator>=</operator> <literal type="string">"OTHER_UPPER_REL"</literal></expr>,
	<expr><index>[<expr><name>RELOPT_DEADREL</name></expr>]</index> <operator>=</operator> <literal type="string">"DEADREL"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* clang-format off */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>upperrel_stage_name</name><index>[]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>UPPERREL_SETOP</name></expr>]</index> <operator>=</operator> <literal type="string">"SETOP"</literal></expr>,
	<expr><index>[<expr><name>UPPERREL_PARTIAL_GROUP_AGG</name></expr>]</index> <operator>=</operator> <literal type="string">"PARTIAL_GROUP_AGG"</literal></expr>,
	<expr><index>[<expr><name>UPPERREL_GROUP_AGG</name></expr>]</index> <operator>=</operator> <literal type="string">"GROUP_AGG"</literal></expr>,
	<expr><index>[<expr><name>UPPERREL_WINDOW</name></expr>]</index> <operator>=</operator> <literal type="string">"WINDOW"</literal></expr>,
	<expr><index>[<expr><name>UPPERREL_DISTINCT</name></expr>]</index> <operator>=</operator> <literal type="string">"DISTINCT"</literal></expr>,
	<expr><index>[<expr><name>UPPERREL_ORDERED</name></expr>]</index> <operator>=</operator> <literal type="string">"ORDERED"</literal></expr>,
	<expr><index>[<expr><name>UPPERREL_FINAL</name></expr>]</index> <operator>=</operator> <literal type="string">"FINAL"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* clang-format on */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fdw_rel_type_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>TS_FDW_RELINFO_HYPERTABLE_DATA_NODE</name></expr>]</index> <operator>=</operator> <literal type="string">"DATA_NODE"</literal></expr>,
	<expr><index>[<expr><name>TS_FDW_RELINFO_HYPERTABLE</name></expr>]</index> <operator>=</operator> <literal type="string">"HYPERTABLE"</literal></expr>,
	<expr><index>[<expr><name>TS_FDW_RELINFO_FOREIGN_TABLE</name></expr>]</index> <operator>=</operator> <literal type="string">"FOREIGN_TABLE"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_var_expr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Var</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>relname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>attname</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INNER_VAR</name></expr>:</case>
			<expr_stmt><expr><name>relname</name> <operator>=</operator> <literal type="string">"INNER"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>attname</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OUTER_VAR</name></expr>:</case>
			<expr_stmt><expr><name>relname</name> <operator>=</operator> <literal type="string">"OUTER"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>attname</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INDEX_VAR</name></expr>:</case>
			<expr_stmt><expr><name>relname</name> <operator>=</operator> <literal type="string">"INDEX"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>attname</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>&lt;=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rte</name> <operator>=</operator> <call><name>rt_fetch</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>relname</name> <operator>=</operator> <name><name>rte</name><operator>-&gt;</operator><name>eref</name><operator>-&gt;</operator><name>aliasname</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>attname</name> <operator>=</operator> <call><name>get_rte_attribute_name</name><argument_list>(<argument><expr><name>rte</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>relname</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_const_expr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Const</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Const</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>typoutput</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>typIsVarlena</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outputstr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>constisnull</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>getTypeOutputInfo</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>consttype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typoutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typIsVarlena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>outputstr</name> <operator>=</operator> <call><name>OidOutputFunctionCall</name><argument_list>(<argument><expr><name>typoutput</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>outputstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>outputstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_op_expr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OpExpr</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>OpExpr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opname</name> <init>= <expr><call><name>get_opname</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>opno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>append_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>get_leftop</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Expr</name> <operator>*</operator><operator>)</operator> <name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>opname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>opname</name></expr> </then><else>: <expr><literal type="string">"(invalid operator)"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>append_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>get_rightop</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Expr</name> <operator>*</operator><operator>)</operator> <name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>opname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>opname</name></expr> </then><else>: <expr><literal type="string">"(invalid operator)"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>append_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>get_leftop</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Expr</name> <operator>*</operator><operator>)</operator> <name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_func_expr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>FuncExpr</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>funcname</name> <init>= <expr><call><name>get_func_name</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s("</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>funcname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>funcname</name></expr> </then><else>: <expr><literal type="string">"(invalid function)"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>l</argument>, <argument>e-&gt;args</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>append_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lnext_compat</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_expr</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Var</name></expr>:</case>
			<expr_stmt><expr><call><name>append_var_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_Const</name></expr>:</case>
			<expr_stmt><expr><call><name>append_const_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_OpExpr</name></expr>:</case>
			<expr_stmt><expr><call><name>append_op_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
			<expr_stmt><expr><call><name>append_func_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"unknown expr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_restrict_clauses</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>clauses</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>append_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>parse</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lnext_compat</name><argument_list>(<argument><expr><name>clauses</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_relids</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Relids</name></type> <name>relids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name>relids</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rel_array_size</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rte_array</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>simple_rte_array</name><index>[<expr><name>x</name></expr>]</index></name><operator>-&gt;</operator><name><name>eref</name><operator>-&gt;</operator><name>aliasname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_pathkeys</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>pathkeys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ListCell</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>i</argument>, <argument>pathkeys</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PathKey</name> <modifier>*</modifier></type><name>pathkey</name> <init>= <expr><operator>(</operator><name>PathKey</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EquivalenceClass</name> <modifier>*</modifier></type><name>eclass</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>eclass</name> <operator>=</operator> <name><name>pathkey</name><operator>-&gt;</operator><name>pk_eclass</name></name></expr>;</expr_stmt>
		<comment type="block">/* chase up, in case pathkey is non-canonical */</comment>
		<while>while <condition>(<expr><name><name>eclass</name><operator>-&gt;</operator><name>ec_merged</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>eclass</name> <operator>=</operator> <name><name>eclass</name><operator>-&gt;</operator><name>ec_merged</name></name></expr>;</expr_stmt></block_content></block></while>

		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>foreach</name> <argument_list>(<argument>k</argument>, <argument>eclass-&gt;ec_members</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>EquivalenceMember</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><operator>(</operator><name>EquivalenceMember</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>append_expr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>mem</name><operator>-&gt;</operator><name>em_expr</name></name></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lnext_compat</name><argument_list>(<argument><expr><name>pathkeys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return a relation's name.
 *
 * This function guarantees the return of a valid name string for a
 * relation. For relations that have no unique name we return "-".
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_relation_name</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwRelInfo</name> <modifier>*</modifier></type><name>fdw_info</name> <init>= <expr><call><name>fdw_relinfo_get</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>fdw_info</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>fdw_info</name><operator>-&gt;</operator><name>relation_name</name><operator>-&gt;</operator><name>data</name></name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>reloptkind</name></name> <operator>==</operator> <name>RELOPT_BASEREL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>planner_rt_fetch</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="string">"-"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return a string name for the FDW type of a relation.
 *
 * For relations that are not an FDW relation we simply return "-".
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_fdw_relation_typename</name><parameter_list>(<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwRelInfo</name> <modifier>*</modifier></type><name>fdw_info</name> <init>= <expr><call><name>fdw_relinfo_get</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>fdw_info</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>fdw_rel_type_names</name><index>[<expr><name><name>fdw_info</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="string">"-"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tsl_debug_append_path</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>join</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>subpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>subpath_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptype</name> <operator>=</operator> <call><name>ts_get_node_name</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_SubqueryScanPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>SubqueryScanPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CustomPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath_list</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>CustomPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>custom_paths</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NestPath</name></expr>:</case>
		<case>case <expr><name>T_MergePath</name></expr>:</case>
		<case>case <expr><name>T_HashPath</name></expr>:</case>
			<expr_stmt><expr><name>join</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AppendPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath_list</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>AppendPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpaths</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MergeAppendPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath_list</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>MergeAppendPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpaths</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MaterialPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>MaterialPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_UniquePath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>UniquePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GatherPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>GatherPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GatherMergePath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>GatherMergePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ProjectionPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>ProjectionPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ProjectSetPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>ProjectSetPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SortPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>SortPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GroupPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>GroupPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_UpperUniquePath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>UpperUniquePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AggPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>AggPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GroupingSetsPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>GroupingSetsPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MinMaxAggPath</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>T_WindowAggPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>WindowAggPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SetOpPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>SetOpPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RecursiveUnionPath</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>T_LockRowsPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>LockRowsPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ModifyTablePath</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
			<expr_stmt><expr><name>subpath_list</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>ModifyTablePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpaths</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>subpath_list</name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>ModifyTablePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<case>case <expr><name>T_LimitPath</name></expr>:</case>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>LimitPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>subpath</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
						 <argument><expr><literal type="string">" [rel type: %s, kind: %s"</literal></expr></argument>,
						 <argument><expr><call><name>get_fdw_relation_typename</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name><name>reloptkind_name</name><index>[<expr><name><name>path</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>reloptkind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", parent's base rels: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>append_relids</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>relids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>param_info</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" required_outer ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>append_relids</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>param_info</name><operator>-&gt;</operator><name>ppi_req_outer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" rows=%.0f"</literal></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>pathkeys</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" with pathkeys: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>append_pathkeys</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>pathkeys</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>parse</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>join</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JoinPath</name> <modifier>*</modifier></type><name>jp</name> <init>= <expr><operator>(</operator><name>JoinPath</name> <operator>*</operator><operator>)</operator> <name>path</name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"  clauses: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>append_restrict_clauses</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>jp</name><operator>-&gt;</operator><name>joinrestrictinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MergePath</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MergePath</name> <modifier>*</modifier></type><name>mp</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>MergePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
							 <argument><expr><literal type="string">"  sortouter=%d sortinner=%d materializeinner=%d\n"</literal></expr></argument>,
							 <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>outersortkeys</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
							 <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>innersortkeys</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
							 <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>mp</name><operator>-&gt;</operator><name>materialize_inner</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>tsl_debug_append_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>jp</name><operator>-&gt;</operator><name>outerjoinpath</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tsl_debug_append_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>jp</name><operator>-&gt;</operator><name>innerjoinpath</name></name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>subpath</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tsl_debug_append_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>subpath_list</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tsl_debug_append_pathlist</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath_list</name></expr></argument>, <argument><expr><name>indent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tsl_debug_append_pathlist</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>pathlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>isconsidered</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>cell</argument>, <argument>pathlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name>isconsidered</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>ConsideredPath</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>path</name></expr> </then><else>: <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>tsl_debug_append_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether a path is the origin of a considered path.
 *
 * It is not possible to do a simple memcmp() of paths here because a path
 * could be a (semi-)shallow copy. Therefore we use the origin of the
 * ConsideredPath object.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>path_is_origin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Path</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ConsideredPath</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>p2</name><operator>-&gt;</operator><name>origin</name></name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>p1</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Print paths that were pruned during planning.
 *
 * The pruned paths are those that have been considered but are not in the
 * rel's pathlist.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tsl_debug_append_pruned_pathlist</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TsFdwRelInfo</name> <modifier>*</modifier></type><name>fdw_info</name> <init>= <expr><call><name>fdw_relinfo_get</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc1</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>fdw_info</name> <operator>||</operator> <name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc1</argument>, <argument>rel-&gt;pathlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc2</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG13_LT</name></expr></cpp:if>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<macro><name>foreach</name> <argument_list>(<argument>lc2</argument>, <argument>fdw_info-&gt;considered_paths</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ConsideredPath</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>(</operator><name>ConsideredPath</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>path_is_origin</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name> <operator>=</operator>
					<call><name>list_delete_cell_compat</name><argument_list>(<argument><expr><name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name></expr></argument>, <argument><expr><name>lc2</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fdw_utils_free_path</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG13_LT</name></expr></cpp:if>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>lc2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Pruned paths:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsl_debug_append_pathlist</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc1</argument>, <argument>fdw_info-&gt;considered_paths</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>fdw_utils_free_path</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fdw_info</name><operator>-&gt;</operator><name>considered_paths</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tsl_debug_log_rel_with_paths</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>UpperRelationKind</name> <modifier>*</modifier></type><name>upper_stage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>upper_stage</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Upper rel stage %s:\n"</literal></expr></argument>, <argument><expr><name><name>upperrel_stage_name</name><index>[<expr><operator>*</operator><name>upper_stage</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
					 <argument><expr><literal type="string">"RELOPTINFO [rel name: %s, type: %s, kind: %s, base rel names: "</literal></expr></argument>,
					 <argument><expr><call><name>get_relation_name</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>get_fdw_relation_typename</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name><name>reloptkind_name</name><index>[<expr><name><name>rel</name><operator>-&gt;</operator><name>reloptkind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>append_relids</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" rows=%.0f width=%d\n"</literal></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>reltarget</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Path list:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsl_debug_append_pathlist</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tsl_debug_append_pruned_pathlist</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>cheapest_parameterized_paths</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\nCheapest parameterized paths:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tsl_debug_append_pathlist</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>cheapest_parameterized_paths</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>cheapest_startup_path</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\nCheapest startup path:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tsl_debug_append_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>cheapest_startup_path</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>cheapest_total_path</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\nCheapest total path:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tsl_debug_append_path</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>cheapest_total_path</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
