<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/planner.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/fdwapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/async_append.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/skip_scan/skip_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw/data_node_scan_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw/fdw.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fdw/relinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/hypertable_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/compress_dml/compress_dml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/frozen_chunk_dml/frozen_chunk_dml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/decompress_chunk/decompress_chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/data_node_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/data_node_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/gapfill/gapfill.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSM_EXTENSION_NAME</name></cpp:macro> <cpp:value>"timescaledb_osm"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_dist_hypertable_involved</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>rti</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>rti</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rti</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rel_array_size</name></name></expr>;</condition> <incr><expr><name>rti</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>simple_rte_array</name><index>[<expr><name>rti</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>distributed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ts_rte_is_hypertable</name><argument_list>(<argument><expr><name>rte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>distributed</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>distributed</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_GE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>osm_present</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_osm_present</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>osm_present</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>osm_oid</name> <init>= <expr><call><name>get_extension_oid</name><argument_list>(<argument><expr><name>OSM_EXTENSION_NAME</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>osm_present</name> <operator>=</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><name>osm_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>osm_present</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>tsl_create_upper_paths_hook</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>UpperRelationKind</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>input_rel</name></decl></parameter>,
							<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>output_rel</name></decl></parameter>, <parameter><decl><type><name>TsRelType</name></type> <name>input_reltype</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
							<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>dist_ht</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>input_reltype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TS_REL_HYPERTABLE</name></expr>:</case>
		<case>case <expr><name>TS_REL_HYPERTABLE_CHILD</name></expr>:</case>
			<expr_stmt><expr><name>dist_ht</name> <operator>=</operator> <call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>dist_ht</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>data_node_scan_create_upper_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>, <argument><expr><name>input_rel</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<switch>switch <condition>(<expr><name>stage</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>UPPERREL_GROUP_AGG</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>input_reltype</name> <operator>!=</operator> <name>TS_REL_HYPERTABLE_CHILD</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>plan_add_gapfill</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>UPPERREL_WINDOW</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>input_rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CustomPath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>gapfill_adjust_window_targetlist</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>input_rel</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>UPPERREL_DISTINCT</name></expr>:</case>
			<expr_stmt><expr><call><name>tsl_skip_scan_paths_add</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>input_rel</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UPPERREL_FINAL</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>ts_guc_enable_async_append</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>parse</name><operator>-&gt;</operator><name>resultRelation</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				<call><name>is_dist_hypertable_involved</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>async_append_add_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tsl_set_rel_pathlist_query</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>,
						   <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We can get here via query on hypertable in that case reloptkind
	 * will be RELOPT_OTHER_MEMBER_REL or via direct query on chunk
	 * in that case reloptkind will be RELOPT_BASEREL.
	 * If we get here via SELECT * FROM &lt;chunk&gt;, we decompress the chunk,
	 * unless the query was SELECT * FROM ONLY &lt;chunk&gt;.
	 * We check if it is the ONLY case by calling ts_rte_is_marked_for_expansion.
	 * Respecting ONLY here is important to not break postgres tools like pg_dump.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ts_guc_enable_transparent_decompression</name> <operator>&amp;&amp;</operator> <name>ht</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>reloptkind</name></name> <operator>==</operator> <name>RELOPT_OTHER_MEMBER_REL</name> <operator>||</operator>
		 <operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>reloptkind</name></name> <operator>==</operator> <name>RELOPT_BASEREL</name> <operator>&amp;&amp;</operator> <call><name>ts_rte_is_marked_for_expansion</name><argument_list>(<argument><expr><name>rte</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		<call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>rel</name><operator>-&gt;</operator><name>fdw_private</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><operator>(</operator><name>TimescaleDBPrivate</name> <operator>*</operator><operator>)</operator> <name><name>rel</name><operator>-&gt;</operator><name>fdw_private</name></name><operator>)</operator><operator>-&gt;</operator><name>compressed</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_decompress_chunk_generate_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tsl_set_rel_pathlist_dml</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>,
						 <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_GE</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>is_osm_present</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>&amp;&amp;</operator> <call><name>ts_chunk_is_frozen</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>rel-&gt;pathlist</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier><modifier>*</modifier></type><name>pathptr</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>*</operator><name>pathptr</name> <operator>=</operator> <call><name>frozen_chunk_dml_generate_path</name><argument_list>(<argument><expr><operator>*</operator><name>pathptr</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>TS_HYPERTABLE_HAS_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>rel-&gt;pathlist</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier><modifier>*</modifier></type><name>pathptr</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>*</operator><name>pathptr</name> <operator>=</operator> <call><name>compress_chunk_dml_generate_paths</name><argument_list>(<argument><expr><operator>*</operator><name>pathptr</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The fdw needs to expand a distributed hypertable inside the `GetForeignPath`
 * callback. But, since the hypertable base table is not a foreign table, that
 * callback would not normally be called. Thus, we call it manually in this hook.
 */</comment>
<function><type><name>void</name></type>
<name>tsl_set_rel_pathlist</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>is_dummy_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Don't have to create any other path if the relation is already proven
		 * to be empty.
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>=
		<expr><call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>CACHE_FLAG_MISSING_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>fdw_private</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ht</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FdwRoutine</name> <modifier>*</modifier></type><name>fdw</name> <init>= <expr><operator>(</operator><name>FdwRoutine</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(
			<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timescaledb_fdw_handler</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>fdw</name><operator>-&gt;</operator><name>GetForeignRelSize</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fdw</name><operator>-&gt;</operator><name>GetForeignPaths</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>ts_debug_optimizer_flags</name><operator>.</operator><name>show_rel</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>tsl_debug_log_rel_with_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>UpperRelationKind</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check session variable to disable distributed insert with COPY.
 *
 * Allows testing and comparing different insert plans. Not a full GUC, since
 * in most cases this is not something that users are expected to disable.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>copy_mode_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enable_copy</name> <init>=
		<expr><call><name>GetConfigOption</name><argument_list>(<argument><expr><literal type="string">"timescaledb.enable_distributed_insert_with_copy"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Default to enabled */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>enable_copy</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>enable_copy</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Query tree walker to examine RTE contents for a distributed hypertable.
 * Return "true" if we have identified a distributed hypertable. This short-circuits
 * the tree traversal because we have found what we were looking for.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>distributed_rtes_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isdistributed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>RangeTblEntry</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><operator>(</operator><name>RangeTblEntry</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_rte_is_hypertable</name><argument_list>(<argument><expr><name>rte</name></expr></argument>, <argument><expr><name>isdistributed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* if isdistributed is already set, then no need to walk further */</comment>
		<return>return <expr><operator>*</operator><name>isdistributed</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Recurse into range tables */</comment>
		<return>return <expr><call><name>range_table_walker</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>rtable</name></expr></argument>,
								  <argument><expr><name>distributed_rtes_walker</name></expr></argument>,
								  <argument><expr><name>isdistributed</name></expr></argument>,
								  <argument><expr><name>QTW_EXAMINE_RTES_BEFORE</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>distributed_rtes_walker</name></expr></argument>, <argument><expr><name>isdistributed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decide on a plan to use for distributed inserts.
 */</comment>
<function><type><name>Path</name> <modifier>*</modifier></type>
<name>tsl_create_distributed_insert_path</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>ModifyTablePath</name> <modifier>*</modifier></type><name>mtpath</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>hypertable_rti</name></decl></parameter>,
								   <parameter><decl><type><name>int</name></type> <name>subplan_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>copy_possible</name> <init>= <expr><call><name>copy_mode_enabled</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Check if it is possible to use COPY in the backend.
	 *
	 * There are three cases where we cannot use COPY:
	 *
	 * 1. ON CONFLICT clause exists
	 *
	 * 2. RETURNING clause exists and tuples are expected to be modified on
	 *    INSERT by a trigger.
	 *
	 * 3. INSERT.. SELECT case. If the relation being inserted into and the
	 *    relation in the SELECT are both distributed hypertables then do not
	 *    use COPY. This is because only one connection is maintained to data
	 *    nodes in order to maintain a single snapshot. Normally, it is possible to
	 *    multiplex multiple queries on a connection using a CURSOR, but with
	 *    COPY the connection is switched into a COPY_IN state, making
	 *    multiplexing impossible. It might be possible to use two connections to
	 *    the same data node (one to ingest data into src table using COPY and
	 *    one to SELECT from dst table), but that requires coordinating on a single
	 *    snapshot to use on both connections. This is a potential future
	 *    optimization.
	 *
	 * For case (2), we assume that we can return the original tuples if there
	 * are no triggers on the root hypertable (we also assume that chunks on
	 * data nodes aren't modified with their own triggers). Conversely, if
	 * there are any non-known triggers, we cannot use COPY in the backend
	 * when there is a RETURNING clause.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>copy_possible</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>mtpath</name><operator>-&gt;</operator><name>onconflict</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>copy_possible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>NIL</name> <operator>!=</operator> <name><name>mtpath</name><operator>-&gt;</operator><name>returningLists</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>planner_rt_fetch</name><argument_list>(<argument><expr><name>hypertable_rti</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>Relation</name></type> <name>rel</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rel</name><operator>-&gt;</operator><name>trigdesc</name><operator>-&gt;</operator><name>numtriggers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>Trigger</name> <modifier>*</modifier></type><name>trig</name> <init>= <expr><operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>trigdesc</name><operator>-&gt;</operator><name>triggers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * Check for BEFORE INSERT triggers as those are the ones that can
				 * modify a tuple.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgname</name></name></expr></argument>, <argument><expr><name>INSERT_BLOCKER_NAME</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
					<call><name>TRIGGER_FOR_INSERT</name><argument_list>(<argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgtype</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TRIGGER_FOR_BEFORE</name><argument_list>(<argument><expr><name><name>trig</name><operator>-&gt;</operator><name>tgtype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>copy_possible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check if it's a INSERT .. SELECT case involving dist hypertables */</comment>
		<if_stmt><if>if <condition>(<expr><name>copy_possible</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>planner_rt_fetch</name><argument_list>(<argument><expr><name>hypertable_rti</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>distributed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* if src hypertable is distributed then only further checks are needed */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ts_rte_is_hypertable</name><argument_list>(<argument><expr><name>rte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>distributed</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>distributed</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* check if it's indeed INSERT .. SELECT */</comment>
				<macro><name>foreach</name> <argument_list>(<argument>l</argument>, <argument>root-&gt;parse-&gt;rtable</argument>)</argument_list></macro>
				<block>{<block_content>
					<expr_stmt><expr><name>rte</name> <operator>=</operator> <operator>(</operator><name>RangeTblEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * check if the subquery SELECT is referring to a distributed hypertable.
					 * Note that if the target distributed hypertable and the distributed
					 * hypertables that are part of the SELECT query are disjoint datanodes sets
					 * then we can allow the existing COPY optimization. However, this is not a very
					 * common case and not sure if it's worth optimizing for now.
					 *
					 * Note that the SELECT could be a complicated one using joins, further
					 * subqueries etc. So we do a query tree walk to examine rtes
					 * to check for existence of a distributed hypertable
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_SUBQUERY</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>distributed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>jtnode</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>root</name><operator>-&gt;</operator><name>parse</name><operator>-&gt;</operator><name>jointree</name></name></expr></init></decl>;</decl_stmt>
						<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>jtnode</name></expr></argument>, <argument><expr><name>FromExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name>FromExpr</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><operator>(</operator><name>FromExpr</name> <operator>*</operator><operator>)</operator> <name>jtnode</name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
							<macro><name>foreach</name> <argument_list>(<argument>l</argument>, <argument>f-&gt;fromlist</argument>)</argument_list></macro>
							<block>{<block_content>
								<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>RangeTblRef</name></expr></argument>)</argument_list></call></expr>)</condition>
								<block>{<block_content>
									<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>r</name> <init>=
										<expr><call><name>planner_rt_fetch</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RangeTblRef</name> <operator>*</operator><operator>)</operator> <name>n</name><operator>)</operator><operator>-&gt;</operator><name>rtindex</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<switch>switch <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>rtekind</name></name></expr>)</condition>
									<block>{<block_content>
										<case>case <expr><name>RTE_RELATION</name></expr>:</case>
											<expr_stmt><expr><call><name>distributed_rtes_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>distributed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
											<break>break;</break>
										<case>case <expr><name>RTE_SUBQUERY</name></expr>:</case>
											<expr_stmt><expr><call><name>distributed_rtes_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>subquery</name></name></expr></argument>,
																	<argument><expr><operator>&amp;</operator><name>distributed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
											<break>break;</break>
										<default>default:</default>
											<break>break;</break>
									</block_content>}</block></switch>
									<if_stmt><if>if <condition>(<expr><name>distributed</name></expr>)</condition>
									<block>{<block_content>
										<expr_stmt><expr><name>copy_possible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
										<break>break;</break>
									</block_content>}</block></if></if_stmt>
								</block_content>}</block></if></if_stmt>
							</block_content>}</block>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>copy_possible</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>data_node_copy_path_create</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>mtpath</name></expr></argument>, <argument><expr><name>hypertable_rti</name></expr></argument>, <argument><expr><name>subplan_index</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>data_node_dispatch_path_create</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>mtpath</name></expr></argument>, <argument><expr><name>hypertable_rti</name></expr></argument>, <argument><expr><name>subplan_index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
