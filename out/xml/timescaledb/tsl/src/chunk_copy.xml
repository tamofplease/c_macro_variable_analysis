<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/tsl/src/chunk_copy.c"><comment type="block">/*
 * This file and its contents are licensed under the Timescale License.
 * Please see the included NOTICE for copyright information and
 * LICENSE-TIMESCALE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;foreign/foreign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_authid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_foreign_server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_foreign_table.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/dependency.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/acl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/inval.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/tuplestore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/palloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/executor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_func.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/spi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;replication/slot.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/chunk_data_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errors.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;error_utils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hypertable_cache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"data_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote/dist_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dist_util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_INIT</name></cpp:macro> <cpp:value>"init"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_CREATE_EMPTY_CHUNK</name></cpp:macro> <cpp:value>"create_empty_chunk"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_CREATE_EMPTY_COMPRESSED_CHUNK</name></cpp:macro> <cpp:value>"create_empty_compressed_chunk"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_CREATE_PUBLICATION</name></cpp:macro> <cpp:value>"create_publication"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_CREATE_REPLICATION_SLOT</name></cpp:macro> <cpp:value>"create_replication_slot"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_CREATE_SUBSCRIPTION</name></cpp:macro> <cpp:value>"create_subscription"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_SYNC_START</name></cpp:macro> <cpp:value>"sync_start"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_SYNC</name></cpp:macro> <cpp:value>"sync"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_DROP_PUBLICATION</name></cpp:macro> <cpp:value>"drop_publication"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_DROP_SUBSCRIPTION</name></cpp:macro> <cpp:value>"drop_subscription"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_ATTACH_CHUNK</name></cpp:macro> <cpp:value>"attach_chunk"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_ATTACH_COMPRESSED_CHUNK</name></cpp:macro> <cpp:value>"attach_compressed_chunk"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_DELETE_CHUNK</name></cpp:macro> <cpp:value>"delete_chunk"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCS_COMPLETE</name></cpp:macro> <cpp:value>"complete"</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>ChunkCopyStage</name></name></type> <name>ChunkCopyStage</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ChunkCopy</name></name></type> <name>ChunkCopy</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>chunk_copy_stage_func</name>)<parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>ChunkCopyStage</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chunk_copy_stage_func</name></type> <name>function</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chunk_copy_stage_func</name></type> <name>function_cleanup</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* To track a chunk move or copy activity */</comment>
<struct>struct <name>ChunkCopy</name>
<block>{
	<comment type="block">/* catalog data */</comment>
	<decl_stmt><decl><type><name>FormData_chunk_copy_operation</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_compression_chunk_size</name></type> <name>fd_ccs</name></decl>;</decl_stmt>
	<comment type="block">/* current stage being executed */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ChunkCopyStage</name> <modifier>*</modifier></type><name>stage</name></decl>;</decl_stmt>
	<comment type="block">/* chunk to copy */</comment>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
	<comment type="block">/* from/to foreign servers */</comment>
	<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>src_server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ForeignServer</name> <modifier>*</modifier></type><name>dst_server</name></decl>;</decl_stmt>
	<comment type="block">/* temporary memory context */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>chunk_copy_operation_make_tuple</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormData_chunk_copy_operation</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_chunk_copy_operation</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_chunk_copy_operation</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_operation_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_backend_pid</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>backend_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_completed_stage</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>completed_stage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_time_start</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>time_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>chunk_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_compressed_chunk_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_source_node_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_dest_node_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_delete_on_src_node</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>delete_on_src_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_operation_insert_rel</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormData_chunk_copy_operation</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>new_tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>new_tuple</name> <operator>=</operator> <call><name>chunk_copy_operation_make_tuple</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_insert</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_operation_insert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormData_chunk_copy_operation</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>catalog</name> <operator>=</operator> <call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>chunk_copy_operation_insert_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>chunk_copy_operation_tuple_update</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_chunk_copy_operation</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_chunk_copy_operation</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ts_scanner_fetch_heap_tuple</name><argument_list>(<argument><expr><name>ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>new_tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><call><name>ts_scanner_get_tupledesc</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We only update the "completed_stage" and "compressed_chunk_name" fields */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>stage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_completed_stage</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>namein</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>stage</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_chunk_copy_operation_compressed_chunk_name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>ts_scanner_get_tupledesc</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_update_tid</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><call><name>ts_scanner_get_tuple_tid</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SCAN_DONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>chunk_copy_operation_scan_update_by_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation_id</name></decl></parameter>, <parameter><decl><type><name>tuple_found_func</name></type> <name>tuple_found</name></decl></parameter>,
									   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScannerCtx</name></type> <name>scanctx</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>index</name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION</name></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION_PKEY_IDX</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>limit</name> <operator>=</operator> <literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>scankey</name> <operator>=</operator> <name>scankey</name></expr>,
		<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>,
		<expr><operator>.</operator><name>tuple_found</name> <operator>=</operator> <name>tuple_found</name></expr>,
		<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>lockmode</name></expr>,
		<expr><operator>.</operator><name>scandirection</name> <operator>=</operator> <name>ForwardScanDirection</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_chunk_copy_operation_idx_operation_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_NAMEEQ</name></expr></argument>,
				<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>operation_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_scanner_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_operation_update</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NameData</name></type> <name>application_name</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>application_name</name><operator>.</operator><name>data</name></name></expr></argument>,
			 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>application_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,
			 <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name><operator>.</operator><name>data</name></name></expr></argument>,
			 <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>stage</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgstat_report_appname</name><argument_list>(<argument><expr><name><name>application_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>chunk_copy_operation_scan_update_by_id</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><name>chunk_copy_operation_tuple_update</name></expr></argument>,
										   <argument><expr><name>cc</name></expr></argument>,
										   <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>chunk_copy_operation_tuple_delete</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_delete_tid</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><call><name>ts_scanner_get_tuple_tid</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>chunk_copy_operation_delete_by_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScannerCtx</name></type> <name>scanctx</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>index</name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION</name></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION_PKEY_IDX</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>limit</name> <operator>=</operator> <literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>scankey</name> <operator>=</operator> <name>scankey</name></expr>,
		<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>tuple_found</name> <operator>=</operator> <name>chunk_copy_operation_tuple_delete</name></expr>,
		<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>RowExclusiveLock</name></expr>,
		<expr><operator>.</operator><name>scandirection</name> <operator>=</operator> <name>ForwardScanDirection</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_chunk_copy_operation_idx_operation_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_NAMEEQ</name></expr></argument>,
				<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>operation_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_scanner_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_setup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_node</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name></type> <name>delete_on_src_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>, <decl><type ref="prev"/><name>mcxt</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dist_util_membership</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>DIST_MEMBER_ACCESS_NODE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function must be run on the access node only"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The chunk and foreign server info needs to be on a memory context
	 * that will survive moving to a new transaction for each stage
	 */</comment>
	<expr_stmt><expr><name>mcxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>PortalContext</name></expr></argument>, <argument><expr><literal type="string">"chunk move activity"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>mcxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* It has to be a foreign table chunk */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_FOREIGN_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a valid remote chunk"</literal></expr></argument>, <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
												 <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>has_rolreplication</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name>ts_rel_get_owner</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser, replication role, or hypertable owner to copy/move "</literal>
						 <literal type="string">"chunk to data node"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We have already checked above for superuser/replication/owner perms. There's no
	 * need to check again if the user has "ownership" on the hypertable now.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"hypertable \"%s\" is not distributed"</literal></expr></argument>,
						<argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>main_table_relid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>src_server</name></name> <operator>=</operator> <call><name>data_node_get_foreign_server</name><argument_list>(<argument><expr><name>src_node</name></expr></argument>, <argument><expr><name>ACL_NO_CHECK</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>src_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>dst_server</name></name> <operator>=</operator> <call><name>data_node_get_foreign_server</name><argument_list>(<argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>ACL_NO_CHECK</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>dst_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ensure that source and destination data nodes are not the same */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>src_server</name></name> <operator>==</operator> <name><name>cc</name><operator>-&gt;</operator><name>dst_server</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"source and destination data node match"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Check that src_node is a valid DN and that chunk exists on it */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_chunk_has_data_node</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk \"%s\" does not exist on source data node \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>src_node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Check that dst_node is a valid DN and that chunk does not exist on it */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ts_chunk_has_data_node</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk \"%s\" already exists on destination data node \"%s\""</literal></expr></argument>,
						<argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>chunk_relid</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>dst_node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Populate the FormData_chunk_copy_operation structure for use by various stages
	 *
	 * The operation_id will be populated in the chunk_copy_stage_init function.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>backend_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>completed_stage</name></name></expr></argument>, <argument><expr><name>CCS_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>time_start</name></name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>chunk_id</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>delete_on_src_node</name></name> <operator>=</operator> <name>delete_on_src_node</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Commit to get out of starting transaction. This will also pop active
	 * snapshots.
	 */</comment>
	<expr_stmt><expr><call><name>SPI_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_finish</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Done using this long lived memory context */</comment>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Start a transaction for the final outer transaction */</comment>
	<expr_stmt><expr><call><name>SPI_start_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_init</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>id</name></decl>;</decl_stmt>

	<comment type="block">/* check if the user has specified the operation id, if not generate one */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Get the operation id for this chunk move/copy activity. The naming
		 * convention is "ts_copy_seq-id_chunk-id".
		 */</comment>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>ts_catalog_table_next_seq_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHUNK_COPY_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name><operator>.</operator><name>data</name></name></expr></argument>,
				 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
				 <argument><expr><literal type="string">"ts_copy_%d_%d"</literal></expr></argument>,
				 <argument><expr><name>id</name></expr></argument>,
				 <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Persist the Formdata entry in the catalog */</comment>
	<expr_stmt><expr><call><name>chunk_copy_operation_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_init_cleanup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Failure in initial stages, delete this entry from the catalog */</comment>
	<expr_stmt><expr><call><name>chunk_copy_operation_delete_by_id</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_empty_chunk</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Create an empty chunk table on the dst_node */</comment>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
												 <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>chunk_api_call_create_empty_chunk_table</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_empty_chunk_cleanup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Drop the chunk table on the dst_node. We use the API instead of just
	 * "DROP TABLE" because some metadata cleanup might also be needed
	 */</comment>
	<expr_stmt><expr><call><name>chunk_api_call_chunk_drop_replica</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>,
									  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>dst_server</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_get_source_compressed_chunk_name</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* Get compressed chunk name on the source data node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT c2.table_name "</literal>
				   <literal type="string">"FROM _timescaledb_catalog.chunk c1 "</literal>
				   <literal type="string">"JOIN _timescaledb_catalog.chunk c2 ON (c1.compressed_chunk_id = c2.id) "</literal>
				   <literal type="string">"WHERE c1.schema_name = %s and c1.table_name = %s"</literal></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Set compressed chunk name of the source data node */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to get corresponding compressed chunk name from the source data "</literal>
						<literal type="string">"node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name><operator>.</operator><name>data</name></name></expr></argument>,
			 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s"</literal></expr></argument>,
			 <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_get_source_compressed_chunk_stats</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* Get compressed chunk statistics from the source data node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT cs.uncompressed_heap_size, cs.uncompressed_toast_size, "</literal>
				   <literal type="string">"cs.uncompressed_index_size, cs.compressed_heap_size, "</literal>
				   <literal type="string">"cs.compressed_toast_size, cs.compressed_index_size, "</literal>
				   <literal type="string">"cs.numrows_pre_compression, cs.numrows_post_compression "</literal>
				   <literal type="string">"FROM _timescaledb_catalog.compression_chunk_size cs "</literal>
				   <literal type="string">"JOIN _timescaledb_catalog.chunk c ON (cs.chunk_id = c.id) "</literal>
				   <literal type="string">"WHERE c.schema_name = %s and c.table_name = %s"</literal></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to get corresponding compressed chunk stats from the source data "</literal>
						<literal type="string">"node"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>uncompressed_heap_size</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>uncompressed_toast_size</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>uncompressed_index_size</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>compressed_heap_size</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>compressed_toast_size</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>compressed_index_size</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>numrows_pre_compression</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>numrows_post_compression</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_create_dest_empty_compressed_chunk</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

	<comment type="block">/* Create empty compressed chunk table in the compressed hypertable of the
	 * source chunk on the destination data node */</comment>
	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
												 <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator>
		<call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT %s.create_chunk_table(h2.schema_name || '.' || h2.table_name, "</literal>
				 <literal type="string">"'{}'::jsonb, %s, %s) "</literal>
				 <literal type="string">"FROM _timescaledb_catalog.hypertable h1 "</literal>
				 <literal type="string">"JOIN _timescaledb_catalog.hypertable h2 ON (h1.compressed_hypertable_id = h2.id) "</literal>
				 <literal type="string">"WHERE h1.table_name = %s"</literal></expr></argument>,
				 <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>,
				 <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_empty_compressed_chunk</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_chunk_is_compressed</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Get compressed chunk name from the source data node */</comment>
	<expr_stmt><expr><call><name>chunk_copy_get_source_compressed_chunk_name</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get compressed chunk stats from the source data node */</comment>
	<expr_stmt><expr><call><name>chunk_copy_get_source_compressed_chunk_stats</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create empty compressed chunk table in the compressed hypertable of the
	 * source chunk on the destination data node */</comment>
	<expr_stmt><expr><call><name>chunk_copy_create_dest_empty_compressed_chunk</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_empty_compressed_chunk_cleanup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"DROP TABLE IF EXISTS %s.%s"</literal></expr></argument>,
				   <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>,
				   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_publication</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<comment type="block">/* Create publication on the source data node, include compressed
	 * chunk if necessary */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ts_chunk_is_compressed</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>table_list</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s, %s "</literal></expr></argument>,
							  <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
														 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>,
														 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>table_list</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>,
							  <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
														 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"CREATE PUBLICATION %s FOR TABLE %s"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name>table_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the publication */</comment>
	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_replication_slot</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * CREATE SUBSCRIPTION from a database within the same database cluster will hang,
	 * create the replication slot separately before creating the subscription
	 */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT pg_create_logical_replication_slot('%s', 'pgoutput')"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_replication_slot_cleanup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* Check if the slot exists on the source data node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT 1 FROM pg_catalog.pg_replication_slots WHERE slot_name = '%s'"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Drop replication slot on the source data node only if it exists */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT pg_drop_replication_slot('%s')"</literal></expr></argument>,
					   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_publication_cleanup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Check if the replication slot exists and clean it up if so. This might
	 * happen if there's a failure in the create_replication_slot stage but
	 * PG might end up creating the slot even though we issued a ROLLBACK
	 */</comment>
	<expr_stmt><expr><call><name>chunk_copy_stage_create_replication_slot_cleanup</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check if the publication exists on the source data node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT 1 FROM pg_catalog.pg_publication WHERE pubname = '%s'"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Drop publication on the source node only if it exists */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"DROP PUBLICATION %s"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Drop the publication */</comment>
		<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Execute a logical SUBSCRIPTION related command on the data node */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_exec_subscription_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT timescaledb_experimental.subscription_exec($sql$%s$sql$)"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_subscription</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_string</name></decl>;</decl_stmt>

	<comment type="block">/* Prepare connection string to the source node */</comment>
	<expr_stmt><expr><name>connection_string</name> <operator>=</operator> <call><name>remote_connection_get_connstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"CREATE SUBSCRIPTION %s CONNECTION '%s' PUBLICATION %s"</literal>
				   <literal type="string">" WITH (create_slot = false, enabled = false)"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name>connection_string</name></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_create_subscription_cleanup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* Check if the subscription exists on the destination data node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT 1 FROM pg_catalog.pg_subscription WHERE subname = '%s'"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Cleanup only if the subscription exists */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dest_dn_list</name> <init>= <expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Stop data transfer on the destination node */</comment>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"ALTER SUBSCRIPTION %s DISABLE"</literal></expr></argument>,
					   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dest_dn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Disassociate the subscription from the replication slot first */</comment>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"ALTER SUBSCRIPTION %s SET (slot_name = NONE)"</literal></expr></argument>,
					   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dest_dn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Drop the subscription now */</comment>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"DROP SUBSCRIPTION %s"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dest_dn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_sync_start</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<comment type="block">/* Start data transfer on the destination node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"ALTER SUBSCRIPTION %s ENABLE"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_sync_start_cleanup</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* Check if the subscription exists on the destination data node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT 1 FROM pg_catalog.pg_subscription WHERE subname = '%s'"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Alter subscription only if it exists */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Stop data transfer on the destination node */</comment>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"ALTER SUBSCRIPTION %s DISABLE"</literal></expr></argument>,
					   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_sync</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Transaction blocks run in REPEATABLE READ mode in the connection pool.
	 * However this wait_subscription_sync procedure needs to refresh the subcription
	 * sync status data and hence needs a READ COMMITTED transaction isolation
	 * level for that.
	 */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SET transaction_isolation TO 'READ COMMITTED'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wait until data transfer finishes in its own transaction */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"CALL _timescaledb_internal.wait_subscription_sync(%s, %s)"</literal></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wait until compressed chunk being copied */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ts_chunk_is_compressed</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"CALL _timescaledb_internal.wait_subscription_sync(%s, %s)"</literal></expr></argument>,
					   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_drop_subscription</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dest_dn_list</name> <init>= <expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Stop data transfer on the destination node */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"ALTER SUBSCRIPTION %s DISABLE"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dest_dn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Disassociate the subscription from the replication slot first */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"ALTER SUBSCRIPTION %s SET (slot_name = NONE)"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dest_dn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Drop the subscription now */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"DROP SUBSCRIPTION %s"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>chunk_copy_exec_subscription_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dest_dn_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_drop_publication</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT pg_drop_replication_slot('%s')"</literal></expr></argument>,
				   <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"DROP PUBLICATION %s"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dist_cmd_run_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_attach_chunk</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ChunkDataNode</name> <modifier>*</modifier></type><name>chunk_data_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_chunk_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that the hypertable is already attached to this data node */</comment>
	<expr_stmt><expr><call><name>data_node_hypertable_get_by_node_name</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>dst_server</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>chunk_data_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChunkDataNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>chunk_data_node</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>chunk_id</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk_data_node</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>node_chunk_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* below API will fill it up */</comment>
	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk_data_node</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>node_name</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>dst_server</name><operator>-&gt;</operator><name>servername</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk_data_node</name><operator>-&gt;</operator><name>foreign_server_oid</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>dst_server</name><operator>-&gt;</operator><name>serverid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>remote_chunk_name</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>chunk_api_create_on_data_nodes</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>remote_chunk_name</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>chunk_data_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* All ok, update the AN chunk metadata to add this data node to it */</comment>
	<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_nodes</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_nodes</name></name></expr></argument>, <argument><expr><name>chunk_data_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* persist this association in the metadata */</comment>
	<expr_stmt><expr><call><name>ts_chunk_data_node_insert</name><argument_list>(<argument><expr><name>chunk_data_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_attach_compressed_chunk</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chunk_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressed_chunk_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistCmdResult</name> <modifier>*</modifier></type><name>dist_res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_chunk_is_compressed</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>chunk_name</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>,
						  <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>compressed_chunk_name</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>,
									 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compressed_chunk_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT %s.create_compressed_chunk(%s, %s, "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name>
				   <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name>
				   <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
				   <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>chunk_name</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>compressed_chunk_name</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>uncompressed_heap_size</name></name></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>uncompressed_toast_size</name></name></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>uncompressed_index_size</name></name></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>compressed_heap_size</name></name></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>compressed_toast_size</name></name></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>compressed_index_size</name></name></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>numrows_pre_compression</name></name></expr></argument>,
				   <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd_ccs</name><operator>.</operator><name>numrows_post_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dist_res</name> <operator>=</operator>
		<call><name>ts_dist_cmd_invoke_on_data_nodes</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ts_dist_cmd_get_result_by_node_name</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONNECTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_dist_cmd_close_response</name><argument_list>(<argument><expr><name>dist_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_stage_delete_chunk</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>delete_on_src_node</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>chunk_api_call_chunk_drop_replica</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name></expr></argument>,
									  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>src_server</name><operator>-&gt;</operator><name>serverid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ChunkCopyStage</name></type> <name><name>chunk_copy_stages</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* Initial Marker */</comment>
	<expr><block>{ <expr><name>CCS_INIT</name></expr>, <expr><name>chunk_copy_stage_init</name></expr>, <expr><name>chunk_copy_stage_init_cleanup</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Create empty chunk table on the dst node.
	 * The corresponding cleanup function should just delete this empty chunk.
	 */</comment>
	<expr><block>{ <expr><name>CCS_CREATE_EMPTY_CHUNK</name></expr>,
	  <expr><name>chunk_copy_stage_create_empty_chunk</name></expr>,
	  <expr><name>chunk_copy_stage_create_empty_chunk_cleanup</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Create compressed empty chunk table on the dst node.
	 * The corresponding cleanup function should just delete this empty chunk, if
	 * the compressed_chunk_name column was set in the operation metadata.
	 */</comment>
	<expr><block>{ <expr><name>CCS_CREATE_EMPTY_COMPRESSED_CHUNK</name></expr>,
	  <expr><name>chunk_copy_stage_create_empty_compressed_chunk</name></expr>,
	  <expr><name>chunk_copy_stage_create_empty_compressed_chunk_cleanup</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Setup logical replication between nodes.
	 * The corresponding cleanup functions should drop the subscription and
	 * remove the replication slot followed by dropping of the publication on
	 * the source data node.
	 */</comment>
	<expr><block>{ <expr><name>CCS_CREATE_PUBLICATION</name></expr>,
	  <expr><name>chunk_copy_stage_create_publication</name></expr>,
	  <expr><name>chunk_copy_stage_create_publication_cleanup</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>CCS_CREATE_REPLICATION_SLOT</name></expr>,
	  <expr><name>chunk_copy_stage_create_replication_slot</name></expr>,
	  <expr><name>chunk_copy_stage_create_replication_slot_cleanup</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>CCS_CREATE_SUBSCRIPTION</name></expr>,
	  <expr><name>chunk_copy_stage_create_subscription</name></expr>,
	  <expr><name>chunk_copy_stage_create_subscription_cleanup</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Begin data transfer and wait for completion.
	 * The corresponding cleanup function should just disable the subscription so
	 * that earlier steps above can drop the subcription/publication cleanly.
	 */</comment>
	<expr><block>{ <expr><name>CCS_SYNC_START</name></expr>, <expr><name>chunk_copy_stage_sync_start</name></expr>, <expr><name>chunk_copy_stage_sync_start_cleanup</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>CCS_SYNC</name></expr>, <expr><name>chunk_copy_stage_sync</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Cleanup. Nothing else required via the cleanup functions.
	 */</comment>
	<expr><block>{ <expr><name>CCS_DROP_SUBSCRIPTION</name></expr>, <expr><name>chunk_copy_stage_drop_subscription</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>CCS_DROP_PUBLICATION</name></expr>, <expr><name>chunk_copy_stage_drop_publication</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Attach chunk to the hypertable on the dst_node.
	 * The operation has succeeded from the destination data node perspective.
	 * No cleanup required here.
	 */</comment>
	<expr><block>{ <expr><name>CCS_ATTACH_CHUNK</name></expr>, <expr><name>chunk_copy_stage_attach_chunk</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Attach compressed chunk to the hypertable on the dst_node.
	 */</comment>
	<expr><block>{ <expr><name>CCS_ATTACH_COMPRESSED_CHUNK</name></expr>, <expr><name>chunk_copy_stage_attach_compressed_chunk</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

	<comment type="block">/*
	 * Maybe delete chunk from the src_node (move operation).
	 * Again, everything ok, so no cleanup required, we probably shouldn't be
	 * seeing this entry in the catalog table because the operation has succeeded.
	 */</comment>
	<expr><block>{ <expr><name>CCS_DELETE_CHUNK</name></expr>, <expr><name>chunk_copy_stage_delete_chunk</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

	<comment type="block">/* Operation complete */</comment>
	<expr><block>{ <expr><name>CCS_COMPLETE</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

	<comment type="block">/* Done Marker */</comment>
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_execute</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ChunkCopyStage</name> <modifier>*</modifier></type><name>stage</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Execute each copy stage in a separate transaction. The below will employ
	 * 2PC by default. This can be later optimized to use 1PC since only one
	 * datanode is involved in most of the stages.
	 */</comment>
	<for>for <control>(<init><expr><name>stage</name> <operator>=</operator> <operator>&amp;</operator><name><name>chunk_copy_stages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>stage</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>stage</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>saved_uid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>is_superuser</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * A chunk copy/move operation involves a lot of stages. Many of these
		 * stages need different user permissions.
		 *
		 * PUBLICATION/SUBSCRIPTION needs CREATE privileges on the database
		 * Replication slots management needs superuser or REPLICATION privs
		 * The new chunk needs to be created with original hypertable privs
		 *
		 * The move_chunk/copy_chunk functions can only be invoked by superuser
		 * or REPLICATION users. To keep things manageable, we switch to the
		 * bootstrap superuser (or if the current logged in user is a superuser)
		 * for each stage of the execution. Care is taken to create the chunks
		 * with original hypertable ownership.
		 */</comment>
		<expr_stmt><expr><call><name>SPI_start_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_superuser</name> <operator>=</operator> <call><name>superuser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Note that if the current logged in user is superuser then we use those
		 * credentials instead of implicit bootstrap superuser
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_superuser</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saved_uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>BOOTSTRAP_SUPERUSERID</name></expr></argument>, <argument><expr><name>sec_ctx</name> <operator>|</operator> <name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>stage</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>stage</name><operator>-&gt;</operator><name>function</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>stage</name><operator>-&gt;</operator><name>function</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Mark current stage as completed and update the catalog */</comment>
		<expr_stmt><expr><call><name>chunk_copy_operation_update</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DEBUG_ERROR_INJECTION</name><argument_list>(<argument><expr><name><name>stage</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_superuser</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>saved_uid</name></expr></argument>, <argument><expr><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>SPI_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chunk_copy</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>chunk_relid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_id</name></decl></parameter>,
		   <parameter><decl><type><name>bool</name></type> <name>delete_on_src_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkCopy</name></type> <name>cc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Populate copy structure. First set up the operation id if it's provided */</comment>
	<if_stmt><if>if <condition>(<expr><name>op_id</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Validate operation id as beign compatible to be used as a replication slot name */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReplicationSlotValidateName</name><argument_list>(<argument><expr><name>op_id</name></expr></argument>, <argument><expr><name>DEBUG2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operation_id name \"%s\" is not valid"</literal></expr></argument>, <argument><expr><name>op_id</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"operation_id names may only contain lower case letters, numbers, and "</literal>
							 <literal type="string">"the underscore character."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cc</name><operator>.</operator><name>fd</name><operator>.</operator><name>operation_id</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cc</name><operator>.</operator><name>fd</name><operator>.</operator><name>operation_id</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>op_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>cc</name><operator>.</operator><name>fd</name><operator>.</operator><name>operation_id</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>chunk_copy_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>, <argument><expr><name>chunk_relid</name></expr></argument>, <argument><expr><name>src_node</name></expr></argument>, <argument><expr><name>dst_node</name></expr></argument>, <argument><expr><name>delete_on_src_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Execute chunk copy in separate stages */</comment>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>chunk_copy_execute</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* Include chunk copy id to the error message */</comment>
		<decl_stmt><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"Chunk copy operation id: %s."</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>.</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReThrowError</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Finish up and delete the catalog entry */</comment>
	<expr_stmt><expr><call><name>chunk_copy_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>chunk_copy_operation_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkCopy</name> <modifier>*</modifier><modifier>*</modifier></type><name>cc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>cc</name> <operator>=</operator> <call><name>STRUCT_FROM_SLOT</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ti</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>, <argument><expr><name>ChunkCopy</name></expr></argument>, <argument><expr><name>FormData_chunk_copy_operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ChunkCopy</name> <modifier>*</modifier></type>
<name>chunk_copy_operation_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>indexid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>, <decl><type ref="prev"/><name>mcxt</name></decl>;</decl_stmt>

	<comment type="block">/* Objects need to be in long lived context */</comment>
	<expr_stmt><expr><name>mcxt</name> <operator>=</operator>
		<call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>PortalContext</name></expr></argument>, <argument><expr><literal type="string">"chunk copy cleanup activity"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>operation_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_chunk_copy_operation_idx_operation_id</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
					<argument><expr><name>F_NAMEEQ</name></expr></argument>,
					<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>operation_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>indexid</name> <operator>=</operator> <name>CHUNK_COPY_OPERATION_PKEY_IDX</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid chunk copy operation identifier"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ts_catalog_scan_one</name><argument_list>(<argument><expr><name>CHUNK_COPY_OPERATION</name></expr></argument>,
						<argument><expr><name>indexid</name></expr></argument>,
						<argument><expr><name>scankeys</name></expr></argument>,
						<argument><expr><literal type="number">1</literal></expr></argument>,
						<argument><expr><name>chunk_copy_operation_tuple_found</name></expr></argument>,
						<argument><expr><name>AccessShareLock</name></expr></argument>,
						<argument><expr><name>CHUNK_COPY_OPERATION_TABLE_NAME</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If a valid entry is returned then fill up the rest of the fields in the
	 * ChunkCopy structure
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>cc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>mcxt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <call><name>ts_chunk_get_by_id</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>chunk_id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/* No other sanity checks need to be performed since they were done earlier */</comment>

		<comment type="block">/* Setup the src_node */</comment>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>src_server</name></name> <operator>=</operator> <call><name>data_node_get_foreign_server</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>source_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
													  <argument><expr><name>ACL_NO_CHECK</name></expr></argument>,
													  <argument><expr><name>true</name></expr></argument>,
													  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>src_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Setup the dst_node */</comment>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>dst_server</name></name> <operator>=</operator>
			<call><name>data_node_get_foreign_server</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dest_node_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_NO_CHECK</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name><name>cc</name><operator>-&gt;</operator><name>dst_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* No entry found, long lived context not required */</comment>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>cc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_copy_cleanup_internal</name><parameter_list>(<parameter><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Cleanup each copy stage in a separate transaction */</comment>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>saved_uid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>is_superuser</name> <init>= <expr><call><name>superuser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * A chunk copy/move cleanup operation involves a lot of stages. Many of these
		 * stages need different user permissions.
		 *
		 * PUBLICATION/SUBSCRIPTION needs CREATE privileges on the database
		 * Replication slots management needs superuser or REPLICATION privs
		 *
		 * The cleanup function can only be invoked by superuser
		 * or REPLICATION users. To keep things manageable, we switch to the
		 * bootstrap superuser for each stage of the execution.
		 */</comment>
		<expr_stmt><expr><call><name>SPI_start_transaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Note that if the current logged in user is superuser then we use those
		 * credentials instead of implicit bootstrap superuser
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_superuser</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saved_uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>BOOTSTRAP_SUPERUSERID</name></expr></argument>, <argument><expr><name>sec_ctx</name> <operator>|</operator> <name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>stage</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>chunk_copy_stages</name><index>[<expr><name>stage_idx</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>stage</name><operator>-&gt;</operator><name>function_cleanup</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>stage</name><operator>-&gt;</operator><name>function_cleanup</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Mark stage as cleaned up and update the catalog */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>stage_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>chunk_copy_operation_update</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_superuser</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>saved_uid</name></expr></argument>, <argument><expr><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>SPI_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><operator>--</operator><name>stage_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>chunk_copy_cleanup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkCopy</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ChunkCopyStage</name> <modifier>*</modifier></type><name>stage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>stage_idx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dist_util_membership</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>DIST_MEMBER_ACCESS_NODE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function must be run on the access node only"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>chunk_copy_operation_get</name><argument_list>(<argument><expr><name>operation_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid chunk copy operation identifier. Entry not found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* If it's a completed operation, return immediately after deleting catalog entry */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>completed_stage</name></name></expr></argument>, <argument><expr><name>CCS_COMPLETE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>chunk_copy_operation_delete_by_id</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Identify the last completed stage for this activity. */</comment>
	<expr_stmt><expr><name>stage_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>stage</name> <operator>=</operator> <operator>&amp;</operator><name><name>chunk_copy_stages</name><index>[<expr><name>stage_idx</name></expr>]</index></name></expr>;</init> <condition><expr><name><name>stage</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>stage</name> <operator>=</operator> <operator>&amp;</operator><name><name>chunk_copy_stages</name><index>[<expr><operator>++</operator><name>stage_idx</name></expr>]</index></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>completed_stage</name></name></expr></argument>, <argument><expr><name><name>stage</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>has_rolreplication</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name>ts_rel_get_owner</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be superuser, replication role, or hypertable owner to cleanup a "</literal>
						 <literal type="string">"chunk copy/move operation"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* should always find an entry, add ereport to quell compiler warning */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"stage '%s' not found for copy chunk cleanup"</literal></expr></argument>,
						<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>completed_stage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Commit to get out of starting transaction, this will also pop active
	 * snapshots. */</comment>
	<expr_stmt><expr><call><name>SPI_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Run the corresponding cleanup steps to roll back the activity. */</comment>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>chunk_copy_cleanup_internal</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>stage_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* Include chunk copy id to the error message */</comment>
		<decl_stmt><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"While cleaning up chunk copy operation id: %s."</literal></expr></argument>,
								 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>operation_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReThrowError</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Finish up and delete the catalog entry */</comment>
	<expr_stmt><expr><call><name>chunk_copy_finish</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
