<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/nodes/chunk_dispatch_state.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_class.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/extensible.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/nodeModifyTable.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_dispatch_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_dispatch_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_insert_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_dispatch_begin</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkDispatchState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>ChunkDispatchState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hypertable_cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>,
												 <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>hypertable_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>subplan</name></name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_cache</name></name> <operator>=</operator> <name>hypertable_cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dispatch</name></name> <operator>=</operator> <call><name>ts_chunk_dispatch_create</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Change to another chunk for inserts.
 *
 * Prepare the ModifyTableState executor node for inserting into another
 * chunk. Called every time we switch to another chunk for inserts.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>on_chunk_insert_state_changed</name><parameter_list>(<parameter><decl><type><name>ChunkInsertState</name> <modifier>*</modifier></type><name>cis</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkDispatchState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
	<decl_stmt><decl><type><name>ModifyTableState</name> <modifier>*</modifier></type><name>mtstate</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>mtstate</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* PG &lt; 14 expects the current target slot to match the result relation. Thus
	 * we need to make sure it is up-to-date with the current chunk here. */</comment>
	<expr_stmt><expr><name><name>mtstate</name><operator>-&gt;</operator><name>mt_scans</name><index>[<expr><name><name>mtstate</name><operator>-&gt;</operator><name>mt_whichplan</name></name></expr>]</index></name> <operator>=</operator> <name><name>cis</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>rri</name></name> <operator>=</operator> <name><name>cis</name><operator>-&gt;</operator><name>result_relation_info</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>chunk_dispatch_exec</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkDispatchState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>ChunkDispatchState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>substate</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Point</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ChunkInsertState</name> <modifier>*</modifier></type><name>cis</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>dispatch</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>

	<comment type="block">/* Get the next tuple from the subplan state node */</comment>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>substate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Reset the per-tuple exprcontext */</comment>
	<expr_stmt><expr><call><name>ResetPerTupleExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Switch to the executor's per-tuple memory context */</comment>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>GetPerTupleMemoryContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Calculate the tuple's point in the N-dimensional hyperspace */</comment>
	<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>ts_hyperspace_calculate_point</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Save the main table's (hypertable's) ResultRelInfo */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable_result_rel_info</name></name></expr>)</condition>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
			   <name><name>state</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable_result_rel_info</name></name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable_result_rel_info</name></name> <operator>=</operator> <name><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name><operator>-&gt;</operator><name>mtstate</name><operator>-&gt;</operator><name>resultRelInfo</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Find or create the insert state matching the point */</comment>
	<expr_stmt><expr><name>cis</name> <operator>=</operator> <call><name>ts_chunk_dispatch_get_chunk_insert_state</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>,
												   <argument><expr><name>point</name></expr></argument>,
												   <argument><expr><name>on_chunk_insert_state_changed</name></expr></argument>,
												   <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set the result relation in the executor state to the target chunk.
	 * This makes sure that the tuple gets inserted into the correct
	 * chunk. Note that since in PG &lt; 14 the ModifyTable executor saves and restores
	 * the es_result_relation_info this has to be updated every time, not
	 * just when the chunk changes.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>orig_result_relation_info</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name><name>cis</name><operator>-&gt;</operator><name>result_relation_info</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Convert the tuple to the chunk's rowtype, if necessary */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>hyper_to_chunk_map</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>execute_attr_map_slot</name><argument_list>(<argument><expr><name><name>cis</name><operator>-&gt;</operator><name>hyper_to_chunk_map</name><operator>-&gt;</operator><name>attrMap</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>cis</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * When the chunk is compressed, we redirect the insert to the internal compressed
		 * chunk. However, any BEFORE ROW triggers defined on the chunk have to be executed
		 * before we redirect the insert.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>orig_result_relation_info</name><operator>-&gt;</operator><name>ri_TrigDesc</name></name> <operator>&amp;&amp;</operator>
			<name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>orig_result_relation_info</name><operator>-&gt;</operator><name>ri_TrigDesc</name><operator>-&gt;</operator><name>trig_insert_before_row</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>skip_tuple</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>skip_tuple</name> <operator>=</operator>
				<operator>!</operator><call><name>ExecBRInsertTriggers</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>orig_result_relation_info</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>skip_tuple</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name></name> <operator>&amp;&amp;</operator> <name><name>cis</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name><operator>-&gt;</operator><name>has_generated_stored</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ExecComputeStoredGeneratedCompat</name><argument_list>(<argument><expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>orig_result_relation_info</name></name></expr></argument>,
											 <argument><expr><name>estate</name></expr></argument>,
											 <argument><expr><name>slot</name></expr></argument>,
											 <argument><expr><name>CMD_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ExecConstraints</name><argument_list>(<argument><expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>orig_result_relation_info</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
		<expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name><name>cis</name><operator>-&gt;</operator><name>result_relation_info</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>compress_row_exec</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>orig_slot</name> <init>= <expr><name>slot</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>GetPerTupleMemoryContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>compress_row_exec</name></name><argument_list>(<argument><expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>compress_state</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* If we have cagg defined on the hypertable, we have to execute
		 * the function that records invalidations directly as AFTER ROW
		 * triggers do not work with compressed chunks.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name><operator>-&gt;</operator><name>has_cagg_trigger</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>continuous_agg_call_invalidation_trigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>HeapTupleTableSlot</name> <modifier>*</modifier></type><name>hslot</name> <init>= <expr><operator>(</operator><name>HeapTupleTableSlot</name> <operator>*</operator><operator>)</operator> <name>orig_slot</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hslot</name><operator>-&gt;</operator><name>tuple</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>hslot</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>orig_slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>,
											   <argument><expr><name><name>orig_slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>,
											   <argument><expr><name><name>orig_slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ts_compress_chunk_invoke_cagg_trigger</name><argument_list>(<argument><expr><name><name>cis</name><operator>-&gt;</operator><name>compress_info</name></name></expr></argument>, <argument><expr><name><name>cis</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>hslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_dispatch_end</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkDispatchState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>ChunkDispatchState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>substate</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><name>substate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_chunk_dispatch_destroy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>dispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>chunk_dispatch_rescan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>substate</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>custom_ps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>substate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>CustomExecMethods</name></type> <name>chunk_dispatch_state_methods</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>CustomName</name> <operator>=</operator> <literal type="string">"ChunkDispatchState"</literal></expr>,
	<expr><operator>.</operator><name>BeginCustomScan</name> <operator>=</operator> <name>chunk_dispatch_begin</name></expr>,
	<expr><operator>.</operator><name>EndCustomScan</name> <operator>=</operator> <name>chunk_dispatch_end</name></expr>,
	<expr><operator>.</operator><name>ExecCustomScan</name> <operator>=</operator> <name>chunk_dispatch_exec</name></expr>,
	<expr><operator>.</operator><name>ReScanCustomScan</name> <operator>=</operator> <name>chunk_dispatch_rescan</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Check whether the PlanState is a ChunkDispatchState node.
 */</comment>
<function><type><name>bool</name></type>
<name>ts_is_chunk_dispatch_state</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>csstate</name> <init>= <expr><operator>(</operator><name>CustomScanState</name> <operator>*</operator><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>CustomScanState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>csstate</name><operator>-&gt;</operator><name>methods</name></name> <operator>==</operator> <operator>&amp;</operator><name>chunk_dispatch_state_methods</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ChunkDispatchState</name> <modifier>*</modifier></type>
<name>ts_chunk_dispatch_state_create</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>hypertable_relid</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>subplan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkDispatchState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>ChunkDispatchState</name> <operator>*</operator><operator>)</operator> <call><name>newNode</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChunkDispatchState</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>T_CustomScanState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hypertable_relid</name></name> <operator>=</operator> <name>hypertable_relid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>subplan</name></name> <operator>=</operator> <name>subplan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cscan_state</name><operator>.</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>chunk_dispatch_state_methods</name></expr>;</expr_stmt>
	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function is called during the init phase of the INSERT (ModifyTable)
 * plan, and gives the ChunkDispatchState node the access it needs to the
 * internals of the ModifyTableState node.
 *
 * Note that the function is called by the parent of the ModifyTableState node,
 * which guarantees that the ModifyTableState is fully initialized even though
 * ChunkDispatchState is a child of ModifyTableState.
 */</comment>
<function><type><name>void</name></type>
<name>ts_chunk_dispatch_state_set_parent</name><parameter_list>(<parameter><decl><type><name>ChunkDispatchState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ModifyTableState</name> <modifier>*</modifier></type><name>mtstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ModifyTable</name> <modifier>*</modifier></type><name>mt_plan</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>ModifyTable</name></expr></argument>, <argument><expr><name><name>mtstate</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Inserts on hypertables should always have one subplan */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>mtstate</name><operator>-&gt;</operator><name>mt_nplans</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mtstate</name></name> <operator>=</operator> <name>mtstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>arbiter_indexes</name></name> <operator>=</operator> <name><name>mt_plan</name><operator>-&gt;</operator><name>arbiterIndexes</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
