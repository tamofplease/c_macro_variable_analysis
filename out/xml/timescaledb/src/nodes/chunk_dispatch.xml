<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/nodes/chunk_dispatch.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/extensible.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_insert_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subspace_store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/chunk_data_node.h"</cpp:file></cpp:include>

<function><type><name>ChunkDispatch</name> <modifier>*</modifier></type>
<name>ts_chunk_dispatch_create</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkDispatch</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChunkDispatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>hypertable</name></name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>estate</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>eflags</name></name> <operator>=</operator> <name>eflags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>hypertable_result_rel_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator>
		<call><name>ts_subspace_store_init</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>, <argument><expr><name>ts_guc_max_open_chunks_per_insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>prev_cis</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cd</name><operator>-&gt;</operator><name>prev_cis_oid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

	<return>return <expr><name>cd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ModifyTableState</name> <modifier>*</modifier></type>
<name>get_modifytable_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name><operator>-&gt;</operator><name>mtstate</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ModifyTable</name> <modifier>*</modifier></type>
<name>get_modifytable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>castNode</name><argument_list>(<argument><expr><name>ModifyTable</name></expr></argument>, <argument><expr><call><name>get_modifytable_state</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ps</name><operator>.</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_chunk_dispatch_has_returning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>get_modifytable</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>returningLists</name> <operator>!=</operator> <name>NIL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_chunk_dispatch_get_returning_clauses</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
	<decl_stmt><decl><type><name>ModifyTableState</name> <modifier>*</modifier></type><name>mtstate</name> <init>= <expr><call><name>get_modifytable_state</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>list_nth</name><argument_list>(<argument><expr><call><name>get_modifytable</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>returningLists</name></expr></argument>, <argument><expr><name><name>mtstate</name><operator>-&gt;</operator><name>mt_whichplan</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><call><name>get_modifytable</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>returningLists</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>linitial</name><argument_list>(<argument><expr><call><name>get_modifytable</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>returningLists</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_chunk_dispatch_get_arbiter_indexes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name><operator>-&gt;</operator><name>arbiter_indexes</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OnConflictAction</name></type>
<name>ts_chunk_dispatch_get_on_conflict_action</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ONCONFLICT_NONE</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>get_modifytable</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>onConflictAction</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_chunk_dispatch_get_on_conflict_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>get_modifytable</name><argument_list>(<argument><expr><name>dispatch</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>onConflictSet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CmdType</name></type>
<name>ts_chunk_dispatch_get_cmd_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>CMD_INSERT</name></expr> </then><else>:
											  <expr><name><name>dispatch</name><operator>-&gt;</operator><name>dispatch_state</name><operator>-&gt;</operator><name>mtstate</name><operator>-&gt;</operator><name>operation</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_chunk_dispatch_destroy</name><parameter_list>(<parameter><decl><type><name>ChunkDispatch</name> <modifier>*</modifier></type><name>chunk_dispatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_subspace_store_free</name><argument_list>(<argument><expr><name><name>chunk_dispatch</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_chunk_insert_state</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_chunk_insert_state_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>ChunkInsertState</name> <operator>*</operator><operator>)</operator> <name>cis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the chunk insert state for the chunk that matches the given point in the
 * partitioned hyperspace.
 */</comment>
<function><type><specifier>extern</specifier> <name>ChunkInsertState</name> <modifier>*</modifier></type>
<name>ts_chunk_dispatch_get_chunk_insert_state</name><parameter_list>(<parameter><decl><type><name>ChunkDispatch</name> <modifier>*</modifier></type><name>dispatch</name></decl></parameter>, <parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>point</name></decl></parameter>,
										 <parameter><decl><type><specifier>const</specifier> <name>on_chunk_changed_func</name></type> <name>on_chunk_changed</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ChunkInsertState</name> <modifier>*</modifier></type><name>cis</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>cis_changed</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Direct inserts into internal compressed hypertable is not supported.
	 * For compression chunks are created explicitly by compress_chunk and
	 * inserted into directly so we should never end up in this code path
	 * for a compressed hypertable.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>compression_state</name></name> <operator>==</operator> <name>HypertableInternalCompressionTable</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"direct insert into internal compressed hypertable is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cis</name> <operator>=</operator> <call><name>ts_subspace_store_get</name><argument_list>(<argument><expr><name><name>dispatch</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>cis</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * The chunk search functions may leak memory, so switch to a temporary
		 * memory context.
		 */</comment>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name> <init>=
			<expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>GetPerTupleMemoryContext</name><argument_list>(<argument><expr><name><name>dispatch</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Normally, for every row of the chunk except the first one, we expect
		 * the chunk to exist already. The "create" function would take a lock
		 * on the hypertable to serialize the concurrent chunk creation. Here we
		 * first use the "find" function to try to find the chunk without
		 * locking the hypertable. This serves as a fast path for the usual case
		 * where the chunk already exists.
		 */</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>new_chunk</name> <init>= <expr><call><name>ts_hypertable_find_chunk_for_point</name><argument_list>(<argument><expr><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_GE</name></expr></cpp:if>
		<comment type="block">/*
		 * Frozen chunks require at least PG14.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>new_chunk</name> <operator>&amp;&amp;</operator> <call><name>ts_chunk_is_frozen</name><argument_list>(<argument><expr><name>new_chunk</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"cannot INSERT into frozen chunk \"%s\""</literal></expr></argument>,
				 <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>new_chunk</name><operator>-&gt;</operator><name>table_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name>new_chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>new_chunk</name> <operator>=</operator> <call><name>ts_hypertable_create_chunk_for_point</name><argument_list>(<argument><expr><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* get the filtered list of "available" DNs for this chunk but only if it's replicated */</comment>
		<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name><name>dispatch</name><operator>-&gt;</operator><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>replication_factor</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_data_nodes</name> <init>=
				<expr><call><name>ts_chunk_data_node_scan_by_chunk_id_filter</name><argument_list>(<argument><expr><name><name>new_chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * If the chunk was not created as part of this insert, we need to check whether any
			 * of the chunk's data nodes are currently unavailable and in that case consider the
			 * chunk stale on those data nodes. Do that by removing the AN's chunk-datanode
			 * mapping for the unavailable data nodes.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>dispatch</name><operator>-&gt;</operator><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>replication_factor</name></name> <operator>&gt;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>chunk_data_nodes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>dist_update_stale_chunk_metadata</name></name><argument_list>(<argument><expr><name>new_chunk</name></expr></argument>, <argument><expr><name>chunk_data_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>chunk_data_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>new_chunk</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no chunk found or created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>cis</name> <operator>=</operator> <call><name>ts_chunk_insert_state_create</name><argument_list>(<argument><expr><name>new_chunk</name></expr></argument>, <argument><expr><name>dispatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_subspace_store_add</name><argument_list>(<argument><expr><name><name>dispatch</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>new_chunk</name><operator>-&gt;</operator><name>cube</name></name></expr></argument>, <argument><expr><name>cis</name></expr></argument>, <argument><expr><name>destroy_chunk_insert_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cis</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name> <operator>==</operator> <name><name>dispatch</name><operator>-&gt;</operator><name>prev_cis_oid</name></name> <operator>&amp;&amp;</operator> <name>cis</name> <operator>==</operator> <name><name>dispatch</name><operator>-&gt;</operator><name>prev_cis</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* got the same item from cache as before */</comment>
		<expr_stmt><expr><name>cis_changed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cis_changed</name> <operator>&amp;&amp;</operator> <name>on_chunk_changed</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>on_chunk_changed</name><argument_list>(<argument><expr><name>cis</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cis</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dispatch</name><operator>-&gt;</operator><name>prev_cis</name></name> <operator>=</operator> <name>cis</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dispatch</name><operator>-&gt;</operator><name>prev_cis_oid</name></name> <operator>=</operator> <name><name>cis</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr>;</expr_stmt>
	<return>return <expr><name>cis</name></expr>;</return>
</block_content>}</block></function>
</unit>
