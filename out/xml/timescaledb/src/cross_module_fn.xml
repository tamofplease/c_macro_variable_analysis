<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/cross_module_fn.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/timestamp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cross_module_fn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"license_guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/job.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TELEMETRY</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"telemetry/telemetry.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROSSMODULE_WRAPPER</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro>                                                                  \
	<cpp:value>TS_FUNCTION_INFO_V1(ts_##func);                                                                \
	Datum ts_##func(PG_FUNCTION_ARGS)                                           \
	{                                                                                              \
		PG_RETURN_DATUM(ts_cm_functions-&gt;func(fcinfo));                                            \
	}</cpp:value></cpp:define>

<comment type="block">/* bgw policy functions */</comment>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_compression_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_compression_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_recompression_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_compression_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_refresh_cagg_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_refresh_cagg_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_refresh_cagg_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_refresh_cagg_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_reorder_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_reorder_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_reorder_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_reorder_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_retention_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_retention_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_retention_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policy_retention_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>job_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>job_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>job_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>job_alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>job_alter_set_hypertable_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>reorder_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>move_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>move_chunk_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>copy_chunk_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>copy_chunk_cleanup_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>subscription_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policies_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policies_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policies_remove_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policies_alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>policies_show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* partialize/finalize aggregate */</comment>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>partialize_agg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>finalize_agg_sfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>finalize_agg_ffunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* compression functions */</comment>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>compressed_data_decompress_forward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>compressed_data_decompress_reverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>compressed_data_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>compressed_data_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>compressed_data_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>compressed_data_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>deltadelta_compressor_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>deltadelta_compressor_finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>gorilla_compressor_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>gorilla_compressor_finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>dictionary_compressor_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>dictionary_compressor_finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>array_compressor_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>array_compressor_finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>create_compressed_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>compress_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>decompress_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* continuous aggregate */</comment>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>continuous_agg_invalidation_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>continuous_agg_refresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>invalidation_cagg_log_add_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>invalidation_hyper_log_add_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>drop_dist_ht_invalidation_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>invalidation_process_hypertable_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>invalidation_process_cagg_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>cagg_try_repair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_ping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_block_new_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_allow_new_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_attach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>data_node_alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_drop_replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_freeze_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_unfreeze_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunks_drop_stale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_set_default_data_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_get_relstats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_get_colstats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_create_empty_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>chunk_create_replica_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>timescaledb_fdw_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>timescaledb_fdw_validator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>remote_txn_id_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>remote_txn_id_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>remote_txn_heal_data_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>remote_connection_cache_show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>dist_remote_hypertable_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>dist_remote_chunk_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>dist_remote_compressed_chunk_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>dist_remote_hypertable_index_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>distributed_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>create_distributed_restore_point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>hypertable_distributed_set_replication_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CROSSMODULE_WRAPPER</name><argument_list>(<argument><expr><name>health_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_dist_set_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_dist_set_id</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>set_distributed_id</name></name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_dist_set_peer_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_dist_set_peer_id</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>set_distributed_peer_id</name></name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_dist_validate_as_data_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_dist_validate_as_data_node</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>validate_as_data_node</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * casting a function pointer to a pointer of another type is undefined
 * behavior, so we need one of these for every function type we have
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>error_no_default_fn_community</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"functionality not supported under the current \"%s\" license"</literal></expr></argument>, <argument><expr><name>ts_guc_license</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Upgrade your license to 'timescale' to use this free community feature."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>error_no_default_fn_bool_void_community</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TELEMETRY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_tsl_telemetry_info_default</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>parse_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>job_execute_default_fn</name><parameter_list>(<parameter><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>process_compress_table_default</name><parameter_list>(<parameter><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
							   <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>error_no_default_fn_pg_community</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function \"%s\" is not supported under the current \"%s\" license"</literal></expr></argument>,
					<argument><expr><call><name>get_func_name</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>ts_guc_license</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Upgrade your license to 'timescale' to use this free community feature."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * TSL library is not loaded by the replication worker for some reason,
 * so a call to `compressed_data_in` and `compressed_data_out` functions would
 * produce a misleading error saying that your license is "timescale" and you
 * should upgrade to "timescale" license, even if you have already upgraded.
 *
 * As a workaround, we try to load the TSL module it in this function.
 * It will still error out in the "apache" version
 */</comment>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>process_compressed_data_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_license_enable_module_loading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>compressed_data_in</name></name> <operator>!=</operator> <name>process_compressed_data_in</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>compressed_data_in</name></name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>error_no_default_fn_pg_community</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>process_compressed_data_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_license_enable_module_loading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>compressed_data_out</name></name> <operator>!=</operator> <name>process_compressed_data_out</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>compressed_data_out</name></name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>error_no_default_fn_pg_community</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function ensures that the TSL library is loaded and the call to
 * post_update_cagg_try_repair is dispatched to the correct
 * function.
 *
 * The TSL library might not be loaded when post_update_cagg_try_repair is
 * called during a database upgrade, resulting in an error message about
 * improper licensing:
 *
 * "[..] is not supported under the current "timescale" license
 *  INT:  Upgrade your license to 'timescale'""
 *
 * See also the comment about this problem in the function
 * process_compressed_data_in.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>process_cagg_try_repair</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_license_enable_module_loading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>cagg_try_repair</name></name> <operator>!=</operator> <name>process_cagg_try_repair</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>cagg_try_repair</name></name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>error_no_default_fn_pg_community</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hypertable_make_distributed_default_fn</name><parameter_list>(<parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_node_names</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>get_and_validate_data_node_list_default_fn</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>nodearr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NIL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cache_syscache_invalidate_default</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* The default is a no-op */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DDLResult</name></type>
<name>process_cagg_viewstmt_default</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_string</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>,
							  <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>error_no_default_fn_bool_void_community</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>continuous_agg_update_options_default</name><parameter_list>(<parameter><decl><type><name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name></decl></parameter>, <parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>with_clause_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>continuous_agg_invalidate_raw_ht_all_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>raw_ht</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>continuous_agg_invalidate_mat_ht_all_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>raw_ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>mat_ht</name></decl></parameter>,
											 <parameter><decl><type><name>int64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>continuous_agg_call_invalidation_trigger_default</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>hypertable_id</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>chunk_rel</name></decl></parameter>,
												 <parameter><decl><type><name>HeapTuple</name></type> <name>chunk_tuple</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>chunk_newtuple</name></decl></parameter>,
												 <parameter><decl><type><name>bool</name></type> <name>update</name></decl></parameter>,
												 <parameter><decl><type><name>bool</name></type> <name>is_distributed_hypertable_trigger</name></decl></parameter>,
												 <parameter><decl><type><name>int32</name></type> <name>parent_hypertable_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>empty_fn</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_chunk_on_data_nodes_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
								   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_chunk_name</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type>
<name>distributed_insert_path_create_default</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>ModifyTablePath</name> <modifier>*</modifier></type><name>mtpath</name></decl></parameter>,
									   <parameter><decl><type><name>Index</name></type> <name>hypertable_rti</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subpath_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>distributed_copy_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CopyStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>CopyChunkState</name> <modifier>*</modifier></type><name>ccstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>attnums</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>set_distributed_id_default</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>error_no_default_fn_bool_void_community</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_distributed_peer_id_default</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>func_call_on_data_nodes_default</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>finfo</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_node_oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_compressed_chunk_relstats_default</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>uncompressed_relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>compressed_relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dist_update_stale_chunk_metadata_default</name><parameter_list>(<parameter><decl><type><name>Chunk</name> <modifier>*</modifier></type><name>new_chunk</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_data_nodes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>error_no_default_fn_community</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_tsl_loaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>PGDLLEXPORT</name> <name>Datum</name></type>
<name>ts_tsl_loaded</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>ts_cm_functions</name> <operator>!=</operator> <operator>&amp;</operator><name>ts_cm_functions_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Define cross-module functions' default values:
 * If the submodule isn't activated, using one of the cm functions will throw an
 * exception.
 */</comment>
<decl_stmt><decl><type><name>TSDLLEXPORT</name> <name>CrossModuleFunctions</name></type> <name>ts_cm_functions_default</name> <init>= <expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TELEMETRY</name></cpp:ifdef>
	<expr><operator>.</operator><name>add_tsl_telemetry_info</name> <operator>=</operator> <name>add_tsl_telemetry_info_default</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><operator>.</operator><name>create_upper_paths_hook</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>set_rel_pathlist_dml</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>set_rel_pathlist_query</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>set_rel_pathlist</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>ddl_command_start</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>ddl_command_end</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>sql_drop</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>process_altertable_cmd</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>process_rename_cmd</name> <operator>=</operator> <name>NULL</name></expr>,

	<comment type="block">/* gapfill */</comment>
	<expr><operator>.</operator><name>gapfill_marker</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gapfill_int16_time_bucket</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gapfill_int32_time_bucket</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gapfill_int64_time_bucket</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gapfill_date_time_bucket</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gapfill_timestamp_time_bucket</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gapfill_timestamptz_time_bucket</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gapfill_timestamptz_timezone_time_bucket</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,

	<comment type="block">/* bgw policies */</comment>
	<expr><operator>.</operator><name>policy_compression_add</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_compression_remove</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_recompression_proc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_compression_check</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_refresh_cagg_add</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_refresh_cagg_proc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_refresh_cagg_check</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_refresh_cagg_remove</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_reorder_add</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_reorder_proc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_reorder_check</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_reorder_remove</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_retention_add</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_retention_proc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_retention_check</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policy_retention_remove</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,

	<expr><operator>.</operator><name>job_add</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>job_alter</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>job_alter_set_hypertable_id</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>job_delete</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>job_run</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>job_execute</name> <operator>=</operator> <name>job_execute_default_fn</name></expr>,

	<expr><operator>.</operator><name>move_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>move_chunk_proc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>copy_chunk_proc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>copy_chunk_cleanup_proc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>subscription_exec</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>reorder_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,

	<expr><operator>.</operator><name>policies_add</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policies_remove</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policies_remove_all</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policies_alter</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>policies_show</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,

	<expr><operator>.</operator><name>partialize_agg</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>finalize_agg_sfunc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>finalize_agg_ffunc</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>process_cagg_viewstmt</name> <operator>=</operator> <name>process_cagg_viewstmt_default</name></expr>,
	<expr><operator>.</operator><name>continuous_agg_invalidation_trigger</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>continuous_agg_call_invalidation_trigger</name> <operator>=</operator> <name>continuous_agg_call_invalidation_trigger_default</name></expr>,
	<expr><operator>.</operator><name>continuous_agg_refresh</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>continuous_agg_invalidate_raw_ht</name> <operator>=</operator> <name>continuous_agg_invalidate_raw_ht_all_default</name></expr>,
	<expr><operator>.</operator><name>continuous_agg_invalidate_mat_ht</name> <operator>=</operator> <name>continuous_agg_invalidate_mat_ht_all_default</name></expr>,
	<expr><operator>.</operator><name>continuous_agg_update_options</name> <operator>=</operator> <name>continuous_agg_update_options_default</name></expr>,
	<expr><operator>.</operator><name>invalidation_cagg_log_add_entry</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>invalidation_hyper_log_add_entry</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>remote_invalidation_log_delete</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>drop_dist_ht_invalidation_trigger</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>remote_drop_dist_ht_invalidation_trigger</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>invalidation_process_hypertable_log</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>invalidation_process_cagg_log</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>cagg_try_repair</name> <operator>=</operator> <name>process_cagg_try_repair</name></expr>,

	<comment type="block">/* compression */</comment>
	<expr><operator>.</operator><name>compressed_data_send</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>compressed_data_recv</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>compressed_data_in</name> <operator>=</operator> <name>process_compressed_data_in</name></expr>,
	<expr><operator>.</operator><name>compressed_data_out</name> <operator>=</operator> <name>process_compressed_data_out</name></expr>,
	<expr><operator>.</operator><name>process_compress_table</name> <operator>=</operator> <name>process_compress_table_default</name></expr>,
	<expr><operator>.</operator><name>create_compressed_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>compress_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>decompress_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>compressed_data_decompress_forward</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>compressed_data_decompress_reverse</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>deltadelta_compressor_append</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>deltadelta_compressor_finish</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gorilla_compressor_append</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>gorilla_compressor_finish</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>dictionary_compressor_append</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>dictionary_compressor_finish</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>array_compressor_append</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>array_compressor_finish</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>compress_row_init</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>compress_row_exec</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>compress_row_end</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>compress_row_destroy</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>data_node_add</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>data_node_delete</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>data_node_attach</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>data_node_ping</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>data_node_detach</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>data_node_alter</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>data_node_allow_new_chunks</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>data_node_block_new_chunks</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>distributed_exec</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>create_distributed_restore_point</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>chunk_set_default_data_node</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>show_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>create_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>create_chunk_on_data_nodes</name> <operator>=</operator> <name>create_chunk_on_data_nodes_default</name></expr>,
	<expr><operator>.</operator><name>chunk_drop_replica</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>chunk_freeze_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>chunk_unfreeze_chunk</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>chunks_drop_stale</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>hypertable_make_distributed</name> <operator>=</operator> <name>hypertable_make_distributed_default_fn</name></expr>,
	<expr><operator>.</operator><name>get_and_validate_data_node_list</name> <operator>=</operator> <name>get_and_validate_data_node_list_default_fn</name></expr>,
	<expr><operator>.</operator><name>timescaledb_fdw_handler</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>timescaledb_fdw_validator</name> <operator>=</operator> <name>empty_fn</name></expr>,
	<expr><operator>.</operator><name>cache_syscache_invalidate</name> <operator>=</operator> <name>cache_syscache_invalidate_default</name></expr>,
	<expr><operator>.</operator><name>remote_txn_id_in</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>remote_txn_id_out</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>remote_txn_heal_data_node</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>remote_connection_cache_show</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>distributed_insert_path_create</name> <operator>=</operator> <name>distributed_insert_path_create_default</name></expr>,
	<expr><operator>.</operator><name>distributed_copy</name> <operator>=</operator> <name>distributed_copy_default</name></expr>,
	<expr><operator>.</operator><name>set_distributed_id</name> <operator>=</operator> <name>set_distributed_id_default</name></expr>,
	<expr><operator>.</operator><name>set_distributed_peer_id</name> <operator>=</operator> <name>set_distributed_peer_id_default</name></expr>,
	<expr><operator>.</operator><name>is_access_node_session</name> <operator>=</operator> <name>error_no_default_fn_bool_void_community</name></expr>,
	<expr><operator>.</operator><name>remove_from_distributed_db</name> <operator>=</operator> <name>error_no_default_fn_bool_void_community</name></expr>,
	<expr><operator>.</operator><name>dist_remote_hypertable_info</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>dist_remote_chunk_info</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>dist_remote_compressed_chunk_info</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>dist_remote_hypertable_index_info</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>dist_update_stale_chunk_metadata</name> <operator>=</operator> <name>dist_update_stale_chunk_metadata_default</name></expr>,
	<expr><operator>.</operator><name>validate_as_data_node</name> <operator>=</operator> <name>error_no_default_fn_community</name></expr>,
	<expr><operator>.</operator><name>func_call_on_data_nodes</name> <operator>=</operator> <name>func_call_on_data_nodes_default</name></expr>,
	<expr><operator>.</operator><name>chunk_get_relstats</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>chunk_get_colstats</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>chunk_create_empty_table</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>chunk_create_replica_table</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>hypertable_distributed_set_replication_factor</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
	<expr><operator>.</operator><name>update_compressed_chunk_relstats</name> <operator>=</operator> <name>update_compressed_chunk_relstats_default</name></expr>,
	<expr><operator>.</operator><name>health_check</name> <operator>=</operator> <name>error_no_default_fn_pg_community</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSDLLEXPORT</name> <name>CrossModuleFunctions</name> <modifier>*</modifier></type><name>ts_cm_functions</name> <init>= <expr><operator>&amp;</operator><name>ts_cm_functions_default</name></expr></init></decl>;</decl_stmt>
</unit>
