<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/cache.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/ipc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<comment type="block">/* List of pinned caches. A cache occurs once in this list for every pin
 * taken */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>pinned_caches</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>pinned_caches_mctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>CachePin</name>
<block>{
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SubTransactionId</name></type> <name>subtxnid</name></decl>;</decl_stmt>
}</block></struct></type> <name>CachePin</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cache_reset_pinned_caches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pinned_caches_mctx</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>pinned_caches_mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pinned_caches_mctx</name> <operator>=</operator>
		<call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"Cache pins"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pinned_caches</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_cache_init</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>htab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache %s is already initialized"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The cache object should have been created in its own context so that
	 * cache_destroy can just delete the context to free everything.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>MemoryContextContains</name><argument_list>(<argument><expr><call><name>ts_cache_memory_ctx</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We always want to be explicit about the memory context our hash table
	 * ends up in to ensure it's not accidently put in TopMemoryContext.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>htab</name></name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>numelements</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>hctl</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>handle_txn_callbacks</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>release_on_commit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cache_destroy</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* will be destroyed later */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>pre_destroy_hook</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>pre_destroy_hook</name></name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>htab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hctl</name><operator>.</operator><name>hcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_cache_invalidate</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cache_destroy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Pinning is needed if any items returned by the cache may need to survive
 * invalidation events (i.e. AcceptInvalidationMessages() may be called).
 *
 * Invalidation messages may be processed on any internal function that takes a
 * lock (e.g. table_open).
 *
 * Each call to cache_pin MUST BE paired with a call to cache_release.
 *
 */</comment>
<function><type><name>Cache</name> <modifier>*</modifier></type>
<name>ts_cache_pin</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>pinned_caches_mctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CachePin</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CachePin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>subtxnid</name></name> <operator>=</operator> <call><name>GetCurrentSubTransactionId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>handle_txn_callbacks</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pinned_caches</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>pinned_caches</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_pin</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>subtxnid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG13_LT</name></expr></cpp:if>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>pinned_caches</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CachePin</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>cache</name></name> <operator>==</operator> <name>cache</name> <operator>&amp;&amp;</operator> <name><name>cp</name><operator>-&gt;</operator><name>subtxnid</name></name> <operator>==</operator> <name>subtxnid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>pinned_caches</name> <operator>=</operator> <call><name>list_delete_cell_compat</name><argument_list>(<argument><expr><name>pinned_caches</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG13_LT</name></expr></cpp:if>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>lc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block>

	<comment type="block">/* should never reach here: there should always be a pin to remove */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cache_release_subtxn</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>subtxnid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>refcount</name> <init>= <expr><name><name>cache</name><operator>-&gt;</operator><name>refcount</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>refcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>handle_txn_callbacks</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>remove_pin</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>subtxnid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>cache_destroy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>refcount</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_cache_release</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>cache_release_subtxn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><call><name>GetCurrentSubTransactionId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MemoryContext</name></type>
<name>ts_cache_memory_ctx</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>cache</name><operator>-&gt;</operator><name>hctl</name><operator>.</operator><name>hcxt</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ts_cache_fetch</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>CacheQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHACTION</name></type> <name>action</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>htab</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>valid_result</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache \"%s\" is not initialized"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CACHE_FLAG_NOCREATE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>action</name> <operator>=</operator> <name>HASH_FIND</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>create_entry</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache \"%s\" does not support creating new entries"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>action</name> <operator>=</operator> <name>HASH_ENTER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>htab</name></name></expr></argument>, <argument><expr><call><name><name>cache</name><operator>-&gt;</operator><name>get_key</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>hits</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>update_entry</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name><name>cache</name><operator>-&gt;</operator><name>update_entry</name></name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>misses</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>HASH_ENTER</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>numelements</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name><name>cache</name><operator>-&gt;</operator><name>create_entry</name></name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>query</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CACHE_FLAG_MISSING_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>cache</name><operator>-&gt;</operator><name>valid_result</name></name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>missing_error</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>missing_error</name></name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to find entry in cache \"%s\""</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>query</name><operator>-&gt;</operator><name>result</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_cache_remove</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>remove_entry</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* In case we want to free the removing entry we must do it beforehand
		 * because HASH_REMOVE call returns dangling pointer, which cannot be used */</comment>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>htab</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>remove_entry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>htab</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>numelements</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>release_all_pinned_caches</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * release once for every occurrence of a cache in the pinned caches list.
	 * On abort, release irrespective of cache-&gt;release_on_commit.
	 */</comment>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>pinned_caches</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CachePin</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>cache</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cache_destroy</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>cache_reset_pinned_caches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>release_subtxn_pinned_caches</name><parameter_list>(<parameter><decl><type><name>SubTransactionId</name></type> <name>subtxnid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Need a copy because cache_release will modify pinned_caches */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>pinned_caches_copy</name> <init>= <expr><call><name>list_copy</name><argument_list>(<argument><expr><name>pinned_caches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Only release caches created in subtxn */</comment>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>pinned_caches_copy</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CachePin</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>subtxnid</name></name> <operator>==</operator> <name>subtxnid</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * This assert makes sure that that we don't have a cache leak
			 * when running with debugging
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>cache_release_subtxn</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>subtxnid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>pinned_caches_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Transaction end callback that cleans up any pinned caches. This is a
 * safeguard that protects against indefinitely pinned caches (memory leaks)
 * that may occur if a transaction ends (normally or abnormally) while a pin is
 * held. Without this, a ts_cache_pin() call always needs to be paired with a
 * ts_cache_release() call and wrapped in a PG_TRY() block to capture and handle
 * any exceptions that occur.
 *
 * Note that this checks that ts_cache_release() is always called by the end
 * of a non-aborted transaction unless cache-&gt;release_on_commit is set to true.
 * */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cache_xact_end</name><parameter_list>(<parameter><decl><type><name>XactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>event</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XACT_EVENT_ABORT</name></expr>:</case>
		<case>case <expr><name>XACT_EVENT_PARALLEL_ABORT</name></expr>:</case>
			<expr_stmt><expr><call><name>release_all_pinned_caches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
		<block>{<block_content>
			<comment type="block">/*
			 * Make a copy of the list of pinned caches since
			 * ts_cache_release() can manipulate the original list.
			 */</comment>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>pinned_caches_copy</name> <init>= <expr><call><name>list_copy</name><argument_list>(<argument><expr><name>pinned_caches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Only caches left should be marked as non-released
			 */</comment>
			<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>pinned_caches_copy</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CachePin</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * This assert makes sure that that we don't have a cache
				 * leak when running with debugging
				 */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>cp</name><operator>-&gt;</operator><name>cache</name><operator>-&gt;</operator><name>release_on_commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * This may still happen in optimized environments where
				 * Assert is turned off. In that case, release.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>cp</name><operator>-&gt;</operator><name>cache</name><operator>-&gt;</operator><name>release_on_commit</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name><name>cp</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>

			<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>pinned_caches_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cache_subxact_abort</name><parameter_list>(<parameter><decl><type><name>SubXactEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>subtxn_id</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubid</name></decl></parameter>,
					<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Note that cache-&gt;release_on_commit is irrelevant here since can't have
	 * cross-commit operations in subtxns
	 */</comment>
	<comment type="block">/*
	 * In subtxns, caches should have already been released, unless an abort
	 * happened. Be careful to only release caches that were created in the
	 * same subtxn.
	 */</comment>

	<switch>switch <condition>(<expr><name>event</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SUBXACT_EVENT_START_SUB</name></expr>:</case>
		<case>case <expr><name>SUBXACT_EVENT_PRE_COMMIT_SUB</name></expr>:</case>
			<comment type="block">/* do nothing */</comment>
			<break>break;</break>
		<case>case <expr><name>SUBXACT_EVENT_COMMIT_SUB</name></expr>:</case>
			<expr_stmt><expr><call><name>release_subtxn_pinned_caches</name><argument_list>(<argument><expr><name>subtxn_id</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SUBXACT_EVENT_ABORT_SUB</name></expr>:</case>
			<expr_stmt><expr><call><name>release_subtxn_pinned_caches</name><argument_list>(<argument><expr><name>subtxn_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_cache_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cache_reset_pinned_caches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterXactCallback</name><argument_list>(<argument><expr><name>cache_xact_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterSubXactCallback</name><argument_list>(<argument><expr><name>cache_subxact_abort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_cache_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>release_all_pinned_caches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>pinned_caches_mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pinned_caches_mctx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pinned_caches</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnregisterXactCallback</name><argument_list>(<argument><expr><name>cache_xact_end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnregisterSubXactCallback</name><argument_list>(<argument><expr><name>cache_subxact_abort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
