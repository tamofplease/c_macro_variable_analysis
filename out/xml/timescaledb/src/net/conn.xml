<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/net/conn.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_assert.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConnOps</name> <modifier>*</modifier></type><name><name>conn_ops</name><index>[<expr><name>_CONNECTION_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>conn_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>CONNECTION_PLAIN</name></expr>]</index> <operator>=</operator> <literal type="string">"PLAIN"</literal></expr>,
	<expr><index>[<expr><name>CONNECTION_SSL</name></expr>]</index> <operator>=</operator> <literal type="string">"SSL"</literal></expr>,
	<expr><index>[<expr><name>CONNECTION_MOCK</name></expr>]</index> <operator>=</operator> <literal type="string">"MOCK"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Connection</name> <modifier>*</modifier></type>
<name>connection_internal_create</name><parameter_list>(<parameter><decl><type><name>ConnectionType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ConnOps</name> <modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name><name>ops</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>conn</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ops</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Connection</name> <modifier>*</modifier></type>
<name>ts_connection_create</name><parameter_list>(<parameter><decl><type><name>ConnectionType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>_CONNECTION_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"invalid connection type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>conn_ops</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s connections are not supported"</literal></expr></argument>, <argument><expr><name><name>conn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Enable %s support when compiling the extension."</literal></expr></argument>, <argument><expr><name><name>conn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>connection_internal_create</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>conn_ops</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Ensure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"unable to create connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s connection could not be initialized"</literal></expr></argument>, <argument><expr><name><name>conn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Connect to a remote endpoint (host, service/port).
 *
 * The connection will be made to the host's service endpoint given by
 * 'servname' (e.g., 'http'), unless a valid port number is given.
 */</comment>
<function><type><name>int</name></type>
<name>ts_connection_connect</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* Windows defines 'connect()' as a macro, so we need to undef it here to use it in ops-&gt;connect */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>connect</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>connect</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>ts_connection_write</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>writelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>writelen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>ts_connection_read</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_connection_close</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>ops</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_connection_set_timeout_millis</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>set_timeout</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_connection_destroy</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_connection_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_connection_register</name><parameter_list>(<parameter><decl><type><name>ConnectionType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ConnOps</name> <modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>_CONNECTION_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>conn_ops</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_connection_get_and_clear_error</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>errmsg</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>conn</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>errmsg</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="string">"unknown connection error"</literal></expr>;</return>
</block_content>}</block></function>
</unit>
