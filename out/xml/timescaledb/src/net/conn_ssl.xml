<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/net/conn_ssl.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_plain.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SSLConnection</name>
<block>{
	<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ssl_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>errcode</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSLConnection</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ssl_set_error</name><parameter_list>(<parameter><decl><type><name>SSLConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>errcode</name></name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>err</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type>
<name>ssl_ctx_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>options</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1010000fL</literal><operator>)</operator></expr></cpp:if>
	<comment type="block">/* OpenSSL &gt;= v1.1 */</comment>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>TLS_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>options</name> <operator>=</operator> <name>SSL_OP_NO_SSLv3</name> <operator>|</operator> <name>SSL_OP_NO_TLSv1</name> <operator>|</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x1000000fL</literal><operator>)</operator></expr></cpp:elif>
	<comment type="block">/* OpenSSL &gt;= v1.0 */</comment>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>options</name> <operator>=</operator> <name>SSL_OP_NO_SSLv2</name> <operator>|</operator> <name>SSL_OP_NO_SSLv3</name> <operator>|</operator> <name>SSL_OP_NO_TLSv1</name> <operator>|</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported OpenSSL version"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Because we have a blocking socket, we don't want to be bothered with
	 * retries.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ctx</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_MODE_AUTO_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ssl_setup</name><parameter_list>(<parameter><decl><type><name>SSLConnection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_ctx</name></name> <operator>=</operator> <call><name>ssl_ctx_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>conn</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ssl_set_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ssl_set_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>conn</name><operator>.</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ssl_set_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ssl_set_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ssl_connect</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* First do the base connection setup */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ts_plain_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>ssl_setup</name><argument_list>(<argument><expr><operator>(</operator><name>SSLConnection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ssl_write</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>writelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SSLConnection</name> <modifier>*</modifier></type><name>sslconn</name> <init>= <expr><operator>(</operator><name>SSLConnection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SSL_write</name><argument_list>(<argument><expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>writelen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssl_set_error</name><argument_list>(<argument><expr><name>sslconn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>ssl_read</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SSLConnection</name> <modifier>*</modifier></type><name>sslconn</name> <init>= <expr><operator>(</operator><name>SSLConnection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ssl_set_error</name><argument_list>(<argument><expr><name>sslconn</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ssl_close</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SSLConnection</name> <modifier>*</modifier></type><name>sslconn</name> <init>= <expr><operator>(</operator><name>SSLConnection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl_ctx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_plain_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ssl_errmsg</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SSLConnection</name> <modifier>*</modifier></type><name>sslconn</name> <init>= <expr><operator>(</operator><name>SSLConnection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reason</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>err</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ecode</name> <init>= <expr><name><name>sslconn</name><operator>-&gt;</operator><name>errcode</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Clear errors */</comment>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sslconn</name><operator>-&gt;</operator><name>errcode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>sslconn</name><operator>-&gt;</operator><name>ssl</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>sslerr</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>sslconn</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>sslerr</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>SSL_ERROR_NONE</name></expr>:</case>
			<case>case <expr><name>SSL_ERROR_SSL</name></expr>:</case>
				<comment type="block">/* ecode should be set and handled below */</comment>
				<break>break;</break>
			<case>case <expr><name>SSL_ERROR_ZERO_RETURN</name></expr>:</case>
				<return>return <expr><literal type="string">"SSL error zero return"</literal></expr>;</return>
			<case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
				<return>return <expr><literal type="string">"SSL error want read"</literal></expr>;</return>
			<case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
				<return>return <expr><literal type="string">"SSL error want write"</literal></expr>;</return>
			<case>case <expr><name>SSL_ERROR_WANT_CONNECT</name></expr>:</case>
				<return>return <expr><literal type="string">"SSL error want connect"</literal></expr>;</return>
			<case>case <expr><name>SSL_ERROR_WANT_ACCEPT</name></expr>:</case>
				<return>return <expr><literal type="string">"SSL error want accept"</literal></expr>;</return>
			<case>case <expr><name>SSL_ERROR_WANT_X509_LOOKUP</name></expr>:</case>
				<return>return <expr><literal type="string">"SSL error want X509 lookup"</literal></expr>;</return>
			<case>case <expr><name>SSL_ERROR_SYSCALL</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><literal type="string">"EOF in SSL operation"</literal></expr>;</return></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>IS_SOCKET_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* reset error for plan_errmsg() */</comment>
						<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
						<return>return <expr><call><name>ts_plain_errmsg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<return>return <expr><literal type="string">"unknown SSL syscall error"</literal></expr>;</return></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
				<return>return <expr><literal type="string">"SSL error syscall"</literal></expr>;</return>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Assume this was an error of the underlying socket */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IS_SOCKET_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* reset error for plan_errmsg() */</comment>
			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
			<return>return <expr><call><name>ts_plain_errmsg</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><literal type="string">"no SSL error"</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>ERR_reason_error_string</name><argument_list>(<argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>reason</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>reason</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SSL error code %lu"</literal></expr></argument>, <argument><expr><name>ecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>errbuf</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConnOps</name></type> <name>ssl_ops</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSLConnection</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>connect</name> <operator>=</operator> <name>ssl_connect</name></expr>,
	<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ssl_close</name></expr>,
	<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>ssl_write</name></expr>,
	<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>ssl_read</name></expr>,
	<expr><operator>.</operator><name>set_timeout</name> <operator>=</operator> <name>ts_plain_set_timeout</name></expr>,
	<expr><operator>.</operator><name>errmsg</name> <operator>=</operator> <name>ssl_errmsg</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_conn_ssl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_conn_ssl_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>_conn_ssl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Always returns 1 */</comment>
	<expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_connection_register</name><argument_list>(<argument><expr><name>CONNECTION_SSL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssl_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_conn_ssl_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ERR_free_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
