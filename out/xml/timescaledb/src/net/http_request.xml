<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/net/http_request.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lib/stringinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE</name></cpp:macro> <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLON</name></cpp:macro> <cpp:value>':'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARRIAGE</name></cpp:macro> <cpp:value>'\r'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LINE</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<comment type="block">/*  So that http_response.c can find this function */</comment>
<function_decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>ts_http_header_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
								  <parameter><decl><type><name>size_t</name></type> <name>value_len</name></decl></parameter>, <parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>HttpHeader</name> <modifier>*</modifier></type>
<name>ts_http_header_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>value_len</name></decl></parameter>,
					  <parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>new_header</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HttpHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>new_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_header</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new_header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>new_header</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_header</name><operator>-&gt;</operator><name>name_len</name></name> <operator>=</operator> <name>name_len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new_header</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>value_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>value_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new_header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>new_header</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>value_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_header</name><operator>-&gt;</operator><name>value_len</name></name> <operator>=</operator> <name>value_len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new_header</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	<return>return <expr><name>new_header</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  NOTE: The setter functions for HttpRequest should all */</comment>
<comment type="block">/*  ensure that every char * in this struct is null-terminated */</comment>
<typedef>typedef <type><struct>struct <name>HttpRequest</name>
<block>{
	<decl_stmt><decl><type><name>HttpRequestMethod</name></type> <name>method</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>uri_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpVersion</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>body</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>body_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>context</name></decl>;</decl_stmt>
}</block></struct></type> <name>HttpRequest</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>http_method_strings</name><index>[]</index></name> <init>= <expr><block>{ <expr><index>[<expr><name>HTTP_GET</name></expr>]</index> <operator>=</operator> <literal type="string">"GET"</literal></expr>, <expr><index>[<expr><name>HTTP_POST</name></expr>]</index> <operator>=</operator> <literal type="string">"POST"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_STRING</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>http_method_strings[x]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSION_STRING</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ts_http_version_string(x)</cpp:value></cpp:define>

<comment type="block">/* appendBinaryStringInfo is UB if data is NULL. This function wraps it in a check that datalen &gt; 0
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>appendOptionalBinaryStringInfo</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_http_request_init</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>HttpRequestMethod</name></type> <name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpRequest</name> <modifier>*</modifier></type>
<name>ts_http_request_create</name><parameter_list>(<parameter><decl><type><name>HttpRequestMethod</name></type> <name>method</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>request_context</name> <init>=
		<expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"Http Request"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>request_context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HttpRequest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>request_context</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_init</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_http_request_destroy</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_http_request_set_uri</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>uri_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>uri_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>uri_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name><index>[<expr><name>uri_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>uri_len</name></name> <operator>=</operator> <name>uri_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_http_request_set_version</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>HttpVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_header</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>value_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <call><name>ts_http_header_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_http_request_set_header</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_http_request_set_body_jsonb</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Jsonb</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>jtext</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>content_length</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>JsonbToCString</name><argument_list>(<argument><expr><name>jtext</name></expr></argument>, <argument><expr><operator>(</operator><name>JsonbContainer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>body</name></name> <operator>=</operator> <name><name>jtext</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>body_len</name></name> <operator>=</operator> <name><name>jtext</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>content_length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>content_length</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>jtext</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_CONTENT_TYPE</name></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_CONTENT_LENGTH</name></expr></argument>, <argument><expr><name>content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_serialize_method</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><call><name>METHOD_STRING</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>method</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_serialize_version</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name> <init>= <expr><call><name>VERSION_STRING</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_serialize_uri</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>appendOptionalBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>uri_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_serialize_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>to_serialize</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>to_serialize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_request_serialize_body</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>appendOptionalBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>body_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_header_serialize</name><parameter_list>(<parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>appendOptionalBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>COLON</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>SPACE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendOptionalBinaryStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>value_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>http_header_get_content_length</name><parameter_list>(<parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>content_length</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>HTTP_CONTENT_LENGTH</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>name_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>content_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_http_request_build</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>buf_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* serialize into this buf, which is allocated on caller's memory context */</comment>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>cur_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>content_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>verified_content_length</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>http_request_serialize_method</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>SPACE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>http_request_serialize_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>SPACE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>http_request_serialize_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>CARRIAGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>NEW_LINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cur_header</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>headers</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>cur_header</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>content_length</name> <operator>=</operator> <call><name>http_header_get_content_length</name><argument_list>(<argument><expr><name>cur_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>content_length</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* make sure it's equal to body_len */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>content_length</name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>body_len</name></name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>verified_content_length</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>http_header_serialize</name><argument_list>(<argument><expr><name>cur_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>CARRIAGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>NEW_LINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>cur_header</name> <operator>=</operator> <name><name>cur_header</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>CARRIAGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_request_serialize_char</name><argument_list>(<argument><expr><name>NEW_LINE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>verified_content_length</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Then there was no header field for Content-Length */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>body_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>http_request_serialize_body</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Now everything lives in buf.data */</comment>
	<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
