<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/net/http_response.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lib/stringinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CARRIAGE_RETURN</name></cpp:macro> <cpp:value>'\r'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_LINE</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEP_CHAR</name></cpp:macro> <cpp:value>':'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VERSION_BUFFER_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>HttpHeader</name> <modifier>*</modifier></type><name>ts_http_header_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
										 <parameter><decl><type><name>size_t</name></type> <name>value_len</name></decl></parameter>, <parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <name>HttpParseState</name>
<block>{
	<decl><name>HTTP_STATE_STATUS</name></decl>,
	<decl><name>HTTP_STATE_INTERM</name></decl>,		<comment type="block">/* received a single \r */</comment>
	<decl><name>HTTP_STATE_HEADER_NAME</name></decl>, <comment type="block">/* received \r\n */</comment>
	<decl><name>HTTP_STATE_HEADER_VALUE</name></decl>,
	<decl><name>HTTP_STATE_ALMOST_DONE</name></decl>,
	<decl><name>HTTP_STATE_BODY</name></decl>,
	<decl><name>HTTP_STATE_ERROR</name></decl>,
	<decl><name>HTTP_STATE_DONE</name></decl>,
}</block></enum></type> <name>HttpParseState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HttpResponseState</name>
<block>{
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>version</name><index>[<expr><name>HTTP_VERSION_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>raw_buffer</name><index>[<expr><name>MAX_RAW_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<comment type="block">/* The next read should copy data into the buffer starting here */</comment>
	<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type> <name>parse_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>cur_header_name_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>cur_header_value_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_header_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cur_header_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>headers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>content_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>body_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpParseState</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>HttpResponseState</name>;</typedef>

<function><type><name>void</name></type>
<name>ts_http_response_state_init</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_STATUS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpResponseState</name> <modifier>*</modifier></type>
<name>ts_http_response_state_create</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>context</name> <init>=
		<expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"Http Response"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HttpResponseState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_response_state_init</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_http_response_state_destroy</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_http_response_state_valid_status</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If the status code hasn't been parsed yet, return */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>status_code</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* If it's a bad status code, then bad! */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>status_code</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_http_response_state_is_done</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>HTTP_STATE_DONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the remaining buffer space.
 *
 * Returns 0 or a positive number, or -1 for invalid state.
 *
 */</comment>
<function><type><name>ssize_t</name></type>
<name>ts_http_response_state_buffer_remaining</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;=</operator> <name>MAX_RAW_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>MAX_RAW_BUFFER_SIZE</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return a pointer to the next buffer to write to.
 *
 * Optionally, return the buffer size via the bufsize parameter.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>ts_http_response_state_next_buffer</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;=</operator> <name>MAX_RAW_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>bufsize</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>bufsize</name> <operator>=</operator> <call><name>ts_http_response_state_buffer_remaining</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * This should not happen, be we return NULL in this case and let caller
	 * deal with it
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name>MAX_RAW_BUFFER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_http_response_state_body_start</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>body_start</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_http_response_state_status_code</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>status_code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>ts_http_response_state_content_length</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>content_length</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HttpHeader</name> <modifier>*</modifier></type>
<name>ts_http_response_state_headers</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>headers</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>http_parse_version</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_http_version_from_string</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_VERSION_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_parse_status</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>raw_buf</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CARRIAGE_RETURN</name></expr>:</case>

			<comment type="block">/*
			 * Then we are at the end of status and can use sscanf
			 *
			 * Need a second %s inside the sscanf so that we make sure to get
			 * all of the digits of the status code
			 */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>raw_buf</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>raw_buf</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>raw_buf</name></expr></argument>, <argument><expr><literal type="string">"%127s%*[ ]%d%*[ ]%*s"</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>status_code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>http_parse_version</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_INTERM</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>NEW_LINE</name></expr>:</case>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* Don't try to parse Status line until we see '\r' */</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>raw_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_response_state_add_header</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>,
							   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>value_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>new_header</name> <init>=
		<expr><call><name>ts_http_header_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>headers</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>headers</name></name> <operator>=</operator> <name>new_header</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_parse_interm</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>temp_length</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NEW_LINE</name></expr>:</case>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_HEADER_NAME</name></expr>;</expr_stmt>
			<comment type="block">/* Store another header */</comment>
			<expr_stmt><expr><call><name>http_response_state_add_header</name><argument_list>(<argument><expr><name>state</name></expr></argument>,
										   <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name</name></name></expr></argument>,
										   <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name_len</name></name></expr></argument>,
										   <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_value</name></name></expr></argument>,
										   <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_value_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Check if the line we just read is Content-Length */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
				<call><name>strncmp</name><argument_list>(<argument><expr><name>HTTP_CONTENT_LENGTH</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator>
					<literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_value</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <name>temp_length</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_value_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_parse_header_name</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SEP_CHAR</name></expr>:</case>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_HEADER_VALUE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_value</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CARRIAGE_RETURN</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ALMOST_DONE</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * I'm guessing getting a carriage return in the middle of
				 * field
				 */</comment>
				<comment type="block">/* name is bad... */</comment>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		<default>default:</default>
			<comment type="block">/* Header names are only alphabetic chars */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>next</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>next</name> <operator>&amp;&amp;</operator> <name>next</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <name>next</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Good, then the next call will save this char */</comment>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name_len</name></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*  We do not customize to header_name. Assume all non \r or \n chars are allowed. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_parse_header_value</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Allow everything except... \r, \n */</comment>
	<switch>switch <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CARRIAGE_RETURN</name></expr>:</case>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_INTERM</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NEW_LINE</name></expr>:</case>
			<comment type="block">/* \n is not allowed */</comment>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_value_len</name></name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_parse_almost_done</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Don't do anything, this is intermediate state */</comment>
	<switch>switch <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NEW_LINE</name></expr>:</case>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_BODY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>body_start</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="block">/* Special case if there is no body */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_DONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_ERROR</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_http_response_state_parse</name><parameter_list>(<parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name>MAX_RAW_BUFFER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>MAX_RAW_BUFFER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Each state function will do the state AND transition */</comment>
	<while>while <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name>next</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>raw_buffer</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>HTTP_STATE_STATUS</name></expr>:</case>
				<expr_stmt><expr><call><name>http_parse_status</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>HTTP_STATE_INTERM</name></expr>:</case>
				<expr_stmt><expr><call><name>http_parse_interm</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>cur_header_name</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>HTTP_STATE_HEADER_NAME</name></expr>:</case>
				<expr_stmt><expr><call><name>http_parse_header_name</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>HTTP_STATE_HEADER_VALUE</name></expr>:</case>
				<expr_stmt><expr><call><name>http_parse_header_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>HTTP_STATE_ALMOST_DONE</name></expr>:</case>
				<expr_stmt><expr><call><name>http_parse_almost_done</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>HTTP_STATE_BODY</name></expr>:</case>
				<comment type="block">/* Stay here until we have read content_length */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>body_start</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>content_length</name></name><operator>)</operator> <operator>&lt;=</operator>
					<operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>raw_buffer</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Then we are done */</comment>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>HTTP_STATE_DONE</name></expr>;</expr_stmt>
					<return>return <expr><name>true</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parse_offset</name></name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>HTTP_STATE_ERROR</name></expr>:</case>
				<return>return <expr><name>false</name></expr>;</return>
			<case>case <expr><name>HTTP_STATE_DONE</name></expr>:</case>
				<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
