<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/net/http.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>http_error_strings</name><index>[]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>HTTP_ERROR_NONE</name></expr>]</index> <operator>=</operator> <literal type="string">"no HTTP error"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_WRITE</name></expr>]</index> <operator>=</operator> <literal type="string">"HTTP connection write error"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_READ</name></expr>]</index> <operator>=</operator> <literal type="string">"HTTP connection read error"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_CONN_CLOSED</name></expr>]</index> <operator>=</operator> <literal type="string">"HTTP connection closed"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_REQUEST_BUILD</name></expr>]</index> <operator>=</operator> <literal type="string">"could not build HTTP request"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_RESPONSE_PARSE</name></expr>]</index> <operator>=</operator> <literal type="string">"could not parse HTTP response"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_RESPONSE_INCOMPLETE</name></expr>]</index> <operator>=</operator> <literal type="string">"incomplete HTTP response"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_INVALID_BUFFER_STATE</name></expr>]</index> <operator>=</operator> <literal type="string">"invalid HTTP buffer state"</literal></expr>,
	<expr><index>[<expr><name>HTTP_ERROR_UNKNOWN</name></expr>]</index> <operator>=</operator> <literal type="string">"unknown HTTP error"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>http_version_strings</name><index>[]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>HTTP_VERSION_10</name></expr>]</index> <operator>=</operator> <literal type="string">"HTTP/1.0"</literal></expr>,
	<expr><index>[<expr><name>HTTP_VERSION_11</name></expr>]</index> <operator>=</operator> <literal type="string">"HTTP/1.1"</literal></expr>,
	<expr><index>[<expr><name>HTTP_VERSION_INVALID</name></expr>]</index> <operator>=</operator> <literal type="string">"invalid HTTP version"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_http_strerror</name><parameter_list>(<parameter><decl><type><name>HttpError</name></type> <name>http_errno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>http_error_strings</name><index>[<expr><name>http_errno</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HttpVersion</name></type>
<name>ts_http_version_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HTTP_VERSION_INVALID</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>http_version_strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

	<return>return <expr><name>HTTP_VERSION_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_http_version_string</name><parameter_list>(<parameter><decl><type><name>HttpVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>http_version_strings</name><index>[<expr><name>version</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Send an HTTP request and receive the HTTP response on the given connection.
 *
 * Returns HTTP_ERROR_NONE (0) on success or a HTTP-specific error on failure.
 */</comment>
<function><type><name>HttpError</name></type>
<name>ts_http_send_and_recv</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>built_request</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>request_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type> <name>write_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpError</name></type> <name>err</name> <init>= <expr><name>HTTP_ERROR_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>built_request</name> <operator>=</operator> <call><name>ts_http_request_build</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>built_request</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>HTTP_ERROR_REQUEST_BUILD</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>request_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ts_connection_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>built_request</name> <operator>+</operator> <name>write_off</name></expr></argument>, <argument><expr><name>request_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ret</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>ret</name></expr></argument> &gt;</argument_list></name> <name>request_len</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>HTTP_ERROR_WRITE</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>HTTP_ERROR_CONN_CLOSED</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>write_off</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>request_len</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><name>err</name> <operator>==</operator> <name>HTTP_ERROR_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ts_http_response_state_is_done</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>remaining</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>ts_http_response_state_next_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <name>HTTP_ERROR_INVALID_BUFFER_STATE</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>remaining</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <name>HTTP_ERROR_RESPONSE_INCOMPLETE</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name> <init>= <expr><call><name>ts_connection_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <name>HTTP_ERROR_READ</name></expr>;</expr_stmt></block_content></block></if>
			<comment type="block">/* Check for error or closed socket/EOF (ret == 0) */</comment>
			<if type="elseif">else if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <name>HTTP_ERROR_CONN_CLOSED</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ts_http_response_state_parse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>err</name> <operator>=</operator> <name>HTTP_ERROR_RESPONSE_PARSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
