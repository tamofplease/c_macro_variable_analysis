<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/bgw/timer.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postmaster/bgworker.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/ipc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/latch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lwlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/shmem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/jsonb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/timestamp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgstat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TIMEOUT</name></cpp:macro> <cpp:value>(5 * INT64CONST(1000))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MILLISECS_PER_SEC</name></cpp:macro> <cpp:value>INT64CONST(1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USECS_PER_MILLISEC</name></cpp:macro> <cpp:value>INT64CONST(1000)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>on_postmaster_death</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Don't call exit hooks cause we want to bail out quickly. We don't care
	 * about cleaning up shared memory in this case anyway since it's
	 * potentially corrupt.
	 */</comment>
	<expr_stmt><expr><call><name>on_exit_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ADMIN_SHUTDOWN</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"postmaster exited while timescaledb scheduler was working"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_timeout_millisec</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>by_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>timeout_sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout_usec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_IS_NOBEGIN</name><argument_list>(<argument><expr><name>by_time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_IS_NOEND</name><argument_list>(<argument><expr><name>by_time</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PG_INT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>by_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout_sec</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout_usec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name>timeout_sec</name> <operator>*</operator> <name>MILLISECS_PER_SEC</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <name>timeout_usec</name><operator>)</operator> <operator>/</operator> <name>USECS_PER_MILLISEC</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>wait_using_wait_latch</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>until</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>wl_rc</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int64</name></type> <name>timeout</name> <init>= <expr><call><name>get_timeout_millisec</name><argument_list>(<argument><expr><name>until</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"get_timeout_millisec underflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <name>MAX_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>MAX_TIMEOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Wait latch requires timeout to be &lt;= INT_MAX */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64</name><operator>)</operator> <name>timeout</name> <operator>&gt;</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>wl_rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
					  <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
					  <argument><expr><name>timeout</name></expr></argument>,
					  <argument><expr><name>PG_WAIT_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>wl_rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>on_postmaster_death</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Timer</name></type> <name>standard_timer</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>get_current_timestamp</name> <operator>=</operator> <name>GetCurrentTimestamp</name></expr>,
	<expr><operator>.</operator><name>wait</name> <operator>=</operator> <name>wait_using_wait_latch</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Timer</name> <modifier>*</modifier></type><name>current_timer_implementation</name> <init>= <expr><operator>&amp;</operator><name>standard_timer</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>Timer</name> <modifier>*</modifier></type>
<name>timer_get</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>current_timer_implementation</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_timer_wait</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>until</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>timer_get</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>wait</name><argument_list>(<argument><expr><name>until</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TimestampTz</name></type>
<name>ts_timer_get_current_timestamp</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>timer_get</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>get_current_timestamp</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>ts_timer_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Timer</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>current_timer_implementation</name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>Timer</name> <modifier>*</modifier></type>
<name>ts_get_standard_timer</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name>standard_timer</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
