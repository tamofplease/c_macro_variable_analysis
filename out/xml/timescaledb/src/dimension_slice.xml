<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/dimension_slice.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/relscan.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/heapam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/indexing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;funcapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_opfamily.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_policy/chunk_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scanner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<comment type="block">/* Put DIMENSION_SLICE_MAXVALUE point in same slice as DIMENSION_SLICE_MAXVALUE-1, always */</comment>
<comment type="block">/* This avoids the problem with coord &lt; range_end where coord and range_end is an int64 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMAP_LAST_COORDINATE</name><parameter_list>(<parameter><type><name>coord</name></type></parameter>)</parameter_list></cpp:macro>                                                               \
	<cpp:value>(((coord) == DIMENSION_SLICE_MAXVALUE) ? DIMENSION_SLICE_MAXVALUE - 1 : (coord))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type>
<name>dimension_slice_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionSlice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type>
<name>dimension_slice_from_form_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Form_dimension_slice</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>dimension_slice_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FormData_dimension_slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>storage_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>storage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>slice</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type>
<name>dimension_slice_from_slot</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ExecFetchSlotHeapTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_form_data</name><argument_list>(<argument><expr><operator>(</operator><name>Form_dimension_slice</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>slice</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>range_start</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>range_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>dimension_slice_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>=</operator> <name>dimension_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>=</operator> <name>range_start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>=</operator> <name>range_end</name></expr>;</expr_stmt>

	<return>return <expr><name>slice</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_dimension_slice_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>DIMENSION_SLICE_RANGE_START_CMP</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DIMENSION_SLICE_RANGE_END_CMP</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_dimension_slice_cmp_coordinate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>coord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>coord</name> <operator>=</operator> <call><name>REMAP_LAST_COORDINATE</name><argument_list>(<argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>coord</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>coord</name> <operator>&gt;=</operator> <name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tuple_is_deleted</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name> <operator>==</operator> <name>TM_Deleted</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ItemPointerEquals</name><argument_list>(<argument><expr><call><name>ts_scanner_get_tuple_tid</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ti</name><operator>-&gt;</operator><name>lockfd</name><operator>.</operator><name>ctid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name> <operator>==</operator> <name>TM_Deleted</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lock_result_ok_or_abort</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Updating a tuple in the same transaction before taking a lock is OK
		 * even though it is not expected in this case */</comment>
		<case>case <expr><name>TM_SelfModified</name></expr>:</case>
		<case>case <expr><name>TM_Ok</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>TM_Deleted</name></expr>:</case>
		<case>case <expr><name>TM_Updated</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_LOCK_NOT_AVAILABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk %s by other transaction"</literal></expr></argument>,
							<argument><expr><ternary><condition><expr><call><name>tuple_is_deleted</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"deleted"</literal></expr> </then><else>: <expr><literal type="string">"updated"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Retry the operation again."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>TM_BeingModified</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_LOCK_NOT_AVAILABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunk updated by other transaction"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Retry the operation again."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TM_Invisible</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"attempt to lock invisible tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TM_WouldBlock</name></expr>:</case>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected tuple lock status: %d"</literal></expr></argument>, <argument><expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>dimension_vec_tuple_found_list</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>slices</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TM_SelfModified</name></expr>:</case>
		<case>case <expr><name>TM_Ok</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>TM_Deleted</name></expr>:</case>
		<case>case <expr><name>TM_Updated</name></expr>:</case>
			<comment type="block">/* Treat as not found */</comment>
			<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected tuple lock status: %d"</literal></expr></argument>, <argument><expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_slot</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>slices</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>slices</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>dimension_vec_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier><modifier>*</modifier></type><name>slices</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TM_SelfModified</name></expr>:</case>
		<case>case <expr><name>TM_Ok</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>TM_Deleted</name></expr>:</case>
		<case>case <expr><name>TM_Updated</name></expr>:</case>
			<comment type="block">/* Treat as not found */</comment>
			<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected tuple lock status: %d"</literal></expr></argument>, <argument><expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_slot</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>slices</name> <operator>=</operator> <call><name>ts_dimension_vec_add_slice</name><argument_list>(<argument><expr><name>slices</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dimension_slice_scan_limit_direction_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indexid</name></decl></parameter>, <parameter><decl><type><name>ScanKeyData</name> <modifier>*</modifier></type><name>scankey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
											  <parameter><decl><type><name>tuple_found_func</name></type> <name>on_tuple_found</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>scandata</name></decl></parameter>,
											  <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>ScanDirection</name></type> <name>scandir</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>,
											  <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScannerCtx</name></type> <name>scanctx</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>DIMENSION_SLICE</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>index</name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>DIMENSION_SLICE</name></expr></argument>, <argument><expr><name>indexid</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <name>nkeys</name></expr>,
		<expr><operator>.</operator><name>scankey</name> <operator>=</operator> <name>scankey</name></expr>,
		<expr><operator>.</operator><name>data</name> <operator>=</operator> <name>scandata</name></expr>,
		<expr><operator>.</operator><name>limit</name> <operator>=</operator> <name>limit</name></expr>,
		<expr><operator>.</operator><name>tuplock</name> <operator>=</operator> <name>tuplock</name></expr>,
		<expr><operator>.</operator><name>tuple_found</name> <operator>=</operator> <name>on_tuple_found</name></expr>,
		<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>lockmode</name></expr>,
		<expr><operator>.</operator><name>scandirection</name> <operator>=</operator> <name>scandir</name></expr>,
		<expr><operator>.</operator><name>result_mctx</name> <operator>=</operator> <name>mctx</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>ts_scanner_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scanctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dimension_slice_scan_limit_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indexid</name></decl></parameter>, <parameter><decl><type><name>ScanKeyData</name> <modifier>*</modifier></type><name>scankey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
									<parameter><decl><type><name>tuple_found_func</name></type> <name>on_tuple_found</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>scandata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,
									<parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>,
									<parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We have =, &lt;=, &gt; ops for index columns, so backwards scan direction is
	 * more appropriate. Forward direction wouldn't be able to use the second
	 * column to find a starting point for the scan. Unfortunately we can't do
	 * anything about the third column, we'll be checking for it with a
	 * sequential scan over index pages. Ideally we need some other index type
	 * than btree for this.
	 */</comment>
	<return>return <expr><call><name>dimension_slice_scan_limit_direction_internal</name><argument_list>(<argument><expr><name>indexid</name></expr></argument>,
														 <argument><expr><name>scankey</name></expr></argument>,
														 <argument><expr><name>nkeys</name></expr></argument>,
														 <argument><expr><name>on_tuple_found</name></expr></argument>,
														 <argument><expr><name>scandata</name></expr></argument>,
														 <argument><expr><name>limit</name></expr></argument>,
														 <argument><expr><name>BackwardScanDirection</name></expr></argument>,
														 <argument><expr><name>lockmode</name></expr></argument>,
														 <argument><expr><name>tuplock</name></expr></argument>,
														 <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Scan for slices that enclose the coordinate in the given dimension.
 *
 * Returns a dimension vector of slices that enclose the coordinate.
 */</comment>
<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_scan_limit</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>coordinate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>slices</name> <init>= <expr><call><name>ts_dimension_vec_create</name><argument_list>(<argument><expr><ternary><condition><expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><name>DIMENSION_VEC_DEFAULT_SIZE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>coordinate</name> <operator>=</operator> <call><name>REMAP_LAST_COORDINATE</name><argument_list>(<argument><expr><name>coordinate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Perform an index scan for slices matching the dimension's ID and which
	 * enclose the coordinate.
	 */</comment>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_start</name></expr></argument>,
				<argument><expr><name>BTLessEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8LE</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>coordinate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_end</name></expr></argument>,
				<argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8GT</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>coordinate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
										<argument><expr><name>scankey</name></expr></argument>,
										<argument><expr><literal type="number">3</literal></expr></argument>,
										<argument><expr><name>dimension_vec_tuple_found</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>,
										<argument><expr><name>limit</name></expr></argument>,
										<argument><expr><name>AccessShareLock</name></expr></argument>,
										<argument><expr><name>tuplock</name></expr></argument>,
										<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_dimension_vec_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dimension_slice_scan_list</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>coordinate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>matching_dimension_slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>coordinate</name> <operator>=</operator> <call><name>REMAP_LAST_COORDINATE</name><argument_list>(<argument><expr><name>coordinate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Perform an index scan for slices matching the dimension's ID and which
	 * enclose the coordinate.
	 */</comment>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_start</name></expr></argument>,
				<argument><expr><name>BTLessEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8LE</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>coordinate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_end</name></expr></argument>,
				<argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8GT</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>coordinate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ScanTupLock</name></type> <name>tuplock</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>lockmode</name> <operator>=</operator> <name>LockTupleKeyShare</name></expr>,
		<expr><operator>.</operator><name>waitpolicy</name> <operator>=</operator> <name>LockWaitBlock</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
										<argument><expr><name>scankey</name></expr></argument>,
										<argument><expr><literal type="number">3</literal></expr></argument>,
										<argument><expr><name>dimension_vec_tuple_found_list</name></expr></argument>,
										<argument><expr><name>matching_dimension_slices</name></expr></argument>,
										<comment type="block">/* limit = */</comment> <argument><expr><literal type="number">0</literal></expr></argument>,
										<argument><expr><name>AccessShareLock</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>tuplock</name></expr></argument>,
										<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_dimension_slice_scan_iterator_set_range</name><parameter_list>(<parameter><decl><type><name>ScanIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>,
										   <parameter><decl><type><name>StrategyNumber</name></type> <name>start_strategy</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>start_value</name></decl></parameter>,
										   <parameter><decl><type><name>StrategyNumber</name></type> <name>end_strategy</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>end_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>,
									  <argument><expr><name>DIMENSION_SLICE</name></expr></argument>,
									  <argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_reset</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(
		<argument><expr><name>it</name></expr></argument>,
		<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
		<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
		<argument><expr><name>F_INT4EQ</name></expr></argument>,
		<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Perform an index scan for slices matching the dimension's ID and which
	 * enclose the coordinate.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>start_strategy</name> <operator>!=</operator> <name>InvalidStrategy</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>opno</name> <init>= <expr><call><name>get_opfamily_member</name><argument_list>(<argument><expr><name>INTEGER_BTREE_FAM_OID</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><name>start_strategy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>proc</name> <init>= <expr><call><name>get_opcode</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(
			<argument><expr><name>it</name></expr></argument>,
			<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_start</name></expr></argument>,
			<argument><expr><name>start_strategy</name></expr></argument>,
			<argument><expr><name>proc</name></expr></argument>,
			<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>start_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>end_strategy</name> <operator>!=</operator> <name>InvalidStrategy</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>opno</name> <init>= <expr><call><name>get_opfamily_member</name><argument_list>(<argument><expr><name>INTEGER_BTREE_FAM_OID</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><name>end_strategy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>proc</name> <init>= <expr><call><name>get_opcode</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * range_end is stored as exclusive, so add 1 to the value being
		 * searched. Also avoid overflow
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>end_value</name> <operator>!=</operator> <name>PG_INT64_MAX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>end_value</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * If getting as input INT64_MAX-1, need to remap the incremented
			 * value back to INT64_MAX-1
			 */</comment>
			<expr_stmt><expr><name>end_value</name> <operator>=</operator> <call><name>REMAP_LAST_COORDINATE</name><argument_list>(<argument><expr><name>end_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * The point with INT64_MAX gets mapped to INT64_MAX-1 so
			 * incrementing that gets you to INT_64MAX
			 */</comment>
			<expr_stmt><expr><name>end_value</name> <operator>=</operator> <name>PG_INT64_MAX</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(
			<argument><expr><name>it</name></expr></argument>,
			<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_end</name></expr></argument>,
			<argument><expr><name>end_strategy</name></expr></argument>,
			<argument><expr><name>proc</name></expr></argument>,
			<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>end_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>nkeys</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Look for all dimension slices where (lower_bound, upper_bound) of the dimension_slice contains
 * the given (start_value, end_value) range
 *
 */</comment>
<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_scan_range_limit</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>start_strategy</name></decl></parameter>,
									<parameter><decl><type><name>int64</name></type> <name>start_value</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>end_strategy</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>end_value</name></decl></parameter>,
									<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>slices</name> <init>= <expr><call><name>ts_dimension_vec_create</name><argument_list>(<argument><expr><ternary><condition><expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><name>DIMENSION_VEC_DEFAULT_SIZE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name> <init>= <expr><call><name>ts_dimension_slice_scan_iterator_create</name><argument_list>(<argument><expr><name>tuplock</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_dimension_slice_scan_iterator_set_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>,
											   <argument><expr><name>dimension_id</name></expr></argument>,
											   <argument><expr><name>start_strategy</name></expr></argument>,
											   <argument><expr><name>start_value</name></expr></argument>,
											   <argument><expr><name>end_strategy</name></expr></argument>,
											   <argument><expr><name>end_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>.</operator><name>ctx</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

	<macro><name>ts_scanner_foreach</name><argument_list>(<argument>&amp;it</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><call><name>ts_scan_iterator_tuple_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>TM_SelfModified</name></expr>:</case>
			<case>case <expr><name>TM_Ok</name></expr>:</case>
				<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_slot</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>slices</name> <operator>=</operator> <call><name>ts_dimension_vec_add_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>TM_Deleted</name></expr>:</case>
			<case>case <expr><name>TM_Updated</name></expr>:</case>
				<comment type="block">/* Treat as not found */</comment>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected tuple lock status: %d"</literal></expr></argument>, <argument><expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>limit</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>slices</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>&lt;=</operator> <name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_dimension_vec_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Scan for slices that collide/overlap with the given range.
 *
 * Returns a dimension vector of colliding slices.
 */</comment>
<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_collision_scan_limit</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>range_start</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>range_end</name></decl></parameter>,
										<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>slices</name> <init>= <expr><call><name>ts_dimension_vec_create</name><argument_list>(<argument><expr><ternary><condition><expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><name>DIMENSION_VEC_DEFAULT_SIZE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_start</name></expr></argument>,
				<argument><expr><name>BTLessStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8LT</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>range_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_end</name></expr></argument>,
				<argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8GT</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>range_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
										<argument><expr><name>scankey</name></expr></argument>,
										<argument><expr><literal type="number">3</literal></expr></argument>,
										<argument><expr><name>dimension_vec_tuple_found</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>,
										<argument><expr><name>limit</name></expr></argument>,
										<argument><expr><name>AccessShareLock</name></expr></argument>,
										<argument><expr><name>NULL</name></expr></argument>,
										<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_dimension_vec_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_scan_by_dimension</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>slices</name> <init>= <expr><call><name>ts_dimension_vec_create</name><argument_list>(<argument><expr><ternary><condition><expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><name>DIMENSION_VEC_DEFAULT_SIZE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
										<argument><expr><name>scankey</name></expr></argument>,
										<argument><expr><literal type="number">1</literal></expr></argument>,
										<argument><expr><name>dimension_vec_tuple_found</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>,
										<argument><expr><name>limit</name></expr></argument>,
										<argument><expr><name>AccessShareLock</name></expr></argument>,
										<argument><expr><name>NULL</name></expr></argument>,
										<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_dimension_vec_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return slices that occur "before" the given point.
 *
 * The slices will be allocated on the given memory context. Note, however, that
 * the returned dimension vector is allocated on the current memory context.
 */</comment>
<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_scan_by_dimension_before_point</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>,
												  <parameter><decl><type><name>ScanDirection</name></type> <name>scandir</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>slices</name> <init>= <expr><call><name>ts_dimension_vec_create</name><argument_list>(<argument><expr><ternary><condition><expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><name>DIMENSION_VEC_DEFAULT_SIZE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_start</name></expr></argument>,
				<argument><expr><name>BTLessStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8LT</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_end</name></expr></argument>,
				<argument><expr><name>BTLessStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8LT</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dimension_slice_scan_limit_direction_internal</name><argument_list>(
		<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
		<argument><expr><name>scankey</name></expr></argument>,
		<argument><expr><literal type="number">3</literal></expr></argument>,
		<argument><expr><name>dimension_vec_tuple_found</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>,
		<argument><expr><name>limit</name></expr></argument>,
		<argument><expr><name>scandir</name></expr></argument>,
		<argument><expr><name>AccessShareLock</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_dimension_vec_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>dimension_slice_tuple_delete</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>dimension_slice_id</name> <init>= <expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name>Anum_dimension_slice_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>delete_constraints</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* delete chunk constraints */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>delete_constraints</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>delete_constraints</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_chunk_constraint_delete_by_dimension_slice_id</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>dimension_slice_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_delete_tid</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><call><name>ts_scanner_get_tuple_tid</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_dimension_slice_delete_by_dimension_id</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>delete_constraints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(
		<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
		<argument><expr><name>scankey</name></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>,
		<argument><expr><name>dimension_slice_tuple_delete</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>delete_constraints</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>RowExclusiveLock</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_dimension_slice_delete_by_id</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_slice_id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>delete_constraints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_id_idx_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_slice_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(<argument><expr><name>DIMENSION_SLICE_ID_IDX</name></expr></argument>,
											   <argument><expr><name>scankey</name></expr></argument>,
											   <argument><expr><literal type="number">1</literal></expr></argument>,
											   <argument><expr><name>dimension_slice_tuple_delete</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>delete_constraints</name></expr></argument>,
											   <argument><expr><literal type="number">1</literal></expr></argument>,
											   <argument><expr><name>RowExclusiveLock</name></expr></argument>,
											   <argument><expr><name>NULL</name></expr></argument>,
											   <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>dimension_slice_fill</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TM_SelfModified</name></expr>:</case>
		<case>case <expr><name>TM_Ok</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier><modifier>*</modifier></type><name>slice</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ts_scanner_fetch_heap_tuple</name><argument_list>(<argument><expr><name>ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>slice</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FormData_dimension_slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>TM_Deleted</name></expr>:</case>
		<case>case <expr><name>TM_Updated</name></expr>:</case>
			<comment type="block">/* Same as not found */</comment>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected tuple lock status: %d"</literal></expr></argument>, <argument><expr><name><name>ti</name><operator>-&gt;</operator><name>lockresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>SCAN_DONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Scan for an existing slice that exactly matches the given slice's dimension
 * and range. If a match is found, the given slice is updated with slice ID
 * and the tuple is locked.
 *
 * Returns true if the dimension slice was found (and locked), false
 * otherwise.
 */</comment>
<function><type><name>bool</name></type>
<name>ts_dimension_slice_scan_for_existing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_start</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8EQ</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_range_end</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8EQ</name></expr></argument>,
				<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(
		<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
		<argument><expr><name>scankey</name></expr></argument>,
		<argument><expr><literal type="number">3</literal></expr></argument>,
		<argument><expr><name>dimension_slice_fill</name></expr></argument>,
		<argument><expr><operator>(</operator><name>DimensionSlice</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>slice</name></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>,
		<argument><expr><name>AccessShareLock</name></expr></argument>,
		<argument><expr><name>tuplock</name></expr></argument>,
		<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_from_tuple</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>lock_result_ok_or_abort</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_slot</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>slice</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>dimension_slice_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier><modifier>*</modifier></type><name>slice</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>slice</name> <operator>=</operator> <call><name>ts_dimension_slice_from_tuple</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SCAN_DONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Scan for a slice by dimension slice id.
 *
 * If you're scanning for a tuple, you have to provide a lock, since, otherwise,
 * concurrent threads can do bad things with the tuple and you probably want
 * it to not change nor disappear. */</comment>
<function><type><name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_scan_by_id_and_lock</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_slice_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>,
									   <parameter><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_id_idx_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_slice_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dimension_slice_scan_limit_internal</name><argument_list>(<argument><expr><name>DIMENSION_SLICE_ID_IDX</name></expr></argument>,
										<argument><expr><name>scankey</name></expr></argument>,
										<argument><expr><literal type="number">1</literal></expr></argument>,
										<argument><expr><name>dimension_slice_tuple_found</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>slice</name></expr></argument>,
										<argument><expr><literal type="number">1</literal></expr></argument>,
										<argument><expr><name>AccessShareLock</name></expr></argument>,
										<argument><expr><name>tuplock</name></expr></argument>,
										<argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>slice</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ScanIterator</name></type>
<name>ts_dimension_slice_scan_iterator_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>result_mcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name> <init>= <expr><call><name>ts_scan_iterator_create</name><argument_list>(<argument><expr><name>DIMENSION_SLICE</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>result_mcxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>it</name><operator>.</operator><name>ctx</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SCANNER_F_NOEND_AND_NOCLOSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>.</operator><name>ctx</name><operator>.</operator><name>tuplock</name></name> <operator>=</operator> <name>tuplock</name></expr>;</expr_stmt>

	<return>return <expr><name>it</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dimension_slice_scan_iterator_set_slice_id</name><parameter_list>(<parameter><decl><type><name>ScanIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>slice_id</name></decl></parameter>,
											  <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DIMENSION_SLICE</name></expr></argument>, <argument><expr><name>DIMENSION_SLICE_ID_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_reset</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(<argument><expr><name>it</name></expr></argument>,
								   <argument><expr><name>Anum_dimension_slice_id_idx_id</name></expr></argument>,
								   <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
								   <argument><expr><name>F_INT4EQ</name></expr></argument>,
								   <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>slice_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>tuplock</name></name> <operator>=</operator> <name>tuplock</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_scan_iterator_get_by_id</name><parameter_list>(<parameter><decl><type><name>ScanIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>slice_id</name></decl></parameter>,
										   <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_dimension_slice_scan_iterator_set_slice_id</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>slice_id</name></expr></argument>, <argument><expr><name>tuplock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_start_or_restart_scan</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ti</name> <operator>=</operator> <call><name>ts_scan_iterator_next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ts_scan_iterator_next</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* This is a heavy call, consider removing it */</comment>
	<return>return <expr><ternary><condition><expr><name>ti</name></expr> ?</condition><then> <expr><call><name>ts_dimension_slice_from_tuple</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>original</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionSlice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>original</name><operator>-&gt;</operator><name>storage</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>original</name><operator>-&gt;</operator><name>storage_free</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionSlice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if two dimensions slices overlap by doing collision detection in one
 * dimension.
 *
 * Returns true if the slices collide, otherwise false.
 */</comment>
<function><type><name>bool</name></type>
<name>ts_dimension_slices_collide</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>slice1</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>==</operator> <name><name>slice2</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name><name>slice1</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>&lt;</operator> <name><name>slice2</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>&amp;&amp;</operator>
			<name><name>slice1</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>&gt;</operator> <name><name>slice2</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether two slices are identical.
 *
 * We require by assertion that the slices are in the same dimension and we only
 * compare the ranges (i.e., the slice ID is not important for equality).
 *
 * Returns true if the slices have identical ranges, otherwise false.
 */</comment>
<function><type><name>bool</name></type>
<name>ts_dimension_slices_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>slice1</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>==</operator> <name><name>slice2</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>slice1</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>==</operator> <name><name>slice2</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>&amp;&amp;</operator>
		   <name><name>slice1</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>==</operator> <name><name>slice2</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*-
 * Cut a slice that collides with another slice. The coordinate is the point of
 * insertion, and determines which end of the slice to cut.
 *
 * Case where we cut "after" the coordinate:
 *
 * ' [-x--------]
 * '      [--------]
 *
 * Case where we cut "before" the coordinate:
 *
 * '      [------x--]
 * ' [--------]
 *
 * Returns true if the slice was cut, otherwise false.
 */</comment>
<function><type><name>bool</name></type>
<name>ts_dimension_slice_cut</name><parameter_list>(<parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>to_cut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>other</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>coord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>to_cut</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>==</operator> <name><name>other</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>coord</name> <operator>=</operator> <call><name>REMAP_LAST_COORDINATE</name><argument_list>(<argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>&lt;=</operator> <name>coord</name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>&gt;</operator> <name><name>to_cut</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Cut "before" the coordinate */</comment>
		<expr_stmt><expr><name><name>to_cut</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>=</operator> <name><name>other</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name></expr>;</expr_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>other</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>&gt;</operator> <name>coord</name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name> <operator>&lt;</operator> <name><name>to_cut</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Cut "after" the coordinate */</comment>
		<expr_stmt><expr><name><name>to_cut</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name> <operator>=</operator> <name><name>other</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name></expr>;</expr_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dimension_slice_free</name><parameter_list>(<parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>storage_free</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>slice</name><operator>-&gt;</operator><name>storage_free</name></name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>dimension_slice_insert_relation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>desc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_dimension_slice</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_dimension_slice</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Slice already exists in table */</comment>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>ts_catalog_table_next_seq_id</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DIMENSION_SLICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_slice_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_slice_dimension_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_slice_range_start</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_slice_range_end</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_insert_values</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Insert slices into the catalog.
 *
 * Only slices that don't already exist in the catalog will be inserted. Note
 * that all slices that already exist (i.e., have a valid ID) MUST be locked
 * with a tuple lock (e.g., FOR KEY SHARE) prior to calling this function
 * since they won't be created. Otherwise it is not possible to guarantee that
 * all slices still exist once the transaction commits.
 *
 * Returns the number of slices inserted.
 */</comment>
<function><type><name>int</name></type>
<name>ts_dimension_slice_insert_multi</name><parameter_list>(<parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier><modifier>*</modifier></type><name>slices</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>num_slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>DIMENSION_SLICE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_slices</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>id</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>dimension_slice_insert_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dimension_slice_insert</name><parameter_list>(<parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>DIMENSION_SLICE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dimension_slice_insert_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Keeping a row lock to prevent VACUUM or ALTER TABLE from running while working on the table.
	 * This is known to cause issues in certain situations.
	 */</comment>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>dimension_slice_nth_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier><modifier>*</modifier></type><name>slice</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_slot</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_nth_latest_slice</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num_tuples</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_dimension_slice_dimension_id_range_start_range_end_idx_dimension_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>num_tuples</name> <operator>=</operator> <call><name>dimension_slice_scan_limit_direction_internal</name><argument_list>(
		<argument><expr><name>DIMENSION_SLICE_DIMENSION_ID_RANGE_START_RANGE_END_IDX</name></expr></argument>,
		<argument><expr><name>scankey</name></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>,
		<argument><expr><name>dimension_slice_nth_tuple_found</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>,
		<argument><expr><name>n</name></expr></argument>,
		<argument><expr><name>BackwardScanDirection</name></expr></argument>,
		<argument><expr><name>AccessShareLock</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>num_tuples</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32</name></type>
<name>ts_dimension_slice_oldest_valid_chunk_for_reorder</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>job_id</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>,
												  <parameter><decl><type><name>StrategyNumber</name></type> <name>start_strategy</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>start_value</name></decl></parameter>,
												  <parameter><decl><type><name>StrategyNumber</name></type> <name>end_strategy</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>end_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>result_chunk_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name> <init>= <expr><call><name>ts_dimension_slice_scan_iterator_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_dimension_slice_scan_iterator_set_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>,
											   <argument><expr><name>dimension_id</name></expr></argument>,
											   <argument><expr><name>start_strategy</name></expr></argument>,
											   <argument><expr><name>start_value</name></expr></argument>,
											   <argument><expr><name>end_strategy</name></expr></argument>,
											   <argument><expr><name>end_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_start_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><call><name>ts_scan_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_ids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ti</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_slot</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_chunk_constraint_scan_by_dimension_slice_to_list</name><argument_list>(<argument><expr><name>slice</name></expr></argument>,
															<argument><expr><operator>&amp;</operator><name>chunk_ids</name></expr></argument>,
															<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>chunk_ids</argument>)</argument_list></macro>
		<block>{<block_content>
			<comment type="block">/* Look for a chunk that a) doesn't have a job stat (reorder ) and b) is not compressed
			 * (should not reorder a compressed chunk) */</comment>
			<decl_stmt><decl><type><name>int32</name></type> <name>chunk_id</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BgwPolicyChunkStats</name> <modifier>*</modifier></type><name>chunk_stat</name> <init>= <expr><call><name>ts_bgw_policy_chunk_stats_find</name><argument_list>(<argument><expr><name>job_id</name></expr></argument>, <argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chunk_stat</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>chunk_stat</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>num_times_job_run</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
				<call><name>ts_chunk_get_compression_status</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CHUNK_COMPRESS_NONE</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Save the chunk_id */</comment>
				<expr_stmt><expr><name>result_chunk_id</name> <operator>=</operator> <name>chunk_id</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result_chunk_id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_dimension_slice_get_chunkids_to_compress</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>start_strategy</name></decl></parameter>,
											<parameter><decl><type><name>int64</name></type> <name>start_value</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>end_strategy</name></decl></parameter>,
											<parameter><decl><type><name>int64</name></type> <name>end_value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compress</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recompress</name></decl></parameter>,
											<parameter><decl><type><name>int32</name></type> <name>numchunks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>chunk_ids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxchunks</name> <init>= <expr><ternary><condition><expr><name>numchunks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>numchunks</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name> <init>= <expr><call><name>ts_dimension_slice_scan_iterator_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_dimension_slice_scan_iterator_set_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>,
											   <argument><expr><name>dimension_id</name></expr></argument>,
											   <argument><expr><name>start_strategy</name></expr></argument>,
											   <argument><expr><name>start_value</name></expr></argument>,
											   <argument><expr><name>end_strategy</name></expr></argument>,
											   <argument><expr><name>end_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_start_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>slice_chunk_ids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ti</name> <operator>=</operator> <call><name>ts_scan_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ti</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>dimension_slice_from_slot</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_chunk_constraint_scan_by_dimension_slice_to_list</name><argument_list>(<argument><expr><name>slice</name></expr></argument>,
															<argument><expr><operator>&amp;</operator><name>slice_chunk_ids</name></expr></argument>,
															<argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>slice_chunk_ids</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type> <name>chunk_id</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ChunkCompressionStatus</name></type> <name>st</name> <init>= <expr><call><name>ts_chunk_get_compression_status</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>compress</name> <operator>&amp;&amp;</operator> <name>st</name> <operator>==</operator> <name>CHUNK_COMPRESS_NONE</name><operator>)</operator> <operator>||</operator>
				<operator>(</operator><name>recompress</name> <operator>&amp;&amp;</operator> <name>st</name> <operator>==</operator> <name>CHUNK_COMPRESS_UNORDERED</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* found a chunk that is not compressed or needs recompress
				 * caller needs to check the correct chunk status
				 */</comment>
				<expr_stmt><expr><name>chunk_ids</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>chunk_ids</name></expr></argument>, <argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>maxchunks</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>chunk_ids</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>maxchunks</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>chunk_ids</name></expr>;</return>
</block_content>}</block></function>
</unit>
