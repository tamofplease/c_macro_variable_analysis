<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/telemetry/stats.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/table.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/genam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/tableam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_class.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/indexing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/continuous_agg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug_point.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>StatsContext</name>
<block>{
	<decl_stmt><decl><type><name>TelemetryStats</name> <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl>;</decl_stmt>
}</block></struct></type> <name>StatsContext</name>;</typedef>

<comment type="block">/*
 * Determine the type of a hypertable.
 */</comment>
<function><type><specifier>static</specifier> <name>StatsRelType</name></type>
<name>classify_hypertable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_IS_INTERNAL_COMPRESSION_TABLE</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * This is an internal compression table, but could be for a
		 * regular hypertable, a distributed member hypertable, or for
		 * an internal materialized hypertable (cagg). The latter case
		 * is currently not handled
		 */</comment>
		<return>return <expr><name>RELTYPE_COMPRESSION_HYPERTABLE</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Not dealing with an internal compression hypertable, but
		 * could be a materialized hypertable (cagg) unless it is
		 * distributed.
		 */</comment>
		<switch>switch <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>replication_factor</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>HYPERTABLE_DISTRIBUTED_MEMBER</name></expr>:</case>
				<return>return <expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE_MEMBER</name></expr>;</return>
			<case>case <expr><name>HYPERTABLE_REGULAR</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name> <init>= <expr><call><name>ts_continuous_agg_find_by_mat_hypertable_id</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>cagg</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>RELTYPE_MATERIALIZED_HYPERTABLE</name></expr>;</return></block_content></block></if></if_stmt>

				<return>return <expr><name>RELTYPE_HYPERTABLE</name></expr>;</return>
			</block_content>}</block>
			<default>default:</default>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>replication_factor</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE</name></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StatsRelType</name></type>
<name>classify_chunk</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>htcache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StatsRelType</name></type> <name>parent_reltype</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Classify the chunk's parent */</comment>
	<expr_stmt><expr><operator>*</operator><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>htcache</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hypertable_relid</name></name></expr></argument>, <argument><expr><name>CACHE_FLAG_MISSING_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <operator>*</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>parent_reltype</name> <operator>=</operator> <call><name>classify_hypertable</name><argument_list>(<argument><expr><operator>*</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Classify the chunk's parent */</comment>
	<switch>switch <condition>(<expr><name>parent_reltype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELTYPE_HYPERTABLE</name></expr>:</case>
			<return>return <expr><name>RELTYPE_CHUNK</name></expr>;</return>
		<case>case <expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE</name></expr>:</case>
			<return>return <expr><name>RELTYPE_DISTRIBUTED_CHUNK</name></expr>;</return>
		<case>case <expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE_MEMBER</name></expr>:</case>
			<return>return <expr><name>RELTYPE_DISTRIBUTED_CHUNK_MEMBER</name></expr>;</return>
		<case>case <expr><name>RELTYPE_MATERIALIZED_HYPERTABLE</name></expr>:</case>
			<return>return <expr><name>RELTYPE_MATERIALIZED_CHUNK</name></expr>;</return>
		<case>case <expr><name>RELTYPE_COMPRESSION_HYPERTABLE</name></expr>:</case>
			<return>return <expr><name>RELTYPE_COMPRESSION_CHUNK</name></expr>;</return>
		<default>default:</default>
			<comment type="block">/* Shouldn't really get here */</comment>
			<return>return <expr><name>RELTYPE_OTHER</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StatsRelType</name></type>
<name>classify_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>htcache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl></parameter>,
			   <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>class</name><operator>-&gt;</operator><name>relispartition</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RELTYPE_PARTITION</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Check if it is a hypertable */</comment>
	<expr_stmt><expr><operator>*</operator><name>ht</name> <operator>=</operator> <call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>htcache</name></expr></argument>, <argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>CACHE_FLAG_MISSING_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ht</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>classify_hypertable</name><argument_list>(<argument><expr><operator>*</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Check if it is a chunk */</comment>
	<expr_stmt><expr><operator>*</operator><name>chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>*</operator><name>chunk</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>classify_chunk</name><argument_list>(<argument><expr><name>htcache</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>*</operator><name>chunk</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>RELTYPE_TABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StatsRelType</name></type>
<name>classify_partitioned_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Form_pg_class</name></type> <name>class</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the partitioned table itself is a partition, then it is a partition
	 * in a multi-dimensional partitioned table. Treat it as a partition so
	 * that only "root" tables are counted as partitioned tables.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>class</name><operator>-&gt;</operator><name>relispartition</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RELTYPE_PARTITION</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>RELTYPE_PARTITIONED_TABLE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StatsRelType</name></type>
<name>classify_foreign_table</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>htcache</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>chunk</name> <operator>=</operator> <call><name>ts_chunk_get_by_relid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>chunk</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>classify_chunk</name><argument_list>(<argument><expr><name>htcache</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><operator>*</operator><name>chunk</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Currently don't care about non-chunk foreign tables, so classify as
	 * "other".
	 */</comment>
	<return>return <expr><name>RELTYPE_OTHER</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StatsRelType</name></type>
<name>classify_view</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>htcache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ContinuousAgg</name> <modifier>*</modifier><modifier>*</modifier></type><name>cagg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>class</name><operator>-&gt;</operator><name>relnamespace</name></name> <operator>==</operator> <name><name>catalog</name><operator>-&gt;</operator><name>extension_schema_id</name><index>[<expr><name>TS_INTERNAL_SCHEMA</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RELTYPE_OTHER</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>cagg</name> <operator>=</operator> <call><name>ts_continuous_agg_find_by_relid</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cagg</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>RELTYPE_CONTINUOUS_AGG</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>RELTYPE_VIEW</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StatsRelType</name></type>
<name>classify_relation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>htcache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier><modifier>*</modifier></type><name>ht</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ContinuousAgg</name> <modifier>*</modifier><modifier>*</modifier></type><name>cagg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>chunk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ht</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cagg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>class</name><operator>-&gt;</operator><name>relkind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_RELATION</name></expr>:</case>
			<return>return <expr><call><name>classify_table</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>htcache</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>RELKIND_PARTITIONED_TABLE</name></expr>:</case>
			<return>return <expr><call><name>classify_partitioned_table</name><argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>RELKIND_FOREIGN_TABLE</name></expr>:</case>
			<return>return <expr><call><name>classify_foreign_table</name><argument_list>(<argument><expr><name>htcache</name></expr></argument>, <argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
			<return>return <expr><name>RELTYPE_MATVIEW</name></expr>;</return>
		<case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
			<return>return <expr><call><name>classify_view</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>htcache</name></expr></argument>, <argument><expr><name>cagg</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>RELTYPE_OTHER</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_storage</name><parameter_list>(<parameter><decl><type><name>StorageStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RelationSize</name></type> <name>relsize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>relsize</name> <operator>=</operator> <call><name>ts_relation_size_impl</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>relsize</name><operator>.</operator><name>total_size</name></name> <operator>+=</operator> <name><name>relsize</name><operator>.</operator><name>total_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>relsize</name><operator>.</operator><name>heap_size</name></name> <operator>+=</operator> <name><name>relsize</name><operator>.</operator><name>heap_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>relsize</name><operator>.</operator><name>toast_size</name></name> <operator>+=</operator> <name><name>relsize</name><operator>.</operator><name>toast_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>relsize</name><operator>.</operator><name>index_size</name></name> <operator>+=</operator> <name><name>relsize</name><operator>.</operator><name>index_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_relation</name><parameter_list>(<parameter><decl><type><name>BaseStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>relcount</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * As of PG14, pg_class.reltuples is set to -1 when the row count is
	 * unknown. Make sure we only add the count when the information is
	 * available.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>class</name><operator>-&gt;</operator><name>reltuples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>reltuples</name></name> <operator>+=</operator> <name><name>class</name><operator>-&gt;</operator><name>reltuples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RELKIND_HAS_STORAGE</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>relkind</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_storage</name><argument_list>(<argument><expr><operator>(</operator><name>StorageStats</name> <operator>*</operator><operator>)</operator> <name>stats</name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_hypertable</name><parameter_list>(<parameter><decl><type><name>HyperStats</name> <modifier>*</modifier></type><name>hyp</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>process_relation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hyp</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hyp</name><operator>-&gt;</operator><name>compressed_hypertable_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_distributed_hypertable</name><parameter_list>(<parameter><decl><type><name>HyperStats</name> <modifier>*</modifier></type><name>hyp</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>hyp</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>base</name><operator>.</operator><name>relcount</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hyp</name><operator>-&gt;</operator><name>compressed_hypertable_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>replication_factor</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hyp</name><operator>-&gt;</operator><name>replicated_hypertable_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_continuous_agg</name><parameter_list>(<parameter><decl><type><name>CaggStats</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>mat_ht</name> <init>= <expr><call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mat_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>raw_ht</name> <init>= <expr><call><name>ts_hypertable_get_by_id</name><argument_list>(<argument><expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>raw_hypertable_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cagg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>process_relation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cs</name><operator>-&gt;</operator><name>hyp</name><operator>.</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TS_HYPERTABLE_HAS_COMPRESSION_ENABLED</name><argument_list>(<argument><expr><name>mat_ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>hyp</name><operator>.</operator><name>compressed_hypertable_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>hypertable_is_distributed</name><argument_list>(<argument><expr><name>raw_ht</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>on_distributed_hypertable_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>materialized_only</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>uses_real_time_aggregation_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ContinuousAggIsFinalized</name><argument_list>(<argument><expr><name>cagg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>finalized</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cagg</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>parent_mat_hypertable_id</name></name> <operator>!=</operator> <name>INVALID_HYPERTABLE_ID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>nested</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_partition</name><parameter_list>(<parameter><decl><type><name>HyperStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ischunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>child_count</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/*
	 * Note that reltuples should be correct even for compressed chunks, since
	 * we "freeze" those stats when a chunk is compressed, and for foreign
	 * table chunks, since we import those stats from data nodes.
	 *
	 * Also, as of PG14, the parent tables include the cumulative stats for
	 * all children, so no need to count the partitions separately since the
	 * sum will be in the root.
	 */</comment>
	<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_GE</name></expr></cpp:if>
		<expr><name>ischunk</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<name><name>class</name><operator>-&gt;</operator><name>reltuples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>base</name><operator>.</operator><name>reltuples</name></name> <operator>+=</operator> <name><name>class</name><operator>-&gt;</operator><name>reltuples</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>add_storage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add a chunk's stats to the parent table.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_chunk_stats</name><parameter_list>(<parameter><decl><type><name>HyperStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>Form_compression_chunk_size</name></type> <name>fd_compr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>process_partition</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ts_chunk_is_compressed</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>compressed_chunk_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Add replica chunks, if any. Only count the extra replicas */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_nodes</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>replica_chunk_count</name></name> <operator>+=</operator> <operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_nodes</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * A chunk on a distributed hypertable can be marked as compressed but
	 * have no compression stats (the stats exists on the data node and might
	 * not be "imported"). Therefore, the check here is not the same as
	 * above.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>fd_compr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>compressed_heap_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>compressed_heap_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>compressed_indexes_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>compressed_index_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>compressed_toast_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>compressed_toast_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>uncompressed_heap_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>uncompressed_heap_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>uncompressed_indexes_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>uncompressed_index_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>uncompressed_toast_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>uncompressed_toast_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>uncompressed_row_count</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>numrows_pre_compression</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>compressed_row_count</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>numrows_post_compression</name></name></expr>;</expr_stmt>

		<comment type="block">/* Also add compressed sizes to total number for entire table */</comment>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>relsize</name><operator>.</operator><name>heap_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>compressed_heap_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>relsize</name><operator>.</operator><name>toast_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>compressed_toast_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>storage</name><operator>.</operator><name>relsize</name><operator>.</operator><name>index_size</name></name> <operator>+=</operator> <name><name>fd_compr</name><operator>-&gt;</operator><name>compressed_index_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>get_chunk_compression_stats</name><parameter_list>(<parameter><decl><type><name>StatsContext</name> <modifier>*</modifier></type><name>statsctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>,
							<parameter><decl><type><name>Form_compression_chunk_size</name></type> <name>compr_stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_chunk_is_compressed</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>ts_scan_iterator_create</name><argument_list>(<argument><expr><name>COMPRESSION_CHUNK_SIZE</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_set_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>COMPRESSION_CHUNK_SIZE</name></expr></argument>, <argument><expr><name>COMPRESSION_CHUNK_SIZE_PKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>.</operator><name>ctx</name><operator>.</operator><name>snapshot</name></name> <operator>=</operator> <name><name>statsctx</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>,
								   <argument><expr><name>Anum_compression_chunk_size_pkey_chunk_id</name></expr></argument>,
								   <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
								   <argument><expr><name>F_INT4EQ</name></expr></argument>,
								   <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_start_or_restart_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ti</name> <operator>=</operator> <call><name>ts_scan_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ti</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_compression_chunk_size</name></type> <name>fd</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ts_scan_iterator_fetch_heap_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>(</operator><name>Form_compression_chunk_size</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>compr_stats</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process a relation identified as being a chunk.
 *
 * The chunk could be part of a
 *
 *  - Hypertable
 *  - Distributed hypertable
 *  - Distributed hypertable member
 *  - Materialized hypertable (cagg) chunk
 *  - Internal compression table for hypertable
 *  - Internal compression table for materialized hypertable (cagg)
 *
 * Note that we want to count regular chunks and compressed chunks as part of
 * the same hypertable, although they are children of different tables
 * internally. The same applies to chunks that belong to a continuous
 * aggregate, although in that case there is actually a two-level indirection:
 * The main cagg view is the user-facing relation we'd like to collect stats
 * for, while its chunks are actually stored in a materialized hypertable,
 * and, in a second tier, in a compressed hypertable.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_chunk</name><parameter_list>(<parameter><decl><type><name>StatsContext</name> <modifier>*</modifier></type><name>statsctx</name></decl></parameter>, <parameter><decl><type><name>StatsRelType</name></type> <name>chunk_reltype</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>,
			  <parameter><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TelemetryStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><name><name>statsctx</name><operator>-&gt;</operator><name>stats</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_compression_chunk_size</name></type> <name>comp_stats_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_compression_chunk_size</name></type> <name>compr_stats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ignore compression chunks since we have a separate metadata table with
	 * stats for them
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>chunk_reltype</name> <operator>==</operator> <name>RELTYPE_COMPRESSION_CHUNK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>get_chunk_compression_stats</name><argument_list>(<argument><expr><name>statsctx</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp_stats_data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>compr_stats</name> <operator>=</operator> <operator>&amp;</operator><name>comp_stats_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>chunk_reltype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELTYPE_CHUNK</name></expr>:</case>
			<expr_stmt><expr><call><name>add_chunk_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>hypertables</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>compr_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELTYPE_DISTRIBUTED_CHUNK</name></expr>:</case>
			<expr_stmt><expr><call><name>add_chunk_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>distributed_hypertables</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>compr_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELTYPE_DISTRIBUTED_CHUNK_MEMBER</name></expr>:</case>
			<expr_stmt><expr><call><name>add_chunk_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>distributed_hypertable_members</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>compr_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELTYPE_MATERIALIZED_CHUNK</name></expr>:</case>
			<expr_stmt><expr><call><name>add_chunk_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>continuous_aggs</name><operator>.</operator><name>hyp</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>compr_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_pg_schema</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>namespaceid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>information_schema_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>namespaceid</name> <operator>==</operator> <name>PG_CATALOG_NAMESPACE</name> <operator>||</operator> <name>namespaceid</name> <operator>==</operator> <name>PG_TOAST_NAMESPACE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>information_schema_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>information_schema_oid</name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><literal type="string">"information_schema"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>namespaceid</name> <operator>==</operator> <name>information_schema_oid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_ts_schema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Catalog</name> <modifier>*</modifier></type><name>catalog</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>namespaceid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_TS_MAX_SCHEMA</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>namespaceid</name> <operator>!=</operator> <name><name>catalog</name><operator>-&gt;</operator><name>extension_schema_id</name><index>[<expr><name>TS_INTERNAL_SCHEMA</name></expr>]</index></name> <operator>&amp;&amp;</operator>
			<name>namespaceid</name> <operator>==</operator> <name><name>catalog</name><operator>-&gt;</operator><name>extension_schema_id</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>should_ignore_relation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Catalog</name> <modifier>*</modifier></type><name>catalog</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>class</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>is_pg_schema</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isAnyTempNamespace</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
			<call><name>is_ts_schema</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name><name>class</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ts_is_catalog_table</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Scan the entire pg_class catalog table for all relations. For each
 * relation, classify it and gather stats based on the classification.
 */</comment>
<function><type><name>void</name></type>
<name>ts_telemetry_stats_gather</name><parameter_list>(<parameter><decl><type><name>TelemetryStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>htcache</name> <init>= <expr><call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldmcxt</name></decl>, <decl><type ref="prev"/><name>relmcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StatsContext</name></type> <name>statsctx</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>stats</name> <operator>=</operator> <name>stats</name></expr>,
		<expr><operator>.</operator><name>snapshot</name> <operator>=</operator> <call><name>GetActiveSnapshot</name><argument_list>()</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ClassOidIndexId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relmcxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"RelationStats"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>class</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StatsRelType</name></type> <name>reltype</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>Chunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>ContinuousAgg</name> <modifier>*</modifier></type><name>cagg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>class</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>should_ignore_relation</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* Lock the relation to ensure it does not disappear while we process
		 * it */</comment>
		<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Now that the lock is acquired, ensure the relation still
		 * exists. Otherwise, ignore the relation and release the useless
		 * lock. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SearchSysCacheExists1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>UnlockRelationOid</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Use temporary per-relation memory context to not accumulate cruft
		 * during processing of pg_class.
		 */</comment>
		<expr_stmt><expr><name>oldmcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>relmcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>relmcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>reltype</name> <operator>=</operator> <call><name>classify_relation</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>htcache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chunk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cagg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>DEBUG_WAITPOINT</name><argument_list>(<argument><expr><literal type="string">"telemetry_classify_relation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>reltype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RELTYPE_HYPERTABLE</name></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>process_hypertable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>hypertables</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE</name></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>process_distributed_hypertable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>distributed_hypertables</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE_MEMBER</name></expr>:</case>
				<comment type="block">/*
				 * Since this is just a hypertable on a data node, process as
				 * a regular hypertable.
				 */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>process_hypertable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>distributed_hypertable_members</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_TABLE</name></expr>:</case>
				<expr_stmt><expr><call><name>process_relation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>tables</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_PARTITIONED_TABLE</name></expr>:</case>
				<expr_stmt><expr><call><name>process_relation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>partitioned_tables</name><operator>.</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_CHUNK</name></expr>:</case>
			<case>case <expr><name>RELTYPE_DISTRIBUTED_CHUNK</name></expr>:</case>
			<case>case <expr><name>RELTYPE_DISTRIBUTED_CHUNK_MEMBER</name></expr>:</case>
			<case>case <expr><name>RELTYPE_COMPRESSION_CHUNK</name></expr>:</case>
			<case>case <expr><name>RELTYPE_MATERIALIZED_CHUNK</name></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>process_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>statsctx</name></expr></argument>, <argument><expr><name>reltype</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_PARTITION</name></expr>:</case>
				<expr_stmt><expr><call><name>process_partition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>partitioned_tables</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_VIEW</name></expr>:</case>
				<comment type="block">/* Filter internal cagg views */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>class</name><operator>-&gt;</operator><name>relnamespace</name></name> <operator>!=</operator> <name><name>catalog</name><operator>-&gt;</operator><name>extension_schema_id</name><index>[<expr><name>TS_INTERNAL_SCHEMA</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>process_relation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>views</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_MATVIEW</name></expr>:</case>
				<expr_stmt><expr><call><name>process_relation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>materialized_views</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RELTYPE_CONTINUOUS_AGG</name></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>cagg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>process_continuous_agg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>continuous_aggs</name></name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>cagg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				<comment type="block">/* No stats collected for types below */</comment>
			<case>case <expr><name>RELTYPE_COMPRESSION_HYPERTABLE</name></expr>:</case>
			<case>case <expr><name>RELTYPE_MATERIALIZED_HYPERTABLE</name></expr>:</case>
			<case>case <expr><name>RELTYPE_OTHER</name></expr>:</case>
				<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>UnlockRelationOid</name><argument_list>(<argument><expr><name><name>class</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldmcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>htcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>relmcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
