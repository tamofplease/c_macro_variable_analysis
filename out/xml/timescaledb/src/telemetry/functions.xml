<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/telemetry/functions.c">
<comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/genam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/table.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/indexing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_depend.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;port/atomics.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lwlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/hsearch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgroids.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/regproc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"loader/function_telemetry.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>skip_telemetry</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LWLock</name> <modifier>*</modifier></type><name>function_counts_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>function_counts</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***************************
 * Telemetry draining code *
 ***************************/</comment>

<typedef>typedef <type><struct>struct <name>AllowedFnHashEntry</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>fn</name></decl>;</decl_stmt>
}</block></struct></type> <name>AllowedFnHashEntry</name>;</typedef>

<comment type="line">// Get a HTAB of AllowedFnHashEntrys containing all and only those functions</comment>
<comment type="line">// that are withing visible_extensions. This function should be equivalent to</comment>
<comment type="line">// the SQL</comment>
<comment type="line">//     SELECT objid</comment>
<comment type="line">//     FROM pg_catalog.pg_depend, pg_catalog.pg_extension extension</comment>
<comment type="line">//      WHERE refclassid = 'pg_catalog.pg_extension'::pg_catalog.regclass</comment>
<comment type="line">//        AND refobjid = extension.oid</comment>
<comment type="line">//        AND deptype = 'e'</comment>
<comment type="line">//        AND extname IN ('timescaledb','promscale','timescaledb_toolkit')</comment>
<comment type="line">//        AND classid = 'pg_catalog.pg_proc'::regclass;</comment>
<function><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type>
<name>allowed_extension_functions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>visible_extensions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_visible_extensions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>hash_info</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>keysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>entrysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AllowedFnHashEntry</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>hcxt</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>allowed_fns</name> <init>= <expr><call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"fn telemetry allowed_functions"</literal></expr></argument>,
									<argument><expr><literal type="number">1000</literal></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>hash_info</name></expr></argument>,
									<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>depRel</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>DependRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name> <modifier>*</modifier></type><name>visible_extension_ids</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>num_visible_extensions</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// get the Oid for each of the visible extensions</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_visible_extensions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>visible_extension_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name><name>visible_extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="line">// go through the objects owned by each visible extension, and store the</comment>
	<comment type="line">// ones that are functions in the set.</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_visible_extensions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>extension_id</name> <init>= <expr><name><name>visible_extension_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>extension_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Look in the (referenced object class, referenced object) index for</comment>
		<comment type="line">// the allowed extensions.</comment>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_pg_depend_refclassid</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
					<argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>ExtensionRelationId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name>Anum_pg_depend_refobjid</name></expr></argument>,
					<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
					<argument><expr><name>F_OIDEQ</name></expr></argument>,
					<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>extension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>depRel</name></expr></argument>, <argument><expr><name>DependReferenceIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Form_pg_depend</name></type> <name>deprec</name> <init>= <expr><operator>(</operator><name>Form_pg_depend</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// Filter for those objects that have an extension dependencies</comment>
			<comment type="line">// exist in pg_proc, those are the functions that live in the extension</comment>
			<if_stmt><if>if <condition>(<expr><name><name>deprec</name><operator>-&gt;</operator><name>deptype</name></name> <operator>==</operator> <literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>deprec</name><operator>-&gt;</operator><name>classid</name></name> <operator>==</operator> <name>ProcedureRelationId</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>AllowedFnHashEntry</name> <modifier>*</modifier></type><name>entry</name> <init>=
					<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>allowed_fns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>deprec</name><operator>-&gt;</operator><name>objid</name></name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name><name>deprec</name><operator>-&gt;</operator><name>objid</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>depRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>allowed_fns</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>fn_telemetry_entry_vec</name> <modifier>*</modifier></type>
<name>read_shared_map</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>num_entries</name> <init>= <expr><call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>function_counts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fn_telemetry_entry_vec</name> <modifier>*</modifier></type><name>entries</name> <init>=
		<expr><call><name>fn_telemetry_entry_vec_create</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><name>num_entries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>function_counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// limit to num_entries so we don't hold the lock for a realloc</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FnTelemetryEntry</name></type> <name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FnTelemetryHashEntry</name> <modifier>*</modifier></type><name>hash_entry</name> <init>= <expr><call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_entry</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name><name>hash_entry</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<comment type="block">/*
		 * We never remove entries here, merely set their counts to 0. At
		 * steady-state we expect the functions used by most workloads to be
		 * effectively constant, so by keeping the hashmap entries allocated we
		 * reduce contention during the telemetry-gathering stage. If memory
		 * usage become an issue we can delete based off some heuristic, eg. if
		 * the count starts out as 0.
		 */</comment>
		<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fn_telemetry_entry_vec_append</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>num_entries</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>entries</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read the function telemetry shared-memory hashmap for telemetry send.
 *
 * This function gathers (function_id, count) pairs from the shared hashmap,
 * and filters the set for the functions we're allowed to send back.
 *
 * In general, we should never send telemetry information about any functions
 * except for core functions and those is a specified list of extensions
 * (when originally written, the set of related_extensions along with
 * timescaledb itself), so this function is designed to make it difficult to do
 * so.
 *
 * @param visible_extensions list of extensions whose functions should be
 *                           returned
 * @param num_visible_extensions length of visible_extensions
 * @return vector of FnTelemetryEntry containing (function_id, count)s for the
 *         functions in visible_extensions.
 *
 */</comment>
<function><type><name>fn_telemetry_entry_vec</name> <modifier>*</modifier></type>
<name>ts_function_telemetry_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>visible_extensions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_visible_extensions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fn_telemetry_entry_vec</name> <modifier>*</modifier></type><name>entries_to_send</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fn_telemetry_entry_vec</name> <modifier>*</modifier></type><name>all_entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>allowed_ext_fns</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>function_counts</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FnTelemetryRendezvous</name> <modifier>*</modifier><modifier>*</modifier></type><name>rendezvous</name> <init>=
			<expr><operator>(</operator><name>FnTelemetryRendezvous</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><name>RENDEZVOUS_FUNCTION_TELEMENTRY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rendezvous</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>function_counts</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rendezvous</name><operator>)</operator><operator>-&gt;</operator><name>function_counts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>function_counts_lock</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rendezvous</name><operator>)</operator><operator>-&gt;</operator><name>lock</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>all_entries</name> <operator>=</operator> <call><name>read_shared_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entries_to_send</name> <operator>=</operator>
		<call><name>fn_telemetry_entry_vec_create</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><name><name>all_entries</name><operator>-&gt;</operator><name>num_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>allowed_ext_fns</name> <operator>=</operator> <call><name>allowed_extension_functions</name><argument_list>(<argument><expr><name>visible_extensions</name></expr></argument>, <argument><expr><name>num_visible_extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>all_entries</name><operator>-&gt;</operator><name>num_elements</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FnTelemetryEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>fn_telemetry_entry_vec_at</name><argument_list>(<argument><expr><name>all_entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>is_builtin</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>fn</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>fn</name></name> <operator>&lt;=</operator> <literal type="number">9999</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>is_visible</name> <init>= <expr><name>is_builtin</name> <operator>||</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>allowed_ext_fns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>fn</name></name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_visible</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fn_telemetry_entry_vec_append</name><argument_list>(<argument><expr><name>entries_to_send</name></expr></argument>, <argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>entries_to_send</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reset the counts in the function telemetry shared-memory hashmap.
 *
 * This function resets the shared function counts after we send back telemetry
 * in preparation for the next recording cycle. Note that there is no way to
 * atomically read and reset the counts in the shared hashmap, so writes that
 * occur between sending the old counts and reseting for the next cycle will be
 * lost. Since this this telemetry is only ever an approximation of reality, we
 * believe this loss is acceptable considering that the alternatives are
 * resetting the counts whenever the telemetry is read (potentially even more
 * lossy), or holding the lock for the entire telemetry send (to long a
 * contention window).
 */</comment>
<function><type><name>void</name></type>
<name>ts_function_telemetry_reset_counts</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>function_counts</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>function_counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// limit to num_entries so we don't hold the lock for a realloc</comment>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FnTelemetryHashEntry</name> <modifier>*</modifier></type><name>hash_entry</name> <init>= <expr><call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_entry</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * We never remove entries here, merely set their counts to 0. At
		 * steady-state we expect the functions used by most workloads to be
		 * effectively constant, so by keeping the hashmap entries allocated we
		 * reduce contention during the telemetry-gathering stage. If memory
		 * usage become an issue we can delete based off some heuristic, eg. if
		 * the count starts out as 0, though we will have to use a stronger
		 * lock.
		 */</comment>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************
 * Telemetry gathering code *
 ****************************/</comment>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>function_telemetry_increment</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>func_id</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier><modifier>*</modifier></type><name>local_counts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FnTelemetryEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<comment type="line">// if this is the first function we've seen initialize local_counts</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>local_counts</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HASHCTL</name></type> <name>hash_info</name> <init>= <expr><block>{
			<expr><operator>.</operator><name>keysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
			<expr><operator>.</operator><name>entrysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FnTelemetryEntry</name></expr></argument>)</argument_list></sizeof></expr>,
			<expr><operator>.</operator><name>hcxt</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>,
		}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>local_counts</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"fn telemetry local function hash"</literal></expr></argument>,
									<argument><expr><literal type="number">10</literal></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>hash_info</name></expr></argument>,
									<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><operator>*</operator><name>local_counts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>func_id</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>function_gather_checker</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>func_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>function_telemetry_increment</name><argument_list>(<argument><expr><name>func_id</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>function_gather_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>end_early</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>end_early</name> <operator>=</operator> <call><name>check_functions_in_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>function_gather_checker</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>end_early</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Recurse into subselects */</comment>
		<return>return <expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>, <argument><expr><name>function_gather_walker</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>function_gather_walker</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type>
<name>record_function_counts</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>query_function_counts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>function_gather_walker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query_function_counts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>query_function_counts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store a map of (function_oid, count) into shared memory so it can be seen by
 * the telemetry worker. This insertion works in two phases:
 *   1. Under a SHARED lock, we increment the counts of all those functions that
 *      are already present in the map, using atomic fetch-add to prevent races.
 *   2. Under an EXCLUSIVE lock, we insert entries for all those functions that
 *      were not already in the map.
 * At steady state we expect that vast majority the time all the functions a
 * query uses will already be in the shared map, so this strategy should
 * minimize contention between queries.
 *
 * @param query_function_counts A hashtable of FnTelemetryEntry storing
 *                              function usage counts
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>store_function_counts_in_shared_mem</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>query_function_counts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FnTelemetryEntry</name> <modifier>*</modifier></type><name>local_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fn_telemetry_entry_vec</name></type> <name>missing_entries</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fn_telemetry_entry_vec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing_entries</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Increment the counts of any functions already in the table under a
	 * shared lock; the atomicity of increments will handle concurrency.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>query_function_counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>local_entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FnTelemetryHashEntry</name> <modifier>*</modifier></type><name>shared_entry</name> <init>=
			<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>function_counts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>local_entry</name><operator>-&gt;</operator><name>fn</name></name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>shared_entry</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>local_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fn_telemetry_entry_vec_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing_entries</name></expr></argument>, <argument><expr><operator>*</operator><name>local_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If any functions did not have an entries create them under an
	 * exclusive lock
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>missing_entries</name><operator>.</operator><name>num_elements</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>missing_entries</name><operator>.</operator><name>num_elements</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FnTelemetryEntry</name> <modifier>*</modifier></type><name>missing_entry</name> <init>= <expr><call><name>fn_telemetry_entry_vec_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>missing_entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FnTelemetryHashEntry</name> <modifier>*</modifier></type><name>shared_entry</name> <init>=
				<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>function_counts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>missing_entry</name><operator>-&gt;</operator><name>fn</name></name></expr></argument>, <argument><expr><name>HASH_ENTER_NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shared_entry</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>missing_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>missing_entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>function_counts_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Gather function usage telemetry for a query.
 *
 * This function walks a query looking for function Oids, counts their
 * occurrence, and stores the (function_id, count) set into the shared-memory
 * function telemetry hashtable for later processing by the telemetry background
 * worker.
 */</comment>
<function><type><name>void</name></type>
<name>ts_telemetry_function_info_gather</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>query_function_counts</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>skip_telemetry</name> <operator>||</operator> <operator>!</operator><call><name>ts_function_telemetry_on</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// At the first time through initialize the shared state</comment>
	<if_stmt><if>if <condition>(<expr><name>function_counts</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FnTelemetryRendezvous</name> <modifier>*</modifier><modifier>*</modifier></type><name>rendezvous</name> <init>=
			<expr><operator>(</operator><name>FnTelemetryRendezvous</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><name>RENDEZVOUS_FUNCTION_TELEMENTRY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rendezvous</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>skip_telemetry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>function_counts</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rendezvous</name><operator>)</operator><operator>-&gt;</operator><name>function_counts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>function_counts_lock</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>rendezvous</name><operator>)</operator><operator>-&gt;</operator><name>lock</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>query_function_counts</name> <operator>=</operator> <call><name>record_function_counts</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>query_function_counts</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>store_function_counts_in_shared_mem</name><argument_list>(<argument><expr><name>query_function_counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
