<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/telemetry/telemetry.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/ipc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_collation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/json.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/jsonb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/regproc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"telemetry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"telemetry_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsonb_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"license_guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_policy/policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/compression_chunk_size.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cross_module_fn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/spi.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_TELEMETRY_VERSION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_VERSION_JSON_FIELD</name></cpp:macro> <cpp:value>"current_timescaledb_version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_IS_UPTODATE_JSON_FIELD</name></cpp:macro> <cpp:value>"is_up_to_date"</cpp:value></cpp:define>

<comment type="block">/*  HTTP request details */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REQUEST_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_TELEMETRY_VERSION</name></cpp:macro> <cpp:value>"telemetry_version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_DB_UUID</name></cpp:macro> <cpp:value>"db_uuid"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_EXPORTED_DB_UUID</name></cpp:macro> <cpp:value>"exported_db_uuid"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_INSTALL_TIME</name></cpp:macro> <cpp:value>"installed_time"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_INSTALL_METHOD</name></cpp:macro> <cpp:value>"install_method"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_OS</name></cpp:macro> <cpp:value>"os_name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_OS_VERSION</name></cpp:macro> <cpp:value>"os_version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_OS_RELEASE</name></cpp:macro> <cpp:value>"os_release"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_OS_VERSION_PRETTY</name></cpp:macro> <cpp:value>"os_name_pretty"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_PS_VERSION</name></cpp:macro> <cpp:value>"postgresql_version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_TS_VERSION</name></cpp:macro> <cpp:value>"timescaledb_version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_BUILD_OS</name></cpp:macro> <cpp:value>"build_os_name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_BUILD_OS_VERSION</name></cpp:macro> <cpp:value>"build_os_version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_BUILD_ARCHITECTURE_BIT_SIZE</name></cpp:macro> <cpp:value>"build_architecture_bit_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_BUILD_ARCHITECTURE</name></cpp:macro> <cpp:value>"build_architecture"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_DATA_VOLUME</name></cpp:macro> <cpp:value>"data_volume"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_CAGG_FIXED</name></cpp:macro> <cpp:value>"num_continuous_aggs_policies_fixed"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_COMPRESSION_FIXED</name></cpp:macro> <cpp:value>"num_compression_policies_fixed"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_REORDER_FIXED</name></cpp:macro> <cpp:value>"num_reorder_policies_fixed"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_RETENTION_FIXED</name></cpp:macro> <cpp:value>"num_retention_policies_fixed"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_USER_DEFINED_ACTIONS_FIXED</name></cpp:macro> <cpp:value>"num_user_defined_actions_fixed"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_CAGG</name></cpp:macro> <cpp:value>"num_continuous_aggs_policies"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_COMPRESSION</name></cpp:macro> <cpp:value>"num_compression_policies"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_REORDER</name></cpp:macro> <cpp:value>"num_reorder_policies"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_POLICY_RETENTION</name></cpp:macro> <cpp:value>"num_retention_policies"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_USER_DEFINED_ACTIONS</name></cpp:macro> <cpp:value>"num_user_defined_actions"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELATED_EXTENSIONS</name></cpp:macro> <cpp:value>"related_extensions"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_METADATA</name></cpp:macro> <cpp:value>"db_metadata"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_LICENSE_EDITION_APACHE</name></cpp:macro> <cpp:value>"apache_only"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_LICENSE_EDITION_COMMUNITY</name></cpp:macro> <cpp:value>"community"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_TS_LAST_TUNE_TIME</name></cpp:macro> <cpp:value>"last_tuned_time"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_TS_LAST_TUNE_VERSION</name></cpp:macro> <cpp:value>"last_tuned_version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_INSTANCE_METADATA</name></cpp:macro> <cpp:value>"instance_metadata"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_TS_TELEMETRY_CLOUD</name></cpp:macro> <cpp:value>"cloud"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_WAL_SENDERS</name></cpp:macro> <cpp:value>"num_wal_senders"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_IS_WAL_RECEIVER</name></cpp:macro> <cpp:value>"is_wal_receiver"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_PROMETHEUS</name></cpp:macro> <cpp:value>"pg_prometheus"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROMSCALE</name></cpp:macro> <cpp:value>"promscale"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGIS</name></cpp:macro> <cpp:value>"postgis"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMESCALE_ANALYTICS</name></cpp:macro> <cpp:value>"timescale_analytics"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMESCALEDB_TOOLKIT</name></cpp:macro> <cpp:value>"timescaledb_toolkit"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_JOB_STATS_BY_JOB_TYPE</name></cpp:macro> <cpp:value>"stats_by_job_type"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_NUM_ERR_BY_SQLERRCODE</name></cpp:macro> <cpp:value>"errors_by_sqlerrcode"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>related_extensions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><name>PG_PROMETHEUS</name></expr>, <expr><name>PROMSCALE</name></expr>, <expr><name>POSTGIS</name></expr>, <expr><name>TIMESCALE_ANALYTICS</name></expr>, <expr><name>TIMESCALEDB_TOOLKIT</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* This function counts background worker jobs by type. */</comment>
<function><type><specifier>static</specifier> <name>BgwJobTypeCount</name></type>
<name>bgw_job_type_counts</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobs</name> <init>= <expr><call><name>ts_bgw_job_get_all</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BgwJob</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwJobTypeCount</name></type> <name>counts</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>jobs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_schema</name></name></expr></argument>, <argument><expr><name>INTERNAL_SCHEMA_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name></expr></argument>, <argument><expr><literal type="string">"policy_refresh_continuous_aggregate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>fixed_schedule</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_cagg_fixed</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_cagg</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name></expr></argument>, <argument><expr><literal type="string">"policy_compression"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>fixed_schedule</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_compression_fixed</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_compression</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name></expr></argument>, <argument><expr><literal type="string">"policy_reorder"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>fixed_schedule</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_reorder_fixed</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_reorder</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name></expr></argument>, <argument><expr><literal type="string">"policy_retention"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>fixed_schedule</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_retention_fixed</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_retention</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name></expr></argument>, <argument><expr><literal type="string">"policy_telemetry"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>policy_telemetry</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>fixed_schedule</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>user_defined_action_fixed</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>counts</name><operator>.</operator><name>user_defined_action</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>counts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>char_in_valid_version_digits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'.'</literal></expr>:</case>
		<case>case <expr><literal type="char">'-'</literal></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Makes sure the server version string is less than MAX_VERSION_STR_LEN
 * chars, and all digits are "valid". Valid chars are either
 * alphanumeric or in the array valid_version_digits above.
 *
 * Returns false if either of these conditions are false.
 */</comment>
<function><type><name>bool</name></type>
<name>ts_validate_server_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>VersionResult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>version</name> <init>= <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>json_object_field_text</name></expr></argument>,
										<argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>TS_VERSION_JSON_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VersionResult</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>versionstr</name></name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>DatumGetTextPP</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>versionstr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>errhint</name></name> <operator>=</operator> <literal type="string">"no version string in response"</literal></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>versionstr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAX_VERSION_STR_LEN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>errhint</name></name> <operator>=</operator> <literal type="string">"version string is too long"</literal></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>versionstr</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>versionstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>versionstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>char_in_valid_version_digits</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>versionstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>errhint</name></name> <operator>=</operator> <literal type="string">"version string has invalid characters"</literal></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse the JSON response from the TS endpoint. There should be a field
 * called "current_timescaledb_version". Check this against the local
 * version, and notify the user if it is behind.
 */</comment>
<function><type><name>void</name></type>
<name>ts_check_version_response</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VersionResult</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_uptodate</name> <init>= <expr><call><name>DatumGetBool</name><argument_list>(
		<argument><expr><call><name>DirectFunctionCall2Coll</name><argument_list>(<argument><expr><name>texteq</name></expr></argument>,
								<argument><expr><name>C_COLLATION_OID</name></expr></argument>,
								<argument><expr><call><name>DirectFunctionCall2Coll</name><argument_list>(<argument><expr><name>json_object_field_text</name></expr></argument>,
														<argument><expr><name>C_COLLATION_OID</name></expr></argument>,
														<argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(
															<argument><expr><name>TS_IS_UPTODATE_JSON_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_uptodate</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"the \"%s\" extension is up-to-date"</literal></expr></argument>, <argument><expr><name>EXTENSION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_validate_server_version</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"server did not return a valid TimescaleDB version: %s"</literal></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>errhint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"the \"%s\" extension is not up-to-date"</literal></expr></argument>, <argument><expr><name>EXTENSION_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The most up-to-date version is %s, the installed version is %s."</literal></expr></argument>,
						 <argument><expr><name><name>result</name><operator>.</operator><name>versionstr</name></name></expr></argument>,
						 <argument><expr><name>TIMESCALEDB_VERSION_MOD</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>get_architecture_bit_size</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>BUILD_POINTER_BYTES</name> <operator>*</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_job_counts</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BgwJobTypeCount</name></type> <name>counts</name> <init>= <expr><call><name>bgw_job_type_counts</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_CAGG</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_cagg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_CAGG_FIXED</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_cagg_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_COMPRESSION</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_COMPRESSION_FIXED</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_compression_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_REORDER</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_reorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_REORDER_FIXED</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_reorder_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_RETENTION</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_retention</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_POLICY_RETENTION_FIXED</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>policy_retention_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_USER_DEFINED_ACTIONS</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>user_defined_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_USER_DEFINED_ACTIONS_FIXED</name></expr></argument>, <argument><expr><name><name>counts</name><operator>.</operator><name>user_defined_action_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>add_errors_by_sqlerrcode_internal</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>job_type</name></decl></parameter>,
								  <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>sqlerrs_jsonb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIteratorToken</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type> <name>key</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>jbvString</name></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>job_type</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>job_type</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we don't expect nested values here */</comment>
	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>JsonbIteratorInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sqlerrs_jsonb</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>true</name></expr></argument> <comment type="block">/*skip_nested*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WJB_BEGIN_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid JSON format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errcode</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name>errcnt</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>WJB_END_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>WJB_KEY</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* get the corresponding value for this key */</comment>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WJB_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>errcnt</name> <operator>=</operator>
				<call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_int8</name></expr></argument>, <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>, <argument><expr><name>errcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* this function queries the database through SPI and gets back a set of records
 that look like (job_type TEXT, jsonb_object_agg JSONB).
 For example, (user_defined_action, {"P0001": 2, "42883": 5})
 (we are expecting about 6 rows depending
 on how we write the query and if we exclude any jobs)
 Then for each returned row adds a new kv pair to the jsonb,
 which looks like "job_type": {"errtype1": errcnt1, ...} */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_errors_by_sqlerrcode</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>command</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>, <decl><type ref="prev"/><name>spi_context</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_string</name> <init>=
		<expr><literal type="string">"SELECT "</literal>
		<literal type="string">"job_type, jsonb_object_agg(sqlerrcode, count) "</literal>
		<literal type="string">"FROM"</literal>
		<literal type="string">"("</literal>
		<literal type="string">"	SELECT ("</literal>
		<literal type="string">"		CASE "</literal>
		<literal type="string">"			WHEN error_data -&gt;&gt; \'proc_schema\' = \'_timescaledb_internal\'"</literal>
		<literal type="string">" 			AND error_data -&gt;&gt; \'proc_name\' ~ "</literal>
		<literal type="string">"\'^policy_(retention|compression|reorder|refresh_continuous_"</literal>
		<literal type="string">"aggregate|telemetry|job_error_retention)$\' "</literal>
		<literal type="string">"			THEN error_data -&gt;&gt; \'proc_name\' "</literal>
		<literal type="string">"			ELSE \'user_defined_action\'"</literal>
		<literal type="string">"		END"</literal>
		<literal type="string">"	) as job_type, "</literal>
		<literal type="string">"	error_data -&gt;&gt; \'sqlerrcode\' as sqlerrcode, "</literal>
		<literal type="string">"	pg_catalog.COUNT(*) "</literal>
		<literal type="string">"	FROM "</literal>
		<literal type="string">"	_timescaledb_internal.job_errors "</literal>
		<literal type="string">"	WHERE error_data -&gt;&gt; \'sqlerrcode\' IS NOT NULL "</literal>
		<literal type="string">"	GROUP BY job_type, error_data-&gt;&gt; \'sqlerrcode\' "</literal>
		<literal type="string">"	ORDER BY job_type"</literal>
		<literal type="string">") q "</literal>
		<literal type="string">"GROUP BY q.job_type"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not connect to SPI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* SPI calls must be qualified otherwise they are unsafe */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><literal type="string">"SET search_path TO pg_catalog, pg_temp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not set search_path"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>command_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_execute</name><argument_list>(<argument><expr><name><name>command</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> <comment type="block">/*read only*/</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* count */</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not get errors by sqlerrcode and job type"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* we expect about 6 rows returned, each row is a record (TEXT, JSONB) */</comment>
	<for>for <control>(<init><decl><type><name>uint64</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SPI_processed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>record_jobtype</name></decl>, <decl><type ref="prev"/><name>record_jsonb</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isnull_jobtype</name></decl>, <decl><type ref="prev"/><name>isnull_jsonb</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>record_jobtype</name> <operator>=</operator>
			<call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>SPI_tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>SPI_tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_jobtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull_jobtype</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"null job type returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>record_jsonb</name> <operator>=</operator>
			<call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>SPI_tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>SPI_tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* this jsonb looks like {"P0001": 32, "42883": 6} */</comment>
		<decl_stmt><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>sqlerrs_jsonb</name> <init>= <expr><ternary><condition><expr><name>isnull_jsonb</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>DatumGetJsonbP</name><argument_list>(<argument><expr><name>record_jsonb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>sqlerrs_jsonb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="block">/* the jsonb object cannot be created in the SPI context or it will be lost */</comment>
		<expr_stmt><expr><name>spi_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_errors_by_sqlerrcode_internal</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
										  <argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>record_jobtype</name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name>sqlerrs_jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>spi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><literal type="string">"RESET search_path"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>SPI_OK_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>add_job_stats_internal</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>job_type</name></decl></parameter>, <parameter><decl><type><name>TelemetryJobStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type> <name>key</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>jbvString</name></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>job_type</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>job_type</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"total_runs"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>total_runs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"total_successes"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>total_successes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"total_failures"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>total_failures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"total_crashes"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>total_crashes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"max_consecutive_failures"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>max_consecutive_failures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"max_consecutive_crashes"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>max_consecutive_crashes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_interval</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"total_duration"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>total_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_interval</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"total_duration_failures"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>total_duration_failures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_job_stats_by_job_type</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>command</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>, <decl><type ref="prev"/><name>spi_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPITupleTable</name> <modifier>*</modifier></type><name>tuptable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command_string</name> <init>=
		<expr><literal type="string">"SELECT ("</literal>
		<literal type="string">"	CASE "</literal>
		<literal type="string">"		WHEN j.proc_schema = \'_timescaledb_internal\' AND j.proc_name ~ "</literal>
		<literal type="string">"\'^policy_(retention|compression|reorder|refresh_continuous_aggregate|telemetry|job_error_"</literal>
		<literal type="string">"retention)$\' "</literal>
		<literal type="string">"		THEN j.proc_name::TEXT "</literal>
		<literal type="string">"		ELSE \'user_defined_action\' "</literal>
		<literal type="string">"	END"</literal>
		<literal type="string">")  AS job_type, "</literal>
		<literal type="string">"	SUM(total_runs)::BIGINT AS total_runs, "</literal>
		<literal type="string">"	SUM(total_successes)::BIGINT AS total_successes, "</literal>
		<literal type="string">"	SUM(total_failures)::BIGINT AS total_failures, "</literal>
		<literal type="string">"	SUM(total_crashes)::BIGINT AS total_crashes, "</literal>
		<literal type="string">"	SUM(total_duration) AS total_duration, "</literal>
		<literal type="string">"	SUM(total_duration_failures) AS total_duration_failures, "</literal>
		<literal type="string">"	MAX(consecutive_failures) AS max_consecutive_failures, "</literal>
		<literal type="string">"	MAX(consecutive_crashes) AS max_consecutive_crashes "</literal>
		<literal type="string">"FROM "</literal>
		<literal type="string">"	_timescaledb_internal.bgw_job_stat s "</literal>
		<literal type="string">"	JOIN _timescaledb_config.bgw_job j on j.id = s.job_id "</literal>
		<literal type="string">"GROUP BY "</literal>
		<literal type="string">"job_type"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not connect to SPI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* SPI calls must be qualified otherwise they are unsafe */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><literal type="string">"SET search_path TO pg_catalog, pg_temp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not set search_path"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>command_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_execute</name><argument_list>(<argument><expr><name><name>command</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> <comment type="block">/* read_only */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/*count*/</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not get job statistics by job type"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/*
	 * a row returned looks like this:
	 * (job_type, total_runs, total_successes, total_failures, total_crashes, total_duration,
	 * total_duration_failures, max_consec_fails, max_consec_crashes)
	 * ("policy_telemetry", 12, 10, 1, 1, 00:00:11, 00:00:01, 1, 1)
	 */</comment>
	<for>for <control>(<init><decl><type><name>uint64</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SPI_processed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>tuptable</name> <operator>=</operator> <name>SPI_tuptable</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>jobtype_datum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>total_runs</name></decl>, <decl><type ref="prev"/><name>total_successes</name></decl>, <decl><type ref="prev"/><name>total_failures</name></decl>, <decl><type ref="prev"/><name>total_crashes</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>total_duration</name></decl>, <decl><type ref="prev"/><name>total_duration_failures</name></decl>, <decl><type ref="prev"/><name>max_consec_crashes</name></decl>, <decl><type ref="prev"/><name>max_consec_fails</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>isnull_jobtype</name></decl>, <decl><type ref="prev"/><name>isnull_runs</name></decl>, <decl><type ref="prev"/><name>isnull_successes</name></decl>, <decl><type ref="prev"/><name>isnull_failures</name></decl>, <decl><type ref="prev"/><name>isnull_crashes</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isnull_duration</name></decl>, <decl><type ref="prev"/><name>isnull_duration_failures</name></decl>, <decl><type ref="prev"/><name>isnull_consec_crashes</name></decl>, <decl><type ref="prev"/><name>isnull_consec_fails</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>jobtype_datum</name> <operator>=</operator>
			<call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>SPI_tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>SPI_tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_jobtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull_jobtype</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"null job type returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>total_runs</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>total_successes</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_successes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>total_failures</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>total_crashes</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_crashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>total_duration</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>total_duration_failures</name> <operator>=</operator>
			<call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_duration_failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_consec_fails</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_consec_fails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_consec_crashes</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull_consec_crashes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>isnull_jobtype</name> <operator>||</operator> <name>isnull_runs</name> <operator>||</operator> <name>isnull_successes</name> <operator>||</operator> <name>isnull_failures</name> <operator>||</operator>
			<name>isnull_crashes</name> <operator>||</operator> <name>isnull_duration</name> <operator>||</operator> <name>isnull_consec_crashes</name> <operator>||</operator> <name>isnull_consec_fails</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"null record field returned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>spi_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>TelemetryJobStats</name></type> <name>stats</name> <init>= <expr><block>{ <expr><operator>.</operator><name>total_runs</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>total_runs</name></expr></argument>)</argument_list></call></expr>,
									<expr><operator>.</operator><name>total_successes</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>total_successes</name></expr></argument>)</argument_list></call></expr>,
									<expr><operator>.</operator><name>total_failures</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>total_failures</name></expr></argument>)</argument_list></call></expr>,
									<expr><operator>.</operator><name>total_crashes</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>total_crashes</name></expr></argument>)</argument_list></call></expr>,
									<expr><operator>.</operator><name>max_consecutive_failures</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>max_consec_fails</name></expr></argument>)</argument_list></call></expr>,
									<expr><operator>.</operator><name>max_consecutive_crashes</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>max_consec_crashes</name></expr></argument>)</argument_list></call></expr>,
									<expr><operator>.</operator><name>total_duration</name> <operator>=</operator> <call><name>DatumGetIntervalP</name><argument_list>(<argument><expr><name>total_duration</name></expr></argument>)</argument_list></call></expr>,
									<expr><operator>.</operator><name>total_duration_failures</name> <operator>=</operator>
										<macro><name>DatumGetIntervalP</name><argument_list>(<argument>total_duration_failures</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>add_job_stats_internal</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>jobtype_datum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>spi_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><literal type="string">"RESET search_path"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <name>SPI_OK_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>get_database_size</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>pg_database_size_oid</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_related_extensions</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>related_extensions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><name><name>related_extensions</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ts_jsonb_add_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><call><name>get_extension_oid</name><argument_list>(<argument><expr><name>ext</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_pgversion_string</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>patch</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We have to read the server version from GUC and not use any of
	 * the macros. By using any of the macros we would get the version
	 * the extension is compiled against instead of the version actually
	 * running.
	 */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server_version_num_guc</name> <init>= <expr><call><name>GetConfigOptionByName</name><argument_list>(<argument><expr><literal type="string">"server_version_num"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>server_version_num</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>server_version_num_guc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>major</name> <operator>=</operator> <name>server_version_num</name> <operator>/</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>patch</name> <operator>=</operator> <name>server_version_num</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>major</name> <operator>&gt;=</operator> <name>PG_MAJOR_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISO8601_FORMAT</name></cpp:macro> <cpp:value>"YYYY-MM-DD\"T\"HH24:MI:SSOF"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>format_iso8601</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TextDatumGetCString</name><argument_list>(
		<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamptz_to_char</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>ISO8601_FORMAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COUNT</name></cpp:macro> <cpp:value>"num_relations"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_RELTUPLES</name></cpp:macro> <cpp:value>"num_reltuples"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_HEAP_SIZE</name></cpp:macro> <cpp:value>"heap_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_TOAST_SIZE</name></cpp:macro> <cpp:value>"toast_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_INDEXES_SIZE</name></cpp:macro> <cpp:value>"indexes_size"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_CHILDREN</name></cpp:macro> <cpp:value>"num_children"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_REPLICA_CHUNKS</name></cpp:macro> <cpp:value>"num_replica_chunks"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COMPRESSED_CHUNKS</name></cpp:macro> <cpp:value>"num_compressed_chunks"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COMPRESSED_HYPERTABLES</name></cpp:macro> <cpp:value>"num_compressed_hypertables"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COMPRESSED_CAGGS</name></cpp:macro> <cpp:value>"num_compressed_caggs"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_REPLICATED_HYPERTABLES</name></cpp:macro> <cpp:value>"num_replicated_distributed_hypertables"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_UNCOMPRESSED_HEAP_SIZE</name></cpp:macro> <cpp:value>"uncompressed_heap_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_UNCOMPRESSED_TOAST_SIZE</name></cpp:macro> <cpp:value>"uncompressed_toast_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_UNCOMPRESSED_INDEXES_SIZE</name></cpp:macro> <cpp:value>"uncompressed_indexes_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_UNCOMPRESSED_ROWCOUNT</name></cpp:macro> <cpp:value>"uncompressed_row_count"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COMPRESSED_HEAP_SIZE</name></cpp:macro> <cpp:value>"compressed_heap_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COMPRESSED_TOAST_SIZE</name></cpp:macro> <cpp:value>"compressed_toast_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COMPRESSED_INDEXES_SIZE</name></cpp:macro> <cpp:value>"compressed_indexes_size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_COMPRESSED_ROWCOUNT</name></cpp:macro> <cpp:value>"compressed_row_count"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_CAGG_ON_DISTRIBUTED_HYPERTABLE_COUNT</name></cpp:macro> <cpp:value>"num_caggs_on_distributed_hypertables"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_CAGG_USES_REAL_TIME_AGGREGATION_COUNT</name></cpp:macro> <cpp:value>"num_caggs_using_real_time_aggregation"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_CAGG_FINALIZED</name></cpp:macro> <cpp:value>"num_caggs_finalized"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELKIND_CAGG_NESTED</name></cpp:macro> <cpp:value>"num_caggs_nested"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>add_compression_stats_object</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name></decl></parameter>, <parameter><decl><type><name>StatsRelType</name></type> <name>reltype</name></decl></parameter>,
							 <parameter><decl><type><specifier>const</specifier> <name>HyperStats</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type> <name>name</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>jbvString</name></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"compression"</literal></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"compression"</literal></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_COMPRESSED_CHUNKS</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>compressed_chunk_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>RELTYPE_CONTINUOUS_AGG</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
						   <argument><expr><name>REQ_RELKIND_COMPRESSED_CAGGS</name></expr></argument>,
						   <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>compressed_hypertable_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
						   <argument><expr><name>REQ_RELKIND_COMPRESSED_HYPERTABLES</name></expr></argument>,
						   <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>compressed_hypertable_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_COMPRESSED_ROWCOUNT</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>compressed_row_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_COMPRESSED_HEAP_SIZE</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>compressed_heap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_COMPRESSED_TOAST_SIZE</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>compressed_toast_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
					   <argument><expr><name>REQ_RELKIND_COMPRESSED_INDEXES_SIZE</name></expr></argument>,
					   <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>compressed_indexes_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_UNCOMPRESSED_ROWCOUNT</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>uncompressed_row_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_UNCOMPRESSED_HEAP_SIZE</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>uncompressed_heap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
					   <argument><expr><name>REQ_RELKIND_UNCOMPRESSED_TOAST_SIZE</name></expr></argument>,
					   <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>uncompressed_toast_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
					   <argument><expr><name>REQ_RELKIND_UNCOMPRESSED_INDEXES_SIZE</name></expr></argument>,
					   <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>uncompressed_indexes_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>add_relkind_stats_object</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relkindname</name></decl></parameter>,
						 <parameter><decl><type><specifier>const</specifier> <name>BaseStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>StatsRelType</name></type> <name>reltype</name></decl></parameter>, <parameter><decl><type><name>StatsType</name></type> <name>statstype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type> <name>name</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>jbvString</name></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>relkindname</name></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>relkindname</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_COUNT</name></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>relcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>statstype</name> <operator>&gt;=</operator> <name>STATS_TYPE_STORAGE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>StorageStats</name> <modifier>*</modifier></type><name>ss</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>StorageStats</name> <operator>*</operator><operator>)</operator> <name>stats</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_RELTUPLES</name></expr></argument>, <argument><expr><name><name>stats</name><operator>-&gt;</operator><name>reltuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_HEAP_SIZE</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>relsize</name><operator>.</operator><name>heap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_TOAST_SIZE</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>relsize</name><operator>.</operator><name>toast_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_INDEXES_SIZE</name></expr></argument>, <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>relsize</name><operator>.</operator><name>index_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>statstype</name> <operator>&gt;=</operator> <name>STATS_TYPE_HYPER</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>HyperStats</name> <modifier>*</modifier></type><name>hs</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>HyperStats</name> <operator>*</operator><operator>)</operator> <name>stats</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_CHILDREN</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>child_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>!=</operator> <name>RELTYPE_PARTITIONED_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>add_compression_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>reltype</name></expr></argument>, <argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>RELTYPE_DISTRIBUTED_HYPERTABLE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							   <argument><expr><name>REQ_RELKIND_REPLICATED_HYPERTABLES</name></expr></argument>,
							   <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>replicated_hypertable_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_REPLICA_CHUNKS</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>replica_chunk_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>statstype</name> <operator>==</operator> <name>STATS_TYPE_CAGG</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>CaggStats</name> <modifier>*</modifier></type><name>cs</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>CaggStats</name> <operator>*</operator><operator>)</operator> <name>stats</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
						   <argument><expr><name>REQ_RELKIND_CAGG_ON_DISTRIBUTED_HYPERTABLE_COUNT</name></expr></argument>,
						   <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>on_distributed_hypertable_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
						   <argument><expr><name>REQ_RELKIND_CAGG_USES_REAL_TIME_AGGREGATION_COUNT</name></expr></argument>,
						   <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>uses_real_time_aggregation_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_CAGG_FINALIZED</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>finalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_RELKIND_CAGG_NESTED</name></expr></argument>, <argument><expr><name><name>cs</name><operator>-&gt;</operator><name>nested</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_function_call_telemetry</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fn_telemetry_entry_vec</name> <modifier>*</modifier></type><name>functions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>visible_extensions</name><index>[<expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>related_extensions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_function_telemetry_on</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>JsonbValue</name></type> <name>value</name> <init>= <expr><block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>jbvNull</name></expr>,
		}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>visible_extensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"timescaledb"</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>visible_extensions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>visible_extensions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>related_extensions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>functions</name> <operator>=</operator>
		<call><name>ts_function_telemetry_read</name><argument_list>(<argument><expr><name>visible_extensions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>visible_extensions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>functions</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>functions</name><operator>-&gt;</operator><name>num_elements</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>FnTelemetryEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>fn_telemetry_entry_vec_at</name><argument_list>(<argument><expr><name>functions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proc_sig</name> <init>= <expr><call><name>format_procedure_qualified</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>fn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>proc_sig</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_replication_telemetry</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReplicationInfo</name></type> <name>info</name> <init>= <expr><call><name>ts_telemetry_replication_info_gather</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>got_num_wal_senders</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_NUM_WAL_SENDERS</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>num_wal_senders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>got_is_wal_receiver</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_bool</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>REQ_IS_WAL_RECEIVER</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>is_wal_receiver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS</name></cpp:macro> <cpp:value>"relations"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_TABLES</name></cpp:macro> <cpp:value>"tables"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_PARTITIONED_TABLES</name></cpp:macro> <cpp:value>"partitioned_tables"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_MATVIEWS</name></cpp:macro> <cpp:value>"materialized_views"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_VIEWS</name></cpp:macro> <cpp:value>"views"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_HYPERTABLES</name></cpp:macro> <cpp:value>"hypertables"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_DISTRIBUTED_HYPERTABLES_AN</name></cpp:macro> <cpp:value>"distributed_hypertables_access_node"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_DISTRIBUTED_HYPERTABLES_DN</name></cpp:macro> <cpp:value>"distributed_hypertables_data_node"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_RELS_CONTINUOUS_AGGS</name></cpp:macro> <cpp:value>"continuous_aggregates"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_FUNCTIONS_USED</name></cpp:macro> <cpp:value>"functions_used"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQ_REPLICATION</name></cpp:macro> <cpp:value>"replication"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>Jsonb</name> <modifier>*</modifier></type>
<name>build_telemetry_report</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>parse_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TelemetryStats</name></type> <name>relstats</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VersionOSInfo</name></type> <name>osinfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_TELEMETRY_VERSION</name></expr></argument>, <argument><expr><name>TS_TELEMETRY_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
					 <argument><expr><name>REQ_DB_UUID</name></expr></argument>,
					 <argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>uuid_out</name></expr></argument>, <argument><expr><call><name>ts_metadata_get_uuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
					 <argument><expr><name>REQ_EXPORTED_DB_UUID</name></expr></argument>,
					 <argument><expr><call><name>DatumGetCString</name><argument_list>(
						 <argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>uuid_out</name></expr></argument>, <argument><expr><call><name>ts_metadata_get_exported_uuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
					 <argument><expr><name>REQ_INSTALL_TIME</name></expr></argument>,
					 <argument><expr><call><name>format_iso8601</name><argument_list>(<argument><expr><call><name>ts_metadata_get_install_timestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_INSTALL_METHOD</name></expr></argument>, <argument><expr><name>TIMESCALEDB_INSTALL_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ts_version_get_os_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_OS</name></expr></argument>, <argument><expr><name><name>osinfo</name><operator>.</operator><name>sysname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_OS_VERSION</name></expr></argument>, <argument><expr><name><name>osinfo</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_OS_RELEASE</name></expr></argument>, <argument><expr><name><name>osinfo</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>osinfo</name><operator>.</operator><name>has_pretty_version</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_OS_VERSION_PRETTY</name></expr></argument>, <argument><expr><name><name>osinfo</name><operator>.</operator><name>pretty_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_OS</name></expr></argument>, <argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_PS_VERSION</name></expr></argument>, <argument><expr><call><name>get_pgversion_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_TS_VERSION</name></expr></argument>, <argument><expr><name>TIMESCALEDB_VERSION_MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_BUILD_OS</name></expr></argument>, <argument><expr><name>BUILD_OS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_BUILD_OS_VERSION</name></expr></argument>, <argument><expr><name>BUILD_OS_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_BUILD_ARCHITECTURE</name></expr></argument>, <argument><expr><name>BUILD_PROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int32</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_BUILD_ARCHITECTURE_BIT_SIZE</name></expr></argument>, <argument><expr><call><name>get_architecture_bit_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_jsonb_add_int64</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_DATA_VOLUME</name></expr></argument>, <argument><expr><call><name>get_database_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* add job execution stats */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_NUM_ERR_BY_SQLERRCODE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_NUM_ERR_BY_SQLERRCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_errors_by_sqlerrcode</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_JOB_STATS_BY_JOB_TYPE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_JOB_STATS_BY_JOB_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_job_stats_by_job_type</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add relation stats */</comment>
	<expr_stmt><expr><call><name>ts_telemetry_stats_gather</name><argument_list>(<argument><expr><operator>&amp;</operator><name>relstats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_RELS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_RELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_TABLES</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>tables</name><operator>.</operator><name>base</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_TABLE</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_STORAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_PARTITIONED_TABLES</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>partitioned_tables</name><operator>.</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_PARTITIONED_TABLE</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_HYPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_MATVIEWS</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>materialized_views</name><operator>.</operator><name>base</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_MATVIEW</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_STORAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_VIEWS</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>views</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_VIEW</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_HYPERTABLES</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>hypertables</name><operator>.</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_HYPERTABLE</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_HYPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Distinguish between distributed hypertables on access nodes and the
	 * "partial" distributed hypertables on data nodes.
	 *
	 * Access nodes currently don't store data (chunks), but could potentially
	 * do it in the future. We only report the data that is actually stored on
	 * an access node, which currently is zero. One could report the aggregate
	 * numbers across all data nodes, but that requires using, e.g., a
	 * function like hypertable_size() that calls out to each data node to get
	 * its size. However, telemetry probably shouldn't perform such
	 * distributed calls across data nodes, as it could, e.g., revent the
	 * access node from reporting telemetry if a data node is down.
	 *
	 * It is assumed that data nodes will report telemetry themselves, and the
	 * size of the data they store will be reported under
	 * "distributed_hypertables_data_node" to easily distinguish from an
	 * access node. The aggregate information for the whole distributed
	 * hypertable could be joined on the server side based on the dist_uuid.
	 */</comment>
	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_DISTRIBUTED_HYPERTABLES_AN</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>distributed_hypertables</name><operator>.</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_HYPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_DISTRIBUTED_HYPERTABLES_DN</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>distributed_hypertable_members</name><operator>.</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_DISTRIBUTED_HYPERTABLE_MEMBER</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_HYPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_relkind_stats_object</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>,
							 <argument><expr><name>REQ_RELS_CONTINUOUS_AGGS</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>relstats</name><operator>.</operator><name>continuous_aggs</name><operator>.</operator><name>hyp</name><operator>.</operator><name>storage</name><operator>.</operator><name>base</name></name></expr></argument>,
							 <argument><expr><name>RELTYPE_CONTINUOUS_AGG</name></expr></argument>,
							 <argument><expr><name>STATS_TYPE_CAGG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_job_counts</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add related extensions, which is a nested JSON */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_RELATED_EXTENSIONS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_RELATED_EXTENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_related_extensions</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* license */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_LICENSE_INFO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_LICENSE_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ts_license_is_apache</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_LICENSE_EDITION</name></expr></argument>, <argument><expr><name>REQ_LICENSE_EDITION_APACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_LICENSE_EDITION</name></expr></argument>, <argument><expr><name>REQ_LICENSE_EDITION_COMMUNITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* add distributed database fields */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_license_is_apache</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>add_tsl_telemetry_info</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* add tuned info, which is optional */</comment>
	<if_stmt><if>if <condition>(<expr><name>ts_last_tune_time</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_TS_LAST_TUNE_TIME</name></expr></argument>, <argument><expr><name>ts_last_tune_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ts_last_tune_version</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_TS_LAST_TUNE_VERSION</name></expr></argument>, <argument><expr><name>ts_last_tune_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* add cloud to telemetry when set */</comment>
	<if_stmt><if>if <condition>(<expr><name>ts_telemetry_cloud</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_INSTANCE_METADATA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_INSTANCE_METADATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_jsonb_add_str</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>, <argument><expr><name>REQ_TS_TELEMETRY_CLOUD</name></expr></argument>, <argument><expr><name>ts_telemetry_cloud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add additional content from metadata */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_METADATA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_METADATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_telemetry_metadata_add_values</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add function call telemetry */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_FUNCTIONS_USED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_FUNCTIONS_USED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_function_call_telemetry</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add replication object */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>REQ_REPLICATION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>REQ_REPLICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_replication_telemetry</name><argument_list>(<argument><expr><name>parse_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* end of telemetry object */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>HttpRequest</name> <modifier>*</modifier></type>
<name>ts_build_version_request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>build_telemetry_report</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Fill in HTTP request */</comment>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>ts_http_request_create</name><argument_list>(<argument><expr><name>HTTP_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_HOST</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_body_jsonb</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ConnectionType</name></type>
<name>connection_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>CONNECTION_PLAIN</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"https"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>CONNECTION_SSL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"scheme \"%s\" not supported for telemetry"</literal></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>_CONNECTION_MAX</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Connection</name> <modifier>*</modifier></type>
<name>ts_telemetry_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>ts_connection_create</name><argument_list>(<argument><expr><call><name>connection_type</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ts_connection_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errstr</name> <init>= <expr><call><name>ts_connection_get_and_clear_error</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>ts_connection_destroy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>conn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"telemetry could not connect to \"%s\""</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_telemetry_main_wrapper</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_telemetry_main</name><argument_list>(<argument><expr><name>TELEMETRY_HOST</name></expr></argument>, <argument><expr><name>TELEMETRY_PATH</name></expr></argument>, <argument><expr><name>TELEMETRY_SCHEME</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_telemetry_main</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HttpError</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>rsp</name></decl>;</decl_stmt>
	<comment type="block">/* Declared volatile to suppress the incorrect -Wclobbered warning. */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>started</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>snapshot_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_telemetry_on</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsTransactionOrTransactionBlock</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>started</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>ts_telemetry_connect</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ActiveSnapshotSet</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Need a valid snapshot to build telemetry information */</comment>
		<expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>snapshot_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>ts_build_version_request</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>snapshot_set</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>ts_http_response_state_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ts_http_send_and_recv</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_http_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_connection_destroy</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>HTTP_ERROR_NONE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"telemetry error: %s"</literal></expr></argument>, <argument><expr><call><name>ts_http_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ts_http_response_state_valid_status</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
			 <argument><expr><literal type="string">"telemetry got unexpected HTTP response status: %d"</literal></expr></argument>,
			 <argument><expr><call><name>ts_http_response_state_status_code</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ts_function_telemetry_reset_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Do the version-check. Response is the body of a well-formed HTTP
	 * response, since otherwise the previous line will throw an error.
	 */</comment>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>ts_http_response_state_body_start</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_check_version_response</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* If the response is malformed, ts_check_version_response() will
		 * throw an error, so we capture the error here and print debugging
		 * information. */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"malformed telemetry response body"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"host=%s, service=%s, path=%s: %s"</literal></expr></argument>,
						   <argument><expr><name>host</name></expr></argument>,
						   <argument><expr><name>service</name></expr></argument>,
						   <argument><expr><name>path</name></expr></argument>,
						   <argument><expr><ternary><condition><expr><name>json</name></expr> ?</condition><then> <expr><name>json</name></expr> </then><else>: <expr><literal type="string">"&lt;EMPTY&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Do not throw an error in this case, there is really nothing wrong
		   with the system. It's only telemetry that is having problems, so we
		   just wrap this up and exit. */</comment>
		<if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>AbortCurrentTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_http_response_state_destroy</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>

<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>AbortCurrentTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_telemetry_get_report_jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ts_telemetry_get_report_jsonb</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>build_telemetry_report</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ts_function_telemetry_reset_counts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_JSONB_P</name><argument_list>(<argument><expr><name>jb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
