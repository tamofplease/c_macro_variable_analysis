<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/subspace_store.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_vector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypercube.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"subspace_store.h"</cpp:file></cpp:include>

<comment type="block">/*
 * In terms of datastructures, the subspace store is actually a tree. At the
 * root of a tree is a DimensionVec representing the different DimensionSlices
 * for the first dimension. Each of the DimensionSlices of the
 * first dimension point to a DimensionVec of the second dimension. This recurses
 * for the N dimensions. The leaf DimensionSlice points to the data being stored.
 *
 * */</comment>

<typedef>typedef <type><struct>struct <name>SubspaceStoreInternalNode</name>
<block>{
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vector</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type> <name>descendants</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>last_internal_node</name></decl>;</decl_stmt>
}</block></struct></type> <name>SubspaceStoreInternalNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SubspaceStore</name>
<block>{
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type> <name>num_dimensions</name></decl>;</decl_stmt>
	<comment type="block">/* limit growth of store by  limiting number of slices in first dimension,	0 for no limit */</comment>
	<decl_stmt><decl><type><name>uint16</name></type> <name>max_items</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SubspaceStoreInternalNode</name> <modifier>*</modifier></type><name>origin</name></decl>;</decl_stmt> <comment type="block">/* origin of the tree */</comment>
}</block></struct></type> <name>SubspaceStore</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>SubspaceStoreInternalNode</name> <modifier>*</modifier></type>
<name>subspace_store_internal_node_create</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>last_internal_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SubspaceStoreInternalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubspaceStoreInternalNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vector</name></name> <operator>=</operator> <call><name>ts_dimension_vec_create</name><argument_list>(<argument><expr><name>DIMENSION_VEC_DEFAULT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>descendants</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>last_internal_node</name></name> <operator>=</operator> <name>last_internal_node</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>subspace_store_internal_node_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_dimension_vec_free</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SubspaceStoreInternalNode</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>subspace_store_internal_node_descendants</name><parameter_list>(<parameter><decl><type><name>SubspaceStoreInternalNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><call><name>ts_dimension_vec_get</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vector</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>slice</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>last_internal_node</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>SubspaceStoreInternalNode</name> <operator>*</operator><operator>)</operator> <name><name>slice</name><operator>-&gt;</operator><name>storage</name></name><operator>)</operator><operator>-&gt;</operator><name>descendants</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SubspaceStore</name> <modifier>*</modifier></type>
<name>ts_subspace_store_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hyperspace</name> <modifier>*</modifier></type><name>space</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>max_items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SubspaceStore</name> <modifier>*</modifier></type><name>sst</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubspaceStore</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * make sure that the first dimension is a time dimension, otherwise the
	 * tree will grow in a way that makes pruning less effective.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>space</name><operator>-&gt;</operator><name>num_dimensions</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>space</name><operator>-&gt;</operator><name>dimensions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>DIMENSION_TYPE_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sst</name><operator>-&gt;</operator><name>origin</name></name> <operator>=</operator> <call><name>subspace_store_internal_node_create</name><argument_list>(<argument><expr><name><name>space</name><operator>-&gt;</operator><name>num_dimensions</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sst</name><operator>-&gt;</operator><name>num_dimensions</name></name> <operator>=</operator> <name><name>space</name><operator>-&gt;</operator><name>num_dimensions</name></name></expr>;</expr_stmt>
	<comment type="block">/* max_items = 0 is treated as unlimited */</comment>
	<expr_stmt><expr><name><name>sst</name><operator>-&gt;</operator><name>max_items</name></name> <operator>=</operator> <name>max_items</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sst</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>mcxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>sst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_subspace_store_add</name><parameter_list>(<parameter><decl><type><name>SubspaceStore</name> <modifier>*</modifier></type><name>subspace_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Hypercube</name> <modifier>*</modifier></type><name>hypercube</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>,
					  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>object_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SubspaceStoreInternalNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>subspace_store</name><operator>-&gt;</operator><name>origin</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>subspace_store</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>hypercube</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>==</operator> <name><name>subspace_store</name><operator>-&gt;</operator><name>num_dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hypercube</name><operator>-&gt;</operator><name>num_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name><name>hypercube</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>storage</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We should have one internal node per dimension in the
			 * hypertable. If we don't have one for the current dimension,
			 * create one now. (There will always be one for time)
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>last</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>storage</name></name> <operator>=</operator> <call><name>subspace_store_internal_node_create</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <operator>(</operator><name><name>hypercube</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>storage_free</name></name> <operator>=</operator> <name>subspace_store_internal_node_free</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>storage</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>subspace_store</name><operator>-&gt;</operator><name>max_items</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			   <name><name>node</name><operator>-&gt;</operator><name>descendants</name></name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>subspace_store</name><operator>-&gt;</operator><name>max_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We only call this function on a cache miss, so number of leaves
		 * will definitely increase see `Assert(last != NULL &amp;&amp; last-&gt;storage
		 * == NULL);` at bottom.
		 */</comment>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>descendants</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>vector</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>||</operator>
			   <name><name>node</name><operator>-&gt;</operator><name>vector</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>==</operator> <name><name>target</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Do we have enough space to store the object? */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>subspace_store</name><operator>-&gt;</operator><name>max_items</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>descendants</name></name> <operator>&gt;</operator> <name><name>subspace_store</name><operator>-&gt;</operator><name>max_items</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Always delete the slice corresponding to the earliest time
			 * range. In the normal case that inserts are performed in
			 * time-order this is the one least likely to be reused. (Note
			 * that we made sure that the first dimension is a time dimension
			 * when creating the subspace_store). If out-of-order inserts are
			 * become significant we may wish to change this to something more
			 * sophisticated like LRU.
			 */</comment>
			<decl_stmt><decl><type><name>size_t</name></type> <name>items_removed</name> <init>= <expr><call><name>subspace_store_internal_node_descendants</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * descendants at the root is inclusive of the descendants at the
			 * children, so if we have an overflow it must be in the time dim
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>subspace_store</name><operator>-&gt;</operator><name>max_items</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>descendants</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ts_dimension_vec_remove_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>vector</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Note we would have to do this to ancestors if this was not the
			 * root.
			 */</comment>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>descendants</name></name> <operator>-=</operator> <name>items_removed</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>ts_dimension_vec_find_slice</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vector</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>range_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Do we have a slot in this vector for the new object? */</comment>
		<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * create a new copy of the range this slice covers, to store the
			 * object in
			 */</comment>
			<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>ts_dimension_slice_copy</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ts_dimension_vec_add_slice_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>vector</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>match</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>subspace_store</name><operator>-&gt;</operator><name>max_items</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			   <name><name>node</name><operator>-&gt;</operator><name>descendants</name></name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>subspace_store</name><operator>-&gt;</operator><name>max_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>last</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
		<comment type="block">/* internal slices point to the next SubspaceStoreInternalNode */</comment>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>storage</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>last</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>last</name><operator>-&gt;</operator><name>storage</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>storage</name></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt> <comment type="block">/* at the end we store the object */</comment>
	<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>storage_free</name></name> <operator>=</operator> <name>object_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ts_subspace_store_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SubspaceStore</name> <modifier>*</modifier></type><name>subspace_store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Point</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><name><name>subspace_store</name><operator>-&gt;</operator><name>origin</name><operator>-&gt;</operator><name>vector</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>cardinality</name></name> <operator>==</operator> <name><name>subspace_store</name><operator>-&gt;</operator><name>num_dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The internal compressed hypertable has no dimensions as
	 * chunks are created explicitly by compress_chunk and linked
	 * to the source chunk. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>subspace_store</name><operator>-&gt;</operator><name>num_dimensions</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>target</name><operator>-&gt;</operator><name>cardinality</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>ts_dimension_vec_find_slice</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>coordinates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>match</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SubspaceStoreInternalNode</name> <operator>*</operator><operator>)</operator> <name><name>match</name><operator>-&gt;</operator><name>storage</name></name><operator>)</operator><operator>-&gt;</operator><name>vector</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>match</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>match</name><operator>-&gt;</operator><name>storage</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_subspace_store_free</name><parameter_list>(<parameter><decl><type><name>SubspaceStore</name> <modifier>*</modifier></type><name>subspace_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>subspace_store_internal_node_free</name><argument_list>(<argument><expr><name><name>subspace_store</name><operator>-&gt;</operator><name>origin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>subspace_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>MemoryContext</name></type>
<name>ts_subspace_store_mcxt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SubspaceStore</name> <modifier>*</modifier></type><name>subspace_store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>subspace_store</name><operator>-&gt;</operator><name>mcxt</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
