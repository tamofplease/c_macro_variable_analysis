<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/event_trigger.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_constraint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_foreign_server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/event_trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/executor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event_trigger.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DDL_INFO_NATTS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DROPPED_OBJECTS_NATTS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<comment type="block">/* Function manager info for the event "pg_event_trigger_ddl_commands", which is
 * used to retrieve information on executed DDL commands in an event
 * trigger. The function manager info is initialized on extension load. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>FmgrInfo</name></type> <name>ddl_commands_fmgrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FmgrInfo</name></type> <name>dropped_objects_fmgrinfo</name></decl>;</decl_stmt>

<comment type="block">/*
 * Get a list of executed DDL commands in an event trigger.
 *
 * This function calls the function pg_ts_event_trigger_ddl_commands(), which is
 * part of the event trigger API, and retrieves the DDL commands executed in
 * relation to the event trigger. It is only valid to call this function from
 * within an event trigger.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_event_trigger_ddl_commands</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name></type> <name>rsinfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>objects</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ddl_commands_fmgrinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rsinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_ReturnSetInfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>.</operator><name>allowedModes</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>.</operator><name>econtext</name></name> <operator>=</operator> <call><name>CreateExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FC_SET_NULL</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name> <operator>=</operator> <operator>(</operator><name>fmNodePtr</name><operator>)</operator> <operator>&amp;</operator><name>rsinfo</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>.</operator><name>setDesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TTSOpsMinimalTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>tuplestore_gettupleslot</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>.</operator><name>setResult</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ExecFetchSlotHeapTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CollectedCommand</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>DDL_INFO_NATTS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>DDL_INFO_NATTS</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name><name>rsinfo</name><operator>.</operator><name>setDesc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rsinfo</name><operator>.</operator><name>setDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nulls</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>(</operator><name>CollectedCommand</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeExprContext</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>.</operator><name>econtext</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>objects</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Given a TEXT[] of addrnames return a list of heap allocated char *
 *
 * similar to textarray_to_strvaluelist */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>extract_addrnames</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nelems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected NULL in name list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* TextDatumGetCString heap allocates the string */</comment>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EventTriggerDropTableConstraint</name> <modifier>*</modifier></type>
<name>make_event_trigger_drop_table_constraint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>constraint_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
										 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EventTriggerDropTableConstraint</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropTableConstraint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator>
		<operator>(</operator><name>EventTriggerDropTableConstraint</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>obj</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>EVENT_TRIGGER_DROP_TABLE_CONSTRAINT</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>constraint_name</name> <operator>=</operator> <name>constraint_name</name></expr>,
		<expr><operator>.</operator><name>schema</name> <operator>=</operator> <name>schema</name></expr>,
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <name>table</name></expr>,
	}</block></expr>;</expr_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EventTriggerDropRelation</name> <modifier>*</modifier></type>
<name>make_event_trigger_drop_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>index_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EventTriggerDropRelation</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropRelation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <operator>(</operator><name>EventTriggerDropRelation</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>obj</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>EVENT_TRIGGER_DROP_INDEX</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>index_name</name></expr>,
		<expr><operator>.</operator><name>schema</name> <operator>=</operator> <name>schema</name></expr>,
	}</block></expr>;</expr_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EventTriggerDropRelation</name> <modifier>*</modifier></type>
<name>make_event_trigger_drop_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>relkind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EventTriggerDropRelation</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropRelation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <operator>(</operator><name>EventTriggerDropRelation</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>obj</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>relkind</name> <operator>==</operator> <name>RELKIND_RELATION</name><operator>)</operator> <operator>?</operator> <name>EVENT_TRIGGER_DROP_TABLE</name> <operator>:</operator> <name>EVENT_TRIGGER_DROP_FOREIGN_TABLE</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>table_name</name></expr>,
		<expr><operator>.</operator><name>schema</name> <operator>=</operator> <name>schema</name></expr>,
	}</block></expr>;</expr_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EventTriggerDropView</name> <modifier>*</modifier></type>
<name>make_event_trigger_drop_view</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>view_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EventTriggerDropView</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <operator>(</operator><name>EventTriggerDropView</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>obj</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>EVENT_TRIGGER_DROP_VIEW</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>view_name</name> <operator>=</operator> <name>view_name</name></expr>,
		<expr><operator>.</operator><name>schema</name> <operator>=</operator> <name>schema</name></expr>,
	}</block></expr>;</expr_stmt>
	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EventTriggerDropSchema</name> <modifier>*</modifier></type>
<name>make_event_trigger_drop_schema</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EventTriggerDropSchema</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropSchema</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <operator>(</operator><name>EventTriggerDropSchema</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>obj</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>EVENT_TRIGGER_DROP_SCHEMA</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>schema</name> <operator>=</operator> <name>schema</name></expr>,
	}</block></expr>;</expr_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EventTriggerDropTrigger</name> <modifier>*</modifier></type>
<name>make_event_trigger_drop_trigger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trigger_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EventTriggerDropTrigger</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropTrigger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <operator>(</operator><name>EventTriggerDropTrigger</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>obj</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>EVENT_TRIGGER_DROP_TRIGGER</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>trigger_name</name> <operator>=</operator> <name>trigger_name</name></expr>,
		<expr><operator>.</operator><name>schema</name> <operator>=</operator> <name>schema</name></expr>,
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <name>table</name></expr>
	}</block></expr>;</expr_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EventTriggerDropForeignServer</name> <modifier>*</modifier></type>
<name>make_event_trigger_drop_foreign_server</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EventTriggerDropForeignServer</name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EventTriggerDropForeignServer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <operator>(</operator><name>EventTriggerDropForeignServer</name><operator>)</operator><block>{
		<expr><operator>.</operator><name>obj</name> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>EVENT_TRIGGER_DROP_FOREIGN_SERVER</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>servername</name> <operator>=</operator> <name>server_name</name></expr>,
	}</block></expr>;</expr_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_event_trigger_dropped_objects</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name></type> <name>rsinfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>objects</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropped_objects_fmgrinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rsinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_ReturnSetInfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>.</operator><name>allowedModes</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>.</operator><name>econtext</name></name> <operator>=</operator> <call><name>CreateExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name> <operator>=</operator> <operator>(</operator><name>fmNodePtr</name><operator>)</operator> <operator>&amp;</operator><name>rsinfo</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>.</operator><name>setDesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TTSOpsMinimalTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>tuplestore_gettupleslot</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>.</operator><name>setResult</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ExecFetchSlotHeapTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>DROPPED_OBJECTS_NATTS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>DROPPED_OBJECTS_NATTS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>class_id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>objtype</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>addrnames</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>eventobj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name><name>rsinfo</name><operator>.</operator><name>setDesc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>class_id</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>class_id</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ConstraintRelationId</name></expr>:</case>
				<expr_stmt><expr><name>objtype</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>objtype</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"table constraint"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>addrnames</name> <operator>=</operator> <call><name>extract_addrnames</name><argument_list>(<argument><expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>eventobj</name> <operator>=</operator> <call><name>make_event_trigger_drop_table_constraint</name><argument_list>(<argument><expr><call><name>lthird</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
																		<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
																		<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>RelationRelationId</name></expr>:</case>
				<expr_stmt><expr><name>objtype</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>objtype</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>addrnames</name> <operator>=</operator> <call><name>extract_addrnames</name><argument_list>(<argument><expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>eventobj</name> <operator>=</operator>
						<call><name>make_event_trigger_drop_index</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>eventobj</name> <operator>=</operator> <call><name>make_event_trigger_drop_table</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"view"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>addrnames</name> <init>= <expr><call><name>extract_addrnames</name><argument_list>(<argument><expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>objects</name></expr></argument>,
									  <argument><expr><call><name>make_event_trigger_drop_view</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
																   <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>, <argument><expr><literal type="string">"foreign table"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>eventobj</name> <operator>=</operator> <call><name>make_event_trigger_drop_table</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><name>RELKIND_FOREIGN_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>NamespaceRelationId</name></expr>:</case>
				<expr_stmt><expr><name>addrnames</name> <operator>=</operator> <call><name>extract_addrnames</name><argument_list>(<argument><expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>eventobj</name> <operator>=</operator> <call><name>make_event_trigger_drop_schema</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>TriggerRelationId</name></expr>:</case>
				<expr_stmt><expr><name>addrnames</name> <operator>=</operator> <call><name>extract_addrnames</name><argument_list>(<argument><expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>eventobj</name> <operator>=</operator> <call><name>make_event_trigger_drop_trigger</name><argument_list>(<argument><expr><call><name>lthird</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
														   <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>,
														   <argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ForeignServerRelationId</name></expr>:</case>
				<expr_stmt><expr><name>addrnames</name> <operator>=</operator> <call><name>extract_addrnames</name><argument_list>(<argument><expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>eventobj</name> <operator>=</operator> <call><name>make_event_trigger_drop_foreign_server</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>addrnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>eventobj</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>objects</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>objects</name></expr></argument>, <argument><expr><name>eventobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeExprContext</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>.</operator><name>econtext</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>objects</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_event_trigger_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><literal type="string">"pg_event_trigger_ddl_commands"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ddl_commands_fmgrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><literal type="string">"pg_event_trigger_dropped_objects"</literal></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><operator>&amp;</operator><name>dropped_objects_fmgrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_event_trigger_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do */</comment>
</block_content>}</block></function>
</unit>
