<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/planner/add_hashagg.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/extensible.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/plannodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/clauses.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/pathnode.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/paths.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/prep.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/tlist.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parsetree.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat-msvc-enter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/cost.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat-msvc-exit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"import/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"estimate.h"</cpp:file></cpp:include>

<comment type="block">/* This optimization adds a HashAggregate plan to many group by queries.
 * In plain postgres, many time-series queries will not use a hash aggregate
 * because the planner will incorrectly assume that the number of rows is much larger than
 * it actually is and will use the less efficient GroupAggregate instead of a HashAggregate
 * to prevent running out of memory.
 *
 * The planner will assume a large number of rows because the statistics planner for grouping
 * assumes that the number of distinct items produced by a function is the same as the number of
 * distinct items going in. This is not true for functions like time_bucket and date_trunc. This
 * optimization fixes the statistics and adds the HashAggregate plan if appropriate.
 * */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAPFILL_PATH_NAME</name></cpp:macro> <cpp:value>"GapFill"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_gapfill_path</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>CustomPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cpath</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>CustomPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cpath</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>CustomName</name></name></expr></argument>, <argument><expr><name>GAPFILL_PATH_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add a parallel HashAggregate plan.
 * This code is similar to parts of create_grouping_paths */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>plan_add_parallel_hashagg</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>input_rel</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>output_rel</name></decl></parameter>,
						  <parameter><decl><type><name>double</name></type> <name>d_num_groups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>parse</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>cheapest_partial_path</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>input_rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PathTarget</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>upper_targets</name><index>[<expr><name>UPPERREL_GROUP_AGG</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PathTarget</name> <modifier>*</modifier></type><name>partial_grouping_target</name> <init>= <expr><call><name>ts_make_partial_grouping_target</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AggClauseCosts</name></type> <name>agg_partial_costs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AggClauseCosts</name></type> <name>agg_final_costs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>hashagg_table_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>total_groups</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>partial_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d_num_partial_groups</name> <init>= <expr><call><name>ts_estimate_group</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>cheapest_partial_path</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* don't have any special estimate */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_ESTIMATE</name><argument_list>(<argument><expr><name>d_num_partial_groups</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agg_partial_costs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AggClauseCosts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agg_final_costs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AggClauseCosts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>hasAggs</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* partial phase */</comment>
		<expr_stmt><expr><call><name>get_agg_clause_costs_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
									<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>partial_grouping_target</name><operator>-&gt;</operator><name>exprs</name></name></expr></argument>,
									<argument><expr><name>AGGSPLIT_INITIAL_SERIAL</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>agg_partial_costs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* final phase */</comment>
		<expr_stmt><expr><call><name>get_agg_clause_costs_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
									<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>target</name><operator>-&gt;</operator><name>exprs</name></name></expr></argument>,
									<argument><expr><name>AGGSPLIT_FINAL_DESERIAL</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>agg_final_costs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>get_agg_clause_costs_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
									<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>havingQual</name></name></expr></argument>,
									<argument><expr><name>AGGSPLIT_FINAL_DESERIAL</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>agg_final_costs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>hashagg_table_size</name> <operator>=</operator> <call><name>estimate_hashagg_tablesize_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
														   <argument><expr><name>cheapest_partial_path</name></expr></argument>,
														   <argument><expr><operator>&amp;</operator><name>agg_partial_costs</name></expr></argument>,
														   <argument><expr><name>d_num_partial_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Tentatively produce a partial HashAgg Path, depending on if it looks as
	 * if the hash table will fit in work_mem.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>hashagg_table_size</name> <operator>&gt;=</operator> <name>work_mem</name> <operator>*</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>add_partial_path</name><argument_list>(<argument><expr><name>output_rel</name></expr></argument>,
					 <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>create_agg_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
											  <argument><expr><name>output_rel</name></expr></argument>,
											  <argument><expr><name>cheapest_partial_path</name></expr></argument>,
											  <argument><expr><name>partial_grouping_target</name></expr></argument>,
											  <argument><expr><name>AGG_HASHED</name></expr></argument>,
											  <argument><expr><name>AGGSPLIT_INITIAL_SERIAL</name></expr></argument>,
											  <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name></expr></argument>,
											  <argument><expr><name>NIL</name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>agg_partial_costs</name></expr></argument>,
											  <argument><expr><name>d_num_partial_groups</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>partial_path</name> <operator>=</operator> <operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>output_rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>total_groups</name> <operator>=</operator> <name><name>partial_path</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <name><name>partial_path</name><operator>-&gt;</operator><name>parallel_workers</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>partial_path</name> <operator>=</operator> <operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>create_gather_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
											   <argument><expr><name>output_rel</name></expr></argument>,
											   <argument><expr><name>partial_path</name></expr></argument>,
											   <argument><expr><name>partial_grouping_target</name></expr></argument>,
											   <argument><expr><name>NULL</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>total_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>output_rel</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>create_agg_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
									  <argument><expr><name>output_rel</name></expr></argument>,
									  <argument><expr><name>partial_path</name></expr></argument>,
									  <argument><expr><name>target</name></expr></argument>,
									  <argument><expr><name>AGG_HASHED</name></expr></argument>,
									  <argument><expr><name>AGGSPLIT_FINAL_DESERIAL</name></expr></argument>,
									  <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name></expr></argument>,
									  <argument><expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name><name>parse</name><operator>-&gt;</operator><name>havingQual</name></name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>agg_final_costs</name></expr></argument>,
									  <argument><expr><name>d_num_groups</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This function add a HashAggregate path, if appropriate
 * it looks like a highly modified create_grouping_paths function
 * in the postgres planner. */</comment>
<function><type><name>void</name></type>
<name>ts_plan_add_hashagg</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>input_rel</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>output_rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>parse</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name> <modifier>*</modifier></type><name>cheapest_path</name> <init>= <expr><name><name>input_rel</name><operator>-&gt;</operator><name>cheapest_total_path</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AggClauseCosts</name></type> <name>agg_costs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>can_hash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d_num_groups</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>hashaggtablesize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PathTarget</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>upper_targets</name><index>[<expr><name>UPPERREL_GROUP_AGG</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>try_parallel_aggregation</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>groupingSets</name></name> <operator>||</operator> <operator>!</operator><name><name>parse</name><operator>-&gt;</operator><name>hasAggs</name></name> <operator>||</operator> <name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Don't add HashAgg path if this is a gapfill query */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>is_gapfill_path</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>output_rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agg_costs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AggClauseCosts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_agg_clause_costs_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>root</name><operator>-&gt;</operator><name>processed_tlist</name></name></expr></argument>, <argument><expr><name>AGGSPLIT_SIMPLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg_costs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_agg_clause_costs_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>havingQual</name></name></expr></argument>, <argument><expr><name>AGGSPLIT_SIMPLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg_costs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>can_hash</name> <operator>=</operator> <operator>(</operator><name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name> <operator>!=</operator> <name>NIL</name> <operator>&amp;&amp;</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
				<name><name>agg_costs</name><operator>.</operator><name>numOrderedAggs</name></name> <operator>==</operator> <literal type="number">0</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<name><name>root</name><operator>-&gt;</operator><name>numOrderedAggs</name></name> <operator>==</operator> <literal type="number">0</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<operator>&amp;&amp;</operator> <call><name>grouping_is_hashable</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>can_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>d_num_groups</name> <operator>=</operator> <call><name>ts_estimate_group</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>cheapest_path</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* don't have any special estimate */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_ESTIMATE</name><argument_list>(<argument><expr><name>d_num_groups</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hashaggtablesize</name> <operator>=</operator>
		<call><name>estimate_hashagg_tablesize_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>cheapest_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>agg_costs</name></expr></argument>, <argument><expr><name>d_num_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hashaggtablesize</name> <operator>&gt;=</operator> <name>work_mem</name> <operator>*</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output_rel</name><operator>-&gt;</operator><name>consider_parallel</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Not even parallel-safe. */</comment>
		<expr_stmt><expr><name>try_parallel_aggregation</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>output_rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Nothing to use as input for partial aggregate. */</comment>
		<expr_stmt><expr><name>try_parallel_aggregation</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG14_LT</name></expr></cpp:if>
	<if type="elseif">else if <condition>(<expr><name><name>agg_costs</name><operator>.</operator><name>hasNonPartial</name></name> <operator>||</operator> <name><name>agg_costs</name><operator>.</operator><name>hasNonSerial</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if type="elseif">else if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>hasNonPartialAggs</name></name> <operator>||</operator> <name><name>root</name><operator>-&gt;</operator><name>hasNonSerialAggs</name></name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<comment type="block">/* Insufficient support for partial mode. */</comment>
		<expr_stmt><expr><name>try_parallel_aggregation</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Everything looks good. */</comment>
		<expr_stmt><expr><name>try_parallel_aggregation</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>try_parallel_aggregation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>plan_add_parallel_hashagg</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>input_rel</name></expr></argument>, <argument><expr><name>output_rel</name></expr></argument>, <argument><expr><name>d_num_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We just need an Agg over the cheapest-total input path, since input
	 * order won't matter.
	 */</comment>
	<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>output_rel</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>create_agg_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
									  <argument><expr><name>output_rel</name></expr></argument>,
									  <argument><expr><name>cheapest_path</name></expr></argument>,
									  <argument><expr><name>target</name></expr></argument>,
									  <argument><expr><name>AGG_HASHED</name></expr></argument>,
									  <argument><expr><name>AGGSPLIT_SIMPLE</name></expr></argument>,
									  <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name></expr></argument>,
									  <argument><expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name><name>parse</name><operator>-&gt;</operator><name>havingQual</name></name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>agg_costs</name></expr></argument>,
									  <argument><expr><name>d_num_groups</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
