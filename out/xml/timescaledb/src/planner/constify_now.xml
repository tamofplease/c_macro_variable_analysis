<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/planner/constify_now.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;datatype/timestamp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/optimizer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgroids.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This implements an optimization to allow now() expression to be
 * used during plan time chunk exclusions. Since now() is stable it
 * would not normally be considered for plan time chunk exclusion.
 * To enable this behaviour we convert `column &gt; now()` expressions
 * into `column &gt; const AND column &gt; now()`. Assuming that times
 * always moves forward this is safe even for prepared statements.
 *
 * We consider the following expressions valid for this optimization:
 * - Var &gt; now()
 * - Var &gt;= now()
 * - Var &gt; now() - Interval
 * - Var &gt; now() + Interval
 * - Var &gt;= now() - Interval
 * - Var &gt;= now() + Interval
 *
 * Interval needs to be Const in those expressions.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type>
<name>get_hypertable_dimension</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>ts_planner_get_hypertable</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ht</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>hyperspace_get_open_dimension</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_valid_now_func</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>FuncExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>funcid</name> <operator>==</operator> <name>F_NOW</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SQLValueFunction</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>castNode</name><argument_list>(<argument><expr><name>SQLValueFunction</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>SVFOP_CURRENT_TIMESTAMP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_valid_now_expr</name><parameter_list>(<parameter><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>CACHE_FLAG_MISSING_OK</name> <operator>|</operator> <name>CACHE_FLAG_NOCREATE</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Var &gt; or Var &gt;= */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>opfuncid</name></name> <operator>!=</operator> <name>F_TIMESTAMPTZ_GT</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>opfuncid</name></name> <operator>!=</operator> <name>F_TIMESTAMPTZ_GE</name><operator>)</operator> <operator>||</operator>
		<operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check that the constraint is actually on a partitioning
	 * column. We only check for match on first open dimension
	 * because that will be the time column.
	 */</comment>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><call><name>linitial_node</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varlevelsup</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>&lt;=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>list_nth</name><argument_list>(<argument><expr><name>rtable</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If this query on a view we might have a subquery here
	 * and need to peek into the subquery range table to check
	 * if the constraints are on a hypertable.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_SUBQUERY</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Unfortunately the mechanism used to warm up the
		 * hypertable cache does not apply to hypertables
		 * referenced indirectly eg through VIEWs. So we
		 * have to do the lookup for this hypertable without
		 * CACHE_FLAG_NOCREATE flag.
		 */</comment>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>CACHE_FLAG_MISSING_OK</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name> <init>= <expr><call><name>list_nth</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varlevelsup</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>rte</name> <operator>=</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>Dimension</name> <modifier>*</modifier></type><name>dim</name> <init>= <expr><call><name>get_hypertable_dimension</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dim</name> <operator>||</operator> <name><name>dim</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>column_type</name></name> <operator>!=</operator> <name>TIMESTAMPTZOID</name> <operator>||</operator> <name><name>dim</name><operator>-&gt;</operator><name>column_attno</name></name> <operator>!=</operator> <name><name>var</name><operator>-&gt;</operator><name>varattno</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Var &gt; now() or Var &gt;= now() */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>is_valid_now_func</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OpExpr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Var &gt;|&gt;= now() +|- Const */</comment>
	<decl_stmt><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>op_inner</name> <init>= <expr><call><name>lsecond_node</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>op_inner</name><operator>-&gt;</operator><name>opfuncid</name></name> <operator>!=</operator> <name>F_TIMESTAMPTZ_MI_INTERVAL</name> <operator>&amp;&amp;</operator>
		 <name><name>op_inner</name><operator>-&gt;</operator><name>opfuncid</name></name> <operator>!=</operator> <name>F_TIMESTAMPTZ_PL_INTERVAL</name><operator>)</operator> <operator>||</operator>
		<operator>!</operator><call><name>is_valid_now_func</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>op_inner</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>op_inner</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The consttype check should not be necessary since the
	 * operators we whitelist above already mandates it.
	 */</comment>
	<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>lsecond_node</name><argument_list>(<argument><expr><name>Const</name></expr></argument>, <argument><expr><name><name>op_inner</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>consttype</name></name> <operator>==</operator> <name>INTERVALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>constisnull</name></name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>consttype</name></name> <operator>!=</operator> <name>INTERVALOID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Const</name> <modifier>*</modifier></type>
<name>make_now_const</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>makeConst</name><argument_list>(<argument><expr><name>TIMESTAMPTZOID</name></expr></argument>,
					 <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
					 <argument><expr><name>InvalidOid</name></expr></argument>,
					 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimestampTz</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
					 <argument><expr><call><name>ts_get_mock_time_or_current_time</name><argument_list>()</argument_list></call></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					 <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><call><name>GetCurrentTransactionStartTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					 <argument><expr><name>false</name></expr></argument>,
					 <argument><expr><name>FLOAT8PASSBYVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns a copy of the expression with the now() call constified */</comment>
<comment type="block">/*
 * op will be OpExpr with Var &gt; now() - Expr
 */</comment>
<function><type><specifier>static</specifier> <name>OpExpr</name> <modifier>*</modifier></type>
<name>constify_now_expr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>PLANNER_LOCATION_MAGIC</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>is_valid_now_func</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>make_now_const</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>op</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>op_inner</name> <init>= <expr><call><name>lsecond_node</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>const_offset</name> <init>= <expr><call><name>lsecond_node</name><argument_list>(<argument><expr><name>Const</name></expr></argument>, <argument><expr><name><name>op_inner</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>const_offset</name><operator>-&gt;</operator><name>consttype</name></name> <operator>==</operator> <name>INTERVALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><call><name>DatumGetIntervalP</name><argument_list>(<argument><expr><name><name>const_offset</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/*
		 * Sanity check that this is a supported expression. We should never
		 * end here if it isn't since this is checked in is_valid_now_expr.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>is_valid_now_func</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>op_inner</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>now</name> <init>= <expr><call><name>make_now_const</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>op_inner</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * If the interval has a day component then the calculation needs
		 * to take into account daylight saving time switches and thereby a
		 * day would not always be exactly 24 hours. We mitigate this by
		 * adding a safety buffer to account for these dst switches when
		 * dealing with intervals with day component. These calculations
		 * will be repeated with exact values during execution.
		 * Since dst switches seem to range between -1 and 2 hours we set
		 * the safety buffer to 4 hours.
		 * When dealing with Intervals with month component timezone changes
		 * can result in multiple day differences in the outcome of these
		 * calculations due to different month lengths. When dealing with
		 * months we add a 7 day safety buffer.
		 * For all these calculations it is fine if we exclude less chunks
		 * than strictly required for the operation, additional exclusion
		 * with exact values will happen in the executor. But under no
		 * circumstances must we exclude too much cause there would be
		 * no way for the executor to get those chunks back.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>offset</name><operator>-&gt;</operator><name>day</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>offset</name><operator>-&gt;</operator><name>month</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TimestampTz</name></type> <name>now_value</name> <init>= <expr><call><name>DatumGetTimestampTz</name><argument_list>(<argument><expr><name><name>now</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>offset</name><operator>-&gt;</operator><name>month</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>now_value</name> <operator>-=</operator> <literal type="number">7</literal> <operator>*</operator> <name>USECS_PER_DAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>offset</name><operator>-&gt;</operator><name>day</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>now_value</name> <operator>-=</operator> <literal type="number">4</literal> <operator>*</operator> <name>USECS_PER_HOUR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>constvalue</name></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>now_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Normally estimate_expression_value is not safe to use during planning
		 * since it also evaluates stable expressions. Since we only allow a
		 * very limited subset of expressions for this optimization it is safe
		 * for those expressions we allowed earlier.
		 * estimate_expression_value should always be able to completely constify
		 * the expression due to the restrictions we impose on the expressions
		 * supported.
		 */</comment>
		<expr_stmt><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>estimate_expression_value</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>op_inner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>PLANNER_LOCATION_MAGIC</name></expr>;</expr_stmt>
		<return>return <expr><name>op</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Node</name> <modifier>*</modifier></type>
<name>ts_constify_now</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>is_valid_now_expr</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>args</name> <init>=
					<expr><call><name>list_make2</name><argument_list>(<argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>constify_now_expr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>AND_EXPR</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>T_BoolExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>additions</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BoolExpr</name> <modifier>*</modifier></type><name>be</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>BoolExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* We only look for top-level AND */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>be</name><operator>-&gt;</operator><name>boolop</name></name> <operator>!=</operator> <name>AND_EXPR</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt>

			<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>be-&gt;args</argument>)</argument_list></macro>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OpExpr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_valid_now_expr</name><argument_list>(<argument><expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>additions</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>additions</name></expr></argument>, <argument><expr><call><name>constify_now_expr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>

			<if_stmt><if>if <condition>(<expr><name>additions</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>be</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>additions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<break>break;</break>
		</block_content>}</block>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>
</unit>
