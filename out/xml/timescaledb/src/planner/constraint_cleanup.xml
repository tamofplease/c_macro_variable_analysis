<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/planner/constraint_cleanup.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/pathnodes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"planner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This code deals with removing the intermediate constraints
 * we added before planning to improve chunk exclusion.
 */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>restrictinfo_is_marked</name><parameter_list>(<parameter><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>ri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name><name>ri</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
			<return>return <expr><call><name>castNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>location</name> <operator>==</operator> <name>PLANNER_LOCATION_MAGIC</name></expr>;</return>
		<case>case <expr><name>T_ScalarArrayOpExpr</name></expr>:</case>
			<return>return <expr><call><name>castNode</name><argument_list>(<argument><expr><name>ScalarArrayOpExpr</name></expr></argument>, <argument><expr><name><name>ri</name><operator>-&gt;</operator><name>clause</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>location</name> <operator>==</operator> <name>PLANNER_LOCATION_MAGIC</name></expr>;</return>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove marked constraints from RestrictInfo clause.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>restrictinfo_cleanup</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>restrictinfos</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pfiltered</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>filtered_ri</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>filtered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>restrictinfos</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>restrictinfos</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>ri</name> <init>= <expr><operator>(</operator><name>RestrictInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>restrictinfo_is_marked</name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>filtered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>filtered_ri</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>filtered_ri</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>pfiltered</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pfiltered</name> <operator>=</operator> <name>filtered</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><name>filtered</name></expr> ?</condition><then> <expr><name>filtered_ri</name></expr> </then><else>: <expr><name>restrictinfos</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove marked constraints from IndexPath.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>indexpath_cleanup</name><parameter_list>(<parameter><decl><type><name>IndexPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>filtered_ic</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>indexinfo</name><operator>-&gt;</operator><name>indrestrictinfo</name></name> <operator>=</operator> <call><name>restrictinfo_cleanup</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>indexinfo</name><operator>-&gt;</operator><name>indrestrictinfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>path-&gt;indexclauses</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexClause</name> <modifier>*</modifier></type><name>iclause</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>IndexClause</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>restrictinfo_is_marked</name><argument_list>(<argument><expr><name><name>iclause</name><operator>-&gt;</operator><name>rinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>filtered_ic</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>filtered_ic</name></expr></argument>, <argument><expr><name>iclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>indexclauses</name></name> <operator>=</operator> <name>filtered_ic</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_planner_constraint_cleanup</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>filtered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name> <operator>=</operator> <call><name>restrictinfo_cleanup</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>baserestrictinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If we added constraints those will be present in baserestrictinfo.
	 * If we did not remove anything from baserestrictinfo in the step
	 * above we can skip looking in the paths.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>filtered</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * For seqscan cleaning up baserestrictinfo is enough but for
		 * BitmapHeapPath and IndexPath we need some extra steps.
		 */</comment>
		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>rel-&gt;pathlist</argument>)</argument_list></macro>
		<block>{<block_content>
			<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>T_BitmapHeapPath</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>BitmapHeapPath</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>BitmapHeapPath</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>bitmapqual</name></name></expr></argument>, <argument><expr><name>IndexPath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>indexpath_cleanup</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>IndexPath</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>bitmapqual</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<break>break;</break>
				</block_content>}</block>
				<case>case <expr><name>T_IndexPath</name></expr>:</case>
				<block>{<block_content>
					<expr_stmt><expr><call><name>indexpath_cleanup</name><argument_list>(<argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>IndexPath</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
				<default>default:</default>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
