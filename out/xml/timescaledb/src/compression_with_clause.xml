<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/compression_with_clause.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/dependency.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parser.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compression_with_clause.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WithClauseDefinition</name></type> <name><name>compress_hypertable_with_clause_def</name><index>[]</index></name> <init>= <expr><block>{
		<expr><index>[<expr><name>CompressEnabled</name></expr>]</index> <operator>=</operator> <block>{
			<expr><operator>.</operator><name>arg_name</name> <operator>=</operator> <literal type="string">"compress"</literal></expr>,
			<expr><operator>.</operator><name>type_id</name> <operator>=</operator> <name>BOOLOID</name></expr>,
			<expr><operator>.</operator><name>default_val</name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
		}</block></expr>,
		<expr><index>[<expr><name>CompressSegmentBy</name></expr>]</index> <operator>=</operator> <block>{
			 <expr><operator>.</operator><name>arg_name</name> <operator>=</operator> <literal type="string">"compress_segmentby"</literal></expr>,
			 <expr><operator>.</operator><name>type_id</name> <operator>=</operator> <name>TEXTOID</name></expr>,
		}</block></expr>,
		<expr><index>[<expr><name>CompressOrderBy</name></expr>]</index> <operator>=</operator> <block>{
			 <expr><operator>.</operator><name>arg_name</name> <operator>=</operator> <literal type="string">"compress_orderby"</literal></expr>,
			 <expr><operator>.</operator><name>type_id</name> <operator>=</operator> <name>TEXTOID</name></expr>,
		}</block></expr>,
		<expr><index>[<expr><name>CompressChunkTimeInterval</name></expr>]</index> <operator>=</operator> <block>{
			 <expr><operator>.</operator><name>arg_name</name> <operator>=</operator> <literal type="string">"compress_chunk_time_interval"</literal></expr>,
			 <expr><operator>.</operator><name>type_id</name> <operator>=</operator> <name>INTERVALOID</name></expr>,
		}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>WithClauseResult</name> <modifier>*</modifier></type>
<name>ts_compress_hypertable_set_clause_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>defelems</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_with_clauses_parse</name><argument_list>(<argument><expr><name>defelems</name></expr></argument>,
								 <argument><expr><name>compress_hypertable_with_clause_def</name></expr></argument>,
								 <argument><expr><call><name>TS_ARRAY_LEN</name><argument_list>(<argument><expr><name>compress_hypertable_with_clause_def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>throw_segment_by_error</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>segment_by</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unable to parse segmenting option \"%s\""</literal></expr></argument>, <argument><expr><name>segment_by</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The option timescaledb.compress_segmentby must"</literal>
					 <literal type="string">" be a set of columns separated by commas."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>select_stmt_as_expected</name><parameter_list>(<parameter><decl><type><name>SelectStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* The only parts of the select stmt that are allowed to be set are the order by or group by.
	 * Check that no other fields are set */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>distinctClause</name></name> <operator>!=</operator> <name>NIL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>intoClause</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>targetList</name></name> <operator>!=</operator> <name>NIL</name> <operator>||</operator>
		<name><name>stmt</name><operator>-&gt;</operator><name>whereClause</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>havingClause</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>windowClause</name></name> <operator>!=</operator> <name>NIL</name> <operator>||</operator>
		<name><name>stmt</name><operator>-&gt;</operator><name>valuesLists</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>limitOffset</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>limitCount</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
		<name><name>stmt</name><operator>-&gt;</operator><name>lockingClause</name></name> <operator>!=</operator> <name>NIL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>withClause</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>op</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
		<name><name>stmt</name><operator>-&gt;</operator><name>all</name></name> <operator>!=</operator> <name>false</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>larg</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>rarg</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>parse_segment_collist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>inpstr</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>hypertable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>parsed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SelectStmt</name> <modifier>*</modifier></type><name>select</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RawStmt</name> <modifier>*</modifier></type><name>raw</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* parse the segment by list exactly how you would a group by */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
					 <argument><expr><literal type="string">"SELECT FROM %s.%s GROUP BY %s"</literal></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>parsed</name> <operator>=</operator> <call><name>raw_parser_compat</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RawStmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>raw</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>SelectStmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>select</name> <operator>=</operator> <operator>(</operator><name>SelectStmt</name> <operator>*</operator><operator>)</operator> <name><name>raw</name><operator>-&gt;</operator><name>stmt</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>select_stmt_as_expected</name><argument_list>(<argument><expr><name>select</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>sortClause</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>collist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>select-&gt;groupClause</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>CompressedParsedCol</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>col</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_segment_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>, <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>collist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>collist</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>collist</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>throw_order_by_error</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>order_by</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unable to parse ordering option \"%s\""</literal></expr></argument>, <argument><expr><name>order_by</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The timescaledb.compress_orderby option must be a set of column"</literal>
					 <literal type="string">" names with sort options, separated by commas."</literal>
					 <literal type="string">" It is the same format as an ORDER BY clause."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* compress_orderby is parsed same as order by in select queries */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>parse_order_collist</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>inpstr</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>hypertable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>parsed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SelectStmt</name> <modifier>*</modifier></type><name>select</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RawStmt</name> <modifier>*</modifier></type><name>raw</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* parse the segment by list exactly how you would a order by by */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
					 <argument><expr><literal type="string">"SELECT FROM %s.%s ORDER BY %s"</literal></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>parsed</name> <operator>=</operator> <call><name>raw_parser_compat</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RawStmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>raw</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>raw</name><operator>-&gt;</operator><name>stmt</name></name></expr></argument>, <argument><expr><name>SelectStmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>select</name> <operator>=</operator> <operator>(</operator><name>SelectStmt</name> <operator>*</operator><operator>)</operator> <name><name>raw</name><operator>-&gt;</operator><name>stmt</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>select_stmt_as_expected</name><argument_list>(<argument><expr><name>select</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>select</name><operator>-&gt;</operator><name>groupClause</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>collist</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>select-&gt;sortClause</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SortBy</name> <modifier>*</modifier></type><name>sort_by</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CompressedParsedCol</name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>(</operator><name>CompressedParsedCol</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>col</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SortBy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>sort_by</name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>sort_by</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>cf</name> <operator>=</operator> <operator>(</operator><name>ColumnRef</name> <operator>*</operator><operator>)</operator> <name><name>sort_by</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>, <argument><expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>cf</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sort_by</name><operator>-&gt;</operator><name>sortby_dir</name></name> <operator>!=</operator> <name>SORTBY_ASC</name> <operator>&amp;&amp;</operator> <name><name>sort_by</name><operator>-&gt;</operator><name>sortby_dir</name></name> <operator>!=</operator> <name>SORTBY_DESC</name> <operator>&amp;&amp;</operator>
			<name><name>sort_by</name><operator>-&gt;</operator><name>sortby_dir</name></name> <operator>!=</operator> <name>SORTBY_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>throw_order_by_error</name><argument_list>(<argument><expr><name>inpstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>asc</name></name> <operator>=</operator> <name><name>sort_by</name><operator>-&gt;</operator><name>sortby_dir</name></name> <operator>==</operator> <name>SORTBY_ASC</name> <operator>||</operator> <name><name>sort_by</name><operator>-&gt;</operator><name>sortby_dir</name></name> <operator>==</operator> <name>SORTBY_DEFAULT</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sort_by</name><operator>-&gt;</operator><name>sortby_nulls</name></name> <operator>==</operator> <name>SORTBY_NULLS_DEFAULT</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* default null ordering is LAST for ASC, FIRST for DESC */</comment>
			<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>nullsfirst</name></name> <operator>=</operator> <operator>!</operator><name><name>col</name><operator>-&gt;</operator><name>asc</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>col</name><operator>-&gt;</operator><name>nullsfirst</name></name> <operator>=</operator> <name><name>sort_by</name><operator>-&gt;</operator><name>sortby_nulls</name></name> <operator>==</operator> <name>SORTBY_NULLS_FIRST</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>collist</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>collist</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>collist</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns List of CompressedParsedCol
 * compress_segmentby = `col1,col2,col3`
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_compress_hypertable_parse_segment_by</name><parameter_list>(<parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>parsed_options</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>hypertable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>parsed_options</name><index>[<expr><name>CompressSegmentBy</name></expr>]</index></name><operator>.</operator><name>is_default</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>textarg</name> <init>= <expr><name><name>parsed_options</name><index>[<expr><name>CompressSegmentBy</name></expr>]</index></name><operator>.</operator><name>parsed</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>parse_segment_collist</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>textarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hypertable</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NIL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* returns List of CompressedParsedCol
 * E.g. timescaledb.compress_orderby = 'col1 asc nulls first,col2 desc,col3'
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_compress_hypertable_parse_order_by</name><parameter_list>(<parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>parsed_options</name></decl></parameter>, <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>hypertable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>parsed_options</name><index>[<expr><name>CompressOrderBy</name></expr>]</index></name><operator>.</operator><name>is_default</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>textarg</name> <init>= <expr><name><name>parsed_options</name><index>[<expr><name>CompressOrderBy</name></expr>]</index></name><operator>.</operator><name>parsed</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>parse_order_collist</name><argument_list>(<argument><expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>textarg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hypertable</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NIL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* returns List of CompressedParsedCol
 * E.g. timescaledb.compress_orderby = 'col1 asc nulls first,col2 desc,col3'
 */</comment>
<function><type><name>Interval</name> <modifier>*</modifier></type>
<name>ts_compress_hypertable_parse_chunk_time_interval</name><parameter_list>(<parameter><decl><type><name>WithClauseResult</name> <modifier>*</modifier></type><name>parsed_options</name></decl></parameter>,
												 <parameter><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>hypertable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>parsed_options</name><index>[<expr><name>CompressChunkTimeInterval</name></expr>]</index></name><operator>.</operator><name>is_default</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>textarg</name> <init>= <expr><name><name>parsed_options</name><index>[<expr><name>CompressChunkTimeInterval</name></expr>]</index></name><operator>.</operator><name>parsed</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>DatumGetIntervalP</name><argument_list>(<argument><expr><name>textarg</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
