<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/estimate.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/optimizer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_oper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/selfuncs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"func_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"estimate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"import/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This module contains functions for estimating, e.g., the number of groups
 * formed in various grouping expressions that involve time bucketing.
 */</comment>

<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>estimate_max_spread_expr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>group_estimate_opexpr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>opexpr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>path_rows</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Estimate the max spread on a time var in terms of the internal time representation.
 * Note that this will happen on the hypertable var in most cases. Therefore this is
 * a huge overestimate in many cases where there is a WHERE clause on time.
 */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>estimate_max_spread_var</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VariableStatData</name></type> <name>vardata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>ltop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>max_datum</name></decl>, <decl><type ref="prev"/><name>min_datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int64</name></type> <name>max</name></decl>, <decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>examine_variable</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vardata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_sort_group_operators</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ltop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid</name> <operator>=</operator> <call><name>ts_get_variable_range</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vardata</name></expr></argument>, <argument><expr><name>ltop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min_datum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseVariableStats</name><argument_list>(<argument><expr><name>vardata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><name>max_datum</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><name>min_datum</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>estimate_max_spread_opexpr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>opexpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>function_name</name> <init>= <expr><call><name>get_opname</name><argument_list>(<argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>opno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>nonconst</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>function_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>lsecond</name><argument_list>(<argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nonconst</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nonconst</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></else></if_stmt>

	<comment type="block">/* adding or subtracting a constant doesn't affect the range */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>function_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>function_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>estimate_max_spread_expr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>nonconst</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* estimate the max spread (max(value)-min(value)) of the expr */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>estimate_max_spread_expr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Var</name></expr>:</case>
			<return>return <expr><call><name>estimate_max_spread_var</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
			<return>return <expr><call><name>estimate_max_spread_opexpr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Return an estimate for the number of groups formed when expr is divided
 * into intervals of size interval_period.
 */</comment>
<function><type><name>double</name></type>
<name>ts_estimate_group_expr_interval</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>interval_period</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>max_period</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>interval_period</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>max_period</name> <operator>=</operator> <call><name>estimate_max_spread_expr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_ESTIMATE</name><argument_list>(<argument><expr><name>max_period</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>clamp_row_est</name><argument_list>(<argument><expr><name>max_period</name> <operator>/</operator> <name>interval_period</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* if performing integer division number of groups is less than the spread divided by the divisor.
 * Note that this is an overestimate. */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>group_estimate_integer_division</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opno</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>function_name</name> <init>= <expr><call><name>get_opname</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* only handle division */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>function_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>function_name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>right</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>consttype</name></name> <operator>!=</operator> <name>INT2OID</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>consttype</name></name> <operator>!=</operator> <name>INT4OID</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>consttype</name></name> <operator>!=</operator> <name>INT8OID</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><call><name>ts_estimate_group_expr_interval</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>left</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>group_estimate_funcexpr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>group_estimate_func</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>path_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncInfo</name> <modifier>*</modifier></type><name>func_est</name> <init>= <expr><call><name>ts_func_cache_get_bucketing_func</name><argument_list>(<argument><expr><name><name>group_estimate_func</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>func_est</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name><name>func_est</name><operator>-&gt;</operator><name>group_estimate</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>group_estimate_func</name></expr></argument>, <argument><expr><name>path_rows</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get a custom estimate for the number of groups of an expression. Return INVALID_ESTIMATE if we
 * don't have any extra knowledge and should just use the default estimate */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>group_estimate_expr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>path_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
			<return>return <expr><call><name>group_estimate_funcexpr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>, <argument><expr><name>path_rows</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
			<return>return <expr><call><name>group_estimate_opexpr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>, <argument><expr><name>path_rows</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>group_estimate_opexpr</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>opexpr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>path_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>second</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>estimate</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>eval_const_expressions</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>eval_const_expressions</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>estimate</name> <operator>=</operator> <call><name>group_estimate_integer_division</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>opexpr</name><operator>-&gt;</operator><name>opno</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_VALID_ESTIMATE</name><argument_list>(<argument><expr><name>estimate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>estimate</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>group_estimate_expr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>path_rows</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>group_estimate_expr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>path_rows</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get a custom estimate for the number of groups in a query. Return
 * INVALID_ESTIMATE if we don't have any extra knowledge and should just use
 * the default estimate. This works by getting a custom estimate for any
 * groups where a custom estimate exists and multiplying that by the standard
 * estimate of the groups for which custom estimates don't exist.
 */</comment>
<function><type><name>double</name></type>
<name>ts_estimate_group</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>path_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>parse</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>parse</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d_num_groups</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>group_exprs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>new_group_expr</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>parse</name><operator>-&gt;</operator><name>groupingSets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>group_exprs</name> <operator>=</operator> <call><name>get_sortgrouplist_exprs</name><argument_list>(<argument><expr><name><name>parse</name><operator>-&gt;</operator><name>groupClause</name></name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>group_exprs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>estimate</name> <init>= <expr><call><name>group_estimate_expr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>path_rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>IS_VALID_ESTIMATE</name><argument_list>(<argument><expr><name>estimate</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>d_num_groups</name> <operator>*=</operator> <name>estimate</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>new_group_expr</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>new_group_expr</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block>

	<comment type="block">/* nothing custom */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* multiply by default estimates */</comment>
	<if_stmt><if>if <condition>(<expr><name>new_group_expr</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>d_num_groups</name> <operator>*=</operator> <call><name>estimate_num_groups_compat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>new_group_expr</name></expr></argument>, <argument><expr><name>path_rows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>d_num_groups</name> <operator>&gt;</operator> <name>path_rows</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>clamp_row_est</name><argument_list>(<argument><expr><name>d_num_groups</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
