<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/func_cache.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/heapam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/pathnodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optimizer/optimizer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_oper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/hsearch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/selfuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"func_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"estimate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sort_transform.h"</cpp:file></cpp:include>

<comment type="block">/*
 * func_cache - a cache for quick identification of, and access to, functions
 * useful for TimescaleDB. The function info is used in various query
 * optimizations, for instance, we provide custom group estimate functions for
 * use when grouping on time buckets. We also provide functions that allow
 * sorting time buckets using an index on the non-bucketed expression/column.
 */</comment>

<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>date_trunc_sort_transform</name><parameter_list>(<parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * date_trunc (const, var) =&gt; var
	 *
	 * proof: date_trunc(c, time1) &gt;= date_trunc(c,time2) iff time1 &gt; time2
	 */</comment>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>second</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>func</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>ts_sort_transform_expr</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>func</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check that time_bucket has a const offset, if an offset is supplied
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>time_bucket_has_const_offset</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro>                                                         \
	<cpp:value>(list_length((func)-&gt;args) == 2 || IsA(lthird((func)-&gt;args), Const))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>time_bucket_has_const_period</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IsA(linitial((func)-&gt;args), Const)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>time_bucket_has_const_timezone</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IsA(lthird((func)-&gt;args), Const)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>do_sort_transform</name><parameter_list>(<parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><call><name>ts_sort_transform_expr</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>func</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>time_bucket_gapfill_sort_transform</name><parameter_list>(<parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * time_bucket(const, var, const) =&gt; var
	 *
	 * proof: time_bucket(const1, time1) &gt;= time_bucket(const1,time2) iff time1
	 * &gt; time2
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>time_bucket_has_const_period</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call> <operator>||</operator>
		<operator>(</operator><call><name>list_length</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>time_bucket_has_const_timezone</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>func</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>do_sort_transform</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>time_bucket_sort_transform</name><parameter_list>(<parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * If period and offset are not constants we must not do the optimization
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>time_bucket_has_const_offset</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>func</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>time_bucket_has_const_period</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>func</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>do_sort_transform</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * time_bucket with timezone will always have 5 args. For the sort
 * optimization to apply all args need to be Const except timestamp.
 */</comment>
<function><type><specifier>static</specifier> <name>Expr</name> <modifier>*</modifier></type>
<name>time_bucket_tz_sort_transform</name><parameter_list>(<parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><operator>(</operator><name>func</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>lthird</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>||</operator>
		<operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfourth</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>lfifth</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>func</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>do_sort_transform</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* For time_bucket this estimate currently works by seeing how many possible
 * buckets there will be if the data spans the entire hypertable. Note that
 * this is an overestimate.
 * */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>time_bucket_group_estimate</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>path_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>first_arg</name> <init>= <expr><call><name>eval_const_expressions</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>second_arg</name> <init>= <expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>period</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>first_arg</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>first_arg</name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>consttype</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><name>period</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><name>period</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><name>period</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INTERVALOID</name></expr>:</case>
			<expr_stmt><expr><name>period</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name>ts_get_interval_period_approx</name><argument_list>(<argument><expr><call><name>DatumGetIntervalP</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><call><name>ts_estimate_group_expr_interval</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>second_arg</name></expr></argument>, <argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* For date_trunc this estimate currently works by seeing how many possible
 * buckets there will be if the data spans the entire hypertable. Note that
 * this is an overestimate.
 * */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>date_trunc_group_estimate</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>path_rows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>first_arg</name> <init>= <expr><call><name>eval_const_expressions</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>second_arg</name> <init>= <expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>interval</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>first_arg</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_ESTIMATE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>first_arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>interval</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_estimate_group_expr_interval</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
										   <argument><expr><name>second_arg</name></expr></argument>,
										   <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <call><name>ts_date_trunc_interval_period_approx</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>FuncEntry</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>funcid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FuncInfo</name> <modifier>*</modifier></type><name>funcinfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>FuncEntry</name>;</typedef>

<comment type="block">/* Information about functions that we put in the cache */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>FuncInfo</name></type> <name><name>funcinfo</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr>, <expr><name>INTERVALOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>INTERVALOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>DATEOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>DATEOID</name></expr>, <expr><name>DATEOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>DATEOID</name></expr>, <expr><name>INTERVALOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT2OID</name></expr>, <expr><name>INT2OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT2OID</name></expr>, <expr><name>INT2OID</name></expr>, <expr><name>INT2OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT4OID</name></expr>, <expr><name>INT4OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT4OID</name></expr>, <expr><name>INT4OID</name></expr>, <expr><name>INT4OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT8OID</name></expr>, <expr><name>INT8OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT8OID</name></expr>, <expr><name>INT8OID</name></expr>, <expr><name>INT8OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">5</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TEXTOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>INTERVALOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_tz_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE_EXPERIMENTAL</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_ng"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>DATEOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE_EXPERIMENTAL</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_ng"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>DATEOID</name></expr>, <expr><name>DATEOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE_EXPERIMENTAL</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_ng"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE_EXPERIMENTAL</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_ng"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE_EXPERIMENTAL</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_ng"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">3</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TEXTOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE_EXPERIMENTAL</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_ng"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">4</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TEXTOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_gapfill"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">4</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_gapfill_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_gapfill"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">4</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_gapfill_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_gapfill"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">5</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TEXTOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_gapfill_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_gapfill"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">4</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>DATEOID</name></expr>, <expr><name>DATEOID</name></expr>, <expr><name>DATEOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_gapfill_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_gapfill"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">4</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT2OID</name></expr>, <expr><name>INT2OID</name></expr>, <expr><name>INT2OID</name></expr>, <expr><name>INT2OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_gapfill_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_gapfill"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">4</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT4OID</name></expr>, <expr><name>INT4OID</name></expr>, <expr><name>INT4OID</name></expr>, <expr><name>INT4OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_gapfill_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_TIMESCALE</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"time_bucket_gapfill"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">4</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>INT8OID</name></expr>, <expr><name>INT8OID</name></expr>, <expr><name>INT8OID</name></expr>, <expr><name>INT8OID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>time_bucket_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>time_bucket_gapfill_sort_transform</name></expr>,
	}</block></expr>,

	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_POSTGRES</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"date_trunc"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>TEXTOID</name></expr>, <expr><name>TIMESTAMPOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>date_trunc_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>date_trunc_sort_transform</name></expr>,
	}</block></expr>,
	<expr><block>{
		<expr><operator>.</operator><name>origin</name> <operator>=</operator> <name>ORIGIN_POSTGRES</name></expr>,
		<expr><operator>.</operator><name>is_bucketing_func</name> <operator>=</operator> <name>true</name></expr>,
		<expr><operator>.</operator><name>allowed_in_cagg_definition</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>funcname</name> <operator>=</operator> <literal type="string">"date_trunc"</literal></expr>,
		<expr><operator>.</operator><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>,
		<expr><operator>.</operator><name>arg_types</name> <operator>=</operator> <block>{ <expr><name>TEXTOID</name></expr>, <expr><name>TIMESTAMPTZOID</name></expr> }</block></expr>,
		<expr><operator>.</operator><name>group_estimate</name> <operator>=</operator> <name>date_trunc_group_estimate</name></expr>,
		<expr><operator>.</operator><name>sort_transform</name> <operator>=</operator> <name>date_trunc_sort_transform</name></expr>,
	}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MAX_CACHE_FUNCTIONS</name></cpp:macro> <cpp:value>(sizeof(funcinfo) / sizeof(funcinfo[0]))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>func_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>proc_get_oid</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_proc</name></type> <name>form</name> <init>= <expr><operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>form</name><operator>-&gt;</operator><name>oid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>initialize_func_info</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>hashctl</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>keysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>entrysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FuncEntry</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>hcxt</name> <operator>=</operator> <name>CacheMemoryContext</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>extension_nsp</name> <init>= <expr><call><name>ts_extension_schema_oid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>experimental_nsp</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><call><name>ts_experimental_schema_name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>pg_nsp</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><literal type="string">"pg_catalog"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>func_hash</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"func_cache"</literal></expr></argument>,
							<argument><expr><name>_MAX_CACHE_FUNCTIONS</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>hashctl</name></expr></argument>,
							<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>ProcedureRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_MAX_CACHE_FUNCTIONS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FuncInfo</name> <modifier>*</modifier></type><name>finfo</name> <init>= <expr><operator>&amp;</operator><name><name>funcinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>namespaceoid</name> <init>= <expr><name>pg_nsp</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>oidvector</name> <modifier>*</modifier></type><name>paramtypes</name> <init>= <expr><call><name>buildoidvector</name><argument_list>(<argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>arg_types</name></name></expr></argument>, <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>nargs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FuncEntry</name> <modifier>*</modifier></type><name>fentry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>hash_found</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>funcid</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>origin</name></name> <operator>==</operator> <name>ORIGIN_TIMESCALE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>namespaceoid</name> <operator>=</operator> <name>extension_nsp</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>finfo</name><operator>-&gt;</operator><name>origin</name></name> <operator>==</operator> <name>ORIGIN_TIMESCALE_EXPERIMENTAL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>namespaceoid</name> <operator>=</operator> <name>experimental_nsp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache3</name><argument_list>(<argument><expr><name>PROCNAMEARGSNSP</name></expr></argument>,
								<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>paramtypes</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>namespaceoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				 <argument><expr><literal type="string">"cache lookup failed for function \"%s\" with %d args"</literal></expr></argument>,
				 <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>,
				 <argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>funcid</name> <operator>=</operator> <call><name>proc_get_oid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>fentry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>func_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcid</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>hash_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fentry</name><operator>-&gt;</operator><name>funcid</name></name> <operator>=</operator> <name>funcid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fentry</name><operator>-&gt;</operator><name>funcinfo</name></name> <operator>=</operator> <name>finfo</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>FuncInfo</name> <modifier>*</modifier></type>
<name>ts_func_cache_get</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>func_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>initialize_func_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>func_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcid</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name>entry</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>funcinfo</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>FuncInfo</name> <modifier>*</modifier></type>
<name>ts_func_cache_get_bucketing_func</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncInfo</name> <modifier>*</modifier></type><name>finfo</name> <init>= <expr><call><name>ts_func_cache_get</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>finfo</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><name><name>finfo</name><operator>-&gt;</operator><name>is_bucketing_func</name></name></expr> ?</condition><then> <expr><name>finfo</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
