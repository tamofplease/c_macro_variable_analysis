<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/dimension_vector.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_vector.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_slices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>left_slice</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>DimensionSlice</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>left</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>right_slice</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>DimensionSlice</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>right</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>ts_dimension_slice_cmp</name><argument_list>(<argument><expr><name>left_slice</name></expr></argument>, <argument><expr><name>right_slice</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * identical to cmp_slices except for reversed arguments to ts_dimension_slice_cmp
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_slices_reverse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>left_slice</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>DimensionSlice</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>left</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>right_slice</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>DimensionSlice</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>right</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>-</operator><call><name>ts_dimension_slice_cmp</name><argument_list>(<argument><expr><name>left_slice</name></expr></argument>, <argument><expr><name>right_slice</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmp_coordinate_and_slice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>coord</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator> <name>left</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>DimensionSlice</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>right</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>ts_dimension_slice_cmp_coordinate</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>coord</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DimensionVec</name> <modifier>*</modifier></type>
<name>dimension_vec_expand</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>new_capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>vec</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;=</operator> <name>new_capacity</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>vec</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vec</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>DIMENSION_VEC_SIZE</name><argument_list>(<argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>vec</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><call><name>DIMENSION_VEC_SIZE</name><argument_list>(<argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>

	<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_create</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>initial_num_slices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><call><name>dimension_vec_expand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>initial_num_slices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>initial_num_slices</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_sort</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier><modifier>*</modifier></type><name>vecptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>*</operator><name>vecptr</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionSlice</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_sort_reverse</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier><modifier>*</modifier></type><name>vecptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>*</operator><name>vecptr</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionSlice</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_slices_reverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_add_slice</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier><modifier>*</modifier></type><name>vecptr</name></decl></parameter>, <parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>*</operator><name>vecptr</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ensure consistent dimension */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>dimension_id</name></name> <operator>==</operator> <name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>vecptr</name> <operator>=</operator> <name>vec</name> <operator>=</operator> <call><name>dimension_vec_expand</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>capacity</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>slice</name></expr>;</expr_stmt>

	<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_add_unique_slice</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier><modifier>*</modifier></type><name>vecptr</name></decl></parameter>, <parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>*</operator><name>vecptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>existing_slice_index</name> <init>= <expr><call><name>ts_dimension_vec_find_slice_index</name><argument_list>(<argument><expr><name>vec</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>existing_slice_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>ts_dimension_vec_add_slice</name><argument_list>(<argument><expr><name>vecptr</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>vec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>DimensionVec</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_add_slice_sort</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier><modifier>*</modifier></type><name>vecptr</name></decl></parameter>, <parameter><decl><type><name>DimensionSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>vecptr</name> <operator>=</operator> <name>vec</name> <operator>=</operator> <call><name>ts_dimension_vec_add_slice</name><argument_list>(<argument><expr><name>vecptr</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ts_dimension_vec_sort</name><argument_list>(<argument><expr><name>vecptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dimension_vec_remove_slice</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier><modifier>*</modifier></type><name>vecptr</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name> <init>= <expr><operator>*</operator><name>vecptr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_dimension_slice_free</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name></name> <operator>+</operator> <name>index</name></expr></argument>,
			<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name></name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionSlice</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ASSERT_CHECKING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>dimension_vec_is_sorted</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>cmp_slices</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_find_slice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>coordinate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionSlice</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>dimension_vec_is_sorted</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coordinate</name></expr></argument>,
				  <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>,
				  <argument><expr><name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name></expr></argument>,
				  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionSlice</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
				  <argument><expr><name>cmp_coordinate_and_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>*</operator><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ts_dimension_vec_find_slice_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>dimension_slice_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name>dimension_slice_id</name> <operator>==</operator> <name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>fd</name><operator>.</operator><name>id</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>DimensionSlice</name> <modifier>*</modifier></type>
<name>ts_dimension_vec_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_dimension_vec_free</name><parameter_list>(<parameter><decl><type><name>DimensionVec</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vec</name><operator>-&gt;</operator><name>num_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ts_dimension_slice_free</name><argument_list>(<argument><expr><name><name>vec</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
