<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/ts_catalog/dimension_partition.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/heapam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/catalog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/tablecmds.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/parsenodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/array.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/palloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension_partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ScanIterator</name></type>
<name>ts_dimension_partition_scan_iterator_create</name><parameter_list>(<parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name> <init>= <expr><call><name>ts_scan_iterator_create</name><argument_list>(<argument><expr><name>DIMENSION_PARTITION</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>it</name><operator>.</operator><name>ctx</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>SCANNER_F_NOEND_AND_NOCLOSE</name></expr>;</expr_stmt>

	<return>return <expr><name>it</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ts_dimension_partition_scan_iterator_set_dimension_id</name><parameter_list>(<parameter><decl><type><name>ScanIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>,
													  <parameter><decl><type><specifier>const</specifier> <name>ScanTupLock</name> <modifier>*</modifier></type><name>tuplock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>index</name></name> <operator>=</operator> <call><name>catalog_get_index</name><argument_list>(<argument><expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></argument>,
									  <argument><expr><name>DIMENSION_PARTITION</name></expr></argument>,
									  <argument><expr><name>DIMENSION_PARTITION_DIMENSION_ID_RANGE_START_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_reset</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_scan_key_init</name><argument_list>(
		<argument><expr><name>it</name></expr></argument>,
		<argument><expr><name>Anum_dimension_partition_dimension_id_range_start_idx_dimension_id</name></expr></argument>,
		<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
		<argument><expr><name>F_INT4EQ</name></expr></argument>,
		<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>tuplock</name></name> <operator>=</operator> <name>tuplock</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Comparison function for dimension partitions.
 *
 * Used to sort arrays of partitions on range_start and to lookup a partition
 * using binary search.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>dimpart_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionPartition</name> <modifier>*</modifier></type><name>dp_key</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>DimensionPartition</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>key</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionPartition</name> <modifier>*</modifier></type><name>dp_node</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>DimensionPartition</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If the key's range is enclosed (or exactly matches) the partition,
	 * there's a match */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dp_key</name><operator>-&gt;</operator><name>range_start</name></name> <operator>&gt;=</operator> <name><name>dp_node</name><operator>-&gt;</operator><name>range_start</name></name> <operator>&amp;&amp;</operator> <name><name>dp_key</name><operator>-&gt;</operator><name>range_end</name></name> <operator>&lt;</operator> <name><name>dp_node</name><operator>-&gt;</operator><name>range_end</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>dp_key</name><operator>-&gt;</operator><name>range_start</name></name> <operator>&lt;</operator> <name><name>dp_node</name><operator>-&gt;</operator><name>range_start</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dp_key</name><operator>-&gt;</operator><name>range_start</name></name> <operator>&gt;</operator> <name><name>dp_node</name><operator>-&gt;</operator><name>range_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DimensionPartition</name> <modifier>*</modifier></type>
<name>dimpart_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HeapTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DimensionPartition</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_dimension_partition</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>isnull</name><index>[<expr><name>Natts_dimension_partition</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>dimension_id</name></name> <operator>=</operator>
		<call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_dimension_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>range_start</name></name> <operator>=</operator>
		<call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_range_start</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>range_end</name></name> <operator>=</operator> <name>DIMENSION_SLICE_MAXVALUE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>data_nodes</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isnull</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_data_nodes</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ArrayIterator</name></type> <name>arrit</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>elem_isnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arr</name> <init>= <expr><call><name>DatumGetArrayTypeP</name><argument_list>(
			<argument><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_data_nodes</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>elem</name> <init>= <expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>arrit</name> <operator>=</operator> <call><name>array_create_iterator</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><call><name>array_iterate</name><argument_list>(<argument><expr><name>arrit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elem_isnull</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>elem_isnull</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dn</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>DatumGetName</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>data_nodes</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>data_nodes</name></name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>array_free_iterator</name><argument_list>(<argument><expr><name>arrit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>dp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the current dimension partitions.
 *
 * The partitions are read into an array which is sorted so that it can be
 * binary searched.
 */</comment>
<function><type><name>DimensionPartitionInfo</name> <modifier>*</modifier></type>
<name>ts_dimension_partition_info_get</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionPartitionInfo</name> <modifier>*</modifier></type><name>dpi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionPartition</name> <modifier>*</modifier><modifier>*</modifier></type><name>partitions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
	<comment type="block">/* Use a low number of initial max partitions in DEBUG in order to "hit"
	 * array expansion below */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_partitions</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_partitions</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>ts_dimension_partition_scan_iterator_create</name><argument_list>(<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dimension_partition_scan_iterator_set_dimension_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>dimension_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Create a temporary array for partitions, which is likely too big */</comment>
	<expr_stmt><expr><name>partitions</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>max_partitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>ts_scanner_foreach</name><argument_list>(<argument>&amp;it</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name> <init>= <expr><call><name>ts_scan_iterator_fetch_heap_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><call><name>ts_scan_iterator_tupledesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DimensionPartition</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>max_partitions</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>max_partitions</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>partitions</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>max_partitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>dimpart_create</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>partitions</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>range_end</name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>range_start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>partitions</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>partitions</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>range_end</name> <operator>=</operator> <name><name>partitions</name><index>[<expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>range_start</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dpi</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartitionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>num_partitions</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

	<comment type="block">/* Reallocate the partitions array to use the exact size and save some
	 * memory */</comment>
	<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>partitions</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>partitions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dimpart_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dpi</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find a partition using binary search.
 */</comment>
<function><type><specifier>const</specifier> <name>DimensionPartition</name> <modifier>*</modifier></type>
<name>ts_dimension_partition_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DimensionPartitionInfo</name> <modifier>*</modifier></type><name>dpi</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>coord</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionPartition</name> <modifier>*</modifier><modifier>*</modifier></type><name>dp_found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionPartition</name></type> <name>dp</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>range_start</name> <operator>=</operator> <name>coord</name></expr>,
		<expr><operator>.</operator><name>range_end</name> <operator>=</operator> <name>coord</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>DimensionPartition</name> <modifier>*</modifier></type><name>dp_key</name> <init>= <expr><operator>&amp;</operator><name>dp</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>dp_found</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dp_key</name></expr></argument>,
					   <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>partitions</name></name></expr></argument>,
					   <argument><expr><name><name>dpi</name><operator>-&gt;</operator><name>num_partitions</name></name></expr></argument>,
					   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
					   <argument><expr><name>dimpart_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dp_found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no partitions available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>dp_found</name><operator>)</operator><operator>-&gt;</operator><name>range_start</name></name> <operator>&lt;=</operator> <name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>dp_found</name><operator>)</operator><operator>-&gt;</operator><name>range_end</name></name> <operator>&gt;</operator> <name>coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>*</operator><name>dp_found</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>get_replica_nodes</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>replication_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>replica_nodes</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>max_replicas</name> <init>= <expr><name>replication_factor</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Check for single-node case */</comment>
	<if_stmt><if>if <condition>(<expr><name>data_nodes</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Can't have more replicas than we have data nodes */</comment>
	<if_stmt><if>if <condition>(<expr><name>max_replicas</name> <operator>&gt;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_replicas</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_replicas</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>list_index</name> <init>= <expr><operator>(</operator><name>index</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>replica_nodes</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>replica_nodes</name></expr></argument>, <argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>list_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>replica_nodes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>create_dimension_partition_tuple</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DimensionPartition</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_dimension_partition</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_dimension_partition</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_dimension_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>dimension_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_range_start</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int64GetDatum</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>range_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>data_nodes</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_data_nodes</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>data_nodes_len</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>data_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>dn_datums</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>data_nodes_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>NameData</name> <modifier>*</modifier></type><name>dn_names</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>NAMEDATALEN</name> <operator>*</operator> <name>data_nodes_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>dn_arr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>dp-&gt;data_nodes</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dn</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dn_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dn_datums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dn_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>dn_arr</name> <operator>=</operator>
			<call><name>construct_array</name><argument_list>(<argument><expr><name>dn_datums</name></expr></argument>, <argument><expr><name>data_nodes_len</name></expr></argument>, <argument><expr><name>NAMEOID</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_dimension_partition_data_nodes</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
			<call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>dn_arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dimension_partition_info_delete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scanflags</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanIterator</name></type> <name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>ts_dimension_partition_scan_iterator_create</name><argument_list>(<argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_dimension_partition_scan_iterator_set_dimension_id</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>dimension_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>.</operator><name>ctx</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>scanflags</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>ts_scanner_foreach</name><argument_list>(<argument>&amp;it</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name> <init>= <expr><call><name>ts_scan_iterator_tuple_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ts_catalog_delete_tid_only</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ti</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_scan_iterator_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Delete all dimension partitions for a given dimension.
 */</comment>
<function><type><name>void</name></type>
<name>ts_dimension_partition_info_delete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dimension_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dimension_partition_info_delete</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>, <argument><expr><name>SCANNER_F_NOFLAGS</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Recreate dimension partitions based on changes to one or more of these
 * variables:
 *
 * - number of partitions
 * - list of data nodes
 * - replication factor
 */</comment>
<function><type><name>DimensionPartitionInfo</name> <modifier>*</modifier></type>
<name>ts_dimension_partition_info_recreate</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>dimension_id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_partitions</name></decl></parameter>,
									 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>data_nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>replication_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>partition_size</name> <init>= <expr><name>DIMENSION_SLICE_CLOSED_MAX</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <name>num_partitions</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>range_start</name> <init>= <expr><name>DIMENSION_SLICE_MINVALUE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name> <init>= <expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>DIMENSION_PARTITION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionPartitionInfo</name> <modifier>*</modifier></type><name>dpi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DimensionPartition</name> <modifier>*</modifier><modifier>*</modifier></type><name>partitions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>num_partitions</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data_nodes</name> <operator>==</operator> <name>NIL</name> <operator>||</operator> <name>replication_factor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Delete all partitions for the dimension */</comment>
	<expr_stmt><expr><call><name>dimension_partition_info_delete</name><argument_list>(<argument><expr><name>dimension_id</name></expr></argument>, <argument><expr><name>SCANNER_F_KEEPLOCK</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Lock already held */</comment>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>partitions</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_partitions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_partitions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type> <name>range_end</name> <init>=
			<expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <operator>(</operator><name>num_partitions</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>DIMENSION_SLICE_CLOSED_MAX</name></expr> </then><else>: <expr><name>range_start</name> <operator>+</operator> <name>partition_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DimensionPartition</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>DimensionPartition</name><operator>)</operator><block>{
			<expr><operator>.</operator><name>dimension_id</name> <operator>=</operator> <name>dimension_id</name></expr>,
			<expr><operator>.</operator><name>range_start</name> <operator>=</operator> <name>range_start</name></expr>,
			<expr><operator>.</operator><name>range_end</name> <operator>=</operator> <name>range_end</name></expr>,
			<expr><operator>.</operator><name>data_nodes</name> <operator>=</operator> <call><name>get_replica_nodes</name><argument_list>(<argument><expr><name>data_nodes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>replication_factor</name></expr></argument>)</argument_list></call></expr>,
		}</block></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>create_dimension_partition_tuple</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_catalog_insert_only</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>partitions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

		<comment type="block">/* Hash values for space partitions are in range 0 to INT32_MAX, so
		 * the first partition covers 0 to partition size (although the start
		 * is written as -INF) */</comment>
		<if_stmt><if>if <condition>(<expr><name>range_start</name> <operator>==</operator> <name>DIMENSION_SLICE_MINVALUE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>range_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>range_start</name> <operator>+=</operator> <name>partition_size</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Sort the partitions so that we can later use binary search */</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>partitions</name></expr></argument>, <argument><expr><name>num_partitions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartition</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dimpart_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make changes visible */</comment>
	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dpi</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DimensionPartitionInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>partitions</name></name> <operator>=</operator> <name>partitions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dpi</name><operator>-&gt;</operator><name>num_partitions</name></name> <operator>=</operator> <name>num_partitions</name></expr>;</expr_stmt>

	<return>return <expr><name>dpi</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Manually update the dimension partition state for a hypertable.
 *
 * Used mostly when updating from a TimescaleDB version that didn't have this
 * state previously.
 */</comment>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_dimension_partition_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ts_dimension_partition_update</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>hypertable_relid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>hcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Hypertable</name> <modifier>*</modifier></type><name>ht</name> <init>=
		<expr><call><name>ts_hypertable_cache_get_cache_and_entry</name><argument_list>(<argument><expr><name>hypertable_relid</name></expr></argument>, <argument><expr><name>CACHE_FLAG_NONE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hcache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ts_hypertable_update_dimension_partitions</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_cache_release</name><argument_list>(<argument><expr><name>hcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
