<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/hypertable_cache.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/catcache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hypertable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dimension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/tablespace.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hypertable_cache_create_entry</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>CacheQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>hypertable_cache_missing_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CacheQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>HypertableCacheQuery</name>
<block>{
	<decl_stmt><decl><type><name>CacheQuery</name></type> <name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
}</block></struct></type> <name>HypertableCacheQuery</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>hypertable_cache_get_key</name><parameter_list>(<parameter><decl><type><name>CacheQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>HypertableCacheQuery</name> <operator>*</operator><operator>)</operator> <name>query</name><operator>)</operator><operator>-&gt;</operator><name>relid</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Hypertable</name> <modifier>*</modifier></type><name>hypertable</name></decl>;</decl_stmt>
}</block></struct></type> <name>HypertableCacheEntry</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>hypertable_cache_valid_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>HypertableCacheEntry</name> <operator>*</operator><operator>)</operator> <name>result</name><operator>)</operator><operator>-&gt;</operator><name>hypertable</name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Cache</name> <modifier>*</modifier></type>
<name>hypertable_cache_create</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>ctx</name> <init>=
		<expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"Hypertable cache"</literal></expr></argument>, <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cache</name></type>		<name>template</name> <init>=
	<expr><block>{
		<expr><operator>.</operator><name>hctl</name> <operator>=</operator>
		<block>{
			<expr><operator>.</operator><name>keysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
			<expr><operator>.</operator><name>entrysize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HypertableCacheEntry</name></expr></argument>)</argument_list></sizeof></expr>,
			<expr><operator>.</operator><name>hcxt</name> <operator>=</operator> <name>ctx</name></expr>,
		}</block></expr>,
		<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hypertable_cache"</literal></expr>,
		<expr><operator>.</operator><name>numelements</name> <operator>=</operator> <literal type="number">16</literal></expr>,
		<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>HASH_ELEM</name> <operator>|</operator> <name>HASH_CONTEXT</name> <operator>|</operator> <name>HASH_BLOBS</name></expr>,
		<expr><operator>.</operator><name>get_key</name> <operator>=</operator> <name>hypertable_cache_get_key</name></expr>,
		<expr><operator>.</operator><name>create_entry</name> <operator>=</operator> <name>hypertable_cache_create_entry</name></expr>,
		<expr><operator>.</operator><name>missing_error</name> <operator>=</operator> <name>hypertable_cache_missing_error</name></expr>,
		<expr><operator>.</operator><name>valid_result</name> <operator>=</operator> <name>hypertable_cache_valid_result</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>cache</name> <operator>=</operator> <name>template</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_cache_init</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Cache</name> <modifier>*</modifier></type><name>hypertable_cache_current</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>hypertable_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HypertableCacheEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>hypertable</name></name> <operator>=</operator> <call><name>ts_hypertable_from_tupleinfo</name><argument_list>(<argument><expr><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SCAN_DONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>hypertable_cache_create_entry</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>CacheQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HypertableCacheQuery</name> <modifier>*</modifier></type><name>hq</name> <init>= <expr><operator>(</operator><name>HypertableCacheQuery</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HypertableCacheEntry</name> <modifier>*</modifier></type><name>cache_entry</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>number_found</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>hq</name><operator>-&gt;</operator><name>schema</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hq</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>get_rel_namespace</name><argument_list>(<argument><expr><name><name>hq</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>hq</name><operator>-&gt;</operator><name>table</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hq</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>hq</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>number_found</name> <operator>=</operator> <call><name>ts_hypertable_scan_with_memory_context</name><argument_list>(<argument><expr><name><name>hq</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>,
														  <argument><expr><name><name>hq</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,
														  <argument><expr><name>hypertable_tuple_found</name></expr></argument>,
														  <argument><expr><name><name>query</name><operator>-&gt;</operator><name>result</name></name></expr></argument>,
														  <argument><expr><name>AccessShareLock</name></expr></argument>,
														  <argument><expr><name>false</name></expr></argument>,
														  <argument><expr><call><name>ts_cache_memory_ctx</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>number_found</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<comment type="block">/* Negative cache entry: table is not a hypertable */</comment>
			<expr_stmt><expr><name><name>cache_entry</name><operator>-&gt;</operator><name>hypertable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>cache_entry</name><operator>-&gt;</operator><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>schema_name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hq</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call> <operator>==</operator>
				   <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>cache_entry</name><operator>-&gt;</operator><name>hypertable</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>table_name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hq</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call> <operator>==</operator>
				   <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"got an unexpected number of records: %d"</literal></expr></argument>, <argument><expr><name>number_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><ternary><condition><expr><name><name>cache_entry</name><operator>-&gt;</operator><name>hypertable</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>cache_entry</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hypertable_cache_missing_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CacheQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HypertableCacheQuery</name> <modifier>*</modifier></type><name>hq</name> <init>= <expr><operator>(</operator><name>HypertableCacheQuery</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rel_name</name> <init>= <expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>hq</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rel_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"OID %u does not refer to a table"</literal></expr></argument>, <argument><expr><name><name>hq</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TS_HYPERTABLE_NOT_EXIST</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"table \"%s\" is not a hypertable"</literal></expr></argument>, <argument><expr><name>rel_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_hypertable_cache_invalidate_callback</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_cache_invalidate</name><argument_list>(<argument><expr><name>hypertable_cache_current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hypertable_cache_current</name> <operator>=</operator> <call><name>hypertable_cache_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Get hypertable cache entry. If the entry is not in the cache, add it. */</comment>
<function><type><name>Hypertable</name> <modifier>*</modifier></type>
<name>ts_hypertable_cache_get_entry</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CACHE_FLAG_MISSING_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid Oid"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>ts_hypertable_cache_get_entry_with_table</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns cache into the argument and hypertable as the function result.
 * If hypertable is not found, fails with an error.
 */</comment>
<function><type><name>Hypertable</name> <modifier>*</modifier></type>
<name>ts_hypertable_cache_get_cache_and_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
										<parameter><decl><type><name>Cache</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>cache</name> <operator>=</operator> <call><name>ts_hypertable_cache_pin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><operator>*</operator><name>cache</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Hypertable</name> <modifier>*</modifier></type>
<name>ts_hypertable_cache_get_entry_rv</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RangeVar</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSDLLEXPORT</name> <name>Hypertable</name> <modifier>*</modifier></type>
<name>ts_hypertable_cache_get_entry_by_id</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>hypertable_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_hypertable_cache_get_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><call><name>ts_hypertable_id_to_relid</name><argument_list>(<argument><expr><name>hypertable_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Hypertable</name> <modifier>*</modifier></type>
<name>ts_hypertable_cache_get_entry_with_table</name><parameter_list>(<parameter><decl><type><name>Cache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>,
										 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HypertableCacheQuery</name></type> <name>query</name> <init>= <expr><block>{
		<expr><operator>.</operator><name><name>q</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>,
		<expr><operator>.</operator><name>relid</name> <operator>=</operator> <name>relid</name></expr>,
		<expr><operator>.</operator><name>schema</name> <operator>=</operator> <name>schema</name></expr>,
		<expr><operator>.</operator><name>table</name> <operator>=</operator> <name>table</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HypertableCacheEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>ts_cache_fetch</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>query</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CACHE_FLAG_MISSING_OK</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><operator>(</operator><name>entry</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>hypertable</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>hypertable</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>TSDLLEXPORT</name> <name>Cache</name> <modifier>*</modifier></type>
<name>ts_hypertable_cache_pin</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_cache_pin</name><argument_list>(<argument><expr><name>hypertable_cache_current</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_hypertable_cache_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CreateCacheMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hypertable_cache_current</name> <operator>=</operator> <call><name>hypertable_cache_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_hypertable_cache_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_cache_invalidate</name><argument_list>(<argument><expr><name>hypertable_cache_current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
