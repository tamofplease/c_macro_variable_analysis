<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/bgw_policy/chunk_stats.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;executor/tuptable.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chunk_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"policy.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>bgw_policy_chunk_stats_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BgwPolicyChunkStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>chunk_stats</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>chunk_stats</name> <operator>=</operator>
		<call><name>STRUCT_FROM_SLOT</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name><name>ti</name><operator>-&gt;</operator><name>mctx</name></name></expr></argument>, <argument><expr><name>BgwPolicyChunkStats</name></expr></argument>, <argument><expr><name>FormData_bgw_policy_chunk_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Cascades deletes via the job delete function */</comment>
<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>bgw_policy_chunk_stats_delete_via_job_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>job_id</name> <init>= <expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><name>Anum_bgw_policy_chunk_stats_job_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This call will actually delete the row for us */</comment>
	<expr_stmt><expr><call><name>ts_bgw_job_delete_by_id</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>job_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Delete all chunk_stat rows associated with this job_id.
 * To prevent infinite recursive calls from the job &lt;-&gt; policy tables, we do not cascade deletes in
 * this function. Instead, the caller must be responsible for making sure that the delete cascades
 * to the job corresponding to this policy.
 */</comment>
<function><type><name>void</name></type>
<name>ts_bgw_policy_chunk_stats_delete_row_only_by_job_id</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>job_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_bgw_policy_chunk_stats_job_id_chunk_id_idx_job_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>job_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_scan_all</name><argument_list>(<argument><expr><name>BGW_POLICY_CHUNK_STATS</name></expr></argument>,
						<argument><expr><name>BGW_POLICY_CHUNK_STATS_JOB_ID_CHUNK_ID_IDX</name></expr></argument>,
						<argument><expr><name>scankey</name></expr></argument>,
						<argument><expr><literal type="number">1</literal></expr></argument>,
						<argument><expr><name>ts_bgw_policy_delete_row_only_tuple_found</name></expr></argument>,
						<argument><expr><name>RowExclusiveLock</name></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Delete all chunk_stat rows associated with this chunk_id.
 * Deletes are cascaded via ...delete_via_job_tuple_found.
 */</comment>
<function><type><name>void</name></type>
<name>ts_bgw_policy_chunk_stats_delete_by_chunk_id</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>chunk_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_bgw_policy_chunk_stats_chunk_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_scan_all</name><argument_list>(<argument><expr><name>BGW_POLICY_CHUNK_STATS</name></expr></argument>,
						<argument><expr><name>InvalidOid</name></expr></argument>,
						<argument><expr><name>scankey</name></expr></argument>,
						<argument><expr><literal type="number">1</literal></expr></argument>,
						<argument><expr><name>bgw_policy_chunk_stats_delete_via_job_tuple_found</name></expr></argument>,
						<argument><expr><name>RowExclusiveLock</name></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ts_bgw_policy_chunk_stats_insert_with_relation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>BgwPolicyChunkStats</name> <modifier>*</modifier></type><name>chunk_stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatalogSecurityContext</name></type> <name>sec_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_bgw_policy_chunk_stats</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>Natts_bgw_policy_chunk_stats</name></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_bgw_policy_chunk_stats_job_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk_stats</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>job_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_bgw_policy_chunk_stats_chunk_id</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk_stats</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>chunk_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_bgw_policy_chunk_stats_num_times_job_run</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>chunk_stats</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>num_times_job_run</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name>Anum_bgw_policy_chunk_stats_last_time_job_run</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator>
		<call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>chunk_stats</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>last_time_job_run</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_database_info_become_owner</name><argument_list>(<argument><expr><call><name>ts_catalog_database_info_get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_insert_values</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_catalog_restore_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_bgw_policy_chunk_stats_insert</name><parameter_list>(<parameter><decl><type><name>BgwPolicyChunkStats</name> <modifier>*</modifier></type><name>chunk_stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Catalog</name> <modifier>*</modifier></type><name>catalog</name> <init>= <expr><call><name>ts_catalog_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>=
		<expr><call><name>table_open</name><argument_list>(<argument><expr><call><name>catalog_get_table_id</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>BGW_POLICY_CHUNK_STATS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_bgw_policy_chunk_stats_insert_with_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>chunk_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>BgwPolicyChunkStats</name> <modifier>*</modifier></type>
<name>ts_bgw_policy_chunk_stats_find</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>job_id</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>chunk_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankeys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwPolicyChunkStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_bgw_policy_chunk_stats_job_id_chunk_id_idx_job_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>job_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_bgw_policy_chunk_stats_job_id_chunk_id_idx_chunk_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_scan_one</name><argument_list>(<argument><expr><name>BGW_POLICY_CHUNK_STATS</name></expr></argument>,
						<argument><expr><name>BGW_POLICY_CHUNK_STATS_JOB_ID_CHUNK_ID_IDX</name></expr></argument>,
						<argument><expr><name>scankeys</name></expr></argument>,
						<argument><expr><literal type="number">2</literal></expr></argument>,
						<argument><expr><name>bgw_policy_chunk_stats_tuple_found</name></expr></argument>,
						<argument><expr><name>AccessShareLock</name></expr></argument>,
						<argument><expr><name>BGW_POLICY_CHUNK_STATS_TABLE_NAME</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>stats</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScanTupleResult</name></type>
<name>bgw_policy_chunk_stats_update_tuple_found</name><parameter_list>(<parameter><decl><type><name>TupleInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name> <modifier>*</modifier></type><name>updated_last_time_job_run</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>should_free</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ts_scanner_fetch_heap_tuple</name><argument_list>(<argument><expr><name>ti</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>should_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>new_tuple</name> <init>= <expr><call><name>heap_copytuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwPolicyChunkStats</name> <modifier>*</modifier></type><name>chunk_stats</name> <init>= <expr><operator>(</operator><name>BgwPolicyChunkStats</name> <operator>*</operator><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>should_free</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>chunk_stats</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>num_times_job_run</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk_stats</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>last_time_job_run</name></name> <operator>=</operator> <operator>*</operator><name>updated_last_time_job_run</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_catalog_update</name><argument_list>(<argument><expr><name><name>ti</name><operator>-&gt;</operator><name>scanrel</name></name></expr></argument>, <argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>new_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SCAN_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function also increments num_times_job_run by 1. */</comment>
<function><type><name>void</name></type>
<name>ts_bgw_policy_chunk_stats_record_job_run</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>job_id</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>chunk_id</name></decl></parameter>,
										 <parameter><decl><type><name>TimestampTz</name></type> <name>last_time_job_run</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>updated</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scankeys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_bgw_policy_chunk_stats_job_id_chunk_id_idx_job_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>job_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scankeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_bgw_policy_chunk_stats_job_id_chunk_id_idx_chunk_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT4EQ</name></expr></argument>,
				<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>updated</name> <operator>=</operator> <call><name>ts_catalog_scan_one</name><argument_list>(<argument><expr><name>BGW_POLICY_CHUNK_STATS</name></expr></argument>,
								  <argument><expr><name>BGW_POLICY_CHUNK_STATS_JOB_ID_CHUNK_ID_IDX</name></expr></argument>,
								  <argument><expr><name>scankeys</name></expr></argument>,
								  <argument><expr><literal type="number">2</literal></expr></argument>,
								  <argument><expr><name>bgw_policy_chunk_stats_update_tuple_found</name></expr></argument>,
								  <argument><expr><name>RowExclusiveLock</name></expr></argument>,
								  <argument><expr><name>BGW_POLICY_CHUNK_STATS_TABLE_NAME</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>last_time_job_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>updated</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwPolicyChunkStats</name></type> <name>new_stat</name> <init>= <expr><block>{
			<expr><operator>.</operator><name>fd</name> <operator>=</operator> <block>{
				<expr><operator>.</operator><name>job_id</name> <operator>=</operator> <name>job_id</name></expr>,
				<expr><operator>.</operator><name>chunk_id</name> <operator>=</operator> <name>chunk_id</name></expr>,
				<expr><operator>.</operator><name>num_times_job_run</name> <operator>=</operator> <literal type="number">1</literal></expr>,
				<expr><operator>.</operator><name>last_time_job_run</name> <operator>=</operator> <name>last_time_job_run</name></expr>,
			}</block></expr>,
		}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ts_bgw_policy_chunk_stats_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
