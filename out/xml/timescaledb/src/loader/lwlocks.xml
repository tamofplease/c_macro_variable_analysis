<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/loader/lwlocks.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lwlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/shmem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"loader/lwlocks.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_LWLOCKS_SHMEM_NAME</name></cpp:macro> <cpp:value>"ts_lwlocks_shmem"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_APPEND_LWLOCK_TRANCHE_NAME</name></cpp:macro> <cpp:value>"ts_chunk_append_lwlock_tranche"</cpp:value></cpp:define>

<comment type="block">/*
 * since shared memory can only be setup in a library loaded as
 * shared_preload_libraries we have to setup this struct here
 */</comment>
<typedef>typedef <type><struct>struct <name>TSLWLocks</name>
<block>{
	<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>chunk_append</name></decl>;</decl_stmt>
}</block></struct></type> <name>TSLWLocks</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TSLWLocks</name> <modifier>*</modifier></type><name>ts_lwlocks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ts_lwlocks_shmem_startup</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier><modifier>*</modifier></type><name>lock_pointer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts_lwlocks</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>TS_LWLOCKS_SHMEM_NAME</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLWLocks</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ts_lwlocks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLWLocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ts_lwlocks</name><operator>-&gt;</operator><name>chunk_append</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>GetNamedLWLockTranche</name><argument_list>(<argument><expr><name>CHUNK_APPEND_LWLOCK_TRANCHE_NAME</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We use a lock specific rendezvous variable to decouple the struct
	 * from the individual lock users to have no constraints on the struct
	 * across timescaledb versions.
	 */</comment>
	<expr_stmt><expr><name>lock_pointer</name> <operator>=</operator> <operator>(</operator><name>LWLock</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><name>RENDEZVOUS_CHUNK_APPEND_LWLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>lock_pointer</name> <operator>=</operator> <name><name>ts_lwlocks</name><operator>-&gt;</operator><name>chunk_append</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_lwlocks_shmem_alloc</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><name>CHUNK_APPEND_LWLOCK_TRANCHE_NAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLWLocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
