<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/loader/bgw_message_queue.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lwlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/shmem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/procarray.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/shm_mq.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/spin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgstat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../compat/compat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_message_queue.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_MQ_MAX_MESSAGES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_MQ_NAME</name></cpp:macro> <cpp:value>"ts_bgw_message_queue"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_MQ_TRANCHE_NAME</name></cpp:macro> <cpp:value>"ts_bgw_mq_tranche"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_MQ_NUM_WAITS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<comment type="block">/* WaitLatch expects a long */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_MQ_WAIT_INTERVAL</name></cpp:macro> <cpp:value>1000L</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_ACK_RETRIES</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<comment type="block">/* WaitLatch expects a long */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_ACK_WAIT_INTERVAL</name></cpp:macro> <cpp:value>100L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_ACK_QUEUE_SIZE</name></cpp:macro> <cpp:value>(MAXALIGN(shm_mq_minimum_size + sizeof(int)))</cpp:value></cpp:define>

<comment type="block">/* We're using a relatively simple implementation of a circular queue similar to:
 * http://opendatastructures.org/ods-python/2_3_ArrayQueue_Array_Based_.html */</comment>
<typedef>typedef <type><struct>struct <name>MessageQueue</name>
<block>{
	<decl_stmt><decl><type><name>pid_t</name></type> <name>reader_pid</name></decl>;</decl_stmt> <comment type="block">/* Should only be set once at cluster launcher
					   * startup */</comment>
	<decl_stmt><decl><type><name>slock_t</name></type> <name>mutex</name></decl>;</decl_stmt>	  <comment type="block">/* Controls access to the reader pid */</comment>
	<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>	  <comment type="block">/* Pointer to the lock to control
					   * adding/removing elements from queue */</comment>
	<decl_stmt><decl><type><name>uint8</name></type> <name>read_upto</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>num_elements</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwMessage</name></type> <name><name>buffer</name><index>[<expr><name>BGW_MQ_MAX_MESSAGES</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>MessageQueue</name>;</typedef>

<typedef>typedef <type><enum>enum <name>QueueResponseType</name>
<block>{
	<decl><name>MESSAGE_SENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>QUEUE_FULL</name></decl>,
	<decl><name>READER_DETACHED</name></decl>
}</block></enum></type> <name>QueueResponseType</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>MessageQueue</name> <modifier>*</modifier></type><name>mq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This is run during the shmem_startup_hook.
 * On Linux, it's only run once, but in EXEC_BACKEND mode / on Windows/ other systems
 * that do forking differently, it is run in every backend at startup
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>queue_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mq</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>BGW_MQ_NAME</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MessageQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MessageQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mq</name><operator>-&gt;</operator><name>reader_pid</name></name> <operator>=</operator> <name>InvalidPid</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mq</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>GetNamedLWLockTranche</name><argument_list>(<argument><expr><name>BGW_MQ_TRANCHE_NAME</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This gets called when shared memory is initialized in a backend
 * (shmem_startup_hook) */</comment>
<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_message_queue_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>queue_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This is called in the loader during server startup to allocate a shared
 * memory segment*/</comment>
<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_message_queue_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MessageQueue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><name>BGW_MQ_TRANCHE_NAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Notes on managing the queue/locking: We decided that for this application,
 * simplicity of locking scheme was more important than being very good about
 * concurrency as the frequency of these messages will be low and the number
 * of messages on this queue should be low, given that they mostly happen when
 * we update the extension. Therefore we decided to simply take an exclusive
 * lock whenever we were modifying anything in the shared memory segment to
 * avoid collisions.
 */</comment>
<function><type><specifier>static</specifier> <name>pid_t</name></type>
<name>queue_get_reader</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>reader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>MessageQueue</name> <modifier>*</modifier></type><name>vq</name> <init>= <expr><name>queue</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reader</name> <operator>=</operator> <name><name>vq</name><operator>-&gt;</operator><name>reader_pid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>reader</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>queue_set_reader</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>MessageQueue</name> <modifier>*</modifier></type><name>vq</name> <init>= <expr><name>queue</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>reader_pid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>vq</name><operator>-&gt;</operator><name>reader_pid</name></name> <operator>==</operator> <name>InvalidPid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>vq</name><operator>-&gt;</operator><name>reader_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>reader_pid</name> <operator>=</operator> <name><name>vq</name><operator>-&gt;</operator><name>reader_pid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>reader_pid</name> <operator>!=</operator> <name>MyProcPid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"only one reader allowed for TimescaleDB background worker message queue"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Current process is %d."</literal></expr></argument>, <argument><expr><name>reader_pid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>queue_reset_reader</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>MessageQueue</name> <modifier>*</modifier></type><name>vq</name> <init>= <expr><name>queue</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>reset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>vq</name><operator>-&gt;</operator><name>reader_pid</name></name> <operator>==</operator> <name>MyProcPid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>reset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vq</name><operator>-&gt;</operator><name>reader_pid</name></name> <operator>=</operator> <name>InvalidPid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vq</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reset</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"multiple TimescaleDB background worker launchers have been started when "</literal>
						<literal type="string">"only one is allowed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Add a message to the queue - we can do this if the queue is not full */</comment>
<function><type><specifier>static</specifier> <name>QueueResponseType</name></type>
<name>queue_add</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>BgwMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QueueResponseType</name></type> <name>message_result</name> <init>= <expr><name>QUEUE_FULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>num_elements</name></name> <operator>&lt;</operator> <name>BGW_MQ_MAX_MESSAGES</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>read_upto</name></name> <operator>+</operator> <name><name>queue</name><operator>-&gt;</operator><name>num_elements</name></name><operator>)</operator> <operator>%</operator> <name>BGW_MQ_MAX_MESSAGES</name></expr>]</index></name></expr></argument>,
			   <argument><expr><name>message</name></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BgwMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>num_elements</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>message_result</name> <operator>=</operator> <name>MESSAGE_SENT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>queue_get_reader</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>InvalidPid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BackendPidGetProc</name><argument_list>(<argument><expr><call><name>queue_get_reader</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>procLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>message_result</name> <operator>=</operator> <name>READER_DETACHED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>message_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BgwMessage</name> <modifier>*</modifier></type>
<name>queue_remove</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BgwMessage</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>queue_get_reader</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MyProcPid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
					<argument><expr><literal type="string">"cannot read if not reader for TimescaleDB background worker message queue"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>num_elements</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BgwMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>read_upto</name></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BgwMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>read_upto</name></name> <operator>=</operator> <operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>read_upto</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>BGW_MQ_MAX_MESSAGES</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>num_elements</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>message</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Construct a message */</comment>
<function><type><specifier>static</specifier> <name>BgwMessage</name> <modifier>*</modifier></type>
<name>bgw_message_create</name><parameter_list>(<parameter><decl><type><name>BgwMessageType</name></type> <name>message_type</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BgwMessage</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BgwMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>dsm_create</name><argument_list>(<argument><expr><name>BGW_ACK_QUEUE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>message</name> <operator>=</operator> <operator>(</operator><name>BgwMessage</name><operator>)</operator><block>{ <expr><operator>.</operator><name>message_type</name> <operator>=</operator> <name>message_type</name></expr>,
							 <expr><operator>.</operator><name>sender_pid</name> <operator>=</operator> <name>MyProcPid</name></expr>,
							 <expr><operator>.</operator><name>db_oid</name> <operator>=</operator> <name>db_oid</name></expr>,
							 <expr><operator>.</operator><name>ack_dsm_handle</name> <operator>=</operator> <macro><name>dsm_segment_handle</name><argument_list>(<argument>seg</argument>)</argument_list></macro></expr> }</block></expr>;</expr_stmt>

	<return>return <expr><name>message</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Our own version of shm_mq_wait_for_attach that waits with a timeout so that
 * should our counterparty die before attaching, we don't end up hanging.
 */</comment>
<function><type><specifier>static</specifier> <name>shm_mq_result</name></type>
<name>ts_shm_mq_wait_for_attach</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>ack_queue_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>reader_proc</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>BGW_MQ_NUM_WAITS</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* The reader is the sender on the ack queue */</comment>
		<expr_stmt><expr><name>reader_proc</name> <operator>=</operator> <call><name>shm_mq_get_sender</name><argument_list>(<argument><expr><call><name>shm_mq_get_queue</name><argument_list>(<argument><expr><name>ack_queue_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>reader_proc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SHM_MQ_SUCCESS</name></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>queue_get_reader</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidPid</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SHM_MQ_DETACHED</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Reader died after we enqueued our
									 * message */</comment>
		<expr_stmt><expr><call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
				  <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_EXIT_ON_PM_DEATH</name></expr></argument>,
				  <argument><expr><name>BGW_MQ_WAIT_INTERVAL</name></expr></argument>,
				  <argument><expr><name>WAIT_EVENT_MQ_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>SHM_MQ_DETACHED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>enqueue_message_wait_for_ack</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>BgwMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
							 <parameter><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>ack_queue_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>bytes_received</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueueResponseType</name></type> <name>send_result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq_result</name></type> <name>mq_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ack_received</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We don't want the process restarting workers to really distinguish the
	 * reasons workers might or might not be restarted, and we don't really
	 * want them to error when workers can't be started, as there are multiple
	 * valid reasons for that. So we'll simply return false for the ack even
	 * if we can't attach to the queue etc.
	 */</comment>
	<expr_stmt><expr><name>send_result</name> <operator>=</operator> <call><name>queue_add</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>send_result</name> <operator>!=</operator> <name>MESSAGE_SENT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mq_res</name> <operator>=</operator> <call><name>ts_shm_mq_wait_for_attach</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>ack_queue_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mq_res</name> <operator>!=</operator> <name>SHM_MQ_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Get a response, non-blocking, with retries */</comment>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>BGW_ACK_RETRIES</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>mq_res</name> <operator>=</operator> <call><name>shm_mq_receive</name><argument_list>(<argument><expr><name>ack_queue_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes_received</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mq_res</name> <operator>!=</operator> <name>SHM_MQ_WOULD_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"TimescaleDB ack message receive failure, retrying"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
				  <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_EXIT_ON_PM_DEATH</name></expr></argument>,
				  <argument><expr><name>BGW_ACK_WAIT_INTERVAL</name></expr></argument>,
				  <argument><expr><name>WAIT_EVENT_MQ_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>mq_res</name> <operator>!=</operator> <name>SHM_MQ_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ack_received</name> <operator>=</operator> <operator>(</operator><name>bytes_received</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>

	<return>return <expr><name>ack_received</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write element to queue, wait/error if queue is full
 * consumes message and deallocates
 */</comment>
<function><type><specifier>extern</specifier> <name>bool</name></type>
<name>ts_bgw_message_send_and_wait</name><parameter_list>(<parameter><decl><type><name>BgwMessageType</name></type> <name>message_type</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>shm_mq</name> <modifier>*</modifier></type><name>ack_queue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>ack_queue_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwMessage</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ack_received</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>bgw_message_create</name><argument_list>(<argument><expr><name>message_type</name></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>dsm_find_mapping</name><argument_list>(<argument><expr><name><name>message</name><operator>-&gt;</operator><name>ack_dsm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>seg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"TimescaleDB background worker dynamic shared memory segment not mapped"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ack_queue</name> <operator>=</operator> <call><name>shm_mq_create</name><argument_list>(<argument><expr><call><name>dsm_segment_address</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BGW_ACK_QUEUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>shm_mq_set_receiver</name><argument_list>(<argument><expr><name>ack_queue</name></expr></argument>, <argument><expr><name>MyProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ack_queue_handle</name> <operator>=</operator> <call><name>shm_mq_attach</name><argument_list>(<argument><expr><name>ack_queue</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ack_queue_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ack_received</name> <operator>=</operator> <call><name>enqueue_message_wait_for_ack</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ack_queue_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>dsm_detach</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Queue detach happens in dsm detach callback */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ack_received</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Called only by the launcher
 */</comment>
<function><type><specifier>extern</specifier> <name>BgwMessage</name> <modifier>*</modifier></type>
<name>ts_bgw_message_receive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>queue_remove</name><argument_list>(<argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_message_queue_set_reader</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>queue_set_reader</name><argument_list>(<argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>MessageAckSent</name>
<block>{
	<decl><name>ACK_SENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>DSM_SEGMENT_UNAVAILABLE</name></decl>,
	<decl><name>QUEUE_NOT_ATTACHED</name></decl>,
	<decl><name>SEND_FAILURE</name></decl>
}</block></enum></type> <name>MessageAckSent</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>message_ack_sent_err</name><index>[]</index></name> <init>= <expr><block>{ <expr><index>[<expr><name>ACK_SENT</name></expr>]</index> <operator>=</operator> <literal type="string">"Sent ack successfully"</literal></expr>,
											  <expr><index>[<expr><name>DSM_SEGMENT_UNAVAILABLE</name></expr>]</index> <operator>=</operator> <literal type="string">"DSM Segment unavailable"</literal></expr>,
											  <expr><index>[<expr><name>QUEUE_NOT_ATTACHED</name></expr>]</index> <operator>=</operator> <literal type="string">"Ack queue unable to attach"</literal></expr>,
											  <expr><index>[<expr><name>SEND_FAILURE</name></expr>]</index> <operator>=</operator> <literal type="string">"Unable to send ack on queue"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>MessageAckSent</name></type>
<name>send_ack</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>shm_mq</name> <modifier>*</modifier></type><name>ack_queue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>ack_queue_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq_result</name></type> <name>ack_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ack_queue</name> <operator>=</operator> <call><name>dsm_segment_address</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ack_queue</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>DSM_SEGMENT_UNAVAILABLE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>shm_mq_set_sender</name><argument_list>(<argument><expr><name>ack_queue</name></expr></argument>, <argument><expr><name>MyProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ack_queue_handle</name> <operator>=</operator> <call><name>shm_mq_attach</name><argument_list>(<argument><expr><name>ack_queue</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ack_queue_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>QUEUE_NOT_ATTACHED</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Send the message off, non blocking, with retries */</comment>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>BGW_ACK_RETRIES</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>ack_res</name> <operator>=</operator> <call><name>shm_mq_send_compat</name><argument_list>(<argument><expr><name>ack_queue_handle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>success</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ack_res</name> <operator>!=</operator> <name>SHM_MQ_WOULD_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"TimescaleDB ack message send failure, retrying"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
				  <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_EXIT_ON_PM_DEATH</name></expr></argument>,
				  <argument><expr><name>BGW_ACK_WAIT_INTERVAL</name></expr></argument>,
				  <argument><expr><name>WAIT_EVENT_MQ_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* we are responsible for pfree'ing the handle, the dsm infrastructure only
	 * deals with the queue itself
	 */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ack_queue_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ack_res</name> <operator>!=</operator> <name>SHM_MQ_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SEND_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>ACK_SENT</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Called by launcher once it has taken action based on the contents of the message
 * consumes message and deallocates
 */</comment>
<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_message_send_ack</name><parameter_list>(<parameter><decl><type><name>BgwMessage</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * PG 9.6 does not check to see if we had a CurrentResourceOwner inside of
	 * dsm.c-&gt;dsm_create_descriptor.  Basically, it assumed we were in a
	 * transaction if we ever attached to the dsm, whereas PG 10 addressed
	 * that and did proper NULL checking. So, if we are in 9.6, we start a
	 * transaction and then commit it at the end of ack sending, to be sure
	 * everything is cleaned up properly etc.
	 */</comment>
	<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>dsm_attach</name><argument_list>(<argument><expr><name><name>message</name><operator>-&gt;</operator><name>ack_dsm_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>seg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MessageAckSent</name></type> <name>ack_res</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ack_res</name> <operator>=</operator> <call><name>send_ack</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ack_res</name> <operator>!=</operator> <name>ACK_SENT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"TimescaleDB background worker launcher unable to send ack to backend "</literal>
							<literal type="string">"pid %d"</literal></expr></argument>,
							<argument><expr><name><name>message</name><operator>-&gt;</operator><name>sender_pid</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Reason: %s"</literal></expr></argument>, <argument><expr><name><name>message_ack_sent_err</name><index>[<expr><name>ack_res</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>dsm_detach</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This gets called before shmem exit in the launcher (even if we're exiting
 * in error, but not if we're exiting due to possible shmem corruption)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>queue_shmem_cleanup</name><parameter_list>(<parameter><decl><type><name>MessageQueue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>queue_reset_reader</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_message_queue_shmem_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>queue_shmem_cleanup</name><argument_list>(<argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
