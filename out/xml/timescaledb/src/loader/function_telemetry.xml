<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/loader/function_telemetry.c">
<comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;port/atomics.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lwlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/shmem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"loader/function_telemetry.h"</cpp:file></cpp:include>

<comment type="line">// Function telemetry hash table size. Sized to be large enough that we're</comment>
<comment type="line">// unlikely to run out of entries, but small enough that it won't have a</comment>
<comment type="line">// noticeable impact.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_TELEMETRY_HASH_SIZE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>FnTelemetryRendezvous</name></type> <name>rendezvous</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ts_function_telemetry_shmem_startup</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FnTelemetryRendezvous</name> <modifier>*</modifier><modifier>*</modifier></type><name>rendezvous_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>hash_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>function_telemetry_hash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier><modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<comment type="line">// NOTE: dshash would be better once it's stable</comment>
	<expr_stmt><expr><name><name>hash_info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FnTelemetryHashEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * GetNamedLWLockTranche must only be run once on windows, otherwise it
	 * segfaults. Since the shmem_startup_hook is run on every backend, we use
	 * a ShmemInitStruct to detect if this function has been called before.
	 */</comment>
	<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"fn_telemetry_detect_first_run"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LWLock</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>lock</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>GetNamedLWLockTranche</name><argument_list>(<argument><expr><name>FN_TELEMETRY_LWLOCK_TRANCHE_NAME</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>function_telemetry_hash</name> <operator>=</operator> <call><name>ShmemInitHash</name><argument_list>(<argument><expr><literal type="string">"timescaledb function telemetry hash"</literal></expr></argument>,
											<argument><expr><name>FN_TELEMETRY_HASH_SIZE</name></expr></argument>,
											<argument><expr><name>FN_TELEMETRY_HASH_SIZE</name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>hash_info</name></expr></argument>,
											<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rendezvous</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <operator>*</operator><name>lock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rendezvous</name><operator>.</operator><name>function_counts</name></name> <operator>=</operator> <name>function_telemetry_hash</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rendezvous_ptr</name> <operator>=</operator>
		<operator>(</operator><name>FnTelemetryRendezvous</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><name>RENDEZVOUS_FUNCTION_TELEMENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>rendezvous_ptr</name> <operator>=</operator> <operator>&amp;</operator><name>rendezvous</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_function_telemetry_shmem_alloc</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><call><name>hash_estimate_size</name><argument_list>(<argument><expr><name>FN_TELEMETRY_HASH_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FnTelemetryHashEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LWLock</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><name>FN_TELEMETRY_LWLOCK_TRANCHE_NAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
