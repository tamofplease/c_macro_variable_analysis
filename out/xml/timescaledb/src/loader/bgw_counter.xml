<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/loader/bgw_counter.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<comment type="block">/* needed for initializing shared memory and using various locks */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lwlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/hsearch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/spin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/shmem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/ipc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/latch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw_counter.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGW_COUNTER_STATE_NAME</name></cpp:macro> <cpp:value>"ts_bgw_counter_state"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>ts_guc_max_background_workers</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * We need a bit of shared state here to deal with keeping track of the total
 * number of background workers we've launched across the instance since we
 * don't want to exceed some configured value.  We considered, briefly, the
 * possibility of using pg_sema for this, unfortunately it does not appear to
 * be accessible to code outside of postgres core in any meaningful way. So
 * we're not using that.
 */</comment>
<typedef>typedef <type><struct>struct <name>CounterState</name>
<block>{
	<comment type="block">/*
	 * Using an slock because we're only taking it for very brief periods to
	 * read a single value so no need for an lwlock
	 */</comment>
	<decl_stmt><decl><type><name>slock_t</name></type> <name>mutex</name></decl>;</decl_stmt> <comment type="block">/* controls modification of total_workers */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>total_workers</name></decl>;</decl_stmt>
}</block></struct></type> <name>CounterState</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>CounterState</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bgw_counter_state_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>BGW_COUNTER_STATE_NAME</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CounterState</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CounterState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>total_workers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_counter_setup_gucs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"timescaledb.max_background_workers"</literal></expr></argument>,
							<argument><expr><literal type="string">"Maximum background worker processes allocated to TimescaleDB"</literal></expr></argument>,
							<argument><expr><literal type="string">"Max background worker processes allocated to TimescaleDB - set to at "</literal>
							<literal type="string">"least 1 + number of databases in Postgres instance to use background "</literal>
							<literal type="string">"workers "</literal></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>ts_guc_max_background_workers</name></expr></argument>,
							<argument><expr><name>ts_guc_max_background_workers</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><literal type="number">1000</literal></expr></argument>, <comment type="block">/* no reasonable way to have more than
								   * 1000 background workers */</comment>
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This gets called by the loader (and therefore the postmaster) at
 * shared_preload_libraries time
 */</comment>
<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_counter_shmem_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CounterState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_counter_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>bgw_counter_state_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_counter_reinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* set counter back to zero on startup */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>total_workers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>bool</name></type>
<name>ts_bgw_total_workers_increment_by</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>increment_by</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>incremented</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>max_workers</name> <init>= <expr><name>ts_guc_max_background_workers</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ct</name><operator>-&gt;</operator><name>total_workers</name></name> <operator>+</operator> <name>increment_by</name> <operator>&lt;=</operator> <name>max_workers</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>total_workers</name></name> <operator>+=</operator> <name>increment_by</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>incremented</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>incremented</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>bool</name></type>
<name>ts_bgw_total_workers_increment</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_bgw_total_workers_increment_by</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_total_workers_decrement_by</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>decrement_by</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Launcher is 1 worker, and when it dies we reinitialize, so we should
	 * never be below 1
	 */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ct</name><operator>-&gt;</operator><name>total_workers</name></name> <operator>-</operator> <name>decrement_by</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>total_workers</name></name> <operator>-=</operator> <name>decrement_by</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"TimescaleDB background worker cannot decrement workers below 1"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"The background worker scheduler is in an invalid state and may not be "</literal>
						 <literal type="string">"keeping track of workers allocated to TimescaleDB properly, please "</literal>
						 <literal type="string">"submit a bug report."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type>
<name>ts_bgw_total_workers_decrement</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_bgw_total_workers_decrement_by</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type>
<name>ts_bgw_total_workers_get</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nworkers</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nworkers</name> <operator>=</operator> <name><name>ct</name><operator>-&gt;</operator><name>total_workers</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>nworkers</name></expr>;</return>
</block_content>}</block></function>
</unit>
