<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/license_guc.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/acl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_authid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension_constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"license_guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cross_module_fn.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>load_enabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>GucSource</name></type> <name>load_source</name> <init>= <expr><name>PGC_S_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tsl_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PGFunction</name></type> <name>tsl_init_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * License Functions.
 *
 * License validation is performed via guc update-hooks.
 * In this file we check if the type of license supplied warrants loading an
 * additional module.
 *
 * GUC checks work in two parts:
 *
 *   1. In the check function, all validation of the new value is performed
 *      and any auxiliary state is setup but not installed. This function
 *      is not allowed to throw exceptions.
 *
 *   2. In the assign function all user-visible state is installed. This
 *      function *MUST NOT FAIL* as it can be called from such places as
 *      transaction commitment, and will cause database restarts if it fails.
 *
 * Therefore license validation also works in two parts, corresponding to
 * check and assign:
 *
 *   1. In the first stage we check the license type, load the submodule into
 *      memory if needed (but don't link any of the cross-module functions yet).
 *
 *   2. In the second stage we link all of the cross-module functions and init
 *      tsl module.
 *
 * In order for restoring libraries to work (e.g. in parallel workers), loading
 * the submodule must happen strictly after the main timescaledb module is
 * loaded. In order to ensure that the initial value doesn't break this, we
 * disable loading submodules until the post_load_init.
 *
 * No license change from user session is allowed. License can be changed only
 * if it is set from server configuration file or the server command line.
 */</comment>

<typedef>typedef <type><enum>enum
<block>{
	<decl><name>LICENSE_UNDEF</name></decl>,
	<decl><name>LICENSE_APACHE</name></decl>,
	<decl><name>LICENSE_TIMESCALE</name></decl>
}</block></enum></type> <name>LicenseType</name>;</typedef>

<function><type><specifier>static</specifier> <name>LicenseType</name></type>
<name>license_type_of</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>LICENSE_UNDEF</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>TS_LICENSE_TIMESCALE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>LICENSE_TIMESCALE</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>TS_LICENSE_APACHE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>LICENSE_APACHE</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>LICENSE_UNDEF</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_license_is_apache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>license_type_of</name><argument_list>(<argument><expr><name>ts_guc_license</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LICENSE_APACHE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSDLLEXPORT</name> <name>void</name></type>
<name>ts_license_enable_module_loading</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>load_enabled</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>load_enabled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* re-set the license to actually load the submodule if needed */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_config_option</name><argument_list>(<argument><expr><literal type="string">"timescaledb.license"</literal></expr></argument>,
							   <argument><expr><name>ts_guc_license</name></expr></argument>,
							   <argument><expr><name>PGC_SUSET</name></expr></argument>,
							   <argument><expr><name>load_source</name></expr></argument>,
							   <argument><expr><name>GUC_ACTION_SET</name></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>,
							   <argument><expr><literal type="number">0</literal></expr></argument>,
							   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid value for timescaledb.license: \"%s\""</literal></expr></argument>, <argument><expr><name>ts_guc_license</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * TSL module load function.
 *
 * Load the module, but do not start it. Set tsl_handle and
 * tsl_init_fn module init function pointer (tsl/src/init.c).
 *
 * This function is idempotent, and will not reload the module
 * if called multiple times.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tsl_module_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>function</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>tsl_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>function</name> <operator>=</operator> <call><name>load_external_function</name><argument_list>(<argument><expr><name>EXTENSION_TSL_SO</name></expr></argument>, <argument><expr><literal type="string">"ts_module_init"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>function</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>tsl_init_fn</name> <operator>=</operator> <name>function</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tsl_handle</name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tsl_module_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tsl_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tsl_init_fn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>tsl_init_fn</name></expr></argument>, <argument><expr><call><name>CharGetDatum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check hook function set by license guc.
 *
 * Used to validate license string before the assign hook
 * ts_license_guc_assign_hook() call.
 */</comment>
<function><type><name>bool</name></type>
<name>ts_license_guc_check_hook</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LicenseType</name></type> <name>type</name> <init>= <expr><call><name>license_type_of</name><argument_list>(<argument><expr><operator>*</operator><name>newval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Allow setting a license only if is is set from postgresql.conf
	 * or the server command line */</comment>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>LICENSE_APACHE</name></expr>:</case>
		<case>case <expr><name>LICENSE_TIMESCALE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>PGC_S_FILE</name> <operator>||</operator> <name>source</name> <operator>==</operator> <name>PGC_S_ARGV</name> <operator>||</operator> <name>source</name> <operator>==</operator> <name>PGC_S_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"Cannot change a license in a running session."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>GUC_check_errhint</name><argument_list>(
				<argument><expr><literal type="string">"Change the license in the configuration file or server command line."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		<case>case <expr><name>LICENSE_UNDEF</name></expr>:</case>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"Unrecognized license type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>GUC_check_errhint</name><argument_list>(<argument><expr><literal type="string">"Supported license types are 'timescale' or 'apache'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/* If loading is delayed, save the GucSource for later retry
	 * in the ts_license_enable_module_loading() */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>load_enabled</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>load_source</name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LICENSE_TIMESCALE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tsl_module_load</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"Could not find TSL timescaledb module."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GUC_check_errhint</name><argument_list>(<argument><expr><literal type="string">"Check that \"%s\" is available."</literal></expr></argument>, <argument><expr><name>EXTENSION_TSL_SO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Assign hook function set by license guc, executed right after
 * ts_license_guc_check_hook() hook call.
 *
 * Executes tsl module init function (tsl/src/init.c) which sets the
 * cross-module function pointers.
 */</comment>
<function><type><name>void</name></type>
<name>ts_license_guc_assign_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>load_enabled</name> <operator>&amp;&amp;</operator> <call><name>license_type_of</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LICENSE_TIMESCALE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tsl_module_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
