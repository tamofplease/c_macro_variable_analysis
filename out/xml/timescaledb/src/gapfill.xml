<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/gapfill.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"license_guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cross_module_fn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>

<comment type="block">/*
 * stub function to trigger locf and interpolate in gapfill node
 */</comment>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_gapfill_marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ts_gapfill_marker</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>gapfill_marker</name></name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAPFILL_TIMEBUCKET_WRAPPER</name><parameter_list>(<parameter><type><name>datatype</name></type></parameter>)</parameter_list></cpp:macro>                                                       \
	<cpp:value>TS_FUNCTION_INFO_V1(ts_gapfill_##datatype##_bucket);                                           \
	Datum ts_gapfill_##datatype##_bucket(PG_FUNCTION_ARGS)                      \
	{                                                                                              \
		return ts_cm_functions-&gt;gapfill_##datatype##_time_bucket(fcinfo);                          \
	}</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GAPFILL_TIMEBUCKET_WRAPPER</name><argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GAPFILL_TIMEBUCKET_WRAPPER</name><argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GAPFILL_TIMEBUCKET_WRAPPER</name><argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GAPFILL_TIMEBUCKET_WRAPPER</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GAPFILL_TIMEBUCKET_WRAPPER</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GAPFILL_TIMEBUCKET_WRAPPER</name><argument_list>(<argument><expr><name>timestamptz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GAPFILL_TIMEBUCKET_WRAPPER</name><argument_list>(<argument><expr><name>timestamptz_timezone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
