<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/extension.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/transam.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/event_trigger.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/objectaccess.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/inval.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat-msvc-enter.h"</cpp:file></cpp:include> <comment type="block">/* To label externs in extension.h and
								 * miscadmin.h correctly */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commands/extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat-msvc-exit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/relscan.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/indexing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/fmgroids.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension_utils.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_UPDATE_SCRIPT_CONFIG_VAR</name></cpp:macro> <cpp:value>"timescaledb.update_script_stage"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POST_UPDATE</name></cpp:macro> <cpp:value>"post"</cpp:value></cpp:define>
<comment type="block">/*
 * The name of the experimental schema.
 *
 * Call ts_extension_schema_name() or ts_experimental_schema_name() for
 * consistency. Don't use this macro directly.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_EXPERIMENTAL_SCHEMA_NAME</name></cpp:macro> <cpp:value>"timescaledb_experimental"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>extension_proxy_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * ExtensionState tracks the state of extension metadata in the backend.
 *
 * Since we want to cache extension metadata to speed up common checks (e.g.,
 * check for presence of the extension itself), we also need to track the
 * extension state to know when the metadata is valid.
 *
 * We use a proxy_table to be notified of extension drops/creates. Namely,
 * we rely on the fact that postgres will internally create RelCacheInvalidation
 * events when any tables are created or dropped. We rely on the following properties
 * of Postgres's dependency management:
 *	* The proxy table will be created before the extension itself.
 *	* The proxy table will be dropped before the extension itself.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>ExtensionState</name></name></type> <name>extstate</name> <init>= <expr><name>EXTENSION_STATE_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Looking up the extension oid is a catalog lookup that can be costly, and we
 * often need it during the planning, so we cache it here. We update it when
 * the extension status is updated.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>ts_extension_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<function><type><name>Oid</name></type>
<name>ts_extension_get_oid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>ts_extension_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ts_extension_oid</name> <operator>==</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name>EXTENSION_NAME</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ts_extension_oid</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ts_extension_oid</name> <operator>=</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name>EXTENSION_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ts_extension_oid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extension_loader_present</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>presentptr</name> <init>= <expr><call><name>find_rendezvous_variable</name><argument_list>(<argument><expr><name>RENDEZVOUS_LOADER_PRESENT_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><operator>*</operator><name>presentptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>presentptr</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_extension_check_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>so_version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql_version</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsNormalProcessingMode</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IsTransactionState</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>extension_exists</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>sql_version</name> <operator>=</operator> <call><name>extension_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sql_version</name></expr></argument>, <argument><expr><name>so_version</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Throw a FATAL error here so that clients will be forced to reconnect
		 * when they have the wrong extension version loaded.
		 */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"extension \"%s\" version mismatch: shared library version %s; SQL version "</literal>
						<literal type="string">"%s"</literal></expr></argument>,
						<argument><expr><name>EXTENSION_NAME</name></expr></argument>,
						<argument><expr><name>so_version</name></expr></argument>,
						<argument><expr><name>sql_version</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process_shared_preload_libraries_in_progress</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>extension_loader_present</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>extension_load_without_preload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ts_extension_check_server_version</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * This is a load-time check for the correct server version since the
	 * extension may be distributed as a binary
	 */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server_version_num_guc</name> <init>= <expr><call><name>GetConfigOptionByName</name><argument_list>(<argument><expr><literal type="string">"server_version_num"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>server_version_num</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>server_version_num_guc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_supported_pg_version</name><argument_list>(<argument><expr><name>server_version_num</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>server_version_guc</name> <init>= <expr><call><name>GetConfigOptionByName</name><argument_list>(<argument><expr><literal type="string">"server_version"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"extension \"%s\" does not support postgres version %s"</literal></expr></argument>,
						<argument><expr><name>EXTENSION_NAME</name></expr></argument>,
						<argument><expr><name>server_version_guc</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Sets a new state, returning whether the state has changed */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>extension_set_state</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ExtensionState</name></name></type> <name>newstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>newstate</name> <operator>==</operator> <name>extstate</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name>newstate</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EXTENSION_STATE_TRANSITIONING</name></expr>:</case>
		<case>case <expr><name>EXTENSION_STATE_UNKNOWN</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>EXTENSION_STATE_CREATED</name></expr>:</case>
			<expr_stmt><expr><call><name>ts_extension_check_version</name><argument_list>(<argument><expr><name>TIMESCALEDB_VERSION_MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>extension_proxy_oid</name> <operator>=</operator> <call><name>get_proxy_table_relid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ts_catalog_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EXTENSION_STATE_NOT_INSTALLED</name></expr>:</case>
			<expr_stmt><expr><name>extension_proxy_oid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ts_catalog_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>extstate</name> <operator>=</operator> <name>newstate</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Updates the state based on the current state, returning whether there had been a change. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>extension_update_state</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>enum</name> <name>ExtensionState</name></name></type> <name>new_state</name> <init>= <expr><call><name>extension_current_state</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Never actually set the state to "not installed" since there is no good
	 * way to get out of it in case the extension is installed again in
	 * another backend. After the extension has been dropped, the proxy table
	 * no longer exists and when the extension is reinstalled, the proxy table
	 * will have a different relid. Therefore, there is no way to identify the
	 * invalidation on the proxy table when CREATE EXTENSION is issued in
	 * another backend. Nor is it allowed to lookup the new relid in the
	 * invalidation callback, since that may lead to bad behavior.
	 *
	 * Instead, set the state to "unknown" so that a "slow path" lookup of the
	 * actual state has to be made next time the state is queried.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>EXTENSION_STATE_NOT_INSTALLED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>new_state</name> <operator>=</operator> <name>EXTENSION_STATE_UNKNOWN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>extension_set_state</name><argument_list>(<argument><expr><name>new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Update the extension oid. Note that it is only safe to run
	 * get_extension_oid() when the extension state is 'CREATED' or
	 * 'TRANSITIONING', because otherwise we might not be even able to do a
	 * catalog lookup because we are not in transaction state, and the like.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>new_state</name> <operator>==</operator> <name>EXTENSION_STATE_CREATED</name> <operator>||</operator> <name>new_state</name> <operator>==</operator> <name>EXTENSION_STATE_TRANSITIONING</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ts_extension_oid</name> <operator>=</operator> <call><name>get_extension_oid</name><argument_list>(<argument><expr><name>EXTENSION_NAME</name></expr></argument>, <argument><expr><name>true</name></expr></argument> <comment type="block">/* missing_ok */</comment>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>ts_extension_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>ts_extension_oid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Oid</name></type>
<name>ts_extension_schema_oid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scandesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_null</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>schema</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>ExtensionRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_extension_extname</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_NAMEEQ</name></expr></argument>,
				<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>EXTENSION_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>scandesc</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ExtensionNameIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We assume that there can be at most one matching tuple */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator>
			<call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>Anum_pg_extension_extnamespace</name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_null</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>schema</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"extension schema not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>schema</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ts_extension_schema_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><call><name>ts_extension_schema_oid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_experimental_schema_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>TS_EXPERIMENTAL_SCHEMA_NAME</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Invalidate the state of the extension (i.e., whether the extension is
 * installed or not in the current database).
 *
 * Since this function is called from a relcache invalidation callback, it
 * must not, directly or indirectly, call functions that use the cache. This
 * includes, e.g., table scans.
 *
 * Instead, the function just invalidates the state so that the true state is
 * resolved lazily when needed.
 */</comment>
<function><type><name>void</name></type>
<name>ts_extension_invalidate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>extstate</name> <operator>=</operator> <name>EXTENSION_STATE_UNKNOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>extension_proxy_oid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_extension_is_loaded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* When restoring deactivate extension.
	 *
	 * We are using IsBinaryUpgrade (and ts_guc_restoring).  If a user set
	 * `ts_guc_restoring` for a database, it will be stored in
	 * `pg_db_role_settings` and be included in a dump, which will cause
	 * `pg_upgrade` to fail.
	 *
	 * See dumpDatabaseConfig in pg_dump.c. */</comment>
	<if_stmt><if>if <condition>(<expr><name>ts_guc_restoring</name> <operator>||</operator> <name>IsBinaryUpgrade</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>EXTENSION_STATE_UNKNOWN</name> <operator>==</operator> <name>extstate</name> <operator>||</operator> <name>EXTENSION_STATE_TRANSITIONING</name> <operator>==</operator> <name>extstate</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* status may have updated without a relcache invalidate event */</comment>
		<expr_stmt><expr><call><name>extension_update_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>extstate</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EXTENSION_STATE_CREATED</name></expr>:</case>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>ts_extension_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>extension_proxy_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		<case>case <expr><name>EXTENSION_STATE_NOT_INSTALLED</name></expr>:</case>
		<case>case <expr><name>EXTENSION_STATE_UNKNOWN</name></expr>:</case>
		<case>case <expr><name>EXTENSION_STATE_TRANSITIONING</name></expr>:</case>

			<comment type="block">/*
			 * Turn off extension during upgrade scripts. This is necessary so
			 * that, for example, the catalog does not go looking for things
			 * that aren't yet there.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>extstate</name> <operator>==</operator> <name>EXTENSION_STATE_TRANSITIONING</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* when we are updating the extension, we execute
				 * scripts in post_update.sql after setting up the
				 * the dependencies. At this stage, TS
				 * specific functionality is permitted as we now have
				 * all catalogs and functions in place
				 */</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>update_script_stage</name> <init>=
					<expr><call><name>GetConfigOption</name><argument_list>(<argument><expr><name>TS_UPDATE_SCRIPT_CONFIG_VAR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>update_script_stage</name> <operator>&amp;&amp;</operator>
					<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>update_script_stage</name></expr></argument>, <argument><expr><name>POST_UPDATE</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>POST_UPDATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
					<operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>POST_UPDATE</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>update_script_stage</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown state: %d"</literal></expr></argument>, <argument><expr><name>extstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_extension_get_so_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>EXTENSION_NAME</name> <literal type="string">"-"</literal> <name>TIMESCALEDB_VERSION_MOD</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the currently installed extension version.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ts_extension_get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>extension_version</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_extension_is_proxy_table_relid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>relid</name> <operator>==</operator> <name>extension_proxy_oid</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TS_DEBUG</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>extstate_str</name><index>[]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>EXTENSION_STATE_UNKNOWN</name></expr>]</index> <operator>=</operator> <literal type="string">"unknown"</literal></expr>,
	<expr><index>[<expr><name>EXTENSION_STATE_TRANSITIONING</name></expr>]</index> <operator>=</operator> <literal type="string">"transitioning"</literal></expr>,
	<expr><index>[<expr><name>EXTENSION_STATE_CREATED</name></expr>]</index> <operator>=</operator> <literal type="string">"created"</literal></expr>,
	<expr><index>[<expr><name>EXTENSION_STATE_NOT_INSTALLED</name></expr>]</index> <operator>=</operator> <literal type="string">"not installed"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_extension_get_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ts_extension_get_state</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>extstate_str</name><index>[<expr><name>extstate</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
