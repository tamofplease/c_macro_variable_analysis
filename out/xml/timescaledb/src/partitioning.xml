<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/src/partitioning.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/htup_details.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/makefuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/pg_list.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;parser/parse_coerce.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/acl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/cash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/catcache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/date.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/jsonb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/numeric.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rangetypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/syscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/timestamp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"partitioning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_VALID_CLOSED_PARTITIONING_FUNC</name><parameter_list>(<parameter><type><name>proform</name></type></parameter>, <parameter><type><name>argtype</name></type></parameter>)</parameter_list></cpp:macro>                                        \
	<cpp:value>((proform)-&gt;prorettype == INT4OID &amp;&amp; ((proform)-&gt;provolatile == PROVOLATILE_IMMUTABLE) &amp;&amp;      \
	 (proform)-&gt;pronargs == 1 &amp;&amp;                                                                   \
	 ((proform)-&gt;proargtypes.values[0] == (argtype) ||                                             \
	  (proform)-&gt;proargtypes.values[0] == ANYELEMENTOID))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_VALID_OPEN_PARTITIONING_FUNC</name><parameter_list>(<parameter><type><name>proform</name></type></parameter>, <parameter><type><name>argtype</name></type></parameter>)</parameter_list></cpp:macro>                                          \
	<cpp:value>(IS_VALID_OPEN_DIM_TYPE((proform)-&gt;prorettype) &amp;&amp;                                              \
	 ((proform)-&gt;provolatile == PROVOLATILE_IMMUTABLE) &amp;&amp; (proform)-&gt;pronargs == 1 &amp;&amp;              \
	 ((proform)-&gt;proargtypes.values[0] == (argtype) ||                                             \
	  (proform)-&gt;proargtypes.values[0] == ANYELEMENTOID))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_VALID_PARTITIONING_FUNC</name><parameter_list>(<parameter><type><name>proform</name></type></parameter>, <parameter><type><name>dimtype</name></type></parameter>, <parameter><type><name>argtype</name></type></parameter>)</parameter_list></cpp:macro>                                      \
	<cpp:value>(((dimtype) == DIMENSION_TYPE_OPEN) ? IS_VALID_OPEN_PARTITIONING_FUNC(proform, argtype) :      \
										  IS_VALID_CLOSED_PARTITIONING_FUNC(proform, argtype))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>closed_dim_partitioning_func_filter</name><parameter_list>(<parameter><decl><type><name>Form_pg_proc</name></type> <name>form</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name> <modifier>*</modifier></type><name>argtype</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>IS_VALID_CLOSED_PARTITIONING_FUNC</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><operator>*</operator><name>argtype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>open_dim_partitioning_func_filter</name><parameter_list>(<parameter><decl><type><name>Form_pg_proc</name></type> <name>form</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name> <modifier>*</modifier></type><name>argtype</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>IS_VALID_OPEN_PARTITIONING_FUNC</name><argument_list>(<argument><expr><name>form</name></expr></argument>, <argument><expr><operator>*</operator><name>argtype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ts_partitioning_func_is_valid</name><parameter_list>(<parameter><decl><type><name>regproc</name></type> <name>funcoid</name></decl></parameter>, <parameter><decl><type><name>DimensionType</name></type> <name>dimtype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isvalid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AclResult</name></type> <name>aclresult</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for function %u"</literal></expr></argument>, <argument><expr><name>funcoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>aclresult</name> <operator>=</operator> <call><name>pg_proc_aclcheck</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ACL_EXECUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>aclresult</name> <operator>!=</operator> <name>ACLCHECK_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"permission denied for function %s"</literal></expr></argument>, <argument><expr><call><name>get_func_name</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>isvalid</name> <operator>=</operator> <call><name>IS_VALID_PARTITIONING_FUNC</name><argument_list>(<argument><expr><operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dimtype</name></expr></argument>, <argument><expr><name>argtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>isvalid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Oid</name></type>
<name>ts_partitioning_func_get_closed_default</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>argtype</name> <init>= <expr><name>ANYELEMENTOID</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>ts_lookup_proc_filtered</name><argument_list>(<argument><expr><name>DEFAULT_PARTITIONING_FUNC_SCHEMA</name></expr></argument>,
								   <argument><expr><name>DEFAULT_PARTITIONING_FUNC_NAME</name></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>,
								   <argument><expr><name>closed_dim_partitioning_func_filter</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>argtype</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ts_partitioning_func_is_closed_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>schema</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>funcname</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>DEFAULT_PARTITIONING_FUNC_SCHEMA</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		   <call><name>strcmp</name><argument_list>(<argument><expr><name>DEFAULT_PARTITIONING_FUNC_NAME</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Resolve the partitioning function set for a hypertable.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>partitioning_func_set_func_fmgr</name><parameter_list>(<parameter><decl><type><name>PartitioningFunc</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>, <parameter><decl><type><name>DimensionType</name></type> <name>dimtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>funcoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>proc_filter</name></type> <name>filter</name> <init>= <expr><ternary><condition><expr><name>dimtype</name> <operator>==</operator> <name>DIMENSION_TYPE_CLOSED</name></expr> ?</condition><then> <expr><name>closed_dim_partitioning_func_filter</name></expr> </then><else>:
															<expr><name>open_dim_partitioning_func_filter</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dimtype</name> <operator>!=</operator> <name>DIMENSION_TYPE_CLOSED</name> <operator>&amp;&amp;</operator> <name>dimtype</name> <operator>!=</operator> <name>DIMENSION_TYPE_OPEN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid dimension type %u"</literal></expr></argument>, <argument><expr><name>dimtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>funcoid</name> <operator>=</operator> <call><name>ts_lookup_proc_filtered</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>pf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pf</name><operator>-&gt;</operator><name>rettype</name></name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dimtype</name> <operator>==</operator> <name>DIMENSION_TYPE_CLOSED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid partitioning function"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"A partitioning function for a closed (space) dimension "</literal>
							 <literal type="string">"must be IMMUTABLE and have the signature (anyelement) -&gt; integer"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid partitioning function"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"A partitioning function for a open (time) dimension "</literal>
							 <literal type="string">"must be IMMUTABLE, take one argument, and return a supported time "</literal>
							 <literal type="string">"type"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>funcoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pf</name><operator>-&gt;</operator><name>func_fmgr</name></name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>List</name> <modifier>*</modifier></type>
<name>ts_partitioning_func_qualified_name</name><parameter_list>(<parameter><decl><type><name>PartitioningFunc</name> <modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>pf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>find_text_coercion_func</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>funcid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_varlena</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CoercionPathType</name></type> <name>cpt</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * First look for an explicit cast type. Needed since the output of for
	 * example character(20) not the same as character(20)::text
	 */</comment>
	<expr_stmt><expr><name>cpt</name> <operator>=</operator> <call><name>find_coercion_pathway</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>COERCION_EXPLICIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cpt</name> <operator>!=</operator> <name>COERCION_PATH_FUNC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>getTypeOutputInfo</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>funcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_varlena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>funcid</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPECACHE_HASH_FLAGS</name></cpp:macro> <cpp:value>(TYPECACHE_HASH_PROC | TYPECACHE_HASH_PROC_FINFO)</cpp:value></cpp:define>

<function><type><name>PartitioningInfo</name> <modifier>*</modifier></type>
<name>ts_partitioning_info_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>partfunc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>partcol</name></decl></parameter>,
							<parameter><decl><type><name>DimensionType</name></type> <name>dimtype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitioningInfo</name> <modifier>*</modifier></type><name>pinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>columntype</name></decl>, <decl><type ref="prev"/><name>varcollid</name></decl>, <decl><type ref="prev"/><name>funccollid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>schema</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>partfunc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>partcol</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"partitioning function information cannot be null"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pinfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PartitioningInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>partfunc</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>column</name></name></expr></argument>, <argument><expr><name>partcol</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pinfo</name><operator>-&gt;</operator><name>column_attnum</name></name> <operator>=</operator> <call><name>get_attnum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pinfo</name><operator>-&gt;</operator><name>dimtype</name></name> <operator>=</operator> <name>dimtype</name></expr>;</expr_stmt>

	<comment type="block">/* handle the case that the attribute has been dropped */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pinfo</name><operator>-&gt;</operator><name>column_attnum</name></name> <operator>==</operator> <name>InvalidAttrNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>schema</name></name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Lookup the type cache entry to access the hash function for the type */</comment>
	<expr_stmt><expr><name>columntype</name> <operator>=</operator> <call><name>get_atttype</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>column_attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dimtype</name> <operator>==</operator> <name>DIMENSION_TYPE_CLOSED</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tce</name> <init>= <expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>columntype</name></expr></argument>, <argument><expr><name>TYPECACHE_HASH_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>tce</name><operator>-&gt;</operator><name>hash_proc</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ts_partitioning_func_is_closed_default</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>partfunc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find hash function for type %s"</literal></expr></argument>, <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>columntype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>partitioning_func_set_func_fmgr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name></name></expr></argument>, <argument><expr><name>columntype</name></expr></argument>, <argument><expr><name>dimtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Prepare a function expression for this function. The partition hash
	 * function needs this to be able to resolve the type of the value to be
	 * hashed.
	 */</comment>
	<expr_stmt><expr><name>varcollid</name> <operator>=</operator> <call><name>get_typcollation</name><argument_list>(<argument><expr><name>columntype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>column_attnum</name></name></expr></argument>, <argument><expr><name>columntype</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>varcollid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>makeFuncExpr</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>func_fmgr</name><operator>.</operator><name>fn_oid</name></name></expr></argument>,
						<argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>rettype</name></name></expr></argument>,
						<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>funccollid</name></expr></argument>,
						<argument><expr><name>varcollid</name></expr></argument>,
						<argument><expr><name>COERCE_EXPLICIT_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fmgr_info_set_expr</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>func_fmgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pinfo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Apply a dimension's partitioning function to a value.
 *
 * We need to avoid FunctionCall1(), because we'd like to customize the error
 * message in case of NULL return values.
 */</comment>
<function><type><name>TSDLLEXPORT</name> <name>Datum</name></type>
<name>ts_partitioning_func_apply</name><parameter_list>(<parameter><decl><type><name>PartitioningInfo</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>func_fmgr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FC_SET_ARG</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fcinfo</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"partitioning function \"%s.%s\" returned NULL"</literal></expr></argument>,
			 <argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>schema</name></name></expr></argument>,
			 <argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>partfunc</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSDLLEXPORT</name> <name>Datum</name></type>
<name>ts_partitioning_func_apply_slot</name><parameter_list>(<parameter><decl><type><name>PartitioningInfo</name> <modifier>*</modifier></type><name>pinfo</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>null</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>collation</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>column_attnum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>null</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>null</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>collation</name> <operator>=</operator>
		<call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>, <argument><expr><call><name>AttrNumberGetAttrOffset</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>column_attnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
			<operator>-&gt;</operator><name>attcollation</name></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_partitioning_func_apply</name><argument_list>(<argument><expr><name>pinfo</name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Resolve the type of the argument passed to a function.
 *
 * The type is resolved from the function expression in the function call info.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>resolve_function_argtype</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>argtype</name></decl>;</decl_stmt>

	<comment type="block">/* Get the function expression from the call info */</comment>
	<expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_expr</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>fe</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>fe</name></expr></argument>, <argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no function expression set when invoking partitioning function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected number of arguments in function expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Var</name></expr>:</case>
			<expr_stmt><expr><name>argtype</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>vartype</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Const</name></expr>:</case>
			<expr_stmt><expr><name>argtype</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>Const</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>consttype</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CoerceViaIO</name></expr>:</case>
			<expr_stmt><expr><name>argtype</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>CoerceViaIO</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resulttype</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
			<comment type="block">/* Argument is function, so our input is its result type */</comment>
			<expr_stmt><expr><name>argtype</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>FuncExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>funcresulttype</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Param</name></expr>:</case>
			<expr_stmt><expr><name>argtype</name> <operator>=</operator> <call><name>castNode</name><argument_list>(<argument><expr><name>Param</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>paramtype</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported expression argument node type: %s"</literal></expr></argument>, <argument><expr><call><name>ts_get_node_name</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>argtype</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Partitioning function cache.
 *
 * Holds type information to avoid repeated lookups. The cache is allocated on a
 * child memory context of the context that created the associated FmgrInfo
 * struct. For partitioning functions invoked on the insert path, this is
 * typically the Hypertable cache's memory context. Hence, the type cache lives
 * for the duration of the hypertable cache and can be reused across multiple
 * invocations of the partitioning function, even across transactions.
 *
 * If the partitioning function is invoked outside the insert path, the FmgrInfo
 * and its memory context has a lifetime corresponding to that invocation.
 */</comment>
<typedef>typedef <type><struct>struct <name>PartFuncCache</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>argtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>coerce_funcid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tce</name></decl>;</decl_stmt>
}</block></struct></type> <name>PartFuncCache</name>;</typedef>

<function><type><specifier>static</specifier> <name>PartFuncCache</name> <modifier>*</modifier></type>
<name>part_func_cache_create</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>, <parameter><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tce</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>coerce_funcid</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartFuncCache</name> <modifier>*</modifier></type><name>pfc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pfc</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PartFuncCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>argtype</name></name> <operator>=</operator> <name>argtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>tce</name></name> <operator>=</operator> <name>tce</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pfc</name><operator>-&gt;</operator><name>coerce_funcid</name></name> <operator>=</operator> <name>coerce_funcid</name></expr>;</expr_stmt>

	<return>return <expr><name>pfc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* _timescaledb_catalog.ts_get_partition_for_key(key anyelement) RETURNS INT */</comment>
<function_decl><type><name>TSDLLEXPORT</name> <name>Datum</name></type> <name>ts_get_partition_for_key</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_get_partition_for_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * Partition hash function that first converts all inputs to text before
 * hashing.
 */</comment>
<function><type><name>Datum</name></type>
<name>ts_get_partition_for_key</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>arg</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PartFuncCache</name> <modifier>*</modifier></type><name>pfc</name> <init>= <expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>hash_u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected number of arguments to partitioning function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pfc</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>funcid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>argtype</name> <init>= <expr><call><name>resolve_function_argtype</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>argtype</name> <operator>!=</operator> <name>TEXTOID</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Not TEXT input -&gt; need to convert to text */</comment>
			<expr_stmt><expr><name>funcid</name> <operator>=</operator> <call><name>find_text_coercion_func</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not coerce type %u to text"</literal></expr></argument>, <argument><expr><name>argtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pfc</name> <operator>=</operator> <call><name>part_func_cache_create</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>funcid</name></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>=</operator> <name>pfc</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pfc</name><operator>-&gt;</operator><name>argtype</name></name> <operator>!=</operator> <name>TEXTOID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>OidFunctionCall1</name><argument_list>(<argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>coerce_funcid</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>DatumGetTextPP</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hash_u</name> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>hash_u</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Only positive numbers */</comment>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>TSDLLEXPORT</name> <name>Datum</name></type> <name>ts_get_partition_hash</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_get_partition_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * Compute a partition hash value for any input type.
 *
 * ts_get_partition_hash() takes a single argument of anyelement type. We compute
 * the hash based on the argument type information that we expect to find in the
 * function expression in the function call context. If no such expression
 * exists, or the type cannot be resolved from the expression, the function
 * throws an error.
 */</comment>
<function><type><name>Datum</name></type>
<name>ts_get_partition_hash</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>arg</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PartFuncCache</name> <modifier>*</modifier></type><name>pfc</name> <init>= <expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>hash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>collation</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected number of arguments to partitioning function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pfc</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>argtype</name> <init>= <expr><call><name>resolve_function_argtype</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tce</name> <init>= <expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>, <argument><expr><name>TYPECACHE_HASH_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>pfc</name> <operator>=</operator> <call><name>part_func_cache_create</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>, <argument><expr><name>tce</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>=</operator> <name>pfc</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>tce</name><operator>-&gt;</operator><name>hash_proc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find hash function for type %u"</literal></expr></argument>, <argument><expr><name><name>pfc</name><operator>-&gt;</operator><name>argtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* use the supplied collation, if it exists, otherwise use the default for
	 * the type
	 */</comment>
	<expr_stmt><expr><name>collation</name> <operator>=</operator> <call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>collation</name> <operator>=</operator> <name><name>pfc</name><operator>-&gt;</operator><name>tce</name><operator>-&gt;</operator><name>typcollation</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>FunctionCall1Coll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pfc</name><operator>-&gt;</operator><name>tce</name><operator>-&gt;</operator><name>hash_proc_finfo</name></name></expr></argument>, <argument><expr><name>collation</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Only positive numbers */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
