<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/test/src/net/conn_mock.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_mock.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOCK_MAX_BUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MockConnection</name>
<block>{
	<decl_stmt><decl><type><name>Connection</name></type> <name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>recv_buf</name><index>[<expr><name>MOCK_MAX_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>recv_buf_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>recv_buf_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>MockConnection</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mock_connect</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mock_close</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>mock_write</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>writelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>writelen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>mock_read</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>readlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_to_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>max</name> <init>= <expr><name>readlen</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MockConnection</name> <modifier>*</modifier></type><name>mock</name> <init>= <expr><operator>(</operator><name>MockConnection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mock</name><operator>-&gt;</operator><name>recv_buf_offset</name></name> <operator>&gt;=</operator> <name><name>mock</name><operator>-&gt;</operator><name>recv_buf_len</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;=</operator> <name><name>mock</name><operator>-&gt;</operator><name>recv_buf_len</name></name> <operator>-</operator> <name><name>mock</name><operator>-&gt;</operator><name>recv_buf_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>mock</name><operator>-&gt;</operator><name>recv_buf_len</name></name> <operator>-</operator> <name><name>mock</name><operator>-&gt;</operator><name>recv_buf_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Now read a random amount */</comment>
	<while>while <condition>(<expr><name>bytes_to_read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>bytes_to_read</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>max</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>mock</name><operator>-&gt;</operator><name>recv_buf</name></name> <operator>+</operator> <name><name>mock</name><operator>-&gt;</operator><name>recv_buf_offset</name></name></expr></argument>, <argument><expr><name>bytes_to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mock</name><operator>-&gt;</operator><name>recv_buf_offset</name></name> <operator>+=</operator> <name>bytes_to_read</name></expr>;</expr_stmt>

	<return>return <expr><name>bytes_to_read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mock_init</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConnOps</name></type> <name>mock_ops</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MockConnection</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mock_init</name></expr>,
	<expr><operator>.</operator><name>connect</name> <operator>=</operator> <name>mock_connect</name></expr>,
	<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>mock_close</name></expr>,
	<expr><operator>.</operator><name>write</name> <operator>=</operator> <name>mock_write</name></expr>,
	<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>mock_read</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>ssize_t</name></type>
<name>ts_connection_mock_set_recv_buf</name><parameter_list>(<parameter><decl><type><name>Connection</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MockConnection</name> <modifier>*</modifier></type><name>mock</name> <init>= <expr><operator>(</operator><name>MockConnection</name> <operator>*</operator><operator>)</operator> <name>conn</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&gt;</operator> <name>MOCK_MAX_BUF_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mock</name><operator>-&gt;</operator><name>recv_buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mock</name><operator>-&gt;</operator><name>recv_buf_len</name></name> <operator>=</operator> <name>buf_len</name></expr>;</expr_stmt>
	<return>return <expr><name><name>mock</name><operator>-&gt;</operator><name>recv_buf_len</name></name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_conn_mock_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_conn_mock_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>_conn_mock_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_connection_register</name><argument_list>(<argument><expr><name>CONNECTION_MOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mock_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_conn_mock_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
</unit>
