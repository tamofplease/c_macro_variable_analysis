<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/test/src/net/test_http.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REQUEST_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<comment type="block">/*  Tests for auxiliary HttpResponseState functions in http_parsing.h */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>TEST_RESPONSES</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
	<literal type="string">"Content-Type: application/json; charset=utf-8\r\n"</literal>
	<literal type="string">"Date: Thu, 12 Jul 2018 18:33:04 GMT\r\n"</literal>
	<literal type="string">"ETag: W/\"e-upYEWCL+q6R/++2nWHz5b76hBgo\"\r\n"</literal>
	<literal type="string">"Server: nginx "</literal>
	<literal type="string">"Vary: Accept-Encoding\r\n"</literal>
	<literal type="string">"Content-Length: 14\r\n"</literal>
	<literal type="string">"Connection: Close\r\n\r\n"</literal>
	<literal type="string">"{\"status\":200}"</literal></expr>,
	<expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
	<literal type="string">"Content-Length: 14\r\n"</literal>
	<literal type="string">"Content-Type: application/json; charset=utf-8\r\n"</literal>
	<literal type="string">"Date: Thu, 12 Jul 2018 18:33:04 GMT\r\n"</literal>
	<literal type="string">"ETag: W/\"e-upYEWCL+q6R/++2nWHz5b76hBgo\"\r\n"</literal>
	<literal type="string">"Vary: Accept-Encoding\r\n\r\n"</literal>
	<literal type="string">"{\"status\":200}"</literal></expr>,
	<expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
	<literal type="string">"Content-Length: 14\r\n"</literal>
	<literal type="string">"Connection: Close\r\n\r\n"</literal>
	<literal type="string">"{\"status\":200}"</literal></expr>,
	<expr><literal type="string">"HTTP/1.1 201 OK\r\n"</literal>
	<literal type="string">"Date: Thu, 12 Jul 2018 18:33:04 GMT\r\n"</literal>
	<literal type="string">"Content-Length: 14\r\n"</literal>
	<literal type="string">"ETag: W/\"e-upYEWCL+q6R/++2nWHz5b76hBgo\"\r\n"</literal>
	<literal type="string">"Connection: Close\r\n\r\n"</literal>
	<literal type="string">"{\"status\":201}"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>BAD_RESPONSES</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
											 <literal type="string">"Content-Type: application/json; charset=utf-8\r\n"</literal>
											 <literal type="string">"Date: Thu, 12 Jul 2018 18:33:04 GMT\r\n"</literal>
											 <literal type="string">"ETag: W/\"e-upYEWCL+q6R/++2nWHz5b76hBgo\"\r\n"</literal>
											 <literal type="string">"Connection: Close\r\n"</literal>
											 <literal type="string">"{\"status\":200}"</literal></expr>,
											 <expr><literal type="string">"Content-Length: 14\r\n"</literal>
											 <literal type="string">"{\"status\":200}"</literal></expr>,
											 <expr><literal type="string">"Content-Length: 14\r\n"</literal>
											 <literal type="string">"HTTP/1.1 404 Not Found\r\n"</literal>
											 <literal type="string">"Connection: Close\r\n\r\n"</literal>
											 <literal type="string">"{\"status\":404}"</literal></expr>,
											 <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name><name>TEST_LENGTHS</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>MESSAGE_BODY</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"{\"status\":200}"</literal></expr>, <expr><literal type="string">"{\"status\":200}"</literal></expr>, <expr><literal type="string">"{\"status\":200}"</literal></expr>, <expr><literal type="string">"{\"status\":201}"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_http_parsing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_http_parsing_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_http_request_build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>num_test_strings</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TEST_LENGTHS</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>TEST_LENGTHS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  Check we can succesfully parse partial by well-formed HTTP responses */</comment>
<function><type><name>Datum</name></type>
<name>ts_test_http_parsing</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>num_iterations</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_iterations</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>num_test_strings</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>ts_http_response_state_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ssize_t</name></type> <name>bufsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>TEST_RESPONSES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ts_http_response_state_next_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>bufsize</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Copy part of the message into the parsing state */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>TEST_RESPONSES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Now do the parse */</comment>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ts_http_response_state_parse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not parse http state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ts_http_response_state_is_done</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><ternary><condition><expr><name>bytes</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>TEST_RESPONSES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>!</operator><name>success</name></expr> </then><else>: <expr><name>success</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ts_http_response_state_destroy</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*  Check we can successfully parse full, well-formed HTTP response AND
 *  successfully find error with full, poorly-formed HTTP responses
 */</comment>
<function><type><name>Datum</name></type>
<name>ts_test_http_parsing_full</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>num_test_strings</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>ts_http_response_state_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>bufsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ts_http_response_state_next_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>TEST_RESPONSES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>bufsize</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Copy all of the message into the parsing state */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>TEST_RESPONSES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Now do the parse */</comment>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><call><name>ts_http_response_state_parse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><call><name>ts_http_response_state_is_done</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><call><name>ts_http_response_state_content_length</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>TEST_LENGTHS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Make sure we read the right message body */</comment>
		<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>MESSAGE_BODY</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
					   <argument><expr><call><name>ts_http_response_state_body_start</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>ts_http_response_state_content_length</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bad message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ts_http_response_state_destroy</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Now do the bad responses */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HttpResponseState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>ts_http_response_state_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>bufsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ts_http_response_state_next_buffer</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>BAD_RESPONSES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>bufsize</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>BAD_RESPONSES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_http_response_state_parse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>||</operator>
					   <operator>!</operator><call><name>ts_http_response_state_valid_status</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ts_http_response_state_destroy</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_test_http_request_build</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serialized</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>request_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected_response</name> <init>= <expr><literal type="string">"GET /v1/alerts HTTP/1.1\r\n"</literal>
									<literal type="string">"Host: herp.com\r\nContent-Length: 0\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><literal type="string">"herp.com"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>ts_http_request_create</name><argument_list>(<argument><expr><name>HTTP_GET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cmp_res</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ts_http_request_set_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/v1/alerts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_VERSION_11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_CONTENT_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_HOST</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>serialized</name> <operator>=</operator> <call><name>ts_http_request_build</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cmp_res</name> <operator>=</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>expected_response</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>request_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>cmp_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp_res</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bad response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ts_http_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>expected_response</name> <operator>=</operator>
		<literal type="string">"GET /tmp/path/to/uri HTTP/1.0\r\n"</literal>
		<literal type="string">"Content-Length: 0\r\nHost: herp.com\r\nContent-Type: application/json\r\n\r\n"</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>ts_http_request_create</name><argument_list>(<argument><expr><name>HTTP_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/tmp/path/to/uri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_CONTENT_TYPE</name></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_HOST</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_CONTENT_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>serialized</name> <operator>=</operator> <call><name>ts_http_request_build</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>expected_response</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>request_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>expected_response</name> <operator>=</operator> <literal type="string">"POST /tmp/status/1234 HTTP/1.1\r\n"</literal>
						<literal type="string">"Content-Length: 0\r\nHost: herp.com\r\n\r\n"</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>ts_http_request_create</name><argument_list>(<argument><expr><name>HTTP_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/tmp/status/1234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_VERSION_11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_HOST</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_CONTENT_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>serialized</name> <operator>=</operator> <call><name>ts_http_request_build</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>expected_response</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>request_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that content-length checking works */</comment>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>ts_http_request_create</name><argument_list>(<argument><expr><name>HTTP_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_uri</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="string">"/tmp/status/1234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_VERSION_11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_HOST</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_set_header</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>HTTP_CONTENT_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><operator>!</operator><call><name>ts_http_request_build</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_http_request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
