<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/test/src/bgw/scheduler_mock.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miscadmin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postmaster/bgworker.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/ipc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/latch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lwlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/shmem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/guc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/jsonb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/timestamp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/snapmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/memutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgstat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/job_stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timer_mock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cross_module_fn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time_bucket.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_bgw_db_scheduler_test_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_bgw_db_scheduler_test_wait_for_scheduler_finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_bgw_db_scheduler_test_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_bgw_job_execute_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/* function for testing the correctness of the next_scheduled_slot calculation */</comment>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_next_scheduled_execution_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <name>TestJobType</name>
<block>{
	<decl><name>TEST_JOB_TYPE_JOB_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>TEST_JOB_TYPE_JOB_2_ERROR</name></decl>,
	<decl><name>TEST_JOB_TYPE_JOB_3_LONG</name></decl>,
	<decl><name>TEST_JOB_TYPE_JOB_4</name></decl>,
	<decl><name>_MAX_TEST_JOB_TYPE</name></decl>
}</block></enum></type> <name>TestJobType</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>test_job_type_names</name><index>[<expr><name>_MAX_TEST_JOB_TYPE</name></expr>]</index></name> <init>= <expr><block>{
	<expr><index>[<expr><name>TEST_JOB_TYPE_JOB_1</name></expr>]</index> <operator>=</operator> <literal type="string">"bgw_test_job_1"</literal></expr>,
	<expr><index>[<expr><name>TEST_JOB_TYPE_JOB_2_ERROR</name></expr>]</index> <operator>=</operator> <literal type="string">"bgw_test_job_2_error"</literal></expr>,
	<expr><index>[<expr><name>TEST_JOB_TYPE_JOB_3_LONG</name></expr>]</index> <operator>=</operator> <literal type="string">"bgw_test_job_3_long"</literal></expr>,
	<expr><index>[<expr><name>TEST_JOB_TYPE_JOB_4</name></expr>]</index> <operator>=</operator> <literal type="string">"bgw_test_job_4"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* this is copied from the job_stat/get_next_scheduled_execution_slot */</comment>
<function><type><specifier>extern</specifier> <name>Datum</name></type>
<name>ts_test_next_scheduled_execution_slot</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>schedule_interval</name> <init>= <expr><call><name>PG_GETARG_INTERVAL_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>finish_time</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>initial_start</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>timezone</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>timebucket_fini</name></decl>, <decl><type ref="prev"/><name>result</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>schedint_datum</name> <init>= <expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>schedule_interval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>timezone</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>ts_timestamptz_bucket</name></expr></argument>,
									 <argument><expr><name>schedint_datum</name></expr></argument>,
									 <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>initial_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>timebucket_fini</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>ts_timestamptz_bucket</name></expr></argument>,
											  <argument><expr><name>schedint_datum</name></expr></argument>,
											  <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>finish_time</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>initial_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* always the next time_bucket */</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamptz_pl_interval</name></expr></argument>, <argument><expr><name>timebucket_fini</name></expr></argument>, <argument><expr><name>schedint_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tz</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>timezone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>timebucket_fini</name> <operator>=</operator> <call><name>DirectFunctionCall4</name><argument_list>(<argument><expr><name>ts_timestamptz_timezone_bucket</name></expr></argument>,
											  <argument><expr><name>schedint_datum</name></expr></argument>,
											  <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>finish_time</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>initial_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* always the next time_bucket */</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamptz_pl_interval</name></expr></argument>, <argument><expr><name>timebucket_fini</name></expr></argument>, <argument><expr><name>schedint_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>ts_timestamptz_timezone_bucket</name></expr></argument>,
									 <argument><expr><name>schedint_datum</name></expr></argument>,
									 <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>initial_start</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamp_mi</name></expr></argument>, <argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>initial_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* if we have a month component, the origin doesn't work so we must manually
	 include the offset */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>schedule_interval</name><operator>-&gt;</operator><name>month</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamptz_pl_interval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * adding the schedule interval above to get the next bucket might still not hit
	 * the next bucket if we are crossing DST. So we can end up with a next_start value
	 * that is actually less than the finish time of the job. Hence, we have to make sure
	 * the next scheduled slot we compute is in the future and not in the past
	 */</comment>
	<while>while <condition>(<expr><call><name>DatumGetTimestampTz</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>finish_time</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>timestamptz_pl_interval</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>schedint_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>Datum</name></type>
<name>ts_bgw_db_scheduler_test_main</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>db_oid</name> <init>= <expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>MyBgworkerEntry</name><operator>-&gt;</operator><name>bgw_main_arg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwParams</name></type> <name>bgw_params</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>BackgroundWorkerBlockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Setup any signal handlers here */</comment>
	<expr_stmt><expr><call><name>ts_bgw_scheduler_register_signal_handlers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_bgw_scheduler_setup_callbacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bgw_params</name></expr></argument>, <argument><expr><name><name>MyBgworkerEntry</name><operator>-&gt;</operator><name>bgw_extra</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bgw_params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"scheduler user id %u"</literal></expr></argument>, <argument><expr><name><name>bgw_params</name><operator>.</operator><name>user_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"running a test in the background: db=%u ttl=%d"</literal></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>, <argument><expr><name><name>bgw_params</name><operator>.</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BackgroundWorkerInitializeConnectionByOid</name><argument_list>(<argument><expr><name>db_oid</name></expr></argument>, <argument><expr><name><name>bgw_params</name><operator>.</operator><name>user_oid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_params_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_initialize_timer_latch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_bgw_log_set_application_name</name><argument_list>(<argument><expr><literal type="string">"DB Scheduler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_register_emit_log_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts_mock_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_bgw_job_set_job_entrypoint_function_name</name><argument_list>(<argument><expr><literal type="string">"ts_bgw_job_execute_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgstat_report_appname</name><argument_list>(<argument><expr><literal type="string">"DB Scheduler Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_bgw_scheduler_setup_mctx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ts_bgw_scheduler_process</name><argument_list>(<argument><expr><name><name>bgw_params</name><operator>.</operator><name>ttl</name></name></expr></argument>, <argument><expr><name>ts_timer_mock_register_bgw_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BackgroundWorkerHandle</name> <modifier>*</modifier></type>
<name>start_test_scheduler</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>user_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>BgwParams</name></type> <name>bgw_params</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>bgw_main</name> <operator>=</operator> <literal type="string">"ts_bgw_db_scheduler_test_main"</literal></expr>,
		<expr><operator>.</operator><name>ttl</name> <operator>=</operator> <name>ttl</name></expr>,
		<expr><operator>.</operator><name>user_oid</name> <operator>=</operator> <name>user_oid</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * This is where we would increment the number of bgw used, if we
	 * decide to do so
	 */</comment>
	<expr_stmt><expr><call><name>ts_bgw_scheduler_setup_mctx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_bgw_start_worker</name><argument_list>(<argument><expr><literal type="string">"ts_bgw_db_scheduler_test_main"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bgw_params</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* this function will start up a bgw for the scheduler and set the ttl to the given value
 * (microseconds) */</comment>
<function><type><specifier>extern</specifier> <name>Datum</name></type>
<name>ts_bgw_db_scheduler_test_run_and_wait_for_scheduler_finish</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>worker_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>worker_handle</name> <operator>=</operator> <call><name>start_test_scheduler</name><argument_list>(<argument><expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>worker_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name> <init>= <expr><call><name>WaitForBackgroundWorkerStartup</name><argument_list>(<argument><expr><name>worker_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>BGWH_STARTED</name> <operator>==</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>BGWH_STARTED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bgw not started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>WaitForBackgroundWorkerShutdown</name><argument_list>(<argument><expr><name>worker_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>BGWH_STOPPED</name> <operator>==</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>BGWH_STOPPED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bgw not stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>current_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>extern</specifier> <name>Datum</name></type>
<name>ts_bgw_db_scheduler_test_run</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>old_ctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>current_handle</name> <operator>=</operator> <call><name>start_test_scheduler</name><argument_list>(<argument><expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>WaitForBackgroundWorkerStartup</name><argument_list>(<argument><expr><name>current_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>BGWH_STARTED</name> <operator>==</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>BGWH_STARTED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bgw not started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>Datum</name></type>
<name>ts_bgw_db_scheduler_test_wait_for_scheduler_finish</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>current_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name> <init>= <expr><call><name>WaitForBackgroundWorkerShutdown</name><argument_list>(<argument><expr><name>current_handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>TestAssertTrue</name><argument_list>(<argument><expr><name>BGWH_STOPPED</name> <operator>==</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>BGWH_STOPPED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bgw not stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_job_1</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Execute job 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_job_2_error</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Before error job 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error job 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"After error job 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pqsigfunc</name></type> <name>prev_signal_func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_terminate_signal</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"job got term signal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>prev_signal_func</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_signal_func</name><argument_list>(<argument><expr><name>postgres_signal_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_bgw_test_job_sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * This function is used for testing removing jobs with
 * a currently running background job.
 */</comment>
<function><type><name>Datum</name></type>
<name>ts_bgw_test_job_sleep</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>BackgroundWorkerBlockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Only set prev_signal_func once to prevent it from being set to
	 * log_terminate_signal.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>prev_signal_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>prev_signal_func</name> <operator>=</operator> <call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>log_terminate_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* Setup any signal handlers here */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Before sleep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * we commit here so the effect of the elog which is written
	 * to a table with a emit_log_hook is seen by other transactions
	 * to verify the background job started
	 */</comment>
	<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>pg_sleep</name></expr></argument>, <argument><expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"After sleep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_job_3_long</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>BackgroundWorkerBlockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Only set prev_signal_func once to prevent it from being set to
	 * log_terminate_signal.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>prev_signal_func</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>prev_signal_func</name> <operator>=</operator> <call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>log_terminate_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* Setup any signal handlers here */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Before sleep job 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>pg_sleep</name></expr></argument>, <argument><expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><literal type="number">0.5L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"After sleep job 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Exactly like job 1, except a wrapper will change its next_start. */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_job_4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Execute job 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TestJobType</name></type>
<name>get_test_job_type_from_name</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>job_type_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>_MAX_TEST_JOB_TYPE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>namestrcmp</name><argument_list>(<argument><expr><name>job_type_name</name></expr></argument>, <argument><expr><name><name>test_job_type_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>_MAX_TEST_JOB_TYPE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_job_dispatcher</name><parameter_list>(<parameter><decl><type><name>BgwJob</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_register_emit_log_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_bgw_log_set_application_name</name><argument_list>(<argument><expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>application_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_params_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>get_test_job_type_from_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>proc_name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TEST_JOB_TYPE_JOB_1</name></expr>:</case>
			<return>return <expr><call><name>test_job_1</name><argument_list>()</argument_list></call></expr>;</return>
		<case>case <expr><name>TEST_JOB_TYPE_JOB_2_ERROR</name></expr>:</case>
			<return>return <expr><call><name>test_job_2_error</name><argument_list>()</argument_list></call></expr>;</return>
		<case>case <expr><name>TEST_JOB_TYPE_JOB_3_LONG</name></expr>:</case>
			<return>return <expr><call><name>test_job_3_long</name><argument_list>()</argument_list></call></expr>;</return>
		<case>case <expr><name>TEST_JOB_TYPE_JOB_4</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* Set next_start to 200ms */</comment>
			<decl_stmt><decl><type><name>Interval</name></type> <name>new_interval</name> <init>= <expr><block>{ <expr><operator>.</operator><name>time</name> <operator>=</operator> <literal type="number">.2</literal> <operator>*</operator> <name>USECS_PER_SEC</name></expr> }</block></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name>ts_bgw_job_run_and_set_next_start</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>test_job_4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_interval</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>
		<default>default:</default>
			<return>return <expr><call><name><name>ts_cm_functions</name><operator>-&gt;</operator><name>job_execute</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ts_bgw_job_execute_test</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ts_timer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts_mock_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ts_bgw_job_set_scheduler_test_hook</name><argument_list>(<argument><expr><name>test_job_dispatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ts_bgw_job_entrypoint</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
