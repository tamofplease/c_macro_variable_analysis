<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/test/src/bgw/timer_mock.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/relscan.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;access/xact.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/namespace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/bufmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;storage/lmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/builtins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/lsyscache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/rel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"annotations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timer_mock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bgw/launcher_interface.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>bgw_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>mock_wait</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>until</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TimestampTz</name></type> <name>mock_current_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>Timer</name></type> <name>ts_mock_timer</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>get_current_timestamp</name> <operator>=</operator> <name>mock_current_time</name></expr>,
	<expr><operator>.</operator><name>wait</name> <operator>=</operator> <name>mock_wait</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ts_timer_mock_register_bgw_handle</name><parameter_list>(<parameter><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"[TESTING] Registered new background worker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bgw_handle</name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* WARNING: mock_wait must _only_ be called from the bgw_scheduler, calling it from a worker will
 * clobber the timer state */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>mock_wait</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>until</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
		 <argument><expr><literal type="string">"[TESTING] Wait until "</literal> <name>INT64_FORMAT</name> <literal type="string">", started at "</literal> <name>INT64_FORMAT</name></expr></argument>,
		 <argument><expr><name>until</name></expr></argument>,
		 <argument><expr><call><name>ts_params_get</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>current_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>ts_params_get</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>mock_wait_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>WAIT_ON_JOB</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>bgw_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>WaitForBackgroundWorkerShutdown</name><argument_list>(<argument><expr><name>bgw_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>bgw_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>TS_FALLTHROUGH</name></expr>;</expr_stmt>
		<case>case <expr><name>IMMEDIATELY_SET_UNTIL</name></expr>:</case>
			<expr_stmt><expr><call><name>ts_params_set_time</name><argument_list>(<argument><expr><name>until</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		<case>case <expr><name>WAIT_FOR_OTHER_TO_ADVANCE</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* Wait for another process to set "next time" */</comment>
			<expr_stmt><expr><call><name>ts_reset_and_wait_timer_latch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>WAIT_FOR_STANDARD_WAITLATCH</name></expr>:</case>
			<expr_stmt><expr><call><name>ts_get_standard_timer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>wait</name><argument_list>(<argument><expr><name>until</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TimestampTz</name></type>
<name>mock_current_time</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ts_params_get</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>current_time</name></expr>;</return>
</block_content>}</block></function>
</unit>
