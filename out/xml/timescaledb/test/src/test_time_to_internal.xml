<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/timescaledb/test/src/test_time_to_internal.c"><comment type="block">/*
 * This file and its contents are licensed under the Apache License 2.0.
 * Please see the included NOTICE for copyright information and
 * LICENSE-APACHE for a copy of the license.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmgr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;catalog/pg_type.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utils/date.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"export.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_utils.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_time_to_internal_conversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TS_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ts_test_interval_to_internal_conversion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ts_test_time_to_internal_conversion</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int16</name></type> <name>i16</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>i32</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>i64</name></decl>;</decl_stmt>

	<comment type="block">/* test integer values */</comment>

	<comment type="block">/* int16 */</comment>
	<for>for <control>(<init><expr><name>i16</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i16</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i16</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>i16</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* int32 */</comment>
	<for>for <control>(<init><expr><name>i32</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i32</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i32</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>i32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT32_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>PG_INT32_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT32_MIN</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT32_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* int64 */</comment>
	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i64</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT64_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* test time values round trip */</comment>

	<comment type="block">/* TIMESTAMP */</comment>
	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i64</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">10000000</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100000000</literal></expr>;</condition> <incr><expr><name>i64</name> <operator>+=</operator> <literal type="number">1000000</literal></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1000000000</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">10000000000</literal></expr>;</condition> <incr><expr><name>i64</name> <operator>+=</operator> <literal type="number">100000000</literal></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>TS_TIME_NOBEGIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>DT_NOBEGIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>TS_TIME_NOEND</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>DT_NOEND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>DT_NOBEGIN</name></expr></argument>,
					  <argument><expr><call><name>DatumGetTimestamp</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestEnsureError</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>TS_TIMESTAMP_INTERNAL_MIN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>TS_TIMESTAMP_INTERNAL_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>TS_TIMESTAMP_INTERNAL_MIN</name></expr></argument>,
																		  <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>DT_NOEND</name></expr></argument>,
					  <argument><expr><operator>(</operator><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>,
																		   <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><name>TIMESTAMPOID</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* TIMESTAMPTZ */</comment>
	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i64</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">10000000</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100000000</literal></expr>;</condition> <incr><expr><name>i64</name> <operator>+=</operator> <literal type="number">1000000</literal></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1000000000</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">10000000000</literal></expr>;</condition> <incr><expr><name>i64</name> <operator>+=</operator> <literal type="number">100000000</literal></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>TS_TIME_NOBEGIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>DT_NOBEGIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>TS_TIME_NOEND</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>DT_NOEND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>DT_NOBEGIN</name></expr></argument>,
					  <argument><expr><call><name>DatumGetTimestampTz</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestEnsureError</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>TS_TIMESTAMP_INTERNAL_MIN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>TS_TIMESTAMP_INTERNAL_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>TS_TIMESTAMP_INTERNAL_MIN</name></expr></argument>,
																		  <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>DT_NOEND</name></expr></argument>,
					  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>,
																		  <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><name>TIMESTAMPTZOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* DATE */</comment>

	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal> <operator>*</operator> <name>USECS_PER_DAY</name></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100</literal> <operator>*</operator> <name>USECS_PER_DAY</name></expr>;</condition> <incr><expr><name>i64</name> <operator>+=</operator> <name>USECS_PER_DAY</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>DATEOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>DATEOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>DATEVAL_NOBEGIN</name></expr></argument>,
					  <argument><expr><call><name>DatumGetDateADT</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>, <argument><expr><name>DATEOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>DATEVAL_NOEND</name></expr></argument>,
					  <argument><expr><call><name>DatumGetDateADT</name><argument_list>(<argument><expr><call><name>ts_internal_to_time_value</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>, <argument><expr><name>DATEOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestEnsureError</name><argument_list>(<argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name>DATEVAL_NOBEGIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DATEOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestEnsureError</name><argument_list>(<argument><expr><call><name>ts_time_value_to_internal</name><argument_list>(<argument><expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name>DATEVAL_NOEND</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DATEOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>Datum</name></type>
<name>ts_test_interval_to_internal_conversion</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int16</name></type> <name>i16</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>i32</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>i64</name></decl>;</decl_stmt>

	<comment type="block">/* test integer values */</comment>

	<comment type="block">/* int16 */</comment>
	<for>for <control>(<init><expr><name>i16</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i16</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i16</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>i16</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>i16</name></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* int32 */</comment>
	<for>for <control>(<init><expr><name>i32</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i32</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i32</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>i32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>i32</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT16_MAX</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT32_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>PG_INT32_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT32_MIN</name></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT32_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* int64 */</comment>
	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i64</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT16_MIN</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT16_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT32_MAX</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>PG_INT64_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* INTERVAL */</comment>
	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i64</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
																					  <argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">10000000</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">100000000</literal></expr>;</condition> <incr><expr><name>i64</name> <operator>+=</operator> <literal type="number">1000000</literal></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
																					  <argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1000000000</literal></expr>;</init> <condition><expr><name>i64</name> <operator>&lt;</operator> <literal type="number">10000000000</literal></expr>;</condition> <incr><expr><name>i64</name> <operator>+=</operator> <literal type="number">100000000</literal></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
						  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>i64</name></expr></argument>,
																					  <argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT64_MIN</name></expr></argument>,
																				  <argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TestAssertInt64Eq</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>,
					  <argument><expr><call><name>ts_interval_value_to_internal</name><argument_list>(<argument><expr><call><name>ts_internal_to_interval_value</name><argument_list>(<argument><expr><name>PG_INT64_MAX</name></expr></argument>,
																				  <argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>,
													<argument><expr><name>INTERVALOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
