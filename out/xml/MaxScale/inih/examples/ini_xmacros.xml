<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/inih/examples/ini_xmacros.c"><comment type="block">/* Parse a configuration file into a struct using X-Macros */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ini.h"</cpp:file></cpp:include>

<comment type="block">/* define the config struct type */</comment>
<typedef>typedef <struct>struct <block>{
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default) char *s##_##n;</cpp:define>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.def"</cpp:file></cpp:include>
}</block> <decl><name>config</name></decl>;</struct></typedef>

<comment type="block">/* create one and fill in its default values */</comment>
<decl_stmt><decl><type><name>config</name></type> <name>Config</name> <init>= <expr><block>{
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default) default,</cpp:define>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.def"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* process a line of the INI file, storing valid values into config struct */</comment>
<function><type><name>int</name></type> <name>handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>config</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><operator>(</operator><name>config</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default) else if (strcmp(section, #s)==0 &amp;&amp; \
        strcmp(name, #n)==0) cfg-&gt;s##_##n = strdup(value);</cpp:define>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.def"</cpp:file></cpp:include>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* print all the variables in the config, one per line */</comment>
<function><type><name>void</name></type> <name>dump_config</name><parameter_list>(<parameter><decl><type><name>config</name> <modifier>*</modifier></type><name>cfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter/></parameter_list></cpp:macro>default) printf("%s_%s = %s\n", #s, #n, cfg-&gt;s##_##n);</cpp:define>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.def"</cpp:file></cpp:include>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ini_parse</name><argument_list>(<argument><expr><literal type="string">"test.ini"</literal></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Config</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Can't load 'test.ini', using defaults\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>dump_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
