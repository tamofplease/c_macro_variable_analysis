<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/ext/fts2/fts2_icu.c"><comment type="block">/*
** 2007 June 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file implements a tokenizer for fts2 based on the ICU library.
** 
** $Id: fts2_icu.c,v 1.3 2008/12/18 05:30:26 danielk1977 Exp $
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_ICU</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts2_tokenizer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/ubrk.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/ucol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/ustring.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/utf16.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>IcuTokenizer</name></name></type> <name>IcuTokenizer</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>IcuCursor</name></name></type> <name>IcuCursor</name>;</typedef>

<struct>struct <name>IcuTokenizer</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLocale</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>IcuCursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer_cursor</name></type> <name>base</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>UBreakIterator</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>      <comment type="block">/* ICU break-iterator object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nChar</name></decl>;</decl_stmt>                  <comment type="block">/* Number of UChar elements in pInput */</comment>
  <decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>aChar</name></decl>;</decl_stmt>               <comment type="block">/* Copy of input using utf-16 encoding */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aOffset</name></decl>;</decl_stmt>               <comment type="block">/* Offsets of each character in utf-8 input */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>nBuffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuffer</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>iToken</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** Create a new tokenizer instance.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>icuCreate</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                            <comment type="block">/* Number of entries in argv[] */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,            <comment type="block">/* Tokenizer creation arguments */</comment>
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTokenizer</name></decl></parameter>      <comment type="block">/* OUT: Created tokenizer */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IcuTokenizer</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>IcuTokenizer</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IcuTokenizer</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IcuTokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>n</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zLocale</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zLocale</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTokenizer</name> <operator>=</operator> <operator>(</operator><name>sqlite3_tokenizer</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Destroy a tokenizer
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>icuDestroy</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IcuTokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>IcuTokenizer</name> <operator>*</operator><operator>)</operator><name>pTokenizer</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Prepare to begin tokenizing a particular string.  The input
** string to be tokenized is pInput[0..nBytes-1].  A cursor
** used to incrementally tokenize this string is returned in 
** *ppCursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>icuOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>,         <comment type="block">/* The tokenizer */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zInput</name></decl></parameter>,                    <comment type="block">/* Input string */</comment>
  <parameter><decl><type><name>int</name></type> <name>nInput</name></decl></parameter>,                            <comment type="block">/* Length of zInput in bytes */</comment>
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>    <comment type="block">/* OUT: Tokenization cursor */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IcuTokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>IcuTokenizer</name> <operator>*</operator><operator>)</operator><name>pTokenizer</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IcuCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>opt</name> <init>= <expr><name>U_FOLD_CASE_DEFAULT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name> <init>= <expr><name>U_ZERO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nChar</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>UChar32</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iInput</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>nInput</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nInput</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <name>nInput</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>IcuCursor</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(
      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IcuCursor</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>                <comment type="block">/* IcuCursor */</comment>
      <operator>(</operator><operator>(</operator><name>nChar</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">3</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UChar</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>   <comment type="block">/* IcuCursor.aChar[] */</comment>
      <operator>(</operator><name>nChar</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>            <comment type="block">/* IcuCursor.aOffset[] */</comment>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pCsr</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IcuCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aChar</name></name> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aOffset</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aChar</name><index>[<expr><operator>(</operator><name>nChar</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iOut</name></expr>]</index></name> <operator>=</operator> <name>iInput</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>U8_NEXT</name><argument_list>(<argument><expr><name>zInput</name></expr></argument>, <argument><expr><name>iInput</name></expr></argument>, <argument><expr><name>nInput</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <while>while<condition>( <expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>isError</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>u_foldCase</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>U16_APPEND</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aChar</name></name></expr></argument>, <argument><expr><name>iOut</name></expr></argument>, <argument><expr><name>nChar</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>isError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>isError</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iOut</name></expr>]</index></name> <operator>=</operator> <name>iInput</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iInput</name><operator>&lt;</operator><name>nInput</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>U8_NEXT</name><argument_list>(<argument><expr><name>zInput</name></expr></argument>, <argument><expr><name>iInput</name></expr></argument>, <argument><expr><name>nInput</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <call><name>ubrk_open</name><argument_list>(<argument><expr><name>UBRK_WORD</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zLocale</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aChar</name></name></expr></argument>, <argument><expr><name>iOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>U_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nChar</name></name> <operator>=</operator> <name>iOut</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ubrk_first</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>(</operator><name>sqlite3_tokenizer_cursor</name> <operator>*</operator><operator>)</operator><name>pCsr</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close a tokenization cursor previously opened by a call to icuOpen().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>icuClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IcuCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>IcuCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ubrk_close</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Extract the next token from a tokenization cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>icuNext</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,  <comment type="block">/* Cursor returned by simpleOpen */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppToken</name></decl></parameter>,               <comment type="block">/* OUT: *ppToken is the token text */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBytes</name></decl></parameter>,                       <comment type="block">/* OUT: Number of bytes in token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piStartOffset</name></decl></parameter>,                 <comment type="block">/* OUT: Starting offset of token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piEndOffset</name></decl></parameter>,                   <comment type="block">/* OUT: Ending offset of token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPosition</name></decl></parameter>                     <comment type="block">/* OUT: Position integer of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IcuCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>IcuCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>iStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><name>iStart</name><operator>==</operator><name>iEnd</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>UChar32</name></type> <name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>ubrk_current</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <call><name>ubrk_next</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iEnd</name><operator>==</operator><name>UBRK_DONE</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_DONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name>iStart</name><operator>&lt;</operator><name>iEnd</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iWhite</name> <init>= <expr><name>iStart</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>U8_NEXT</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aChar</name></name></expr></argument>, <argument><expr><name>iWhite</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nChar</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>u_isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iStart</name> <operator>=</operator> <name>iWhite</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iStart</name><operator>&lt;=</operator><name>iEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name> <init>= <expr><name>U_ZERO_ERROR</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNew</name> <init>= <expr><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zBuffer</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zNew</name></expr> )</condition><block>{<block_content>
        <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zBuffer</name></name> <operator>=</operator> <name>zNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nBuffer</name></name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>u_strToUTF8</name><argument_list>(
        <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zBuffer</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>,    <comment type="block">/* Output vars */</comment>
        <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aChar</name><index>[<expr><name>iStart</name></expr>]</index></name></expr></argument>, <argument><expr><name>iEnd</name><operator>-</operator><name>iStart</name></expr></argument>,       <comment type="block">/* Input vars */</comment>
        <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>                                  <comment type="block">/* Output success/failure */</comment>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while<condition>( <expr><name>nByte</name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nBuffer</name></name></expr> )</condition>;</do>

  <expr_stmt><expr><operator>*</operator><name>ppToken</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>zBuffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnBytes</name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piStartOffset</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iStart</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piEndOffset</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iEnd</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piPosition</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iToken</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The set of routines that implement the simple tokenizer
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_tokenizer_module</name></type> <name>icuTokenizerModule</name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* iVersion */</comment>
  <expr><name>icuCreate</name></expr>,                   <comment type="block">/* xCreate  */</comment>
  <expr><name>icuDestroy</name></expr>,                  <comment type="block">/* xCreate  */</comment>
  <expr><name>icuOpen</name></expr>,                     <comment type="block">/* xOpen    */</comment>
  <expr><name>icuClose</name></expr>,                    <comment type="block">/* xClose   */</comment>
  <expr><name>icuNext</name></expr>,                     <comment type="block">/* xNext    */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Set *ppModule to point at the implementation of the ICU tokenizer.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts2IcuTokenizerModule</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer_module</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type><name>ppModule</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ppModule</name> <operator>=</operator> <operator>&amp;</operator><name>icuTokenizerModule</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(SQLITE_ENABLE_ICU) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_FTS2) */</comment>
</unit>
