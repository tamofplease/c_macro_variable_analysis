<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/ext/fts3/fts3_hash.c"><comment type="block">/*
** 2001 September 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This is the implementation of generic hash-tables used in SQLite.
** We've modified it slightly to serve as a standalone hash table
** implementation for the full-text indexing module.
*/</comment>

<comment type="block">/*
** The code in this file is only compiled if:
**
**     * The FTS3 module is being built as an extension
**       (in which case SQLITE_CORE is not defined), or
**
**     * The FTS3 module is being built into the core of
**       SQLite (in which case SQLITE_ENABLE_FTS3 is defined).
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3Int.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3_hash.h"</cpp:file></cpp:include>

<comment type="block">/*
** Malloc and Free functions
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fts3HashMalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts3HashFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Turn bulk memory into a hash table object by initializing the
** fields of the Hash structure.
**
** "pNew" is a pointer to the hash table that is to be initialized.
** keyClass is one of the constants 
** FTS3_HASH_BINARY or FTS3_HASH_STRING.  The value of keyClass 
** determines what kind of key the hash table will use.  "copyKey" is
** true if the hash table should make its own private copy of keys and
** false if it should just use the supplied pointer.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts3HashInit</name><parameter_list>(<parameter><decl><type><name>Fts3Hash</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>keyClass</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>copyKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pNew</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>keyClass</name><operator>&gt;=</operator><name>FTS3_HASH_STRING</name> <operator>&amp;&amp;</operator> <name>keyClass</name><operator>&lt;=</operator><name>FTS3_HASH_BINARY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>keyClass</name></name> <operator>=</operator> <name>keyClass</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>copyKey</name></name> <operator>=</operator> <name>copyKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>htsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Remove all entries from a hash table.  Reclaim all memory.
** Call this routine to delete a hash table or to reset a hash table
** to the empty state.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts3HashClear</name><parameter_list>(<parameter><decl><type><name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>         <comment type="block">/* For looping over all elements of the table */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pH</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts3HashFree</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>elem</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>next_elem</name> <init>= <expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>copyKey</name></name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts3HashFree</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts3HashFree</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elem</name> <operator>=</operator> <name>next_elem</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Hash and comparison functions when the mode is FTS3_HASH_STRING
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3StrHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>nKey</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nKey</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>nKey</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>  )</condition><block>{<block_content>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>h</name> <operator>^</operator> <operator>*</operator><name>z</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>nKey</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3StrCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>n1</name><operator>!=</operator><name>n2</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pKey1</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pKey2</name></expr></argument>,<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Hash and comparison functions when the mode is FTS3_HASH_BINARY
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3BinHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pKey</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>nKey</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>h</name> <operator>^</operator> <operator>*</operator><operator>(</operator><name>z</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>h</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3BinCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>n1</name><operator>!=</operator><name>n2</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>,<argument><expr><name>pKey2</name></expr></argument>,<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the appropriate hash function given the key class.
**
** The C syntax in this function definition may be unfamilar to some 
** programmers, so we provide the following additional explanation:
**
** The name of the function is "ftsHashFunction".  The function takes a
** single parameter "keyClass".  The return value of ftsHashFunction()
** is a pointer to another function.  Specifically, the return value
** of ftsHashFunction() is a pointer to a function that takes two parameters
** with types "const void*" and "int" and returns an "int".
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <macro><name>int</name> <argument_list>(<argument>*ftsHashFunction(int keyClass)</argument>)</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>,</operator><name>int</name><operator>)</operator><block>{
  <if_stmt><if>if<condition>( <expr><name>keyClass</name><operator>==</operator><name>FTS3_HASH_STRING</name></expr> )</condition><block>{<block_content>
    <return>return <expr><operator>&amp;</operator><name>fts3StrHash</name></expr>;</return>
  <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt><if_stmt><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>keyClass</name><operator>==</operator><name>FTS3_HASH_BINARY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>&amp;</operator><name>fts3BinHash</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
}

<comment type="block">/*
** Return a pointer to the appropriate hash function given the key class.
**
** For help in interpreted the obscure C code in the function definition,
** see the header comment on the previous function.
*/</comment>
static <macro><name>int</name> <argument_list>(<argument>*ftsCompareFunction(int keyClass)</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>,</operator><name>int</name><operator>,</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>,</operator><name>int</name><operator>)</operator><block>{
  <if_stmt><if>if<condition>( <expr><name>keyClass</name><operator>==</operator><name>FTS3_HASH_STRING</name></expr> )</condition><block>{<block_content>
    <return>return <expr><operator>&amp;</operator><name>fts3StrCompare</name></expr>;</return>
  <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt><if_stmt><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>keyClass</name><operator>==</operator><name>FTS3_HASH_BINARY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>&amp;</operator><name>fts3BinCompare</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
}

<comment type="block">/* Link an element into the hash table
*/</comment>
static <function><type><name>void</name></type> <name>fts3HashInsertElement</name><parameter_list>(
  <parameter><decl><type><name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>,            <comment type="block">/* The complete hash table */</comment>
  <parameter><decl><type><name><name>struct</name> <name>_fts3ht</name></name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>,  <comment type="block">/* The entry into which pNew is inserted */</comment>
  <parameter><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>       <comment type="block">/* The element to be inserted */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>pHead</name></decl>;</decl_stmt>     <comment type="block">/* First element already in pEntry */</comment>
  <expr_stmt><expr><name>pHead</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pHead</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pHead</name><operator>-&gt;</operator><name>prev</name></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt> </block_content>}</block></if>
    <else>else             <block>{<block_content> <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Resize the hash table so that it cantains "new_size" buckets.
** "new_size" must be a power of 2.  The hash table might fail 
** to resize if sqliteMalloc() fails.
**
** Return non-zero if a memory allocation error occurs.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3Rehash</name><parameter_list>(<parameter><decl><type><name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_fts3ht</name></name> <modifier>*</modifier></type><name>new_ht</name></decl>;</decl_stmt>          <comment type="block">/* The new hash table */</comment>
  <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_elem</name></decl>;</decl_stmt>  <comment type="block">/* For looping over existing elements */</comment>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xHash</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>   <comment type="block">/* The hash function */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>new_size</name> <operator>&amp;</operator> <operator>(</operator><name>new_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>new_ht</name> <operator>=</operator> <operator>(</operator>struct <name>_fts3ht</name> <operator>*</operator><operator>)</operator><call><name>fts3HashMalloc</name><argument_list>( <argument><expr><name>new_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_fts3ht</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>new_ht</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>fts3HashFree</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <name>new_ht</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>xHash</name> <operator>=</operator> <call><name>ftsHashFunction</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>keyClass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>elem</name><operator>=</operator><name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr><operator>,</operator> <expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name></expr>;</condition> <incr><expr><name>elem</name> <operator>=</operator> <name>next_elem</name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call>(<modifier>*</modifier><name>xHash</name>)<argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>nKey</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>new_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>next_elem</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts3HashInsertElement</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_ht</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function (for internal use only) locates an element in an
** hash table that matches the given key.  The hash for this key has
** already been computed and is passed as the 4th parameter.
*/</comment>
<function><type><specifier>static</specifier> <name>Fts3HashElem</name> <modifier>*</modifier></type><name>fts3FindElementByHash</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>, <comment type="block">/* The pH to be searched */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,   <comment type="block">/* The key we are searching for */</comment>
  <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>               <comment type="block">/* The hash for this key. */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>            <comment type="block">/* Used to loop thru the element list */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>                     <comment type="block">/* Number of elements left to test */</comment>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xCompare</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>  <comment type="block">/* comparison function */</comment>

  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>_fts3ht</name></name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><operator>&amp;</operator><name><name>pH</name><operator>-&gt;</operator><name>ht</name><index>[<expr><name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xCompare</name> <operator>=</operator> <call><name>ftsCompareFunction</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>keyClass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>count</name><operator>--</operator> <operator>&amp;&amp;</operator> <name>elem</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call>(<modifier>*</modifier><name>xCompare</name>)<argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>,<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>nKey</name></name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKey</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> 
        <return>return <expr><name>elem</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Remove a single entry from the hash table given a pointer to that
** element and a hash on the element's key.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts3RemoveElementByHash</name><parameter_list>(
  <parameter><decl><type><name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>,         <comment type="block">/* The pH containing "elem" */</comment>
  <parameter><decl><type><name>Fts3HashElem</name><modifier>*</modifier></type> <name>elem</name></decl></parameter>,   <comment type="block">/* The element to be removed from the pH */</comment>
  <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>                 <comment type="block">/* Hash value for the element */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_fts3ht</name></name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>&amp;</operator><name><name>pH</name><operator>-&gt;</operator><name>ht</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name><operator>==</operator><name>elem</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>copyKey</name></name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts3HashFree</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fts3HashFree</name><argument_list>( <argument><expr><name>elem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts3HashClear</name><argument_list>(<argument><expr><name>pH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>sqlite3Fts3HashFindElem</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>                          <comment type="block">/* A hash on key */</comment>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xHash</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>  <comment type="block">/* The hash function */</comment>

  <if_stmt><if>if<condition>( <expr><name>pH</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pH</name><operator>-&gt;</operator><name>ht</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>xHash</name> <operator>=</operator> <call><name>ftsHashFunction</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>keyClass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>xHash</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <call>(<modifier>*</modifier><name>xHash</name>)<argument_list>(<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts3FindElementByHash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>h</name> <operator>&amp;</operator> <operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Attempt to locate an element of the hash table pH with a key
** that matches pKey,nKey.  Return the data for this element if it is
** found, or NULL if there is no match.
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3Fts3HashFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>pElem</name></decl>;</decl_stmt>            <comment type="block">/* The element that matches key (if any) */</comment>

  <expr_stmt><expr><name>pElem</name> <operator>=</operator> <call><name>sqlite3Fts3HashFindElem</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>pElem</name></expr> ?</condition><then> <expr><name><name>pElem</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Insert an element into the hash table pH.  The key is pKey,nKey
** and the data is "data".
**
** If no element exists with a matching key, then a new
** element is created.  A copy of the key is made if the copyKey
** flag is set.  NULL is returned.
**
** If another element already exists with the same key, then the
** new data replaces the old data and the old data is returned.
** The key is not copied in this instance.  If a malloc fails, then
** the new data is returned and the hash table is unchanged.
**
** If the "data" parameter to this function is NULL, then the
** element corresponding to "key" is removed from the hash table.
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3Fts3HashInsert</name><parameter_list>(
  <parameter><decl><type><name>Fts3Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>,        <comment type="block">/* The hash table to insert into */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,    <comment type="block">/* The key */</comment>
  <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,            <comment type="block">/* Number of bytes in the key */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>           <comment type="block">/* The data */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>hraw</name></decl>;</decl_stmt>                 <comment type="block">/* Raw hash value of the key */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>                    <comment type="block">/* the hash of the key modulo hash table size */</comment>
  <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>       <comment type="block">/* Used to loop thru the element list */</comment>
  <decl_stmt><decl><type><name>Fts3HashElem</name> <modifier>*</modifier></type><name>new_elem</name></decl>;</decl_stmt>   <comment type="block">/* New element added to the pH */</comment>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xHash</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>  <comment type="block">/* The hash function */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pH</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>xHash</name> <operator>=</operator> <call><name>ftsHashFunction</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>keyClass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>xHash</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>hraw</name> <operator>=</operator> <call>(<modifier>*</modifier><name>xHash</name>)<argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <name>hraw</name> <operator>&amp;</operator> <operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>elem</name> <operator>=</operator> <call><name>fts3FindElementByHash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><name>nKey</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>elem</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_data</name> <init>= <expr><name><name>elem</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>data</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts3RemoveElementByHash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>,<argument><expr><name>elem</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>old_data</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>data</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fts3Rehash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator>
   <operator>||</operator> <operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>&gt;=</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>&amp;&amp;</operator> <call><name>fts3Rehash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>new_elem</name> <operator>=</operator> <operator>(</operator><name>Fts3HashElem</name><operator>*</operator><operator>)</operator><call><name>fts3HashMalloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts3HashElem</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>new_elem</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>copyKey</name></name> <operator>&amp;&amp;</operator> <name>pKey</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <call><name>fts3HashMalloc</name><argument_list>( <argument><expr><name>nKey</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>new_elem</name><operator>-&gt;</operator><name>pKey</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts3HashFree</name><argument_list>(<argument><expr><name>new_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>data</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>new_elem</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pKey</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>nKey</name></name> <operator>=</operator> <name>nKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>&amp;</operator> <operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <name>hraw</name> <operator>&amp;</operator> <operator>(</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts3HashInsertElement</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pH</name><operator>-&gt;</operator><name>ht</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>, <argument><expr><name>new_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_FTS3) */</comment>
</unit>
