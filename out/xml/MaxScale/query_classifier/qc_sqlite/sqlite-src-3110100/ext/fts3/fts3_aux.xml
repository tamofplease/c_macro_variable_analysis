<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/ext/fts3/fts3_aux.c"><comment type="block">/*
** 2011 Jan 27
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3Int.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>Fts3auxTable</name></name></type> <name>Fts3auxTable</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts3auxCursor</name></name></type> <name>Fts3auxCursor</name>;</typedef>

<struct>struct <name>Fts3auxTable</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* Base class used by SQLite core */</comment>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3Tab</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Fts3auxCursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>       <comment type="block">/* Base class used by SQLite core */</comment>
  <decl_stmt><decl><type><name>Fts3MultiSegReader</name></type> <name>csr</name></decl>;</decl_stmt>        <comment type="block">/* Must be right after "base" */</comment>
  <decl_stmt><decl><type><name>Fts3SegFilter</name></type> <name>filter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zStop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nStop</name></decl>;</decl_stmt>                      <comment type="block">/* Byte-length of string zStop */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLangid</name></decl>;</decl_stmt>                    <comment type="block">/* Language id to query */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isEof</name></decl>;</decl_stmt>                      <comment type="block">/* True if cursor is at EOF */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iRowid</name></decl>;</decl_stmt>           <comment type="block">/* Current rowid */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>                       <comment type="block">/* Current value of 'col' column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStat</name></decl>;</decl_stmt>                      <comment type="block">/* Size of aStat[] array */</comment>
  <struct>struct <name>Fts3auxColstats</name> <block>{
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nDoc</name></decl>;</decl_stmt>           <comment type="block">/* 'documents' values for current csr row */</comment>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nOcc</name></decl>;</decl_stmt>           <comment type="block">/* 'occurrences' values for current csr row */</comment>
  }</block> <decl><modifier>*</modifier><name>aStat</name></decl>;</struct>
}</block>;</struct>

<comment type="block">/*
** Schema of the terms table.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS3_AUX_SCHEMA</name></cpp:macro> \
  <cpp:value>"CREATE TABLE x(term, col, documents, occurrences, languageid HIDDEN)"</cpp:value></cpp:define>

<comment type="block">/*
** This function does all the work for both the xConnect and xCreate methods.
** These tables have no persistent representation of their own, so xConnect
** and xCreate are identical operations.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxConnectMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>,                  <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,          <comment type="block">/* OUT: New sqlite3_vtab object */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: sqlite3_malloc'd error message */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>                <comment type="block">/* Name of database (e.g. "main") */</comment>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zFts3</name></decl>;</decl_stmt>              <comment type="block">/* Name of fts3 table */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDb</name></decl>;</decl_stmt>                        <comment type="block">/* Result of strlen(zDb) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFts3</name></decl>;</decl_stmt>                      <comment type="block">/* Result of strlen(zFts3) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                      <comment type="block">/* Bytes of space to allocate here */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* value returned by declare_vtab() */</comment>
  <decl_stmt><decl><type><name>Fts3auxTable</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                <comment type="block">/* Virtual table object to return */</comment>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* The user should invoke this in one of two forms:
  **
  **     CREATE VIRTUAL TABLE xxx USING fts4aux(fts4-table);
  **     CREATE VIRTUAL TABLE xxx USING fts4aux(fts4-table-db, fts4-table);
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>argc</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>bad_args</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 
  <expr_stmt><expr><name>nDb</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>nDb</name><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><literal type="string">"temp"</literal></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> 
      <expr_stmt><expr><name>nDb</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zFts3</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <goto>goto <name>bad_args</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zFts3</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>nFts3</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zFts3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>FTS3_AUX_SCHEMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts3auxTable</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts3Table</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nDb</name> <operator>+</operator> <name>nFts3</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Fts3auxTable</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name></name> <operator>=</operator> <operator>(</operator><name>Fts3Table</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zDb</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zDb</name><index>[<expr><name>nDb</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>nIndex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>nDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zFts3</name></expr></argument>, <argument><expr><name>nFts3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts3Dequote</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>

 <label><name>bad_args</name>:</label>
  <expr_stmt><expr><call><name>sqlite3Fts3ErrMsg</name><argument_list>(<argument><expr><name>pzErr</name></expr></argument>, <argument><expr><literal type="string">"invalid arguments to fts4aux constructor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function does the work for both the xDisconnect and xDestroy methods.
** These tables have no persistent representation of their own, so xDisconnect
** and xDestroy are identical operations.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxDisconnectMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3auxTable</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Fts3auxTable</name> <operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Free any prepared statements held */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>SizeofArray</name><argument_list>(<argument><expr><name><name>pFts3</name><operator>-&gt;</operator><name>aStmt</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pFts3</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pFts3</name><operator>-&gt;</operator><name>zSegmentsTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS4AUX_EQ_CONSTRAINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS4AUX_GE_CONSTRAINT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS4AUX_LE_CONSTRAINT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/*
** xBestIndex - Analyze a WHERE and ORDER BY clause.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxBestIndexMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iEq</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iGe</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLe</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLangid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iNext</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Next free argvIndex value */</comment>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pVTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* This vtab delivers always results in "ORDER BY term ASC" order. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">1</literal> 
   <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>==</operator><literal type="number">0</literal> 
   <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Search for equality and range constraints on the "term" column. 
  ** And equality constraints on the hidden "languageid" column. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usable</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iEq</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_LT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iLe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_LE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iLe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_GT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iGe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_GE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iGe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iLangid</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>iEq</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <name>FTS4AUX_EQ_CONSTRAINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iEq</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">20000</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iGe</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <name>FTS4AUX_GE_CONSTRAINT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iGe</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iLe</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>+=</operator> <name>FTS4AUX_LE_CONSTRAINT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iLe</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iLangid</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iLangid</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xOpen - Open a cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxOpenMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>            <comment type="block">/* Pointer to cursor object to return */</comment>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pVTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>Fts3auxCursor</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts3auxCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pCsr</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts3auxCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCsr</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab_cursor</name> <operator>*</operator><operator>)</operator><name>pCsr</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xClose - Close a cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxCloseMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts3auxTable</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator><operator>-&gt;</operator><name>pFts3Tab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3auxCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3Fts3SegmentsClose</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts3SegReaderFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zStop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxGrowStatArray</name><parameter_list>(<parameter><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>nSize</name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nStat</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>Fts3auxColstats</name></name> <modifier>*</modifier></type><name>aNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>aNew</name> <operator>=</operator> <operator>(</operator>struct <name>Fts3auxColstats</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name></name></expr></argument>, 
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Fts3auxColstats</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nSize</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aNew</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>nStat</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Fts3auxColstats</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nSize</name> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nStat</name></name><operator>)</operator></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nStat</name></name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xNext - Advance the cursor to the next row, if any.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxNextMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3auxCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts3auxTable</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator><operator>-&gt;</operator><name>pFts3Tab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <comment type="block">/* Increment our pretend rowid value. */</comment>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iRowid</name></name><operator>++</operator></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>&lt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nStat</name></name></expr>;</condition> <incr><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name><operator>.</operator><name>nDoc</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts3SegReaderStep</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nDoclist</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>nDoclist</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aDoclist</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>aDoclist</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>eState</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>zStop</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nStop</name></name><operator>&lt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>nTerm</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pCsr</name><operator>-&gt;</operator><name>nStop</name></name></expr> </then><else>: <expr><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>nTerm</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mc</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zStop</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>zTerm</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>mc</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>mc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>nTerm</name></name><operator>&gt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nStop</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>SQLITE_OK</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>fts3auxGrowStatArray</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>Fts3auxColstats</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nStat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nDoclist</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>sqlite3Fts3GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aDoclist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch<condition>( <expr><name>eState</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* State 0. In this state the integer just read was a docid. */</comment>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nDoc</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>eState</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>iCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>

        <comment type="block">/* State 1. In this state we are expecting either a 1, indicating
        ** that the following integer will be a column number, or the
        ** start of a position list for column 0.  
        ** 
        ** The only difference between state 1 and state 2 is that if the
        ** integer encountered in state 1 is not 0 or 1, then we need to
        ** increment the column 0 "nDoc" count for this term.
        */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nDoc</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>eState</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <comment type="block">/* fall through */</comment>

        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>       <comment type="block">/* 0x00. Next integer will be a docid. */</comment>
            <expr_stmt><expr><name>eState</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content> <comment type="block">/* 0x01. Next integer will be a column number. */</comment>
            <expr_stmt><expr><name>eState</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>            <comment type="block">/* 2 or greater. A position. */</comment>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><name>iCol</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nOcc</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nOcc</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>

        <comment type="block">/* State 3. The integer just read is a column number. */</comment>
        <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eState</name><operator>==</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>iCol</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>fts3auxGrowStatArray</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>iCol</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><name>iCol</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nDoc</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>eState</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xFilter - Initialize a cursor to point at the start of its data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxFilterMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* The cursor used for this query */</comment>
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>,                     <comment type="block">/* Strategy index */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,             <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,                       <comment type="block">/* Number of elements in apVal */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Arguments for the indexing scheme */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3auxCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts3auxTable</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator><operator>-&gt;</operator><name>pFts3Tab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isScan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLangVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Language id to query */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>iEq</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Index of term=? value in apVal */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iGe</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Index of term&gt;=? value in apVal */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLe</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Index of term&lt;=? value in apVal */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLangid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Index of languageid=? value in apVal */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iNext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idxStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>idxStr</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>idxNum</name><operator>==</operator><name>FTS4AUX_EQ_CONSTRAINT</name> <operator>||</operator> <name>idxNum</name><operator>==</operator><literal type="number">0</literal>
       <operator>||</operator> <name>idxNum</name><operator>==</operator><name>FTS4AUX_LE_CONSTRAINT</name> <operator>||</operator> <name>idxNum</name><operator>==</operator><name>FTS4AUX_GE_CONSTRAINT</name>
       <operator>||</operator> <name>idxNum</name><operator>==</operator><operator>(</operator><name>FTS4AUX_LE_CONSTRAINT</name><operator>|</operator><name>FTS4AUX_GE_CONSTRAINT</name><operator>)</operator></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>idxNum</name><operator>==</operator><name>FTS4AUX_EQ_CONSTRAINT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iEq</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>isScan</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>idxNum</name> <operator>&amp;</operator> <name>FTS4AUX_GE_CONSTRAINT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iGe</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>idxNum</name> <operator>&amp;</operator> <name>FTS4AUX_LE_CONSTRAINT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iLe</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iNext</name><operator>&lt;</operator><name>nVal</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iLangid</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* In case this cursor is being reused, close and zero it. */</comment>
  <expr_stmt><expr><call><name>testcase</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts3SegReaderFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aStat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>FTS3_SEGMENT_REQUIRE_POS</name><operator>|</operator><name>FTS3_SEGMENT_IGNORE_EMPTY</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>isScan</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>FTS3_SEGMENT_SCAN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iEq</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>iGe</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zStr</name> <init>= <expr><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>iEq</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iGe</name><operator>==</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>iEq</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>iGe</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zStr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>nTerm</name></name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iLe</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zStop</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name>iLe</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nStop</name></name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name>iLe</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>zStop</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>( <expr><name>iLangid</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iLangVal</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name>iLangid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the user specified a negative value for the languageid, use zero
    ** instead. This works, as the "languageid=?" constraint will also
    ** be tested by the VDBE layer. The test will always be false (since
    ** this module will not return a row with a negative languageid), and
    ** so the overall query will return zero rows.  */</comment>
    <if_stmt><if>if<condition>( <expr><name>iLangVal</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iLangVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iLangid</name></name> <operator>=</operator> <name>iLangVal</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts3SegReaderCursor</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>, <argument><expr><name>iLangVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FTS3_SEGCURSOR_ALL</name></expr></argument>,
      <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>nTerm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>isScan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts3SegReaderStart</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts3auxNextMethod</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xEof - Return true if the cursor is at EOF, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxEofMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3auxCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xColumn - Return a column value.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxColumnMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* Cursor to retrieve value from */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for sqlite3_result_xxx() calls */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>                        <comment type="block">/* Index of column to read value from */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Fts3auxCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>isEof</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name>iCol</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* term */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>zTerm</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>nTerm</name></name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* col */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>

    <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* documents */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name><operator>.</operator><name>nDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* occurrences */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStat</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name><operator>.</operator><name>nOcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default> <comment type="block">/* languageid */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>==</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iLangid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xRowid - Return the current rowid for the cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3auxRowidMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* Cursor to retrieve value from */</comment>
  <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>            <comment type="block">/* OUT: Rowid value */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3auxCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3auxCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register the fts3aux module with database connection db. Return SQLITE_OK
** if successful or an error code if sqlite3_create_module() fails.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts3InitAux</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_module</name></type> <name>fts3aux_module</name> <init>= <expr><block>{
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* iVersion      */</comment>
     <expr><name>fts3auxConnectMethod</name></expr>,        <comment type="block">/* xCreate       */</comment>
     <expr><name>fts3auxConnectMethod</name></expr>,        <comment type="block">/* xConnect      */</comment>
     <expr><name>fts3auxBestIndexMethod</name></expr>,      <comment type="block">/* xBestIndex    */</comment>
     <expr><name>fts3auxDisconnectMethod</name></expr>,     <comment type="block">/* xDisconnect   */</comment>
     <expr><name>fts3auxDisconnectMethod</name></expr>,     <comment type="block">/* xDestroy      */</comment>
     <expr><name>fts3auxOpenMethod</name></expr>,           <comment type="block">/* xOpen         */</comment>
     <expr><name>fts3auxCloseMethod</name></expr>,          <comment type="block">/* xClose        */</comment>
     <expr><name>fts3auxFilterMethod</name></expr>,         <comment type="block">/* xFilter       */</comment>
     <expr><name>fts3auxNextMethod</name></expr>,           <comment type="block">/* xNext         */</comment>
     <expr><name>fts3auxEofMethod</name></expr>,            <comment type="block">/* xEof          */</comment>
     <expr><name>fts3auxColumnMethod</name></expr>,         <comment type="block">/* xColumn       */</comment>
     <expr><name>fts3auxRowidMethod</name></expr>,          <comment type="block">/* xRowid        */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xUpdate       */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xBegin        */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xSync         */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xCommit       */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xRollback     */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xFindFunction */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xRename       */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xSavepoint    */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xRelease      */</comment>
     <expr><literal type="number">0</literal></expr>                            <comment type="block">/* xRollbackTo   */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Return code */</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts4aux"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fts3aux_module</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_FTS3) */</comment>
</unit>
