<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/ext/fts5/fts5_expr.c"><comment type="block">/*
** 2014 May 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
*/</comment>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5parse.h"</cpp:file></cpp:include>

<comment type="block">/*
** All token types in the generated fts5parse.h file are greater than 0.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_EOF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_LARGEST_INT64</name></cpp:macro>  <cpp:value>(0xffffffff|(((i64)0x7fffffff)&lt;&lt;32))</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>Fts5ExprTerm</name></name></type> <name>Fts5ExprTerm</name>;</typedef>

<comment type="block">/*
** Functions generated by lemon from fts5parse.y.
*/</comment>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>sqlite3Fts5ParserAlloc</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mallocProc</name>)<parameter_list>(<parameter><decl><type><name>u64</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlite3Fts5ParserFree</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>freeProc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlite3Fts5Parser</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>Fts5Token</name></type></decl></parameter>, <parameter><decl><type><name>Fts5Parse</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>void</name></type> <name>sqlite3Fts5ParserTrace</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>Fts5Expr</name> <block>{
  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pRoot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bDesc</name></decl>;</decl_stmt>                      <comment type="block">/* Iterate in descending rowid order */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>                    <comment type="block">/* Number of phrases in expression */</comment>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier><modifier>*</modifier></type><name>apExprPhrase</name></decl>;</decl_stmt>  <comment type="block">/* Pointers to phrase objects */</comment>
}</block>;</struct>

<comment type="block">/*
** eType:
**   Expression node type. Always one of:
**
**       FTS5_AND                 (nChild, apChild valid)
**       FTS5_OR                  (nChild, apChild valid)
**       FTS5_NOT                 (nChild, apChild valid)
**       FTS5_STRING              (pNear valid)
**       FTS5_TERM                (pNear valid)
*/</comment>
<struct>struct <name>Fts5ExprNode</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>                      <comment type="block">/* Node type */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bEof</name></decl>;</decl_stmt>                       <comment type="block">/* True at EOF */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bNomatch</name></decl>;</decl_stmt>                   <comment type="block">/* True if entry is not a match */</comment>

  <comment type="block">/* Next method for this node. */</comment>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xNext</name>)<parameter_list>(<parameter><decl><type><name>Fts5Expr</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5ExprNode</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>i64</name></type></decl></parameter>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Current rowid */</comment>
  <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name></decl>;</decl_stmt>         <comment type="block">/* For FTS5_STRING - cluster of phrases */</comment>

  <comment type="block">/* Child nodes. For a NOT node, this array always contains 2 entries. For 
  ** AND or OR nodes, it contains 2 or more entries.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nChild</name></decl>;</decl_stmt>                     <comment type="block">/* Number of child nodes */</comment>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name><name>apChild</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>       <comment type="block">/* Array of child nodes */</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fts5NodeIsString</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;eType==FTS5_TERM || (p)-&gt;eType==FTS5_STRING)</cpp:value></cpp:define>

<comment type="block">/*
** Invoke the xNext method of an Fts5ExprNode object. This macro should be
** used as if it has the same signature as the xNext() methods themselves.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5ExprNodeNext</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(b)-&gt;xNext((a), (b), (c), (d))</cpp:value></cpp:define>

<comment type="block">/*
** An instance of the following structure represents a single search term
** or term prefix.
*/</comment>
<struct>struct <name>Fts5ExprTerm</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>bPrefix</name></decl>;</decl_stmt>                    <comment type="block">/* True for a prefix term */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTerm</name></decl>;</decl_stmt>                    <comment type="block">/* nul-terminated term */</comment>
  <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>           <comment type="block">/* Iterator for this term */</comment>
  <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pSynonym</name></decl>;</decl_stmt>         <comment type="block">/* Pointer to first in list of synonyms */</comment>
}</block>;</struct>

<comment type="block">/*
** A phrase. One or more terms that must appear in a contiguous sequence
** within a document for it to match.
*/</comment>
<struct>struct <name>Fts5ExprPhrase</name> <block>{
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>            <comment type="block">/* FTS5_STRING node this phrase is part of */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>poslist</name></decl>;</decl_stmt>             <comment type="block">/* Current position list */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name></decl>;</decl_stmt>                      <comment type="block">/* Number of entries in aTerm[] */</comment>
  <decl_stmt><decl><type><name>Fts5ExprTerm</name></type> <name><name>aTerm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* Terms that make up this phrase */</comment>
}</block>;</struct>

<comment type="block">/*
** One or more phrases that must appear within a certain token distance of
** each other within each matching document.
*/</comment>
<struct>struct <name>Fts5ExprNearset</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nNear</name></decl>;</decl_stmt>                      <comment type="block">/* NEAR parameter */</comment>
  <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl>;</decl_stmt>            <comment type="block">/* Columns to search (NULL -&gt; all columns) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>                    <comment type="block">/* Number of entries in aPhrase[] array */</comment>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name><name>apPhrase</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* Array of phrase pointers */</comment>
}</block>;</struct>


<comment type="block">/*
** Parse context.
*/</comment>
<struct>struct <name>Fts5Parse</name> <block>{
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>                    <comment type="block">/* Size of apPhrase array */</comment>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier><modifier>*</modifier></type><name>apPhrase</name></decl>;</decl_stmt>      <comment type="block">/* Array of all phrases */</comment>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pExpr</name></decl>;</decl_stmt>            <comment type="block">/* Result of a successful parse */</comment>
}</block>;</struct>

<function><type><name>void</name></type> <name>sqlite3Fts5ParseError</name><parameter_list>(<parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprIsspace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>t</name><operator>==</operator><literal type="char">' '</literal> <operator>||</operator> <name>t</name><operator>==</operator><literal type="char">'\t'</literal> <operator>||</operator> <name>t</name><operator>==</operator><literal type="char">'\n'</literal> <operator>||</operator> <name>t</name><operator>==</operator><literal type="char">'\r'</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read the first token from the nul-terminated string at *pz.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprGetToken</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pz</name></decl></parameter>,                <comment type="block">/* IN/OUT: Pointer into buffer */</comment>
  <parameter><decl><type><name>Fts5Token</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>*</operator><name>pz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tok</name></decl>;</decl_stmt>

  <comment type="block">/* Skip past any whitespace */</comment>
  <while>while<condition>( <expr><call><name>fts5ExprIsspace</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

  <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><operator>*</operator><name>z</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="char">'('</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_LP</name></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><literal type="char">')'</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_RP</name></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><literal type="char">'{'</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_LCP</name></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><literal type="char">'}'</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_RCP</name></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><literal type="char">':'</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_COLON</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">','</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_COMMA</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'+'</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_PLUS</name></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="char">'*'</literal></expr>:</case>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_STAR</name></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="char">'\0'</literal></expr>:</case> <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_EOF</name></expr>;</expr_stmt>   <break>break;</break>

    <case>case <expr><literal type="char">'"'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z2</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_STRING</name></expr>;</expr_stmt>

      <for>for<control>(<init><expr><name>z2</name><operator>=</operator><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><literal type="number">1</literal></expr>;</condition> <incr><expr><name>z2</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>z2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'"'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>z2</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>z2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'"'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>z2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3Fts5ParseError</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"unterminated string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>FTS5_EOF</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name>z2</name> <operator>-</operator> <name>z</name><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z2</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IsBareword</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Fts5ParseError</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"fts5: syntax error near \"%.1s\""</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>FTS5_EOF</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_STRING</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>z2</name><operator>=</operator><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><call><name>sqlite3Fts5IsBareword</name><argument_list>(<argument><expr><operator>*</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>z2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <expr_stmt><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name>z2</name> <operator>-</operator> <name>z</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"OR"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>  <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_OR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"NOT"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_NOT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"AND"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tok</name> <operator>=</operator> <name>FTS5_AND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>

  <expr_stmt><expr><operator>*</operator><name>pz</name> <operator>=</operator> <operator>&amp;</operator><name><name>pToken</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>tok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fts5ParseAlloc</name><parameter_list>(<parameter><decl><type><name>u64</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ParseFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5ExprNew</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>,            <comment type="block">/* FTS5 Configuration */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExpr</name></decl></parameter>,              <comment type="block">/* Expression text */</comment>
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Parse</name></type> <name>sParse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Token</name></type> <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>zExpr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>                          <comment type="block">/* Next token type */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sParse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>sqlite3Fts5ParserAlloc</name><argument_list>(<argument><expr><name>fts5ParseAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pEngine</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>sParse</name><operator>.</operator><name>pConfig</name></name> <operator>=</operator> <name>pConfig</name></expr>;</expr_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>fts5ExprGetToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5Parser</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name><name>sParse</name><operator>.</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>t</name><operator>!=</operator><name>FTS5_EOF</name></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>sqlite3Fts5ParserFree</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>, <argument><expr><name>fts5ParseFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sParse</name><operator>.</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>sParse</name><operator>.</operator><name>zErr</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>sParse</name><operator>.</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <name>pNew</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Expr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>sParse</name><operator>.</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5ParseNodeFree</name><argument_list>(<argument><expr><name><name>sParse</name><operator>.</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sParse</name><operator>.</operator><name>pExpr</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNode</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>Fts5ExprNode</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sParse</name><operator>.</operator><name>rc</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <name><name>sParse</name><operator>.</operator><name>pExpr</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pConfig</name></name> <operator>=</operator> <name>pConfig</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>apExprPhrase</name></name> <operator>=</operator> <name><name>sParse</name><operator>.</operator><name>apPhrase</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>=</operator> <name><name>sParse</name><operator>.</operator><name>nPhrase</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sParse</name><operator>.</operator><name>apPhrase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>sParse</name><operator>.</operator><name>apPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <name><name>sParse</name><operator>.</operator><name>zErr</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>sParse</name><operator>.</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free the expression node object passed as the only argument.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5ParseNodeFree</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5ParseNodeFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3Fts5ParseNearsetFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pNear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Free the expression object passed as the only argument.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5ExprFree</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5ParseNodeFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apExprPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Argument pTerm must be a synonym iterator. Return the current rowid
** that it points to.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>fts5ExprSynonymRowid</name><parameter_list>(<parameter><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbEof</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bRetValid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bDesc</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bDesc</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTerm</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>bRetValid</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>bDesc</name><operator>!=</operator><operator>(</operator><name>iRowid</name><operator>&lt;</operator><name>iRet</name><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bRetValid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>pbEof</name> <operator>&amp;&amp;</operator> <name>bRetValid</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pbEof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>iRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Argument pTerm must be a synonym iterator.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprSynonymList</name><parameter_list>(
  <parameter><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,               <comment type="block">/* Use this buffer for space if required */</comment>
  <parameter><decl><type><name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5PoslistReader</name></type> <name><name>aStatic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>aIter</name> <init>= <expr><name>aStatic</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTerm</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name>iRowid</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>nIter</name><operator>==</operator><name>nAlloc</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5PoslistReader</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nAlloc</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>aNew</name> <init>= <expr><operator>(</operator><name>Fts5PoslistReader</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
          <goto>goto <name>synonym_poslist_out</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aNew</name></expr></argument>, <argument><expr><name>aIter</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5PoslistReader</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nAlloc</name> <operator>=</operator> <name>nAlloc</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>aIter</name><operator>!=</operator><name>aStatic</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>aIter</name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5PoslistReaderInit</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aIter</name><index>[<expr><name>nIter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aIter</name><index>[<expr><name>nIter</name></expr>]</index></name><operator>.</operator><name>bEof</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nIter</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>nIter</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name><name>aIter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <name><name>aIter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>Fts5PoslistWriter</name></type> <name>writer</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iPrev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>i64</name></type> <name>iMin</name> <init>= <expr><name>FTS5_LARGEST_INT64</name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bEof</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iPos</name><operator>==</operator><name>iPrev</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5PoslistReaderNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iPos</name><operator>&lt;</operator><name>iMin</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>iMin</name> <operator>=</operator> <name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iPos</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>iMin</name><operator>==</operator><name>FTS5_LARGEST_INT64</name> <operator>||</operator> <name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5PoslistWriterAppend</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>iMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iPrev</name> <operator>=</operator> <name>iMin</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

 <label><name>synonym_poslist_out</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>aIter</name><operator>!=</operator><name>aStatic</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** All individual term iterators in pPhrase are guaranteed to be valid and
** pointing to the same rowid when this function is called. This function 
** checks if the current rowid really is a match, and if so populates
** the pPhrase-&gt;poslist buffer accordingly. Output parameter *pbMatch
** is set to true if this is really a match, or false otherwise.
**
** SQLITE_OK is returned if an error occurs, or an SQLite error code 
** otherwise. It is not considered an error code if the current rowid is 
** not a match.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprPhraseIsMatch</name><parameter_list>(
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,            <comment type="block">/* Node pPhrase belongs to */</comment>
  <parameter><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name></decl></parameter>,        <comment type="block">/* Phrase object to initialize */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbMatch</name></decl></parameter>                    <comment type="block">/* OUT: Set to true if really a match */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5PoslistWriter</name></type> <name>writer</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5PoslistReader</name></type> <name><name>aStatic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>aIter</name> <init>= <expr><name>aStatic</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the aStatic[] array is not large enough, allocate a large array
  ** using sqlite3_malloc(). This approach could be improved upon. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>&gt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aStatic</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5PoslistReader</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>aIter</name> <operator>=</operator> <operator>(</operator><name>Fts5PoslistReader</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>aIter</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5PoslistReader</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize a term iterator for each term in the phrase */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name> <init>= <expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprSynonymList</name><argument_list>(<argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>ismatch_out</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><name><name>buf</name><operator>.</operator><name>p</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bFlag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name><name>pTerm</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pTerm</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5PoslistReaderInit</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bFlag</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>bFlag</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bEof</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>ismatch_out</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bMatch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iPos</name> <init>= <expr><name><name>aIter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iPos</name></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>pPos</name> <init>= <expr><operator>&amp;</operator><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>i64</name></type> <name>iAdj</name> <init>= <expr><name>iPos</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>!=</operator><name>iAdj</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <while>while<condition>( <expr><name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>&lt;</operator><name>iAdj</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5PoslistReaderNext</name><argument_list>(<argument><expr><name>pPos</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>ismatch_out</name>;</goto></block_content></block></if></if_stmt>
          </block_content>}</block></while>
          <if_stmt><if>if<condition>( <expr><name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>&gt;</operator><name>iAdj</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iPos</name> <operator>=</operator> <name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>-</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block>while<condition>( <expr><name>bMatch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition>;</do>

    <comment type="block">/* Append position iPos to the output */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5PoslistWriterAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>iPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>ismatch_out</name>;</goto></block_content></block></if></if_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5PoslistReaderNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>ismatch_out</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>

 <label><name>ismatch_out</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>pbMatch</name> <operator>=</operator> <operator>(</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bFlag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>aIter</name><operator>!=</operator><name>aStatic</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>Fts5LookaheadReader</name></name></type> <name>Fts5LookaheadReader</name>;</typedef>
<struct>struct <name>Fts5LookaheadReader</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>                    <comment type="block">/* Buffer containing position list */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                          <comment type="block">/* Size of buffer a[] in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Current offset in position list */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iPos</name></decl>;</decl_stmt>                       <comment type="block">/* Current position */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLookahead</name></decl>;</decl_stmt>                 <comment type="block">/* Next position */</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_LOOKAHEAD_EOF</name></cpp:macro> <cpp:value>(((i64)1) &lt;&lt; 62)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5LookaheadReaderNext</name><parameter_list>(<parameter><decl><type><name>Fts5LookaheadReader</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iLookahead</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5PoslistNext64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>iLookahead</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iLookahead</name></name> <operator>=</operator> <name>FTS5_LOOKAHEAD_EOF</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name><operator>==</operator><name>FTS5_LOOKAHEAD_EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5LookaheadReaderInit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,             <comment type="block">/* Buffer to read position list from */</comment>
  <parameter><decl><type><name>Fts5LookaheadReader</name> <modifier>*</modifier></type><name>p</name></decl></parameter>          <comment type="block">/* Iterator object to initialize */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5LookaheadReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5LookaheadReaderNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5LookaheadReaderNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>Fts5NearTrimmer</name></name></type> <name>Fts5NearTrimmer</name>;</typedef>
<struct>struct <name>Fts5NearTrimmer</name> <block>{
  <decl_stmt><decl><type><name>Fts5LookaheadReader</name></type> <name>reader</name></decl>;</decl_stmt>     <comment type="block">/* Input iterator */</comment>
  <decl_stmt><decl><type><name>Fts5PoslistWriter</name></type> <name>writer</name></decl>;</decl_stmt>       <comment type="block">/* Writer context */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pOut</name></decl>;</decl_stmt>               <comment type="block">/* Output poslist */</comment>
}</block>;</struct>

<comment type="block">/*
** The near-set object passed as the first argument contains more than
** one phrase. All phrases currently point to the same row. The
** Fts5ExprPhrase.poslist buffers are populated accordingly. This function
** tests if the current row contains instances of each phrase sufficiently
** close together to meet the NEAR constraint. Non-zero is returned if it
** does, or zero otherwise.
**
** If in/out parameter (*pRc) is set to other than SQLITE_OK when this
** function is called, it is a no-op. Or, if an error (e.g. SQLITE_NOMEM)
** occurs within this function (*pRc) is set accordingly before returning.
** The return value is undefined in both these cases.
** 
** If no error occurs and non-zero (a match) is returned, the position-list
** of each phrase object is edited to contain only those entries that
** meet the constraint before returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNearIsMatch</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5NearTrimmer</name></type> <name><name>aStatic</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5NearTrimmer</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>aStatic</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier><modifier>*</modifier></type><name>apPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>*</operator><name>pRc</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bMatch</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>&gt;</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the aStatic[] array is not large enough, allocate a large array
  ** using sqlite3_malloc(). This approach could be improved upon. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>&gt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aStatic</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5NearTrimmer</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>Fts5NearTrimmer</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aStatic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aStatic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Initialize a lookahead iterator for each phrase. After passing the
  ** buffer and buffer size to the lookaside-reader init function, zero
  ** the phrase poslist buffer. The new poslist for the phrase (containing
  ** the same entries as the original with some entries removed on account 
  ** of the NEAR constraint) is written over the original even as it is
  ** being read. This is safe as the entries for the new poslist are a
  ** subset of the old, so it is not possible for data yet to be read to
  ** be overwritten.  */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pPoslist</name> <init>= <expr><operator>&amp;</operator><name><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>poslist</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5LookaheadReaderInit</name><argument_list>(<argument><expr><name><name>pPoslist</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pPoslist</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPoslist</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pOut</name> <operator>=</operator> <name>pPoslist</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iAdv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iMin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iMax</name></decl>;</decl_stmt>

    <comment type="block">/* This block advances the phrase iterators until they point to a set of
    ** entries that together comprise a match.  */</comment>
    <expr_stmt><expr><name>iMax</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>reader</name><operator>.</operator><name>iPos</name></name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5LookaheadReader</name> <modifier>*</modifier></type><name>pPos</name> <init>= <expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reader</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>iMin</name> <operator>=</operator> <name>iMax</name> <operator>-</operator> <name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nTerm</name> <operator>-</operator> <name><name>pNear</name><operator>-&gt;</operator><name>nNear</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>&lt;</operator><name>iMin</name> <operator>||</operator> <name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>&gt;</operator><name>iMax</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <while>while<condition>( <expr><name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>&lt;</operator><name>iMin</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>fts5LookaheadReaderNext</name><argument_list>(<argument><expr><name>pPos</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>ismatch_out</name>;</goto></block_content></block></if></if_stmt>
          </block_content>}</block></while>
          <if_stmt><if>if<condition>( <expr><name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name><operator>&gt;</operator><name>iMax</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iMax</name> <operator>=</operator> <name><name>pPos</name><operator>-&gt;</operator><name>iPos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block>while<condition>( <expr><name>bMatch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition>;</do>

    <comment type="block">/* Add an entry to each output position list */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iPos</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>reader</name><operator>.</operator><name>iPos</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5PoslistWriter</name> <modifier>*</modifier></type><name>pWriter</name> <init>= <expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>writer</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pOut</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>iPos</name><operator>!=</operator><name><name>pWriter</name><operator>-&gt;</operator><name>iPrev</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Fts5PoslistWriterAppend</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pOut</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>iPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>iAdv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>iMin</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>reader</name><operator>.</operator><name>iLookahead</name></name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>reader</name><operator>.</operator><name>iLookahead</name></name> <operator>&lt;</operator> <name>iMin</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iMin</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>reader</name><operator>.</operator><name>iLookahead</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>iAdv</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><call><name>fts5LookaheadReaderNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iAdv</name></expr>]</index></name><operator>.</operator><name>reader</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>ismatch_out</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <label><name>ismatch_out</name>:</label> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bRet</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pOut</name><operator>-&gt;</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name><operator>!=</operator><name>aStatic</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>bRet</name></expr>;</return>
  </block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
** Advance iterator pIter until it points to a value equal to or laster
** than the initial value of *piLast. If this means the iterator points
** to a value laster than *piLast, update *piLast to the new lastest value.
**
** If the iterator reaches EOF, set *pbEof to true before returning. If
** an error occurs, set *pRc to an error code. If either *pbEof or *pRc
** are set, return a non-zero value. Otherwise, return zero.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprAdvanceto</name><parameter_list>(
  <parameter><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,           <comment type="block">/* Iterator to advance */</comment>
  <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>,                      <comment type="block">/* True if iterator is "rowid DESC" */</comment>
  <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piLast</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Lastest rowid seen so far */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,                       <comment type="block">/* OUT: Error code */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbEof</name></decl></parameter>                      <comment type="block">/* OUT: Set to true if EOF */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLast</name> <init>= <expr><operator>*</operator><name>piLast</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>iRowid</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>bDesc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iLast</name><operator>&gt;</operator><name>iRowid</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bDesc</name> <operator>&amp;&amp;</operator> <name>iLast</name><operator>&lt;</operator><name>iRowid</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3Fts5IterNextFrom</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>||</operator> <call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pbEof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iRowid</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>bDesc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iRowid</name><operator>&gt;=</operator><name>iLast</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bDesc</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>iRowid</name><operator>&lt;=</operator><name>iLast</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>piLast</name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprSynonymAdvanceto</name><parameter_list>(
  <parameter><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>,            <comment type="block">/* Term iterator to advance */</comment>
  <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>,                      <comment type="block">/* True if iterator is "rowid DESC" */</comment>
  <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piLast</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Lastest rowid seen so far */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLast</name> <init>= <expr><operator>*</operator><name>piLast</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bEof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTerm</name></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>bDesc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iLast</name><operator>&gt;</operator><name>iRowid</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bDesc</name> <operator>&amp;&amp;</operator> <name>iLast</name><operator>&lt;</operator><name>iRowid</name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNextFrom</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bEof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piLast</name> <operator>=</operator> <call><name>fts5ExprSynonymRowid</name><argument_list>(<argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bEof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>bEof</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNearTest</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression that pNear is a part of */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>             <comment type="block">/* The "NEAR" node (FTS5_STRING) */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>*</operator><name>pRc</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>pTerm</name><operator>=</operator><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>pTerm</name></expr>;</condition> <incr><expr><name>pTerm</name><operator>=</operator><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pTerm</name><operator>-&gt;</operator><name>pIter</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Check that each phrase in the nearset matches the current row.
    ** Populate the pPhrase-&gt;poslist buffers at the same time. If any
    ** phrase is not a match, break out of the loop early.  */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name> <operator>||</operator> <name><name>pNear</name><operator>-&gt;</operator><name>pColset</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>bMatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprPhraseIsMatch</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>pPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>bMatch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <call><name>fts5ExprNearIsMatch</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pNear</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Initialize all term iterators in the pNear object. If any term is found
** to match no documents at all, return immediately without initializing any
** further iterators.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNearInitAll</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name> <init>= <expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bEof</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTerm</name></expr>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3Fts5IterClose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexQuery</name><argument_list>(
            <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTerm</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTerm</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pTerm</name><operator>-&gt;</operator><name>bPrefix</name></name></expr> ?</condition><then> <expr><name>FTS5INDEX_QUERY_PREFIX</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
            <operator>(</operator><ternary><condition><expr><name><name>pExpr</name><operator>-&gt;</operator><name>bDesc</name></name></expr> ?</condition><then> <expr><name>FTS5INDEX_QUERY_DESC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,
            <argument><expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name></name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pIter</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>bEof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if<condition>( <expr><name>bEof</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If pExpr is an ASC iterator, this function returns a value with the
** same sign as:
**
**   (iLhs - iRhs)
**
** Otherwise, if this is a DESC iterator, the opposite is returned:
**
**   (iRhs - iLhs)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5RowidCmp</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iLhs</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iRhs</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>bDesc</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>bDesc</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>bDesc</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iLhs</name><operator>&lt;</operator><name>iRhs</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>iLhs</name> <operator>&gt;</operator> <name>iRhs</name><operator>)</operator></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iLhs</name><operator>&gt;</operator><name>iRhs</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>iLhs</name> <operator>&lt;</operator> <name>iRhs</name><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprSetEof</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>fts5ExprSetEof</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprNodeZeroPoslist</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_STRING</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_TERM</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fts5ExprNodeZeroPoslist</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<comment type="block">/*
** Compare the values currently indicated by the two nodes as follows:
**
**    res = (*p1) - (*p2)
**
** Nodes that point to values that come later in the iteration order are
** considered to be larger. Nodes at EOF are the largest of all.
**
** This means that if the iteration order is ASC, then numerically larger
** rowids are considered larger. Or if it is the default DESC, numerically
** smaller rowids are larger.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5NodeCompare</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p2</name><operator>-&gt;</operator><name>bEof</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>bEof</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>fts5RowidCmp</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** All individual term iterators in pNear are guaranteed to be valid when
** this function is called. This function checks if all term iterators
** point to the same rowid, and if not, advances them until they do.
** If an EOF is reached before this happens, *pbEof is set to true before
** returning.
**
** SQLITE_OK is returned if an error occurs, or an SQLite error code 
** otherwise. It is not considered an error code if an iterator reaches
** EOF.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeTest_STRING</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression pPhrase belongs to */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pLeft</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLast</name></decl>;</decl_stmt>                      <comment type="block">/* Lastest rowid any iterator points to */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>                       <comment type="block">/* Phrase and token index, respectively */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bMatch</name></decl>;</decl_stmt>                     <comment type="block">/* True if all terms are at the same rowid */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bDesc</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>bDesc</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that this node should not be FTS5_TERM */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>&gt;</operator><literal type="number">1</literal> 
       <operator>||</operator> <name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nTerm</name><operator>&gt;</operator><literal type="number">1</literal> 
       <operator>||</operator> <name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize iLast, the "lastest" rowid any iterator points to. If the
  ** iterator skips through rowids in the default ascending order, this means
  ** the maximum rowid. Or, if the iterator is "ORDER BY rowid DESC", then it
  ** means the minimum rowid.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pLeft</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iLast</name> <operator>=</operator> <call><name>fts5ExprSynonymRowid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeft</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>iLast</name> <operator>=</operator> <name><name>pLeft</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name> <init>= <expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>fts5ExprSynonymRowid</name><argument_list>(<argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>iRowid</name><operator>==</operator><name>iLast</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>fts5ExprSynonymAdvanceto</name><argument_list>(<argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><name>rc</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name>iLast</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>fts5ExprAdvanceto</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <return>return <expr><name>rc</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block>while<condition>( <expr><name>bMatch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition>;</do>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name>iLast</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">0</literal><operator>==</operator><call><name>fts5ExprNearTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Advance the first term iterator in the first phrase of pNear. Set output
** variable *pbEof to true if it reaches EOF or if an error occurs.
**
** Return SQLITE_OK if successful, or an SQLite error code if an error
** occurs.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeNext_STRING</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression pPhrase belongs to */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,            <comment type="block">/* FTS5_STRING or FTS5_TERM node */</comment>
  <parameter><decl><type><name>int</name></type> <name>bFromValid</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iFrom</name></decl></parameter> 
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name> <init>= <expr><operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bEof</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <comment type="block">/* Find the firstest rowid any synonym points to. */</comment>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>fts5ExprSynonymRowid</name><argument_list>(<argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>bDesc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Advance each iterator that currently points to iRowid. Or, if iFrom
    ** is valid - each iterator that points to a rowid before iFrom.  */</comment>
    <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTerm</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>ii</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>ii</name><operator>==</operator><name>iRowid</name> 
         <operator>||</operator> <operator>(</operator><name>bFromValid</name> <operator>&amp;&amp;</operator> <name>ii</name><operator>!=</operator><name>iFrom</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ii</name><operator>&gt;</operator><name>iFrom</name><operator>)</operator><operator>==</operator><name><name>pExpr</name><operator>-&gt;</operator><name>bDesc</name></name><operator>)</operator></expr> 
        )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>bFromValid</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNextFrom</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNext</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>bEof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>bEof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Set the EOF flag if either all synonym iterators are at EOF or an
    ** error has occurred.  */</comment>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <operator>(</operator><name>rc</name> <operator>||</operator> <name>bEof</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pTerm</name><operator>-&gt;</operator><name>pIter</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>Fts5NodeIsString</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bFromValid</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNextFrom</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <operator>(</operator><name>rc</name> <operator>||</operator> <call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_STRING</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeTest_TERM</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression that pNear is a part of */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>             <comment type="block">/* The "NEAR" node (FTS5_TERM) */</comment>
)</parameter_list><block>{<block_content>
  <comment type="block">/* As this "NEAR" object is actually a single phrase that consists 
  ** of a single term only, grab pointers into the poslist managed by the
  ** fts5_index.c iterator object. This is much faster than synthesizing 
  ** a new poslist the way we have to for more complicated phrase or NEAR
  ** expressions.  */</comment>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_TERM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <operator>(</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xNext() method for a node of type FTS5_TERM.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeNext_TERM</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bFromValid</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iFrom</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>bFromValid</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNextFrom</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_TERM</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprNodeTest_OR</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression of which pNode is a part */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>             <comment type="block">/* Expression node to test */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNext</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pChild</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>fts5NodeCompare</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNext</name></expr></argument>, <argument><expr><name>pChild</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>cmp</name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>cmp</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pChild</name><operator>-&gt;</operator><name>bNomatch</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name>pChild</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pNext</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <name><name>pNext</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <name><name>pNext</name><operator>-&gt;</operator><name>bNomatch</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeNext_OR</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bFromValid</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iFrom</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLast</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>bEof</name></name> <operator>||</operator> <call><name>fts5RowidCmp</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name>iLast</name><operator>)</operator> 
       <operator>||</operator> <operator>(</operator><name>bFromValid</name> <operator>&amp;&amp;</operator> <call><name>fts5RowidCmp</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>
      )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>bFromValid</name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>fts5ExprNodeTest_OR</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Argument pNode is an FTS5_AND node.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeTest_AND</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression pPhrase belongs to */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pAnd</name></decl></parameter>              <comment type="block">/* FTS5_AND node to advance */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLast</name> <init>= <expr><name><name>pAnd</name><operator>-&gt;</operator><name>iRowid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bMatch</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pAnd</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name><name>pAnd</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iChild</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iChild</name><operator>&lt;</operator><name><name>pAnd</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>iChild</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pChild</name> <init>= <expr><name><name>pAnd</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>iChild</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>fts5RowidCmp</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>, <argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>cmp</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Advance pChild until it points to iLast or laster */</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pChild</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* If the child node is now at EOF, so is the parent AND node. Otherwise,
      ** the child node is guaranteed to have advanced at least as far as
      ** rowid iLast. So if it is not at exactly iLast, pChild-&gt;iRowid is the
      ** new lastest rowid seen so far.  */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>bEof</name></name> <operator>||</operator> <call><name>fts5RowidCmp</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>, <argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pChild</name><operator>-&gt;</operator><name>bEof</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5ExprSetEof</name><argument_list>(<argument><expr><name>pAnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iLast</name><operator>!=</operator><name><name>pChild</name><operator>-&gt;</operator><name>iRowid</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>bMatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>iLast</name> <operator>=</operator> <name><name>pChild</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>pChild</name><operator>-&gt;</operator><name>bNomatch</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pAnd</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block>while<condition>( <expr><name>bMatch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition>;</do>

  <if_stmt><if>if<condition>( <expr><name><name>pAnd</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>&amp;&amp;</operator> <name>pAnd</name><operator>!=</operator><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5ExprNodeZeroPoslist</name><argument_list>(<argument><expr><name>pAnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pAnd</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name>iLast</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeNext_AND</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bFromValid</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iFrom</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bFromValid</name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_AND</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeTest_NOT</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression pPhrase belongs to */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>             <comment type="block">/* FTS5_NOT node to advance */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p1</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>fts5NodeCompare</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>cmp</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>fts5NodeCompare</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>cmp</name><operator>&lt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cmp</name> <operator>||</operator> <name><name>p2</name><operator>-&gt;</operator><name>bNomatch</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>bNomatch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>bEof</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5ExprNodeZeroPoslist</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeNext_NOT</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bFromValid</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iFrom</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bFromValid</name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_NOT</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If pNode currently points to a match, this function returns SQLITE_OK
** without modifying it. Otherwise, pNode is advanced until it does point
** to a match or EOF is reached.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeTest</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,                <comment type="block">/* Expression of which pNode is a part */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>             <comment type="block">/* Expression node to test */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>

      <case>case <expr><name>FTS5_STRING</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_STRING</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>FTS5_TERM</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_TERM</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>FTS5_AND</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_AND</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>FTS5_OR</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>fts5ExprNodeTest_OR</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>

      <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_NOT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest_NOT</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

 
<comment type="block">/*
** Set node pNode, which is part of expression pExpr, to point to the first
** match. If there are no matches, set the Node.bEof flag to indicate EOF.
**
** Return an SQLite error code if an error occurs, or SQLITE_OK otherwise.
** It is not an error if there are no matches.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprNodeFirst</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bNomatch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>Fts5NodeIsString</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <comment type="block">/* Initialize all term iterators in the NEAR object. */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNearInitAll</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nEof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pChild</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeFirst</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pChild</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nEof</name> <operator>+=</operator> <name><name>pChild</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>iRowid</name></expr>;</expr_stmt>

    <switch>switch<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>FTS5_AND</name></expr>:</case>
        <if_stmt><if>if<condition>( <expr><name>nEof</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fts5ExprSetEof</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><name>FTS5_OR</name></expr>:</case>
        <if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name><operator>==</operator><name>nEof</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fts5ExprSetEof</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>

      <default>default:</default>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_NOT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>bEof</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeTest</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Begin iterating through the set of documents in index pIdx matched by
** the MATCH expression passed as the first argument. If the "bDesc" 
** parameter is passed a non-zero value, iteration is in descending rowid 
** order. Or, if it is zero, in ascending order.
**
** If iterating in ascending rowid order (bDesc==0), the first document
** visited is that with the smallest rowid that is larger than or equal
** to parameter iFirst. Or, if iterating in ascending order (bDesc==1),
** then the first document visited must have a rowid smaller than or
** equal to iFirst.
**
** Return SQLITE_OK if successful, or an SQLite error code otherwise. It
** is not considered an error if the query does not match any documents.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprFirst</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIdx</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iFirst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pRoot</name><operator>-&gt;</operator><name>xNext</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <name>pIdx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bDesc</name></name> <operator>=</operator> <name>bDesc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeFirst</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If not at EOF but the current rowid occurs earlier than iFirst in
    ** the iteration order, move to document iFirst or later. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pRoot</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fts5RowidCmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the iterator is not at a real match, skip forward until it is. */</comment>
    <while>while<condition>( <expr><name><name>pRoot</name><operator>-&gt;</operator><name>bNomatch</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Move to the next document 
**
** Return SQLITE_OK if successful, or an SQLite error code otherwise. It
** is not considered an error if the query does not match any documents.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprNext</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iLast</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pRoot</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>bNomatch</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprNodeNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>bNomatch</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name><name>pRoot</name><operator>-&gt;</operator><name>bNomatch</name></name></expr> )</condition>;</do>
  <if_stmt><if>if<condition>( <expr><call><name>fts5RowidCmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pRoot</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5ExprEof</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>i64</name></type> <name>sqlite3Fts5ExprRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ParseStringFromToken</name><parameter_list>(<parameter><decl><type><name>Fts5Token</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pz</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pz</name> <operator>=</operator> <call><name>sqlite3Fts5Strndup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pToken</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free the phrase object passed as the only argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprPhraseFree</name><parameter_list>(<parameter><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pPhrase</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pSyn</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name> <init>= <expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>zTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5IterClose</name><argument_list>(<argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pSyn</name><operator>=</operator><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr>;</init> <condition><expr><name>pSyn</name></expr>;</condition> <incr><expr><name>pSyn</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pSyn</name><operator>-&gt;</operator><name>pSynonym</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5IterClose</name><argument_list>(<argument><expr><name><name>pSyn</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Buffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSyn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pSyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>nSpace</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pPhrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** If argument pNear is NULL, then a new Fts5ExprNearset object is allocated
** and populated with pPhrase. Or, if pNear is not NULL, phrase pPhrase is
** appended to it and the results returned.
**
** If an OOM error occurs, both the pNear and pPhrase objects are freed and
** NULL returned.
*/</comment>
<function><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>sqlite3Fts5ParseNearset</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,              <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name></decl></parameter>,         <comment type="block">/* Existing nearset, or NULL */</comment>
  <parameter><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name></decl></parameter>         <comment type="block">/* Recently parsed phrase */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SZALLOC</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pPhrase</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <return>return <expr><name>pNear</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNear</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNearset</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>SZALLOC</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprPhrase</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>%</operator> <name>SZALLOC</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>+</operator> <name>SZALLOC</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNearset</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nNew</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprPhrase</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <operator>(</operator><name>Fts5ExprNearset</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>pNear</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <name>pNear</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5ParseNearsetFree</name><argument_list>(<argument><expr><name>pNear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5ParsePhraseFree</name><argument_list>(<argument><expr><name>pPhrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name><name>pRet</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pPhrase</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>TokenCtx</name></name></type> <name>TokenCtx</name>;</typedef>
<struct>struct <name>TokenCtx</name> <block>{
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** Callback for tokenizing terms used by ParseTerm().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ParseTokenize</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>,                 <comment type="block">/* Pointer to Fts5InsertCtx object */</comment>
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,                     <comment type="block">/* Mask of FTS5_TOKEN_* flags */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,             <comment type="block">/* Buffer containing token */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                     <comment type="block">/* Size of token in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused1</name></decl></parameter>,                   <comment type="block">/* Start offset of token */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused2</name></decl></parameter>                    <comment type="block">/* End offset of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SZALLOC</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TokenCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>TokenCtx</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pPhrase</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>iUnused1</name></expr></argument>, <argument><expr><name>iUnused2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If an error has already occurred, this is a no-op */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pCtx</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name><name>pCtx</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPhrase</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pPhrase</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tflags</name> <operator>&amp;</operator> <name>FTS5_TOKEN_COLOCATED</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pSyn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprTerm</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nToken</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pSyn</name> <operator>=</operator> <operator>(</operator><name>Fts5ExprTerm</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pSyn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pSyn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSyn</name><operator>-&gt;</operator><name>zTerm</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pSyn</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprTerm</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSyn</name><operator>-&gt;</operator><name>zTerm</name></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSyn</name><operator>-&gt;</operator><name>pSynonym</name></name> <operator>=</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name> <operator>=</operator> <name>pSyn</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pPhrase</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name> <operator>%</operator> <name>SZALLOC</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name>SZALLOC</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>pPhrase</name></expr> ?</condition><then> <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5ExprPhrase</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>pPhrase</name></expr></argument>, 
          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprPhrase</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprTerm</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nNew</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>pPhrase</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprPhrase</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pPhrase</name></name> <operator>=</operator> <name>pPhrase</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nTerm</name></name> <operator>=</operator> <name>nNew</name> <operator>-</operator> <name>SZALLOC</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pTerm</name> <operator>=</operator> <operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pTerm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprTerm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTerm</name><operator>-&gt;</operator><name>zTerm</name></name> <operator>=</operator> <call><name>sqlite3Fts5Strndup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Free the phrase object passed as the only argument.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5ParsePhraseFree</name><parameter_list>(<parameter><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5ExprPhraseFree</name><argument_list>(<argument><expr><name>pPhrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Free the phrase object passed as the second argument.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5ParseNearsetFree</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pNear</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fts5ExprPhraseFree</name><argument_list>(<argument><expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pNear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5ParseFinished</name><parameter_list>(<parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pExpr</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is called by the parser to process a string token. The
** string may or may not be quoted. In any case it is tokenized and a
** phrase object consisting of all tokens returned.
*/</comment>
<function><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>sqlite3Fts5ParseTerm</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,              <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pAppend</name></decl></parameter>,        <comment type="block">/* Phrase to append to */</comment>
  <parameter><decl><type><name>Fts5Token</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,              <comment type="block">/* String to tokenize */</comment>
  <parameter><decl><type><name>int</name></type> <name>bPrefix</name></decl></parameter>                     <comment type="block">/* True if there is a trailing "*" */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TokenCtx</name></type> <name>sCtx</name></decl>;</decl_stmt>                  <comment type="block">/* Context object passed to callback */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Tokenize return code */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TokenCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name> <operator>=</operator> <name>pAppend</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ParseStringFromToken</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>FTS5_TOKENIZE_QUERY</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>bPrefix</name></expr> ?</condition><then> <expr><name>FTS5_TOKENIZE_QUERY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5Dequote</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5Tokenize</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><name>fts5ParseTokenize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>||</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <name><name>sCtx</name><operator>.</operator><name>rc</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5ExprPhraseFree</name><argument_list>(<argument><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr> )</condition><block>{<block_content>

    <if_stmt><if>if<condition>( <expr><name>pAppend</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pParse</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprPhrase</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pParse</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNew</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>apNew</name> <operator>=</operator> <operator>(</operator><name>Fts5ExprPhrase</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>apPhrase</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>apNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5ExprPhraseFree</name><argument_list>(<argument><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>apPhrase</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name><name>pParse</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bPrefix</name> <operator>=</operator> <name>bPrefix</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create a new FTS5 expression by cloning phrase iPhrase of the
** expression passed as the second argument.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprClonePhrase</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pOrig</name></decl>;</decl_stmt>          <comment type="block">/* The phrase extracted from pExpr */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Used to iterate through phrase terms */</comment>
  <decl_stmt><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Expression to return via *ppNew */</comment>
  <decl_stmt><decl><type><name>TokenCtx</name></type> <name>sCtx</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>          <comment type="block">/* Context object for fts5ParseTokenize */</comment>

  <expr_stmt><expr><name>pOrig</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>iPhrase</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5Expr</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Expr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>apExprPhrase</name></name> <operator>=</operator> <operator>(</operator><name>Fts5ExprPhrase</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, 
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprPhrase</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>Fts5ExprNode</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, 
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>pNear</name></name> <operator>=</operator> <operator>(</operator><name>Fts5ExprNearset</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, 
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNearset</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprPhrase</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pOrig</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>tflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>p</name><operator>=</operator><operator>&amp;</operator><name><name>pOrig</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>zTerm</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ParseTokenize</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><name>tflags</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zTerm</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tflags</name> <operator>=</operator> <name>FTS5_TOKEN_COLOCATED</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPrefix</name> <operator>=</operator> <name><name>pOrig</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPrefix</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* All the allocations succeeded. Put the expression object together. */</comment>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pConfig</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>pConfig</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pOrig</name><operator>-&gt;</operator><name>nTerm</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pOrig</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name>FTS5_TERM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5ExprNodeNext_TERM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name>FTS5_STRING</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5ExprNodeNext_STRING</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5ExprFree</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5ExprPhraseFree</name><argument_list>(<argument><expr><name><name>sCtx</name><operator>.</operator><name>pPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Token pTok has appeared in a MATCH expression where the NEAR operator
** is expected. If token pTok does not contain "NEAR", store an error
** in the pParse object.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5ParseNear</name><parameter_list>(<parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Fts5Token</name> <modifier>*</modifier></type><name>pTok</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pTok</name><operator>-&gt;</operator><name>n</name></name><operator>!=</operator><literal type="number">4</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"NEAR"</literal></expr></argument>, <argument><expr><name><name>pTok</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5ParseError</name><argument_list>(
        <argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"fts5: syntax error near \"%.*s\""</literal></expr></argument>, <argument><expr><name><name>pTok</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pTok</name><operator>-&gt;</operator><name>p</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5ParseSetDistance</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Token</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nNear</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Fts5ParseError</name><argument_list>(
            <argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"expected integer, got \"%.*s\""</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>nNear</name> <operator>=</operator> <name>nNear</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nNear</name> <operator>=</operator> <name>FTS5_DEFAULT_NEARDIST</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pNear</name><operator>-&gt;</operator><name>nNear</name></name> <operator>=</operator> <name>nNear</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The second argument passed to this function may be NULL, or it may be
** an existing Fts5Colset object. This function returns a pointer to
** a new colset object containing the contents of (p) with new value column
** number iCol appended. 
**
** If an OOM error occurs, store an error code in pParse and return NULL.
** The old colset object (if any) is not freed in this case.
*/</comment>
<function><type><specifier>static</specifier> <name>Fts5Colset</name> <modifier>*</modifier></type><name>fts5ParseColset</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,              <comment type="block">/* Store SQLITE_NOMEM here if required */</comment>
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                  <comment type="block">/* Existing colset object */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>                        <comment type="block">/* New column to add to colset object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>     <comment type="block">/* Num. columns already in colset object */</comment>
  <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>               <comment type="block">/* New colset object to return */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iCol</name><operator>&lt;</operator><name><name>pParse</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Colset</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiCol</name> <init>= <expr><name><name>pNew</name><operator>-&gt;</operator><name>aiCol</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>iCol</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>pNew</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>iCol</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>nCol</name></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>aiCol</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>aiCol</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <name>nCol</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
    <comment type="block">/* Check that the array is in order and contains no duplicate entries. */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNew</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aiCol</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>sqlite3Fts5ParseColset</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,              <comment type="block">/* Store SQLITE_NOMEM here if required */</comment>
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>,            <comment type="block">/* Existing colset object */</comment>
  <parameter><decl><type><name>Fts5Token</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>                        <comment type="block">/* Dequoted copy of token p */</comment>

  <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3Fts5Strndup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5Dequote</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iCol</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iCol</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>azCol</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5ParseError</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"no such column: %s"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>fts5ParseColset</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pColset</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pColset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5ParseSetColset</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter> 
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
      <argument><expr><literal type="string">"fts5: column queries are not supported (detail=none)"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pColset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pNear</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name></name> <operator>=</operator> <name>pColset</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pColset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprAssignXNext</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <switch>switch<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>FTS5_STRING</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nTerm</name><operator>==</operator><literal type="number">1</literal> 
       <operator>&amp;&amp;</operator> <name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pSynonym</name><operator>==</operator><literal type="number">0</literal></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name>FTS5_TERM</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5ExprNodeNext_TERM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5ExprNodeNext_STRING</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block><empty_stmt>;</empty_stmt>

    <case>case <expr><name>FTS5_OR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5ExprNodeNext_OR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block><empty_stmt>;</empty_stmt>

    <case>case <expr><name>FTS5_AND</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5ExprNodeNext_AND</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block><empty_stmt>;</empty_stmt>

    <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_NOT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
      <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5ExprNodeNext_NOT</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block><empty_stmt>;</empty_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprAddChildren</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pSub</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>FTS5_NOT</name> <operator>&amp;&amp;</operator> <name><name>pSub</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pSub</name><operator>-&gt;</operator><name>nChild</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nChild</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSub</name><operator>-&gt;</operator><name>apChild</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nChild</name></name> <operator>+=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nChild</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pSub</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Allocate and return a new expression object. If anything goes wrong (i.e.
** OOM error), leave an error code in pParse and return NULL.
*/</comment>
<function><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>sqlite3Fts5ParseNode</name><parameter_list>(
  <parameter><decl><type><name>Fts5Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,              <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>,                      <comment type="block">/* FTS5_STRING, AND, OR or NOT */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pLeft</name></decl></parameter>,            <comment type="block">/* Left hand child expression */</comment>
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pRight</name></decl></parameter>,           <comment type="block">/* Right hand child expression */</comment>
  <parameter><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name></decl></parameter>          <comment type="block">/* For STRING expressions, the near cluster */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nChild</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Number of children of returned node */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                    <comment type="block">/* Bytes of space to allocate for this node */</comment>
 
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>eType</name><operator>!=</operator><name>FTS5_STRING</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pNear</name><operator>)</operator>
         <operator>||</operator> <operator>(</operator><name>eType</name><operator>==</operator><name>FTS5_STRING</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pLeft</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pRight</name><operator>)</operator></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>FTS5_STRING</name> <operator>&amp;&amp;</operator> <name>pNear</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>!=</operator><name>FTS5_STRING</name> <operator>&amp;&amp;</operator> <name>pLeft</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>pRight</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>!=</operator><name>FTS5_STRING</name> <operator>&amp;&amp;</operator> <name>pRight</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>pLeft</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>FTS5_NOT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nChild</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eType</name><operator>==</operator><name>FTS5_AND</name> <operator>||</operator> <name>eType</name><operator>==</operator><name>FTS5_OR</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nChild</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pLeft</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>eType</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nChild</name> <operator>+=</operator> <name><name>pLeft</name><operator>-&gt;</operator><name>nChild</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pRight</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>eType</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nChild</name> <operator>+=</operator> <name><name>pRight</name><operator>-&gt;</operator><name>nChild</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5ExprNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>nChild</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRet</name> <operator>=</operator> <operator>(</operator><name>Fts5ExprNode</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name>eType</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>pNear</name></name> <operator>=</operator> <name>pNear</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5ExprAssignXNext</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>FTS5_STRING</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iPhrase</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>iPhrase</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iPhrase</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>iPhrase</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>iPhrase</name></expr>]</index></name><operator>-&gt;</operator><name>pNode</name> <operator>=</operator> <name>pRet</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_FULL</name> 
         <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>!=</operator><literal type="number">1</literal> <operator>||</operator> <name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nTerm</name><operator>!=</operator><literal type="number">1</literal><operator>)</operator></expr>
        )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>zErr</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
              <argument><expr><literal type="string">"fts5: %s queries are not supported (detail!=full)"</literal></expr></argument>, 
              <argument><expr><ternary><condition><expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"phrase"</literal></expr></then><else>: <expr><literal type="string">"NEAR"</literal></expr></else></ternary></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fts5ExprAddChildren</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5ExprAddChildren</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5ParseNodeFree</name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5ParseNodeFree</name><argument_list>(<argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5ParseNearsetFree</name><argument_list>(<argument><expr><name>pNear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fts5ExprTermPrint</name><parameter_list>(<parameter><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zQuoted</name></decl>;</decl_stmt>

  <comment type="block">/* Determine the maximum amount of space required. */</comment>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTerm</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>zTerm</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>zQuoted</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>zQuoted</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTerm</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>zTerm</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <while>while<condition>( <expr><operator>*</operator><name>zIn</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zIn</name><operator>==</operator><literal type="char">'"'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>zIn</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pSynonym</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>bPrefix</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>zQuoted</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zQuoted</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fts5PrintfAppend</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zApp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zNew</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zApp</name> <operator>&amp;&amp;</operator> <name>zNew</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNew2</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>zApp</name></expr></argument>, <argument><expr><name>zNew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zNew</name> <operator>=</operator> <name>zNew2</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zApp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zNew</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Compose a tcl-readable representation of expression pExpr. Return a 
** pointer to a buffer containing that representation. It is the 
** responsibility of the caller to at some point free the buffer using 
** sqlite3_free().
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fts5ExprPrintTcl</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNearsetCmd</name></decl></parameter>,
  <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_STRING</name> <operator>||</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_TERM</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pNear</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>iTerm</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>zNearsetCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiCol</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name><operator>-&gt;</operator><name>aiCol</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>nCol</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"-col %d "</literal></expr></argument>, <argument><expr><name><name>aiCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"-col {%d"</literal></expr></argument>, <argument><expr><name><name>aiCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"} "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"-near %d "</literal></expr></argument>, <argument><expr><name><name>pNear</name><operator>-&gt;</operator><name>nNear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">" {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iTerm</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>zRet</name> <operator>&amp;&amp;</operator> <name>iTerm</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>iTerm</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>iTerm</name></expr>]</index></name><operator>.</operator><name>zTerm</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>iTerm</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="string">""</literal></expr></then><else>:<expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>iTerm</name></expr>]</index></name><operator>.</operator><name>bPrefix</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if<condition>( <expr><name>zRet</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zOp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <switch>switch<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>FTS5_AND</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"AND"</literal></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>FTS5_NOT</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"NOT"</literal></expr>;</expr_stmt> <break>break;</break>
      <default>default:</default> 
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_OR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"OR"</literal></expr>;</expr_stmt> 
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>zRet</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>fts5ExprPrintTcl</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>zNearsetCmd</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>z</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">" [%z]"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>fts5ExprPrint</name><parameter_list>(<parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_STRING</name> <operator>||</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_TERM</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprNearset</name> <modifier>*</modifier></type><name>pNear</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pNear</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>iTerm</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>pColset</name><operator>-&gt;</operator><name>aiCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"%s : "</literal></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>azCol</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"NEAR("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>iTerm</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iTerm</name><operator>&lt;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>nTerm</name></name></expr>;</condition> <incr><expr><name>iTerm</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><call><name>fts5ExprTermPrint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><name>iTerm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>zTerm</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>iTerm</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="string">""</literal></expr></then><else>:<expr><literal type="string">" + "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>zTerm</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name><name>pNear</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">", %d)"</literal></expr></argument>, <argument><expr><name><name>pNear</name><operator>-&gt;</operator><name>nNear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zOp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <switch>switch<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>FTS5_AND</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">" AND "</literal></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>FTS5_NOT</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">" NOT "</literal></expr>;</expr_stmt> <break>break;</break>
      <default>default:</default>  
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_OR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">" OR "</literal></expr>;</expr_stmt> 
        <break>break;</break>
    </block_content>}</block></switch>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>fts5ExprPrint</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>eType</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>e</name><operator>!=</operator><name>FTS5_STRING</name> <operator>&amp;&amp;</operator> <name>e</name><operator>!=</operator><name>FTS5_TERM</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>fts5PrintfAppend</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"%s%s%z%s"</literal></expr></argument>, 
            <argument><expr><operator>(</operator><ternary><condition><expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name>zOp</name></expr></else></ternary><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"("</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">")"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The implementation of user-defined scalar functions fts5_expr() (bTcl==0)
** and fts5_expr_tcl() (bTcl!=0).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprFunction</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>,          <comment type="block">/* Function arguments */</comment>
  <parameter><decl><type><name>int</name></type> <name>bTcl</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExpr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azConfig</name></decl>;</decl_stmt>          <comment type="block">/* Array of arguments for Fts5Config */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNearsetCmd</name> <init>= <expr><literal type="string">"nearset"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nConfig</name></decl>;</decl_stmt>                    <comment type="block">/* Size of azConfig[] */</comment>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"wrong number of arguments to function %s"</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><name>bTcl</name></expr> ?</condition><then> <expr><literal type="string">"fts5_expr_tcl"</literal></expr> </then><else>: <expr><literal type="string">"fts5_expr"</literal></expr></else></ternary></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>bTcl</name> <operator>&amp;&amp;</operator> <name>nArg</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zNearsetCmd</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iArg</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>nConfig</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>nArg</name><operator>-</operator><name>iArg</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>azConfig</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>azConfig</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>azConfig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>azConfig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"main"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>azConfig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"tbl"</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>iArg</name><operator>&lt;</operator><name>nArg</name></expr>;</condition> <incr><expr><name>iArg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>azConfig</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>zExpr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ConfigParse</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>nConfig</name></expr></argument>, <argument><expr><name>azConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprNew</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>zExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zText</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>xNext</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zText</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>bTcl</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zText</name> <operator>=</operator> <call><name>fts5ExprPrintTcl</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>zNearsetCmd</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zText</name> <operator>=</operator> <call><name>fts5ExprPrint</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>zText</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>azConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5ConfigFree</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5ExprFree</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprFunctionHr</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5ExprFunction</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprFunctionTcl</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5ExprFunction</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The implementation of an SQLite user-defined-function that accepts a
** single integer as an argument. If the integer is an alpha-numeric 
** unicode code point, 1 is returned. Otherwise 0.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprIsAlnum</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iCode</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, 
        <argument><expr><literal type="string">"wrong number of arguments to function fts5_isalnum"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>iCode</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3Fts5UnicodeIsalnum</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprFold</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>!=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nArg</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, 
        <argument><expr><literal type="string">"wrong number of arguments to function fts5_fold"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iCode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bRemoveDiacritics</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>iCode</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bRemoveDiacritics</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3Fts5UnicodeFold</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>, <argument><expr><name>bRemoveDiacritics</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This is called during initialization to register the fts5_expr() scalar
** UDF with the SQLite handle passed as the only argument.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprInit</name><parameter_list>(<parameter><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Fts5ExprFunc</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>x</name>)<parameter_list>(<parameter><decl><type><name>sqlite3_context</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>sqlite3_value</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block> <decl><name><name>aFunc</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"fts5_expr"</literal></expr>,     <expr><name>fts5ExprFunctionHr</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fts5_expr_tcl"</literal></expr>, <expr><name>fts5ExprFunctionTcl</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fts5_isalnum"</literal></expr>,  <expr><name>fts5ExprIsAlnum</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fts5_fold"</literal></expr>,     <expr><name>fts5ExprFold</name></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pGlobal</name></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aFunc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>Fts5ExprFunc</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aFunc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Avoid a warning indicating that sqlite3Fts5ParserTrace() is unused */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sqlite3Fts5ParserTrace</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of phrases in expression pExpr.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprPhraseCount</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>pExpr</name></expr> ?</condition><then> <expr><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of terms in the iPhrase'th phrase in pExpr.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprPhraseSize</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>iPhrase</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>iPhrase</name><operator>&gt;=</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>iPhrase</name></expr>]</index></name><operator>-&gt;</operator><name>nTerm</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is used to access the current position list for phrase
** iPhrase.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprPoslist</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>iPhrase</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>iRowid</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRet</name> <operator>=</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>nRet</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>Fts5PoslistPopulator</name> <block>{
  <decl_stmt><decl><type><name>Fts5PoslistWriter</name></type> <name>writer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bOk</name></decl>;</decl_stmt>                        <comment type="block">/* True if ok to populate */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bMiss</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>Fts5PoslistPopulator</name> <modifier>*</modifier></type><name>sqlite3Fts5ExprClearPoslists</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bLive</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5PoslistPopulator</name> <modifier>*</modifier></type><name>pRet</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5PoslistPopulator</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5PoslistPopulator</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><operator>&amp;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>poslist</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nTerm</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bLive</name> <operator>&amp;&amp;</operator> 
          <operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name><operator>!=</operator><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name><operator>)</operator></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pRet</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bMiss</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>Fts5ExprCtx</name> <block>{
  <decl_stmt><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5PoslistPopulator</name> <modifier>*</modifier></type><name>aPopulator</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>Fts5ExprCtx</name></name></type> <name>Fts5ExprCtx</name>;</typedef>

<comment type="block">/*
** TODO: Make this more efficient!
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprColsetTest</name><parameter_list>(<parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pColset</name><operator>-&gt;</operator><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>iCol</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprPopulatePoslistsCb</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,                <comment type="block">/* Copy of 2nd argument to xTokenize() */</comment>
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,                <comment type="block">/* Mask of FTS5_TOKEN_* flags */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,        <comment type="block">/* Pointer to buffer containing token */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                <comment type="block">/* Size of token in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused1</name></decl></parameter>,              <comment type="block">/* Byte offset of token within input text */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused2</name></decl></parameter>               <comment type="block">/* Byte offset of end of token within input text */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprCtx</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Fts5ExprCtx</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>iUnused1</name></expr></argument>, <argument><expr><name>iUnused2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>tflags</name> <operator>&amp;</operator> <name>FTS5_TOKEN_COLOCATED</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aPopulator</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bOk</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>pTerm</name><operator>=</operator><operator>&amp;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>pTerm</name></expr>;</condition> <incr><expr><name>pTerm</name><operator>=</operator><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>zTerm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nTerm</name><operator>==</operator><name>nToken</name> <operator>||</operator> <operator>(</operator><name>nTerm</name><operator>&lt;</operator><name>nToken</name> <operator>&amp;&amp;</operator> <name><name>pTerm</name><operator>-&gt;</operator><name>bPrefix</name></name><operator>)</operator><operator>)</operator>
       <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>zTerm</name></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
      )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3Fts5PoslistWriterAppend</name><argument_list>(
            <argument><expr><operator>&amp;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>poslist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aPopulator</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>writer</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5ExprPopulatePoslists</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5PoslistPopulator</name> <modifier>*</modifier></type><name>aPopulator</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprCtx</name></type> <name>sCtx</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pExpr</name></name> <operator>=</operator> <name>pExpr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>aPopulator</name></name> <operator>=</operator> <name>aPopulator</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>iOff</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name>iCol</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>pNode</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name> <init>= <expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>pColset</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>pColset</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>fts5ExprColsetTest</name><argument_list>(<argument><expr><name>pColset</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call><operator>)</operator> 
     <operator>||</operator> <name><name>aPopulator</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bMiss</name></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>aPopulator</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bOk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>aPopulator</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bOk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><call><name>sqlite3Fts5Tokenize</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, 
      <argument><expr><name>FTS5_TOKENIZE_DOCUMENT</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><name>fts5ExprPopulatePoslistsCb</name></expr></argument>
  )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprClearPoslists</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_TERM</name> <operator>||</operator> <name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_STRING</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>poslist</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fts5ExprClearPoslists</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExprCheckPoslists</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>FTS5_TERM</name></expr>:</case>
    <case>case <expr><name>FTS5_STRING</name></expr>:</case>
      <return>return <expr><operator>(</operator><name><name>pNode</name><operator>-&gt;</operator><name>pNear</name><operator>-&gt;</operator><name>apPhrase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>poslist</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

    <case>case <expr><name>FTS5_AND</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5ExprCheckPoslists</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fts5ExprClearPoslists</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>FTS5_OR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5ExprCheckPoslists</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>bRet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <return>return <expr><name>bRet</name></expr>;</return>
    </block_content>}</block>

    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_NOT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>fts5ExprCheckPoslists</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call>
          <operator>||</operator> <literal type="number">0</literal><operator>!=</operator><call><name>fts5ExprCheckPoslists</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>
        )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5ExprClearPoslists</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5ExprCheckPoslists</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5ExprCheckPoslists</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ExprClearEof</name><parameter_list>(<parameter><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pNode</name><operator>-&gt;</operator><name>nChild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>fts5ExprClearEof</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>apChild</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3Fts5ExprClearEof</name><parameter_list>(<parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5ExprClearEof</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is only called for detail=columns tables. 
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5ExprPhraseCollist</name><parameter_list>(
  <parameter><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCollist</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnCollist</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5ExprPhrase</name> <modifier>*</modifier></type><name>pPhrase</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>apExprPhrase</name><index>[<expr><name>iPhrase</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5ExprNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pPhrase</name><operator>-&gt;</operator><name>pNode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iPhrase</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iPhrase</name><operator>&lt;</operator><name><name>pExpr</name><operator>-&gt;</operator><name>nPhrase</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pNode</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> 
   <operator>&amp;&amp;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name><name>pExpr</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>iRowid</name></name> 
   <operator>&amp;&amp;</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5ExprTerm</name> <modifier>*</modifier></type><name>pTerm</name> <init>= <expr><operator>&amp;</operator><name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name> <init>= <expr><operator>(</operator><name>Fts5Buffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTerm</name><operator>-&gt;</operator><name>pSynonym</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExprSynonymList</name><argument_list>(
          <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>*</operator><operator>)</operator><name>ppCollist</name></expr></argument>, <argument><expr><name>pnCollist</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ppCollist</name> <operator>=</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnCollist</name> <operator>=</operator> <name><name>pPhrase</name><operator>-&gt;</operator><name>aTerm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppCollist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnCollist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

</unit>
