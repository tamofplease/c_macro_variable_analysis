<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/ext/fts5/fts5_main.c"><comment type="block">/*
** 2014 Jun 09
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This is an SQLite module implementing full-text search.
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>

<comment type="block">/*
** This variable is set to false when running tests for which the on disk
** structures should not be corrupt. Otherwise, true. If it is false, extra
** assert() conditions in the fts5 code are activated - conditions that are
** only true if it is guaranteed that the fts5 database is not corrupt.
*/</comment>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_fts5_may_be_corrupt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<typedef>typedef <type><name><name>struct</name> <name>Fts5Auxdata</name></name></type> <name>Fts5Auxdata</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5Auxiliary</name></name></type> <name>Fts5Auxiliary</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5Cursor</name></name></type> <name>Fts5Cursor</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5Sorter</name></name></type> <name>Fts5Sorter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5Table</name></name></type> <name>Fts5Table</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5TokenizerModule</name></name></type> <name>Fts5TokenizerModule</name>;</typedef>

<comment type="block">/*
** NOTES ON TRANSACTIONS: 
**
** SQLite invokes the following virtual table methods as transactions are 
** opened and closed by the user:
**
**     xBegin():    Start of a new transaction.
**     xSync():     Initial part of two-phase commit.
**     xCommit():   Final part of two-phase commit.
**     xRollback(): Rollback the transaction.
**
** Anything that is required as part of a commit that may fail is performed
** in the xSync() callback. Current versions of SQLite ignore any errors 
** returned by xCommit().
**
** And as sub-transactions are opened/closed:
**
**     xSavepoint(int S):  Open savepoint S.
**     xRelease(int S):    Commit and close savepoint S.
**     xRollbackTo(int S): Rollback to start of savepoint S.
**
** During a write-transaction the fts5_index.c module may cache some data 
** in-memory. It is flushed to disk whenever xSync(), xRelease() or
** xSavepoint() is called. And discarded whenever xRollback() or xRollbackTo() 
** is called.
**
** Additionally, if SQLITE_DEBUG is defined, an instance of the following
** structure is used to record the current transaction state. This information
** is not required, but it is used in the assert() statements executed by
** function fts5CheckTransactionState() (see below).
*/</comment>
<struct>struct <name>Fts5TransactionState</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>eState</name></decl>;</decl_stmt>                     <comment type="block">/* 0==closed, 1==open, 2==synced */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSavepoint</name></decl>;</decl_stmt>                 <comment type="block">/* Number of open savepoints (0 -&gt; none) */</comment>
}</block>;</struct>

<comment type="block">/*
** A single object of this type is allocated when the FTS5 module is 
** registered with a database handle. It is used to store pointers to
** all registered FTS5 extensions - tokenizers and auxiliary functions.
*/</comment>
<struct>struct <name>Fts5Global</name> <block>{
  <decl_stmt><decl><type><name>fts5_api</name></type> <name>api</name></decl>;</decl_stmt>                   <comment type="block">/* User visible part of object (see fts5.h) */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                    <comment type="block">/* Associated database connection */</comment> 
  <decl_stmt><decl><type><name>i64</name></type> <name>iNextId</name></decl>;</decl_stmt>                    <comment type="block">/* Used to allocate unique cursor ids */</comment>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>            <comment type="block">/* First in list of all aux. functions */</comment>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pTok</name></decl>;</decl_stmt>      <comment type="block">/* First in list of all tokenizer modules */</comment>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pDfltTok</name></decl>;</decl_stmt>  <comment type="block">/* Default tokenizer module */</comment>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>               <comment type="block">/* First in list of all open cursors */</comment>
}</block>;</struct>

<comment type="block">/*
** Each auxiliary function registered with the FTS5 module is represented
** by an object of the following type. All such objects are stored as part
** of the Fts5Global.pAux list.
*/</comment>
<struct>struct <name>Fts5Auxiliary</name> <block>{
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl>;</decl_stmt>            <comment type="block">/* Global context for this function */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFunc</name></decl>;</decl_stmt>                    <comment type="block">/* Function name (nul-terminated) */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl>;</decl_stmt>                <comment type="block">/* User-data pointer */</comment>
  <decl_stmt><decl><type><name>fts5_extension_function</name></type> <name>xFunc</name></decl>;</decl_stmt>  <comment type="block">/* Callback function */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xDestroy</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>        <comment type="block">/* Destructor function */</comment>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>           <comment type="block">/* Next registered auxiliary function */</comment>
}</block>;</struct>

<comment type="block">/*
** Each tokenizer module registered with the FTS5 module is represented
** by an object of the following type. All such objects are stored as part
** of the Fts5Global.pTok list.
*/</comment>
<struct>struct <name>Fts5TokenizerModule</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>                    <comment type="block">/* Name of tokenizer */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl>;</decl_stmt>                <comment type="block">/* User pointer passed to xCreate() */</comment>
  <decl_stmt><decl><type><name>fts5_tokenizer</name></type> <name>x</name></decl>;</decl_stmt>               <comment type="block">/* Tokenizer functions */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xDestroy</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>        <comment type="block">/* Destructor function */</comment>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>     <comment type="block">/* Next registered tokenizer module */</comment>
}</block>;</struct>

<comment type="block">/*
** Virtual-table object.
*/</comment>
<struct>struct <name>Fts5Table</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* Base class used by SQLite core */</comment>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl>;</decl_stmt>            <comment type="block">/* Virtual table configuration */</comment>
  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIndex</name></decl>;</decl_stmt>              <comment type="block">/* Full-text index */</comment>
  <decl_stmt><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>pStorage</name></decl>;</decl_stmt>          <comment type="block">/* Document store */</comment>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl>;</decl_stmt>            <comment type="block">/* Global (connection wide) data */</comment>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pSortCsr</name></decl>;</decl_stmt>           <comment type="block">/* Sort data from this cursor */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>Fts5TransactionState</name></name></type> <name>ts</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>Fts5MatchPhrase</name> <block>{
  <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pPoslist</name></decl>;</decl_stmt>           <comment type="block">/* Pointer to current poslist */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name></decl>;</decl_stmt>                      <comment type="block">/* Size of phrase in terms */</comment>
}</block>;</struct>

<comment type="block">/*
** pStmt:
**   SELECT rowid, &lt;fts&gt; FROM &lt;fts&gt; ORDER BY +rank;
**
** aIdx[]:
**   There is one entry in the aIdx[] array for each phrase in the query,
**   the value of which is the offset within aPoslist[] following the last 
**   byte of the position list for the corresponding phrase.
*/</comment>
<struct>struct <name>Fts5Sorter</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Current rowid */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aPoslist</name></decl>;</decl_stmt>             <comment type="block">/* Position lists for current row */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIdx</name></decl>;</decl_stmt>                       <comment type="block">/* Number of entries in aIdx[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>aIdx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>                    <comment type="block">/* Offsets into aPoslist for current row */</comment>
}</block>;</struct>


<comment type="block">/*
** Virtual-table cursor object.
**
** iSpecial:
**   If this is a 'special' query (refer to function fts5SpecialMatch()), 
**   then this variable contains the result of the query. 
**
** iFirstRowid, iLastRowid:
**   These variables are only used for FTS5_PLAN_MATCH cursors. Assuming the
**   cursor iterates in ascending order of rowids, iFirstRowid is the lower
**   limit of rowids to return, and iLastRowid the upper. In other words, the
**   WHERE clause in the user's query might have been:
**
**       &lt;tbl&gt; MATCH &lt;expr&gt; AND rowid BETWEEN $iFirstRowid AND $iLastRowid
**
**   If the cursor iterates in descending order of rowid, iFirstRowid
**   is the upper limit (i.e. the "first" rowid visited) and iLastRowid
**   the lower.
*/</comment>
<struct>struct <name>Fts5Cursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>       <comment type="block">/* Base class used by SQLite core */</comment>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>              <comment type="block">/* Next cursor in Fts5Cursor.pCsr list */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aColumnSize</name></decl>;</decl_stmt>               <comment type="block">/* Values for xColumnSize() */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iCsrId</name></decl>;</decl_stmt>                     <comment type="block">/* Cursor id */</comment>

  <comment type="block">/* Zero from this point onwards on cursor reset */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ePlan</name></decl>;</decl_stmt>                      <comment type="block">/* FTS5_PLAN_XXX value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bDesc</name></decl>;</decl_stmt>                      <comment type="block">/* True for "ORDER BY rowid DESC" queries */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iFirstRowid</name></decl>;</decl_stmt>                <comment type="block">/* Return no rowids earlier than this */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLastRowid</name></decl>;</decl_stmt>                 <comment type="block">/* Return no rowids later than this */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>            <comment type="block">/* Statement used to read %_content */</comment>
  <decl_stmt><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl>;</decl_stmt>                <comment type="block">/* Expression for MATCH queries */</comment>
  <decl_stmt><decl><type><name>Fts5Sorter</name> <modifier>*</modifier></type><name>pSorter</name></decl>;</decl_stmt>            <comment type="block">/* Sorter for "ORDER BY rank" queries */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>csrflags</name></decl>;</decl_stmt>                   <comment type="block">/* Mask of cursor flags (see below) */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iSpecial</name></decl>;</decl_stmt>                   <comment type="block">/* Result of special query */</comment>

  <comment type="block">/* "rank" function. Populated on demand from vtab.xColumn(). */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRank</name></decl>;</decl_stmt>                    <comment type="block">/* Custom rank function */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRankArgs</name></decl>;</decl_stmt>                <comment type="block">/* Custom rank function args */</comment>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pRank</name></decl>;</decl_stmt>           <comment type="block">/* Rank callback (or NULL) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRankArg</name></decl>;</decl_stmt>                   <comment type="block">/* Number of trailing arguments for rank() */</comment>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apRankArg</name></decl>;</decl_stmt>      <comment type="block">/* Array of trailing arguments */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pRankArgStmt</name></decl>;</decl_stmt>     <comment type="block">/* Origin of objects in apRankArg[] */</comment>

  <comment type="block">/* Auxiliary data storage */</comment>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>            <comment type="block">/* Currently executing extension function */</comment>
  <decl_stmt><decl><type><name>Fts5Auxdata</name> <modifier>*</modifier></type><name>pAuxdata</name></decl>;</decl_stmt>          <comment type="block">/* First in linked list of saved aux-data */</comment>

  <comment type="block">/* Cache used by auxiliary functions xInst() and xInstCount() */</comment>
  <decl_stmt><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>aInstIter</name></decl>;</decl_stmt>   <comment type="block">/* One for each phrase */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInstAlloc</name></decl>;</decl_stmt>                 <comment type="block">/* Size of aInst[] array (entries / 3) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInstCount</name></decl>;</decl_stmt>                 <comment type="block">/* Number of phrase instances */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aInst</name></decl>;</decl_stmt>                     <comment type="block">/* 3 integers per phrase instance */</comment>
}</block>;</struct>

<comment type="block">/*
** Bits that make up the "idxNum" parameter passed indirectly by 
** xBestIndex() to xFilter().
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_MATCH</name></cpp:macro>        <cpp:value>0x0001</cpp:value></cpp:define>         <comment type="block">/* &lt;tbl&gt; MATCH ? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_RANK</name></cpp:macro>         <cpp:value>0x0002</cpp:value></cpp:define>         <comment type="block">/* rank MATCH ? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_ROWID_EQ</name></cpp:macro>     <cpp:value>0x0004</cpp:value></cpp:define>         <comment type="block">/* rowid == ? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_ROWID_LE</name></cpp:macro>     <cpp:value>0x0008</cpp:value></cpp:define>         <comment type="block">/* rowid &lt;= ? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_ROWID_GE</name></cpp:macro>     <cpp:value>0x0010</cpp:value></cpp:define>         <comment type="block">/* rowid &gt;= ? */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_ORDER_RANK</name></cpp:macro>   <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_ORDER_ROWID</name></cpp:macro>  <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BI_ORDER_DESC</name></cpp:macro>   <cpp:value>0x0080</cpp:value></cpp:define>

<comment type="block">/*
** Values for Fts5Cursor.csrflags
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5CSR_EOF</name></cpp:macro>               <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5CSR_REQUIRE_CONTENT</name></cpp:macro>   <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5CSR_REQUIRE_DOCSIZE</name></cpp:macro>   <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5CSR_REQUIRE_INST</name></cpp:macro>      <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5CSR_FREE_ZRANK</name></cpp:macro>        <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5CSR_REQUIRE_RESEEK</name></cpp:macro>    <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5CSR_REQUIRE_POSLIST</name></cpp:macro>   <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BitFlagAllTest</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (y))==(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BitFlagTest</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(((x) &amp; (y))!=0)</cpp:value></cpp:define>


<comment type="block">/*
** Macros to Set(), Clear() and Test() cursor flags.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CsrFlagSet</name><parameter_list>(<parameter><type><name>pCsr</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((pCsr)-&gt;csrflags |= (flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CsrFlagClear</name><parameter_list>(<parameter><type><name>pCsr</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((pCsr)-&gt;csrflags &amp;= ~(flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CsrFlagTest</name><parameter_list>(<parameter><type><name>pCsr</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((pCsr)-&gt;csrflags &amp; (flag))</cpp:value></cpp:define>

<struct>struct <name>Fts5Auxdata</name> <block>{
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>            <comment type="block">/* Extension to which this belongs */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pPtr</name></decl>;</decl_stmt>                     <comment type="block">/* Pointer value */</comment>
  <function_decl><type><name>void</name></type>(<modifier>*</modifier><name>xDelete</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>          <comment type="block">/* Destructor */</comment>
  <decl_stmt><decl><type><name>Fts5Auxdata</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>             <comment type="block">/* Next object in linked list */</comment>
}</block>;</struct>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_BEGIN</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_SYNC</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_COMMIT</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_ROLLBACK</name></cpp:macro>   <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_SAVEPOINT</name></cpp:macro>  <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_RELEASE</name></cpp:macro>    <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_ROLLBACKTO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5CheckTransactionState</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSavepoint</name></decl></parameter>)</parameter_list><block>{<block_content>
  <switch>switch<condition>( <expr><name>op</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>FTS5_BEGIN</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>iSavepoint</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>FTS5_SYNC</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>FTS5_COMMIT</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>FTS5_ROLLBACK</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>FTS5_SAVEPOINT</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iSavepoint</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iSavepoint</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>iSavepoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>iSavepoint</name></name> <operator>=</operator> <name>iSavepoint</name></expr>;</expr_stmt>
      <break>break;</break>
      
    <case>case <expr><name>FTS5_RELEASE</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iSavepoint</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iSavepoint</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>iSavepoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>iSavepoint</name></name> <operator>=</operator> <name>iSavepoint</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>FTS5_ROLLBACKTO</name></expr>:</case>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iSavepoint</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iSavepoint</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>iSavepoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>iSavepoint</name></name> <operator>=</operator> <name>iSavepoint</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>fts5CheckTransactionState</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Return true if pTab is a contentless table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5IsContentless</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete a virtual table handle allocated by fts5InitVtab(). 
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5FreeVtab</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pTab</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5IndexClose</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5StorageClose</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5ConfigFree</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The xDisconnect() virtual table method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DisconnectMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5FreeVtab</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The xDestroy() virtual table method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DestroyMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3Fts5DropAll</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5FreeVtab</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is the implementation of both the xConnect and xCreate
** methods of the FTS3 virtual table.
**
** The argv[] array contains the following:
**
**   argv[0]   -&gt; module name  ("fts5")
**   argv[1]   -&gt; database name
**   argv[2]   -&gt; table name
**   argv[...] -&gt; "column name" and other module argument fields.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5InitVtab</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>bCreate</name></decl></parameter>,                    <comment type="block">/* True for xCreate, false for xConnect */</comment>
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* The SQLite database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,                     <comment type="block">/* Hash table containing tokenizers */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVTab</name></decl></parameter>,          <comment type="block">/* Write the resulting vtab structure here */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* Write any error message here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><name>pAux</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azConfig</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Results of parsing argc/argv */</comment>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* New virtual table object */</comment>

  <comment type="block">/* Allocate the new vtab object and parse the configuration */</comment>
  <expr_stmt><expr><name>pTab</name> <operator>=</operator> <operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ConfigParse</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>azConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pConfig</name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pzErr</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>pConfig</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name> <operator>=</operator> <name>pConfig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pGlobal</name></name> <operator>=</operator> <name>pGlobal</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Open the index sub-system */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexOpen</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>bCreate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Open the storage sub-system */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageOpen</name><argument_list>(
        <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>bCreate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Call sqlite3_declare_vtab() */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ConfigDeclareVtab</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Load the initial configuration */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <name>pzErr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexLoadConfig</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5IndexRollback</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5FreeVtab</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>bCreate</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>FTS5_BEGIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppVTab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pTab</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The xConnect() and xCreate() methods for the virtual table. All the
** work is done in function fts5InitVtab().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ConnectMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,                     <comment type="block">/* Pointer to tokenizer hash table */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,          <comment type="block">/* OUT: New sqlite3_vtab object */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: sqlite3_malloc'd error message */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5InitVtab</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>pAux</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ppVtab</name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CreateMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,                     <comment type="block">/* Pointer to tokenizer hash table */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,          <comment type="block">/* OUT: New sqlite3_vtab object */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: sqlite3_malloc'd error message */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5InitVtab</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>pAux</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ppVtab</name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The different query plans.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_PLAN_MATCH</name></cpp:macro>          <cpp:value>1</cpp:value></cpp:define>       <comment type="block">/* (&lt;tbl&gt; MATCH ?) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_PLAN_SOURCE</name></cpp:macro>         <cpp:value>2</cpp:value></cpp:define>       <comment type="block">/* A source cursor for SORTED_MATCH */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_PLAN_SPECIAL</name></cpp:macro>        <cpp:value>3</cpp:value></cpp:define>       <comment type="block">/* An internal query */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_PLAN_SORTED_MATCH</name></cpp:macro>   <cpp:value>4</cpp:value></cpp:define>       <comment type="block">/* (&lt;tbl&gt; MATCH ? ORDER BY rank) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_PLAN_SCAN</name></cpp:macro>           <cpp:value>5</cpp:value></cpp:define>       <comment type="block">/* No usable constraint */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_PLAN_ROWID</name></cpp:macro>          <cpp:value>6</cpp:value></cpp:define>       <comment type="block">/* (rowid = ?) */</comment>

<comment type="block">/*
** Set the SQLITE_INDEX_SCAN_UNIQUE flag in pIdxInfo-&gt;flags. Unless this
** extension is currently being used by a version of SQLite too old to
** support index-info flags. In that case this function is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SetUniqueFlag</name><parameter_list>(<parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pIdxInfo</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3008012</literal></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_CORE</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_libversion_number</name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">3008012</literal></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>idxFlags</name></name> <operator>|=</operator> <name>SQLITE_INDEX_SCAN_UNIQUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the xBestIndex method for FTS5 tables. Within the 
** WHERE constraint, it searches for the following:
**
**   1. A MATCH constraint against the special column.
**   2. A MATCH constraint against the "rank" column.
**   3. An == constraint against the rowid column.
**   4. A &lt; or &lt;= constraint against the rowid column.
**   5. A &gt; or &gt;= constraint against the rowid column.
**
** Within the ORDER BY, either:
**
**   5. ORDER BY rank [ASC|DESC]
**   6. ORDER BY rowid [ASC|DESC]
**
** Costs are assigned as follows:
**
**  a) If an unusable MATCH operator is present in the WHERE clause, the
**     cost is unconditionally set to 1e50 (a really big number).
**
**  a) If a MATCH operator is present, the cost depends on the other
**     constraints also present. As follows:
**
**       * No other constraints:         cost=1000.0
**       * One rowid range constraint:   cost=750.0
**       * Both rowid range constraints: cost=500.0
**       * An == rowid constraint:       cost=100.0
**
**  b) Otherwise, if there is no MATCH:
**
**       * No other constraints:         cost=1000000.0
**       * One rowid range constraint:   cost=750000.0
**       * Both rowid range constraints: cost=250000.0
**       * An == rowid constraint:       cost=10.0
**
** Costs are not modified by the ORDER BY clause.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5BestIndexMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVTab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idxFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Parameter passed through to xFilter() */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bHasMatch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iNext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <struct>struct <name>Constraint</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>                       <comment type="block">/* Mask against sqlite3_index_constraint.op */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fts5op</name></decl>;</decl_stmt>                   <comment type="block">/* FTS5 mask for idxFlags */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>                     <comment type="block">/* 0==rowid, 1==tbl, 2==rank */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>omit</name></decl>;</decl_stmt>                     <comment type="block">/* True to omit this if found */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iConsIndex</name></decl>;</decl_stmt>               <comment type="block">/* Index in pInfo-&gt;aConstraint[] */</comment>
  }</block> <decl><name><name>aConstraint</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>SQLITE_INDEX_CONSTRAINT_MATCH</name><operator>|</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr>, 
                                    <expr><name>FTS5_BI_MATCH</name></expr>,    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SQLITE_INDEX_CONSTRAINT_MATCH</name><operator>|</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr>, 
                                    <expr><name>FTS5_BI_RANK</name></expr>,     <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr>,    <expr><name>FTS5_BI_ROWID_EQ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SQLITE_INDEX_CONSTRAINT_LT</name><operator>|</operator><name>SQLITE_INDEX_CONSTRAINT_LE</name></expr>, 
                                    <expr><name>FTS5_BI_ROWID_LE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SQLITE_INDEX_CONSTRAINT_GT</name><operator>|</operator><name>SQLITE_INDEX_CONSTRAINT_GE</name></expr>, 
                                    <expr><name>FTS5_BI_ROWID_GE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  }</block></expr></init></decl>;</struct>

  <decl_stmt><decl><type><name>int</name></type> <name><name>aColMap</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>aColMap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aColMap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aColMap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* Set idxFlags flags for all WHERE clause terms that will be used. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sqlite3_index_constraint</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aConstraint</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>Constraint</name></name> <modifier>*</modifier></type><name>pC</name> <init>= <expr><operator>&amp;</operator><name><name>aConstraint</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iColumn</name></name><operator>==</operator><name><name>aColMap</name><index>[<expr><name><name>pC</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>&amp;</operator> <name><name>pC</name><operator>-&gt;</operator><name>op</name></name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>usable</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pC</name><operator>-&gt;</operator><name>iConsIndex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>idxFlags</name> <operator>|=</operator> <name><name>pC</name><operator>-&gt;</operator><name>fts5op</name></name></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* As there exists an unusable MATCH constraint this is an 
          ** unusable plan. Set a prohibitively high cost. */</comment>
          <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">1e50</literal></expr>;</expr_stmt>
          <return>return <expr><name>SQLITE_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="block">/* Set idxFlags flags for the ORDER BY clause */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iSort</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iColumn</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>iSort</name><operator>==</operator><operator>(</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxFlags</name></expr></argument>, <argument><expr><name>FTS5_BI_MATCH</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>idxFlags</name> <operator>|=</operator> <name>FTS5_BI_ORDER_RANK</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iSort</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>idxFlags</name> <operator>|=</operator> <name>FTS5_BI_ORDER_ROWID</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxFlags</name></expr></argument>, <argument><expr><name>FTS5_BI_ORDER_RANK</name><operator>|</operator><name>FTS5_BI_ORDER_ROWID</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>idxFlags</name> <operator>|=</operator> <name>FTS5_BI_ORDER_DESC</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Calculate the estimated cost based on the flags set in idxFlags. */</comment>
  <expr_stmt><expr><name>bHasMatch</name> <operator>=</operator> <call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxFlags</name></expr></argument>, <argument><expr><name>FTS5_BI_MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxFlags</name></expr></argument>, <argument><expr><name>FTS5_BI_ROWID_EQ</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <ternary><condition><expr><name>bHasMatch</name></expr> ?</condition><then> <expr><literal type="number">100.0</literal></expr> </then><else>: <expr><literal type="number">10.0</literal></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bHasMatch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fts5SetUniqueFlag</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>BitFlagAllTest</name><argument_list>(<argument><expr><name>idxFlags</name></expr></argument>, <argument><expr><name>FTS5_BI_ROWID_LE</name><operator>|</operator><name>FTS5_BI_ROWID_GE</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <ternary><condition><expr><name>bHasMatch</name></expr> ?</condition><then> <expr><literal type="number">500.0</literal></expr> </then><else>: <expr><literal type="number">250000.0</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxFlags</name></expr></argument>, <argument><expr><name>FTS5_BI_ROWID_LE</name><operator>|</operator><name>FTS5_BI_ROWID_GE</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <ternary><condition><expr><name>bHasMatch</name></expr> ?</condition><then> <expr><literal type="number">750.0</literal></expr> </then><else>: <expr><literal type="number">750000.0</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <ternary><condition><expr><name>bHasMatch</name></expr> ?</condition><then> <expr><literal type="number">1000.0</literal></expr> </then><else>: <expr><literal type="number">1000000.0</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Assign argvIndex values to each constraint in use. */</comment>
  <expr_stmt><expr><name>iNext</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aConstraint</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>Constraint</name></name> <modifier>*</modifier></type><name>pC</name> <init>= <expr><operator>&amp;</operator><name><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pC</name><operator>-&gt;</operator><name>iConsIndex</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>pC</name><operator>-&gt;</operator><name>iConsIndex</name></name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <name>iNext</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name><name>pC</name><operator>-&gt;</operator><name>iConsIndex</name></name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>pC</name><operator>-&gt;</operator><name>omit</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <name>idxFlags</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of xOpen method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5OpenMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVTab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>               <comment type="block">/* New cursor object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                      <comment type="block">/* Bytes of space to allocate */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>

  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Cursor</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCsr</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pGlobal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aColumnSize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pGlobal</name><operator>-&gt;</operator><name>pCsr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>pCsr</name></name> <operator>=</operator> <name>pCsr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCsrId</name></name> <operator>=</operator> <operator>++</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>iNextId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCsr</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab_cursor</name><operator>*</operator><operator>)</operator><name>pCsr</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StmtType</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_SCAN</name></expr> )</condition><block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>bDesc</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>FTS5_STMT_SCAN_DESC</name></expr> </then><else>: <expr><name>FTS5_STMT_SCAN_ASC</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FTS5_STMT_LOOKUP</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called after the cursor passed as the only argument
** is moved to point at a different row. It clears all cached data 
** specific to the previous row stored by the cursor object.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5CsrNewrow</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, 
      <argument><expr><name>FTS5CSR_REQUIRE_CONTENT</name> 
    <operator>|</operator> <name>FTS5CSR_REQUIRE_DOCSIZE</name> 
    <operator>|</operator> <name>FTS5CSR_REQUIRE_INST</name> 
    <operator>|</operator> <name>FTS5CSR_REQUIRE_POSLIST</name></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5FreeCursorComponents</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Auxdata</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Auxdata</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInstIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>eStmt</name> <init>= <expr><call><name>fts5StmtType</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5StorageStmtRelease</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>eStmt</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Sorter</name> <modifier>*</modifier></type><name>pSorter</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pSorter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pSorter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>!=</operator><name>FTS5_PLAN_SOURCE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5ExprFree</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>pData</name><operator>=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pAuxdata</name></name></expr>;</init> <condition><expr><name>pData</name></expr>;</condition> <incr><expr><name>pData</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>xDelete</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pData</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pPtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRankArgStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>apRankArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_FREE_ZRANK</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRankArgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Cursor</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name> <operator>-</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>pCsr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Close the cursor.  For additional information see the documentation
** on the xClose method of the virtual table interface.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CloseMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pCursor</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fts5FreeCursorComponents</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Remove the cursor from the Fts5Global.pCsr list */</comment>
    <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>pGlobal</name><operator>-&gt;</operator><name>pCsr</name></name></expr>;</init> <condition><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>!=</operator><name>pCsr</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SorterNext</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Sorter</name> <modifier>*</modifier></type><name>pSorter</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>pSorter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aBlob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nBlob</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pSorter</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name><name>pSorter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nBlob</name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name><name>pSorter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aBlob</name> <operator>=</operator> <name>a</name> <operator>=</operator> <call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name><name>pSorter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* nBlob==0 in detail=none mode. */</comment>
    <if_stmt><if>if<condition>( <expr><name>nBlob</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name><name>pSorter</name><operator>-&gt;</operator><name>nIdx</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iVal</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>iVal</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSorter</name><operator>-&gt;</operator><name>aIdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pSorter</name><operator>-&gt;</operator><name>aIdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>aBlob</name><index>[<expr><name>nBlob</name></expr>]</index></name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSorter</name><operator>-&gt;</operator><name>aPoslist</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fts5CsrNewrow</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Set the FTS5CSR_REQUIRE_RESEEK flag on all FTS5_PLAN_MATCH cursors 
** open on table pTab.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5TripCursors</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>pCsr</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pGlobal</name><operator>-&gt;</operator><name>pCsr</name></name></expr>;</init> <condition><expr><name>pCsr</name></expr>;</condition> <incr><expr><name>pCsr</name><operator>=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_MATCH</name>
     <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>==</operator><operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pTab</name></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_RESEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** If the REQUIRE_RESEEK flag is set on the cursor passed as the first
** argument, close and reopen all Fts5IndexIter iterators that the cursor 
** is using. Then attempt to move the cursor to a rowid equal to or laster
** (in the cursors sort order - ASC or DESC) than the current rowid. 
**
** If the new rowid is not equal to the old, set output parameter *pbSkip
** to 1 before returning. Otherwise, leave it unchanged.
**
** Return SQLITE_OK if successful or if no reseek was required, or an 
** error code if an error occurred.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CursorReseek</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbSkip</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>*</operator><name>pbSkip</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_RESEEK</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bDesc</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>bDesc</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>sqlite3Fts5ExprRowid</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprFirst</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator>  <name>iRowid</name><operator>!=</operator><call><name>sqlite3Fts5ExprRowid</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pbSkip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CsrFlagClear</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_RESEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5CsrNewrow</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5ExprEof</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pbSkip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Advance the cursor to the next row in the table that matches the 
** search criteria.
**
** Return SQLITE_OK if nothing goes wrong.  SQLITE_OK is returned
** even if we reach end-of-file.  The fts5EofMethod() will be called
** subsequently to determine whether or not an EOF was hit.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5NextMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator>
          <operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_MATCH</name> <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_SOURCE</name><operator>)</operator></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>&lt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bSkip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>fts5CursorReseek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bSkip</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>bSkip</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprNext</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iLastRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><call><name>sqlite3Fts5ExprEof</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5CsrNewrow</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <switch>switch<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>FTS5_PLAN_SPECIAL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
  
      <case>case <expr><name>FTS5_PLAN_SORTED_MATCH</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SorterNext</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
  
      <default>default:</default>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PrepareStatement</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>,
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt> 
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppStmt</name> <operator>=</operator> <name>pRet</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CursorFirstSorted</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>, <parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Sorter</name> <modifier>*</modifier></type><name>pSorter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRank</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRank</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRankArgs</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRankArgs</name></name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>nPhrase</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPhraseCount</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Sorter</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nPhrase</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>pSorter</name> <operator>=</operator> <operator>(</operator><name>Fts5Sorter</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pSorter</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pSorter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSorter</name><operator>-&gt;</operator><name>nIdx</name></name> <operator>=</operator> <name>nPhrase</name></expr>;</expr_stmt>

  <comment type="block">/* TODO: It would be better to have some system for reusing statement
  ** handles here, rather than preparing a new one for each query. But that
  ** is not possible as SQLite reference counts the virtual table objects.
  ** And since the statement required here reads from this very virtual 
  ** table, saving it creates a circular reference.
  **
  ** If SQLite a built-in statement cache, this wouldn't be a problem. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5PrepareStatement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSorter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>pConfig</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT rowid, rank FROM %Q.%Q ORDER BY %s(%s%s%s) %s"</literal></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zRank</name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
      <argument><expr><operator>(</operator><ternary><condition><expr><name>zRankArgs</name></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
      <argument><expr><operator>(</operator><ternary><condition><expr><name>zRankArgs</name></expr> ?</condition><then> <expr><name>zRankArgs</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
      <argument><expr><ternary><condition><expr><name>bDesc</name></expr> ?</condition><then> <expr><literal type="string">"DESC"</literal></expr> </then><else>: <expr><literal type="string">"ASC"</literal></expr></else></ternary></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name> <operator>=</operator> <name>pSorter</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSortCsr</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSortCsr</name></name> <operator>=</operator> <name>pCsr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SorterNext</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSortCsr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pSorter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pSorter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CursorFirst</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>, <parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Expr</name> <modifier>*</modifier></type><name>pExpr</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprFirst</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iFirstRowid</name></name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5ExprEof</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fts5CsrNewrow</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Process a "special" query. A special query is identified as one with a
** MATCH expression that begins with a '*' character. The remainder of
** the text passed to the MATCH operator are used as  the special query
** parameters.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SpecialMatch</name><parameter_list>(
  <parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zQuery</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>zQuery</name></expr></init></decl>;</decl_stmt>         <comment type="block">/* Special query text */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                          <comment type="block">/* Number of bytes in text at z */</comment>

  <while>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>n</name></expr>]</index></name><operator>!=</operator><literal type="char">' '</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name> <operator>=</operator> <name>FTS5_PLAN_SPECIAL</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><literal type="string">"reads"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iSpecial</name></name> <operator>=</operator> <call><name>sqlite3Fts5IndexReads</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iSpecial</name></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iCsrId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block>{<block_content>
    <comment type="block">/* An unrecognized directive. Return an error message. */</comment>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"unknown special query: %.*s"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Search for an auxiliary function named zName that can be used with table
** pTab. If one is found, return a pointer to the corresponding Fts5Auxiliary
** structure. Otherwise, if no such function exists, return NULL.
*/</comment>
<function><type><specifier>static</specifier> <name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>fts5FindAuxiliary</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>pAux</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pGlobal</name><operator>-&gt;</operator><name>pAux</name></name></expr>;</init> <condition><expr><name>pAux</name></expr>;</condition> <incr><expr><name>pAux</name><operator>=</operator><name><name>pAux</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zFunc</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>pAux</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* No function of the specified name was found. Return 0. */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5FindRankFunction</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRank</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRank</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRankArgs</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRankArgs</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>zRankArgs</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3Fts5Mprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="string">"SELECT %s"</literal></expr></argument>, <argument><expr><name>zRankArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSql</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pRankArgStmt</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nRankArg</name></name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_value</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nRankArg</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>apRankArg</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_value</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nRankArg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
              <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>apRankArg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRankArgStmt</name></name> <operator>=</operator> <name>pStmt</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pAux</name> <operator>=</operator> <call><name>fts5FindAuxiliary</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>zRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pAux</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"no such function: %s"</literal></expr></argument>, <argument><expr><name>zRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRank</name></name> <operator>=</operator> <name>pAux</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CursorParseRank</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pRank</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRank</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pRank</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRank</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRankArgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name>pRank</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ConfigParseRank</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zRank</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zRankArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRank</name></name> <operator>=</operator> <name>zRank</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRankArgs</name></name> <operator>=</operator> <name>zRankArgs</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CsrFlagSet</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_FREE_ZRANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ERROR</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"parse error in rank function: %s"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>zRank</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRank</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pConfig</name><operator>-&gt;</operator><name>zRank</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRankArgs</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pConfig</name><operator>-&gt;</operator><name>zRankArgs</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRank</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>FTS5_DEFAULT_RANK</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRankArgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>i64</name></type> <name>fts5GetRowidLimit</name><parameter_list>(<parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iDefault</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pVal</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><call><name>sqlite3_value_numeric_type</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>SQLITE_INTEGER</name></expr> )</condition><block>{<block_content>
      <return>return <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>iDefault</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This is the xFilter interface for the virtual table.  See
** the virtual table xFilter method documentation for additional
** information.
** 
** There are three possible query strategies:
**
**   1. Full-text search using a MATCH operator.
**   2. A by-rowid lookup.
**   3. A full-table scan.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5FilterMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* The cursor used for this query */</comment>
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>,                     <comment type="block">/* Strategy index */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUnused</name></decl></parameter>,            <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,                       <comment type="block">/* Number of elements in apVal */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Arguments for the indexing scheme */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Error code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Counter for apVal[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bDesc</name></decl>;</decl_stmt>                      <comment type="block">/* True if ORDER BY [rank|rowid] DESC */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bOrderByRank</name></decl>;</decl_stmt>               <comment type="block">/* True if ORDER BY rank */</comment>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pMatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* &lt;tbl&gt; MATCH ? expression (or NULL) */</comment>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pRank</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* rank MATCH ? expression (or NULL) */</comment>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pRowidEq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* rowid = ? expression (or NULL) */</comment>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pRowidLe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* rowid &lt;= ? expression (or NULL) */</comment>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pRowidGe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* rowid &gt;= ? expression (or NULL) */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrmsg</name> <init>= <expr><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>zUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5FreeCursorComponents</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Cursor</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>-</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>pCsr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>csrflags</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRank</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRank</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zRankArgs</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pzErrmsg</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>pzErrmsg</name><operator>==</operator><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name></expr>;</expr_stmt>

  <comment type="block">/* Decode the arguments passed through to this function.
  **
  ** Note: The following set of if(...) statements must be in the same
  ** order as the corresponding entries in the struct at the top of
  ** fts5BestIndexMethod().  */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxNum</name></expr></argument>, <argument><expr><name>FTS5_BI_MATCH</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pMatch</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxNum</name></expr></argument>, <argument><expr><name>FTS5_BI_RANK</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRank</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxNum</name></expr></argument>, <argument><expr><name>FTS5_BI_ROWID_EQ</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRowidEq</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxNum</name></expr></argument>, <argument><expr><name>FTS5_BI_ROWID_LE</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRowidLe</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>BitFlagTest</name><argument_list>(<argument><expr><name>idxNum</name></expr></argument>, <argument><expr><name>FTS5_BI_ROWID_GE</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRowidGe</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iVal</name><operator>==</operator><name>nVal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>bOrderByRank</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>idxNum</name> <operator>&amp;</operator> <name>FTS5_BI_ORDER_RANK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bDesc</name></name> <operator>=</operator> <name>bDesc</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>idxNum</name> <operator>&amp;</operator> <name>FTS5_BI_ORDER_DESC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Set the cursor upper and lower rowid limits. Only some strategies 
  ** actually use them. This is ok, as the xBestIndex() method leaves the
  ** sqlite3_index_constraint.omit flag clear for range constraints
  ** on the rowid field.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>pRowidEq</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pRowidLe</name> <operator>=</operator> <name>pRowidGe</name> <operator>=</operator> <name>pRowidEq</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>bDesc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iFirstRowid</name></name> <operator>=</operator> <call><name>fts5GetRowidLimit</name><argument_list>(<argument><expr><name>pRowidLe</name></expr></argument>, <argument><expr><name>LARGEST_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iLastRowid</name></name> <operator>=</operator> <call><name>fts5GetRowidLimit</name><argument_list>(<argument><expr><name>pRowidGe</name></expr></argument>, <argument><expr><name>SMALLEST_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iLastRowid</name></name> <operator>=</operator> <call><name>fts5GetRowidLimit</name><argument_list>(<argument><expr><name>pRowidLe</name></expr></argument>, <argument><expr><name>LARGEST_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iFirstRowid</name></name> <operator>=</operator> <call><name>fts5GetRowidLimit</name><argument_list>(<argument><expr><name>pRowidGe</name></expr></argument>, <argument><expr><name>SMALLEST_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>pSortCsr</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* If pSortCsr is non-NULL, then this call is being made as part of 
    ** processing for a "... MATCH &lt;expr&gt; ORDER BY rank" query (ePlan is
    ** set to FTS5_PLAN_SORTED_MATCH). pSortCsr is the cursor that will
    ** return results to the user for this query. The current cursor 
    ** (pCursor) is used to execute the query issued by function 
    ** fts5CursorFirstSorted() above.  */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pRowidEq</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pRowidLe</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pRowidGe</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pRank</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nVal</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pMatch</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bOrderByRank</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bDesc</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iLastRowid</name></name><operator>==</operator><name>LARGEST_INT64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iFirstRowid</name></name><operator>==</operator><name>SMALLEST_INT64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name> <operator>=</operator> <name>FTS5_PLAN_SOURCE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pSortCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CursorFirst</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5ExprClearEof</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>pMatch</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExpr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zExpr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zExpr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CursorParseRank</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pRank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>zExpr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'*'</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* The user has issued a query of the form "MATCH '*...'". This
        ** indicates that the MATCH expression is not a full text query,
        ** but a request for an internal parameter.  */</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SpecialMatch</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zExpr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name> <init>= <expr><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprNew</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>zExpr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>bOrderByRank</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name> <operator>=</operator> <name>FTS5_PLAN_SORTED_MATCH</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CursorFirstSorted</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name> <operator>=</operator> <name>FTS5_PLAN_MATCH</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CursorFirst</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>zContent</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
        <argument><expr><literal type="string">"%s: table does not support scanning"</literal></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* This is either a full-table scan (ePlan==FTS5_PLAN_SCAN) or a lookup
    ** by rowid (ePlan==FTS5_PLAN_ROWID).  */</comment>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>pRowidEq</name></expr> ?</condition><then> <expr><name>FTS5_PLAN_ROWID</name></expr> </then><else>: <expr><name>FTS5_PLAN_SCAN</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageStmt</name><argument_list>(
        <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><call><name>fts5StmtType</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_ROWID</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iFirstRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iLastRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5NextMethod</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <name>pzErrmsg</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** This is the xEof method of the virtual table. SQLite calls this 
** routine to find out if it has reached the end of a result set.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5EofMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the rowid that the cursor currently points to.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>fts5CursorRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_MATCH</name> 
       <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_SORTED_MATCH</name> 
       <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_SOURCE</name></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><call><name>sqlite3Fts5ExprRowid</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* 
** This is the xRowid method. The SQLite core calls this routine to
** retrieve the rowid for the current row of the result set. fts5
** exposes %_content.rowid as the rowid for the virtual table. The
** rowid should be written to *pRowid.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5RowidMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ePlan</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name>ePlan</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>FTS5_PLAN_SPECIAL</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>FTS5_PLAN_SOURCE</name></expr>:</case>
    <case>case <expr><name>FTS5_PLAN_MATCH</name></expr>:</case>
    <case>case <expr><name>FTS5_PLAN_SORTED_MATCH</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <call><name>fts5CursorRowid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If the cursor requires seeking (bSeekRequired flag is set), seek it.
** Return SQLITE_OK if no error occurs, or an SQLite error code otherwise.
**
** If argument bErrormsg is true and an error occurs, an error message may
** be left in sqlite3_vtab.zErrMsg.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SeekCursor</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bErrormsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If the cursor does not yet have a statement handle, obtain one now. */</comment> 
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eStmt</name> <init>= <expr><call><name>fts5StmtType</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageStmt</name><argument_list>(
        <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>eStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>bErrormsg</name></expr>?</condition><then><expr><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_CONTENT</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_CONTENT</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>fts5CursorRowid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CsrFlagClear</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SetVtabError</name><parameter_list>(<parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>                     <comment type="block">/* ... printf arguments */</comment>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is called to handle an FTS INSERT command. In other words,
** an INSERT statement of the form:
**
**     INSERT INTO fts(fts) VALUES($pCmd)
**     INSERT INTO fts(fts, rank) VALUES($pCmd, $pVal)
**
** Argument pVal is the value assigned to column "fts" by the INSERT 
** statement. This function returns SQLITE_OK if successful, or an SQLite
** error code if an error occurs.
**
** The commands implemented by this function are documented in the "Special
** INSERT Directives" section of the documentation. It should be updated if
** more commands are added to this function.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SpecialInsert</name><parameter_list>(
  <parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,                <comment type="block">/* Fts5 table object */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCmd</name></decl></parameter>,               <comment type="block">/* Text inserted into table-name column */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>             <comment type="block">/* Value inserted into rank column */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bError</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"delete-all"</literal></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5SetVtabError</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, 
          <argument><expr><literal type="string">"'delete-all' may only be used with a "</literal>
          <literal type="string">"contentless or external content fts5 table"</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDeleteAll</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"rebuild"</literal></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5SetVtabError</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, 
          <argument><expr><literal type="string">"'rebuild' may not be used with a contentless fts5 table"</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageRebuild</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"optimize"</literal></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageOptimize</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"merge"</literal></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nMerge</name> <init>= <expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageMerge</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>nMerge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"integrity-check"</literal></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageIntegrity</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"prefix-index"</literal></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pConfig</name><operator>-&gt;</operator><name>bPrefixIndex</name></name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexLoadConfig</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ConfigSetValue</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>bError</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageConfigValue</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SpecialDelete</name><parameter_list>(
  <parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType1</name> <init>= <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>eType1</name><operator>==</operator><name>SQLITE_INTEGER</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iDel</name> <init>= <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDelete</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iDel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>apVal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StorageInsert</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>*</operator><name>pRc</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageContentInsert</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><name>piRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageIndexInsert</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><operator>*</operator><name>piRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* 
** This function is the implementation of the xUpdate callback used by 
** FTS3 virtual tables. It is invoked by SQLite each time a row is to be
** inserted, updated or deleted.
**
** A delete specifies a single argument - the rowid of the row to remove.
** 
** Update and insert operations pass:
**
**   1. The "old" rowid, or NULL.
**   2. The "new" rowid.
**   3. Values for each of the nCol matchable columns.
**   4. Values for the two hidden columns (&lt;tablename&gt; and "rank").
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5UpdateMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>,            <comment type="block">/* Virtual table handle */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Size of argument array */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>,          <comment type="block">/* Array of arguments */</comment>
  <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>            <comment type="block">/* OUT: The affected (or effected) rowid */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType0</name></decl>;</decl_stmt>                     <comment type="block">/* value_type() of apVal[0] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>

  <comment type="block">/* A transaction must be open when this is called. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pVtab</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nArg</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>nArg</name><operator>==</operator><operator>(</operator><literal type="number">2</literal><operator>+</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nArg</name><operator>==</operator><literal type="number">1</literal> 
      <operator>||</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_INTEGER</name> 
      <operator>||</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name></expr>;</expr_stmt>

  <comment type="block">/* Put any active cursors into REQUIRE_SEEK state. */</comment>
  <expr_stmt><expr><call><name>fts5TripCursors</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>eType0</name> <operator>=</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eType0</name><operator>==</operator><name>SQLITE_NULL</name> 
   <operator>&amp;&amp;</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_NULL</name></expr> 
  )</condition><block>{<block_content>
    <comment type="block">/* A "special" INSERT op. These are handled separately. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>!=</operator><name>FTS5_CONTENT_NORMAL</name> 
      <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SpecialDelete</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SpecialInsert</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>apVal</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* A regular INSERT, UPDATE or DELETE statement. The trick here is that
    ** any conflict on the rowid value must be detected before any 
    ** modifications are made to the database file. There are 4 cases:
    **
    **   1) DELETE
    **   2) UPDATE (rowid not modified)
    **   3) UPDATE (rowid modified)
    **   4) INSERT
    **
    ** Cases 3 and 4 may violate the rowid constraint.
    */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>eConflict</name> <init>= <expr><name>SQLITE_ABORT</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>eConflict</name> <operator>=</operator> <call><name>sqlite3_vtab_on_conflict</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType0</name><operator>==</operator><name>SQLITE_INTEGER</name> <operator>||</operator> <name>eType0</name><operator>==</operator><name>SQLITE_NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nArg</name><operator>!=</operator><literal type="number">1</literal> <operator>||</operator> <name>eType0</name><operator>==</operator><name>SQLITE_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Filter out attempts to run UPDATE or DELETE on contentless tables.
    ** This is not suported.  */</comment>
    <if_stmt><if>if<condition>( <expr><name>eType0</name><operator>==</operator><name>SQLITE_INTEGER</name> <operator>&amp;&amp;</operator> <call><name>fts5IsContentless</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"cannot %s contentless fts5 table: %s"</literal></expr></argument>, 
          <argument><expr><operator>(</operator><ternary><condition><expr><name>nArg</name><operator>&gt;</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"UPDATE"</literal></expr> </then><else>: <expr><literal type="string">"DELETE from"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* Case 1: DELETE */</comment>
    <if type="elseif">else if<condition>( <expr><name>nArg</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iDel</name> <init>= <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Rowid to delete */</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDelete</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iDel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* Case 2: INSERT */</comment>
    <if type="elseif">else if<condition>( <expr><name>eType0</name><operator>!=</operator><name>SQLITE_INTEGER</name></expr> )</condition><block>{<block_content>     
      <comment type="block">/* If this is a REPLACE, first remove the current entry (if any) */</comment>
      <if_stmt><if>if<condition>( <expr><name>eConflict</name><operator>==</operator><name>SQLITE_REPLACE</name> 
       <operator>&amp;&amp;</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_INTEGER</name></expr> 
      )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>iNew</name> <init>= <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Rowid to delete */</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDelete</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5StorageInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><name>pRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="block">/* Case 2: UPDATE */</comment>
    <else>else<block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iOld</name> <init>= <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Old rowid */</comment>
      <decl_stmt><decl><type><name>i64</name></type> <name>iNew</name> <init>= <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* New rowid */</comment>
      <if_stmt><if>if<condition>( <expr><name>iOld</name><operator>!=</operator><name>iNew</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>eConflict</name><operator>==</operator><name>SQLITE_REPLACE</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDelete</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDelete</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>fts5StorageInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><name>pRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageContentInsert</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><name>pRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDelete</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageIndexInsert</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><operator>*</operator><name>pRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDelete</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5StorageInsert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>, <argument><expr><name>pRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of xSync() method. 
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SyncMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>FTS5_SYNC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>zErrMsg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5TripCursors</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageSync</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pzErrmsg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of xBegin() method. 
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5BeginMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Call below is a no-op for NDEBUG builds */</comment>
  <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></argument>, <argument><expr><name>FTS5_BEGIN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of xCommit() method. This is a no-op. The contents of
** the pending-terms hash-table have already been flushed into the database
** by fts5SyncMethod().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CommitMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Call below is a no-op for NDEBUG builds */</comment>
  <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></argument>, <argument><expr><name>FTS5_COMMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of xRollback(). Discard the contents of the pending-terms
** hash-table. Any changes made to the database are reverted by SQLite.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5RollbackMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>FTS5_ROLLBACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageRollback</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fts5CsrPoslist</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fts5ApiUserData</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pAux</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiColumnCount</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiColumnTotalSize</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pnToken</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3Fts5StorageSize</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pnToken</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiRowCount</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>pnRow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3Fts5StorageRowCount</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>pnRow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiTokenize</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pText</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nText</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xToken</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3Fts5Tokenize</name><argument_list>(
      <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></argument>, <argument><expr><name>FTS5_TOKENIZE_AUX</name></expr></argument>, <argument><expr><name>pText</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>, <argument><expr><name>xToken</name></expr></argument>
  )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiPhraseCount</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3Fts5ExprPhraseCount</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiPhraseSize</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3Fts5ExprPhraseSize</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiColumnText</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pz</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>fts5IsContentless</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SeekCursor</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pz</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>iCol</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>iCol</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CsrPoslist</name><parameter_list>(
  <parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>pa</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pConfig</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bLive</name> <init>= <expr><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_POSLIST</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>

    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5PoslistPopulator</name> <modifier>*</modifier></type><name>aPopulator</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>aPopulator</name> <operator>=</operator> <call><name>sqlite3Fts5ExprClearPoslists</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>bLive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>aPopulator</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ApiColumnText</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Context</name><operator>*</operator><operator>)</operator><name>pCsr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPopulatePoslists</name><argument_list>(
              <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>aPopulator</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aPopulator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Fts5ExprCheckPoslists</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CsrFlagClear</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_POSLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Sorter</name> <modifier>*</modifier></type><name>pSorter</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>iPhrase</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pSorter</name><operator>-&gt;</operator><name>aIdx</name><index>[<expr><name>iPhrase</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <name><name>pSorter</name><operator>-&gt;</operator><name>aIdx</name><index>[<expr><name>iPhrase</name></expr>]</index></name> <operator>-</operator> <name>i1</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pa</name> <operator>=</operator> <operator>&amp;</operator><name><name>pSorter</name><operator>-&gt;</operator><name>aPoslist</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPoslist</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Ensure that the Fts5Cursor.nInstCount and aInst[] variables are populated
** correctly for the current view. Return SQLITE_OK if successful, or an
** SQLite error code otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CacheInstArray</name><parameter_list>(<parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5PoslistReader</name> <modifier>*</modifier></type><name>aIter</name></decl>;</decl_stmt>       <comment type="block">/* One iterator for each phrase */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIter</name></decl>;</decl_stmt>                      <comment type="block">/* Number of iterators/phrases */</comment>
  
  <expr_stmt><expr><name>nIter</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPhraseCount</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInstIter</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5PoslistReader</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInstIter</name></name> <operator>=</operator> <operator>(</operator><name>Fts5PoslistReader</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>aIter</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aInstIter</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>aIter</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nInst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* Number instances seen so far */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Initialize all iterators */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIter</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CsrPoslist</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Fts5PoslistReaderInit</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aInst</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iBest</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bEof</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> 
              <operator>&amp;&amp;</operator> <operator>(</operator><name>iBest</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>aIter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iPos</name><operator>&lt;</operator><name><name>aIter</name><index>[<expr><name>iBest</name></expr>]</index></name><operator>.</operator><name>iPos</name><operator>)</operator></expr> 
            )</condition><block>{<block_content>
            <expr_stmt><expr><name>iBest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>( <expr><name>iBest</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>nInst</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>nInst</name><operator>&gt;=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nInstAlloc</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInstAlloc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInstAlloc</name></name></expr> ?</condition><then> <expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInstAlloc</name></name><operator>*</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name>aInst</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(
              <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInst</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInstAlloc</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal></expr></argument>
              )</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>aInst</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInst</name></name> <operator>=</operator> <name>aInst</name></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>aInst</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aInst</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>nInst</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aInst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>iBest</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aInst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FTS5_POS2COLUMN</name><argument_list>(<argument><expr><name><name>aIter</name><index>[<expr><name>iBest</name></expr>]</index></name><operator>.</operator><name>iPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aInst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>FTS5_POS2OFFSET</name><argument_list>(<argument><expr><name><name>aIter</name><index>[<expr><name>iBest</name></expr>]</index></name><operator>.</operator><name>iPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5PoslistReaderNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aIter</name><index>[<expr><name>iBest</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInstCount</name></name> <operator>=</operator> <name>nInst</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CsrFlagClear</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_INST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiInstCount</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnInst</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_INST</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
   <operator>||</operator> <name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>fts5CacheInstArray</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pnInst</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nInstCount</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiInst</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iIdx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPhrase</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piCol</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piOff</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_INST</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
   <operator>||</operator> <name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>fts5CacheInstArray</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr> 
  )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iIdx</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>iIdx</name><operator>&gt;=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nInstCount</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_RANGE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    }else if( fts5IsOffsetless((Fts5Table*)pCsr-&gt;base.pVtab) ){
      *piPhrase = pCsr-&gt;aInst[iIdx*3];
      *piCol = pCsr-&gt;aInst[iIdx*3 + 2];
      *piOff = -1;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>piPhrase</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aInst</name><index>[<expr><name>iIdx</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aInst</name><index>[<expr><name>iIdx</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aInst</name><index>[<expr><name>iIdx</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>fts5ApiRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5CursorRowid</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ColumnSizeCb</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>,                 <comment type="block">/* Pointer to int */</comment>
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>,            <comment type="block">/* Buffer containing token */</comment>
  <parameter><decl><type><name>int</name></type> <name>nUnused</name></decl></parameter>,                    <comment type="block">/* Size of token in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused1</name></decl></parameter>,                   <comment type="block">/* Start offset of token */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused2</name></decl></parameter>                    <comment type="block">/* End offset of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pCnt</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>, <argument><expr><name>nUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>iUnused1</name></expr></argument>, <argument><expr><name>iUnused2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>tflags</name> <operator>&amp;</operator> <name>FTS5_TOKEN_COLOCATED</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pCnt</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiColumnSize</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnToken</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_DOCSIZE</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>fts5CursorRowid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDocsize</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aColumnSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>zContent</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>abUnindexed</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aColumnSize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>abUnindexed</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aColumnSize</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aColumnSize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ApiColumnText</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5Tokenize</name><argument_list>(
                <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>FTS5_TOKENIZE_AUX</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fts5ColumnSizeCb</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>CsrFlagClear</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_REQUIRE_DOCSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>+=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aColumnSize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCol</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aColumnSize</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_RANGE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the xSetAuxdata() method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiSetAuxdata</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,              <comment type="block">/* Fts5 context */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPtr</name></decl></parameter>,                     <comment type="block">/* Pointer to save as auxdata */</comment>
  <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>xDelete</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>           <comment type="block">/* Destructor for pPtr (or NULL) */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Auxdata</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>

  <comment type="block">/* Search through the cursors list of Fts5Auxdata objects for one that
  ** corresponds to the currently executing auxiliary function.  */</comment>
  <for>for<control>(<init><expr><name>pData</name><operator>=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pAuxdata</name></name></expr>;</init> <condition><expr><name>pData</name></expr>;</condition> <incr><expr><name>pData</name><operator>=</operator><name><name>pData</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>pAux</name></name><operator>==</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pAux</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>pData</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>xDelete</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name><name>pData</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>pPtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pData</name> <operator>=</operator> <operator>(</operator><name>Fts5Auxdata</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Auxdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pData</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>xDelete</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xDelete</name><argument_list>(<argument><expr><name>pPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pAux</name></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pAux</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pAuxdata</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pAuxdata</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>xDelete</name></name> <operator>=</operator> <name>xDelete</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pPtr</name></name> <operator>=</operator> <name>pPtr</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fts5ApiGetAuxdata</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bClear</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Auxdata</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>pData</name><operator>=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pAuxdata</name></name></expr>;</init> <condition><expr><name>pData</name></expr>;</condition> <incr><expr><name>pData</name><operator>=</operator><name><name>pData</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>pAux</name></name><operator>==</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pAux</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>pData</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pRet</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>pPtr</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bClear</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>pPtr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>xDelete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ApiPhraseNext</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5PhraseIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piCol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piOff</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>b</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <name>iVal</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>+=</operator> <operator>(</operator><name>iVal</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiPhraseFirst</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5PhraseIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piCol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piOff</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5CsrPoslist</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5ApiPhraseNext</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>piCol</name></expr></argument>, <argument><expr><name>piOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ApiPhraseNextColumn</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5PhraseIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piCol</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pConfig</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>b</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iIncr</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>+=</operator> <operator>(</operator><name>iIncr</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>b</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>piCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiPhraseFirstColumn</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5PhraseIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piCol</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pConfig</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Sorter</name> <modifier>*</modifier></type><name>pSorter</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pSorter</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pSorter</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>iPhrase</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pSorter</name><operator>-&gt;</operator><name>aIdx</name><index>[<expr><name>iPhrase</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pSorter</name><operator>-&gt;</operator><name>aIdx</name><index>[<expr><name>iPhrase</name></expr>]</index></name> <operator>-</operator> <name>i1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pSorter</name><operator>-&gt;</operator><name>aPoslist</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPhraseCollist</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5ApiPhraseNextColumn</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>piCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CsrPoslist</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0x01</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>piCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>piCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiQueryPhrase</name><parameter_list>(<parameter><decl><type><name>Fts5Context</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, 
    <parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5Context</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Fts5ExtensionApi</name></type> <name>sFts5Api</name> <init>= <expr><block>{
  <expr><literal type="number">2</literal></expr>,                            <comment type="block">/* iVersion */</comment>
  <expr><name>fts5ApiUserData</name></expr>,
  <expr><name>fts5ApiColumnCount</name></expr>,
  <expr><name>fts5ApiRowCount</name></expr>,
  <expr><name>fts5ApiColumnTotalSize</name></expr>,
  <expr><name>fts5ApiTokenize</name></expr>,
  <expr><name>fts5ApiPhraseCount</name></expr>,
  <expr><name>fts5ApiPhraseSize</name></expr>,
  <expr><name>fts5ApiInstCount</name></expr>,
  <expr><name>fts5ApiInst</name></expr>,
  <expr><name>fts5ApiRowid</name></expr>,
  <expr><name>fts5ApiColumnText</name></expr>,
  <expr><name>fts5ApiColumnSize</name></expr>,
  <expr><name>fts5ApiQueryPhrase</name></expr>,
  <expr><name>fts5ApiSetAuxdata</name></expr>,
  <expr><name>fts5ApiGetAuxdata</name></expr>,
  <expr><name>fts5ApiPhraseFirst</name></expr>,
  <expr><name>fts5ApiPhraseNext</name></expr>,
  <expr><name>fts5ApiPhraseFirstColumn</name></expr>,
  <expr><name>fts5ApiPhraseNextColumn</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Implementation of API function xQueryPhrase().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ApiQueryPhrase</name><parameter_list>(
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iPhrase</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>xCallback</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5Context</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5OpenMethod</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_vtab_cursor</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>ePlan</name></name> <operator>=</operator> <name>FTS5_PLAN_MATCH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>iFirstRowid</name></name> <operator>=</operator> <name>SMALLEST_INT64</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>iLastRowid</name></name> <operator>=</operator> <name>LARGEST_INT64</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pTab</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprClonePhrase</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>rc</name> <operator>=</operator> <call><name>fts5CursorFirst</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init>
        <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
        <incr><expr><name>rc</name> <operator>=</operator> <call><name>fts5NextMethod</name><argument_list>(<argument><expr><operator>(</operator><name>sqlite3_vtab_cursor</name><operator>*</operator><operator>)</operator><name>pNew</name></expr></argument>)</argument_list></call></expr></incr>
    )</control><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xCallback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFts5Api</name></expr></argument>, <argument><expr><operator>(</operator><name>Fts5Context</name><operator>*</operator><operator>)</operator><name>pNew</name></expr></argument>, <argument><expr><name>pUserData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5CloseMethod</name><argument_list>(<argument><expr><operator>(</operator><name>sqlite3_vtab_cursor</name><operator>*</operator><operator>)</operator><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ApiInvoke</name><parameter_list>(
  <parameter><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pAux</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pAux</name></name> <operator>=</operator> <name>pAux</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pAux</name><operator>-&gt;</operator><name>xFunc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFts5Api</name></expr></argument>, <argument><expr><operator>(</operator><name>Fts5Context</name><operator>*</operator><operator>)</operator><name>pCsr</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pAux</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Fts5Cursor</name> <modifier>*</modifier></type><name>fts5CursorFromCsrid</name><parameter_list>(<parameter><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iCsrId</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>pCsr</name><operator>=</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>pCsr</name></name></expr>;</init> <condition><expr><name>pCsr</name></expr>;</condition> <incr><expr><name>pCsr</name><operator>=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCsrId</name></name><operator>==</operator><name>iCsrId</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pCsr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ApiCallback</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>

  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iCsrId</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>&gt;=</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pAux</name> <operator>=</operator> <operator>(</operator><name>Fts5Auxiliary</name><operator>*</operator><operator>)</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iCsrId</name> <operator>=</operator> <call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <call><name>fts5CursorFromCsrid</name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pGlobal</name></name></expr></argument>, <argument><expr><name>iCsrId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCsr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"no such cursor: %lld"</literal></expr></argument>, <argument><expr><name>iCsrId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fts5ApiInvoke</name><argument_list>(<argument><expr><name>pAux</name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Given cursor id iId, return a pointer to the corresponding Fts5Index 
** object. Or NULL If the cursor id does not exist.
**
** If successful, set *ppConfig to point to the associated config object 
** before returning.
*/</comment>
<function><type><name>Fts5Index</name> <modifier>*</modifier></type><name>sqlite3Fts5IndexFromCsrid</name><parameter_list>(
  <parameter><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl></parameter>,            <comment type="block">/* FTS5 global context for db handle */</comment>
  <parameter><decl><type><name>i64</name></type> <name>iCsrId</name></decl></parameter>,                     <comment type="block">/* Id of cursor to find */</comment>
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppConfig</name></decl></parameter>           <comment type="block">/* OUT: Configuration object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <call><name>fts5CursorFromCsrid</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><name>iCsrId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTab</name> <operator>=</operator> <operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppConfig</name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr>;</expr_stmt>

  <return>return <expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a "position-list blob" corresponding to the current position of
** cursor pCsr via sqlite3_result_blob(). A position-list blob contains
** the current position-list for each phrase in the query associated with
** cursor pCsr.
**
** A position-list blob begins with (nPhrase-1) varints, where nPhrase is
** the number of phrases in the query. Following the varints are the
** concatenated position lists for each phrase, in order.
**
** The first varint (if it exists) contains the size of the position list
** for phrase 0. The second (same disclaimer) contains the size of position
** list 1. And so on. There is no size field for the final position list,
** as it can be derived from the total size of the blob.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PoslistBlob</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name> <init>= <expr><call><name>sqlite3Fts5ExprPhraseCount</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>val</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><operator>(</operator><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>FTS5_DETAIL_FULL</name></expr>:</case>

      <comment type="block">/* Append the varints */</comment>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>nPhrase</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>sqlite3Fts5ExprPoslist</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="block">/* Append the position lists */</comment>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nPhrase</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pPoslist</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nPoslist</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>nPoslist</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPoslist</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPoslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>nPoslist</name></expr></argument>, <argument><expr><name>pPoslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>

    <case>case <expr><name>FTS5_DETAIL_COLUMNS</name></expr>:</case>

      <comment type="block">/* Append the varints */</comment>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><operator>(</operator><name>nPhrase</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>dummy</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPhraseCollist</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <comment type="block">/* Append the position lists */</comment>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nPhrase</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pPoslist</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nPoslist</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprPhraseCollist</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pExpr</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPoslist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPoslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>nPoslist</name></expr></argument>, <argument><expr><name>pPoslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>

    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** This is the xColumn method, called by SQLite to request a value from
** the row that the supplied cursor currently points to.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ColumnMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* Cursor to retrieve value from */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for sqlite3_result_xxx() calls */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>                        <comment type="block">/* Index of column to read value from */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5Cursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>CsrFlagTest</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>FTS5CSR_EOF</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_SPECIAL</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iSpecial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else

  if<condition>( <expr><name>iCol</name><operator>==</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* User is requesting the value of the special column with the same name
    ** as the table. Return the cursor integer id number. This value is only
    ** useful in that it may be passed as the first argument to an FTS5
    ** auxiliary function.  */</comment>
    <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCsrId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCol</name><operator>==</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>

    <comment type="block">/* The value of the "rank" column. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_SOURCE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5PoslistBlob</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( 
        <expr><name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_MATCH</name>
     <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>ePlan</name></name><operator>==</operator><name>FTS5_PLAN_SORTED_MATCH</name></expr>
    )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRank</name></name> <operator>||</operator> <name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>fts5FindRankFunction</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5ApiInvoke</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pRank</name></name></expr></argument>, <argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nRankArg</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>apRankArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>fts5IsContentless</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SeekCursor</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_value</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3_column_value</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>iCol</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** This routine implements the xFindFunction method for the FTS3
** virtual table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5FindFunctionMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>,            <comment type="block">/* Virtual table handle */</comment>
  <parameter><decl><type><name>int</name></type> <name>nUnused</name></decl></parameter>,                    <comment type="block">/* Number of SQL function arguments */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,              <comment type="block">/* Name of SQL function */</comment>
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier><name>pxFunc</name>)<parameter_list>(<parameter><decl><type><name>sqlite3_context</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>sqlite3_value</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <comment type="block">/* OUT: Result */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppArg</name></decl></parameter>                    <comment type="block">/* OUT: User data for *pxFunc */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>nUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pAux</name> <operator>=</operator> <call><name>fts5FindAuxiliary</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pAux</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pxFunc</name> <operator>=</operator> <name>fts5ApiCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppArg</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pAux</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* No function of the specified name was found. Return 0. */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of FTS5 xRename method. Rename an fts5 table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5RenameMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>,            <comment type="block">/* Virtual table handle */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>               <comment type="block">/* New name of table */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3Fts5StorageRename</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The xSavepoint() method.
**
** Flush the contents of the pending-terms table to disk.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SavepointMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSavepoint</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>iSavepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Call below is a no-op for NDEBUG builds */</comment>
  <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>FTS5_SAVEPOINT</name></expr></argument>, <argument><expr><name>iSavepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5TripCursors</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3Fts5StorageSync</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The xRelease() method.
**
** This is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ReleaseMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSavepoint</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>iSavepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Call below is a no-op for NDEBUG builds */</comment>
  <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>FTS5_RELEASE</name></expr></argument>, <argument><expr><name>iSavepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5TripCursors</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3Fts5StorageSync</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The xRollbackTo() method.
**
** Discard the contents of the pending terms table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5RollbackToMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSavepoint</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5Table</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>iSavepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Call below is a no-op for NDEBUG builds */</comment>
  <expr_stmt><expr><call><name>fts5CheckTransactionState</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>FTS5_ROLLBACKTO</name></expr></argument>, <argument><expr><name>iSavepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5TripCursors</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3Fts5StorageRollback</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pStorage</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register a new auxiliary function with global context pGlobal.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CreateAux</name><parameter_list>(
  <parameter><decl><type><name>fts5_api</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,                 <comment type="block">/* Global context (one per db handle) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,              <comment type="block">/* Name of new function */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,                <comment type="block">/* User data for aux. function */</comment>
  <parameter><decl><type><name>fts5_extension_function</name></type> <name>xFunc</name></decl></parameter>,  <comment type="block">/* Aux. function implementation */</comment>
  <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>xDestroy</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>          <comment type="block">/* Destructor for pUserData */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><name>pApi</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_overload_function</name><argument_list>(<argument><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nName</name></decl>;</decl_stmt>                      <comment type="block">/* Size of zName in bytes, including \0 */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                      <comment type="block">/* Bytes of space to allocate */</comment>

    <expr_stmt><expr><name>nName</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Auxiliary</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pAux</name> <operator>=</operator> <operator>(</operator><name>Fts5Auxiliary</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pAux</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pAux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>zFunc</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pAux</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>zFunc</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pGlobal</name></name> <operator>=</operator> <name>pGlobal</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>xFunc</name></name> <operator>=</operator> <name>xFunc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>xDestroy</name></name> <operator>=</operator> <name>xDestroy</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAux</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pGlobal</name><operator>-&gt;</operator><name>pAux</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>pAux</name></name> <operator>=</operator> <name>pAux</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register a new tokenizer. This is the implementation of the 
** fts5_api.xCreateTokenizer() method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CreateTokenizer</name><parameter_list>(
  <parameter><decl><type><name>fts5_api</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,                 <comment type="block">/* Global context (one per db handle) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,              <comment type="block">/* Name of new function */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>,                <comment type="block">/* User data for aux. function */</comment>
  <parameter><decl><type><name>fts5_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>,     <comment type="block">/* Tokenizer implementation */</comment>
  <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>xDestroy</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>          <comment type="block">/* Destructor for pUserData */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><name>pApi</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name></decl>;</decl_stmt>                      <comment type="block">/* Size of zName and its \0 terminator */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                      <comment type="block">/* Bytes of space to allocate */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>nName</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5TokenizerModule</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5TokenizerModule</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNew</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pUserData</name></name> <operator>=</operator> <name>pUserData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>*</operator><name>pTokenizer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xDestroy</name></name> <operator>=</operator> <name>xDestroy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pGlobal</name><operator>-&gt;</operator><name>pTok</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>pTok</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>pDfltTok</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>fts5LocateTokenizer</name><parameter_list>(
  <parameter><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pMod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pMod</name> <operator>=</operator> <name><name>pGlobal</name><operator>-&gt;</operator><name>pDfltTok</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <for>for<control>(<init><expr><name>pMod</name><operator>=</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>pTok</name></name></expr>;</init> <condition><expr><name>pMod</name></expr>;</condition> <incr><expr><name>pMod</name><operator>=</operator><name><name>pMod</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pMod</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pMod</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Find a tokenizer. This is the implementation of the 
** fts5_api.xFindTokenizer() method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5FindTokenizer</name><parameter_list>(
  <parameter><decl><type><name>fts5_api</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,                 <comment type="block">/* Global context (one per db handle) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,              <comment type="block">/* Name of new function */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppUserData</name></decl></parameter>,
  <parameter><decl><type><name>fts5_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>      <comment type="block">/* Populate this object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pMod</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pMod</name> <operator>=</operator> <call><name>fts5LocateTokenizer</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><name>pApi</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pMod</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pTokenizer</name> <operator>=</operator> <name><name>pMod</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppUserData</name> <operator>=</operator> <name><name>pMod</name><operator>-&gt;</operator><name>pUserData</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pTokenizer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fts5_tokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5GetTokenizer</name><parameter_list>(
  <parameter><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTok</name></decl></parameter>,
  <parameter><decl><type><name>fts5_tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTokApi</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pMod</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pMod</name> <operator>=</operator> <call><name>fts5LocateTokenizer</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nArg</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pMod</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nArg</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"no such tokenizer: %s"</literal></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pMod</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>xCreate</name></name><argument_list>(<argument><expr><name><name>pMod</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>nArg</name></expr>?</condition><then><expr><name>nArg</name><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>ppTok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppTokApi</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMod</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>pzErr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"error in tokenizer constructor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppTokApi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppTok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ModuleDestroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5TokenizerModule</name> <modifier>*</modifier></type><name>pTok</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNextTok</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Auxiliary</name> <modifier>*</modifier></type><name>pAux</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNextAux</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>pAux</name><operator>=</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>pAux</name></name></expr>;</init> <condition><expr><name>pAux</name></expr>;</condition> <incr><expr><name>pAux</name><operator>=</operator><name>pNextAux</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pNextAux</name> <operator>=</operator> <name><name>pAux</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pAux</name><operator>-&gt;</operator><name>xDestroy</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pAux</name><operator>-&gt;</operator><name>xDestroy</name></name><argument_list>(<argument><expr><name><name>pAux</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for<control>(<init><expr><name>pTok</name><operator>=</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>pTok</name></name></expr>;</init> <condition><expr><name>pTok</name></expr>;</condition> <incr><expr><name>pTok</name><operator>=</operator><name>pNextTok</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pNextTok</name> <operator>=</operator> <name><name>pTok</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pTok</name><operator>-&gt;</operator><name>xDestroy</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pTok</name><operator>-&gt;</operator><name>xDestroy</name></name><argument_list>(<argument><expr><name><name>pTok</name><operator>-&gt;</operator><name>pUserData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5Fts5Func</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apUnused</name></decl></parameter>        <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>apUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nArg</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pGlobal</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pGlobal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pGlobal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pGlobal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of fts5_source_id() function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SourceIdFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apUnused</name></decl></parameter>        <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nArg</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>apUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"--FTS5-SOURCE-ID--"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Init</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_module</name></type> <name>fts5Mod</name> <init>= <expr><block>{
    <comment type="block">/* iVersion      */</comment> <expr><literal type="number">2</literal></expr>,
    <comment type="block">/* xCreate       */</comment> <expr><name>fts5CreateMethod</name></expr>,
    <comment type="block">/* xConnect      */</comment> <expr><name>fts5ConnectMethod</name></expr>,
    <comment type="block">/* xBestIndex    */</comment> <expr><name>fts5BestIndexMethod</name></expr>,
    <comment type="block">/* xDisconnect   */</comment> <expr><name>fts5DisconnectMethod</name></expr>,
    <comment type="block">/* xDestroy      */</comment> <expr><name>fts5DestroyMethod</name></expr>,
    <comment type="block">/* xOpen         */</comment> <expr><name>fts5OpenMethod</name></expr>,
    <comment type="block">/* xClose        */</comment> <expr><name>fts5CloseMethod</name></expr>,
    <comment type="block">/* xFilter       */</comment> <expr><name>fts5FilterMethod</name></expr>,
    <comment type="block">/* xNext         */</comment> <expr><name>fts5NextMethod</name></expr>,
    <comment type="block">/* xEof          */</comment> <expr><name>fts5EofMethod</name></expr>,
    <comment type="block">/* xColumn       */</comment> <expr><name>fts5ColumnMethod</name></expr>,
    <comment type="block">/* xRowid        */</comment> <expr><name>fts5RowidMethod</name></expr>,
    <comment type="block">/* xUpdate       */</comment> <expr><name>fts5UpdateMethod</name></expr>,
    <comment type="block">/* xBegin        */</comment> <expr><name>fts5BeginMethod</name></expr>,
    <comment type="block">/* xSync         */</comment> <expr><name>fts5SyncMethod</name></expr>,
    <comment type="block">/* xCommit       */</comment> <expr><name>fts5CommitMethod</name></expr>,
    <comment type="block">/* xRollback     */</comment> <expr><name>fts5RollbackMethod</name></expr>,
    <comment type="block">/* xFindFunction */</comment> <expr><name>fts5FindFunctionMethod</name></expr>,
    <comment type="block">/* xRename       */</comment> <expr><name>fts5RenameMethod</name></expr>,
    <comment type="block">/* xSavepoint    */</comment> <expr><name>fts5SavepointMethod</name></expr>,
    <comment type="block">/* xRelease      */</comment> <expr><name>fts5ReleaseMethod</name></expr>,
    <comment type="block">/* xRollbackTo   */</comment> <expr><name>fts5RollbackToMethod</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pGlobal</name> <operator>=</operator> <operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Global</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pGlobal</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pGlobal</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Global</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>iVersion</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>xCreateFunction</name></name> <operator>=</operator> <name>fts5CreateAux</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>xCreateTokenizer</name></name> <operator>=</operator> <name>fts5CreateTokenizer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>api</name><operator>.</operator><name>xFindTokenizer</name></name> <operator>=</operator> <name>fts5FindTokenizer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_module_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts5"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fts5Mod</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fts5ModuleDestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5ExprInit</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5AuxInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5TokenizerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>api</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5VocabInit</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(
          <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts5"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fts5Fts5Func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(
          <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts5_source_id"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fts5SourceIdFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* If SQLITE_FTS5_ENABLE_TEST_MI is defined, assume that the file
  ** fts5_test_mi.c is compiled and linked into the executable. And call
  ** its entry point to enable the matchinfo() demo.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_FTS5_ENABLE_TEST_MI</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlite3Fts5TestRegisterMatchinfo</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5TestRegisterMatchinfo</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The following functions are used to register the module with SQLite. If
** this module is being built as part of the SQLite core (SQLITE_CORE is
** defined), then sqlite3_open() will call sqlite3Fts5Init() directly.
**
** Or, if this module is being built as a loadable extension, 
** sqlite3Fts5Init() is omitted and the two standard entry points
** sqlite3_fts_init() and sqlite3_fts5_init() defined instead.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_CORE</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_fts_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt>  <comment type="block">/* Unused parameter */</comment>
  <return>return <expr><call><name>fts5Init</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_fts5_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt>  <comment type="block">/* Unused parameter */</comment>
  <return>return <expr><call><name>fts5Init</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>sqlite3Fts5Init</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5Init</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
