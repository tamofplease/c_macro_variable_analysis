<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/ext/fts5/fts5_tokenize.c"><comment type="block">/*
** 2014 May 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**************************************************************************
** Start of ascii tokenizer implementation.
*/</comment>

<comment type="block">/*
** For tokenizers with no "unicode" modifier, the set of token characters
** is the same as the set of ASCII range alphanumeric characters. 
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aAsciiTokenChar</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x00..0x0F */</comment>
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x10..0x1F */</comment>
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x20..0x2F */</comment>
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x30..0x3F */</comment>
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <comment type="block">/* 0x40..0x4F */</comment>
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x50..0x5F */</comment>
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <comment type="block">/* 0x60..0x6F */</comment>
  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,   <comment type="block">/* 0x70..0x7F */</comment>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>AsciiTokenizer</name></name></type> <name>AsciiTokenizer</name>;</typedef>
<struct>struct <name>AsciiTokenizer</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aTokenChar</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5AsciiAddExceptions</name><parameter_list>(
  <parameter><decl><type><name>AsciiTokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bTokenChars</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aTokenChar</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>bTokenChars</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Delete a "ascii" tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5AsciiDelete</name><parameter_list>(<parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Create an "ascii" tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5AsciiCreate</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>AsciiTokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>%</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AsciiTokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AsciiTokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aTokenChar</name></name></expr></argument>, <argument><expr><name>aAsciiTokenChar</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aAsciiTokenChar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nArg</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name> <init>= <expr><name><name>azArg</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tokenchars"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fts5AsciiAddExceptions</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else
        if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"separators"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fts5AsciiAddExceptions</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5AsciiDelete</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Tokenizer</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <operator>(</operator><name>Fts5Tokenizer</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>asciiFold</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nByte</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>aIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'Z'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Tokenize some text using the ascii tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5AsciiTokenize</name><parameter_list>(
  <parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iUnused</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pText</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nText</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xToken</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iEnd</name></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>AsciiTokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>AsciiTokenizer</name><operator>*</operator><operator>)</operator><name>pTokenizer</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ie</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>aFold</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nFold</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>aFold</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pFold</name> <init>= <expr><name>aFold</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>aTokenChar</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>iUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>( <expr><name>is</name><operator>&lt;</operator><name>nText</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>

    <comment type="block">/* Skip any leading divider characters. */</comment>
    <while>while<condition>( <expr><name>is</name><operator>&lt;</operator><name>nText</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pText</name><index>[<expr><name>is</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pText</name><index>[<expr><name>is</name></expr>]</index></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>is</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><name>is</name><operator>==</operator><name>nText</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <comment type="block">/* Count the token characters */</comment>
    <expr_stmt><expr><name>ie</name> <operator>=</operator> <name>is</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>ie</name><operator>&lt;</operator><name>nText</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pText</name><index>[<expr><name>ie</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator> <operator>||</operator> <name><name>a</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pText</name><index>[<expr><name>ie</name></expr>]</index></name></expr>]</index></name> <operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>ie</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Fold to lower case */</comment>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <name>ie</name><operator>-</operator><name>is</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><name>nFold</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>pFold</name><operator>!=</operator><name>aFold</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pFold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>pFold</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pFold</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>nFold</name> <operator>=</operator> <name>nByte</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>asciiFold</name><argument_list>(<argument><expr><name>pFold</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pText</name><index>[<expr><name>is</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Invoke the token callback */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xToken</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pFold</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>is</name> <operator>=</operator> <name>ie</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  
  <if_stmt><if>if<condition>( <expr><name>pFold</name><operator>!=</operator><name>aFold</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pFold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************************************************************************
** Start of unicode61 tokenizer implementation.
*/</comment>


<comment type="block">/*
** The following two macros - READ_UTF8 and WRITE_UTF8 - have been copied
** from the sqlite3 source file utf.c. If this file is compiled as part
** of the amalgamation, they are not required.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifndef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sqlite3Utf8Trans1</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
  <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
  <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_UTF8</name><parameter_list>(<parameter><type><name>zIn</name></type></parameter>, <parameter><type><name>zTerm</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>                           \
  <cpp:value>c = *(zIn++);                                            \
  if( c&gt;=0xc0 ){                                           \
    c = sqlite3Utf8Trans1[c-0xc0];                         \
    while( zIn!=zTerm &amp;&amp; (*zIn &amp; 0xc0)==0x80 ){            \
      c = (c&lt;&lt;6) + (0x3f &amp; *(zIn++));                      \
    }                                                      \
    if( c&lt;0x80                                             \
        || (c&amp;0xFFFFF800)==0xD800                          \
        || (c&amp;0xFFFFFFFE)==0xFFFE ){  c = 0xFFFD; }        \
  }</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_UTF8</name><parameter_list>(<parameter><type><name>zOut</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{                          \
  if( c&lt;0x00080 ){                                     \
    *zOut++ = (unsigned char)(c&amp;0xFF);                 \
  }                                                    \
  else if( c&lt;0x00800 ){                                \
    *zOut++ = 0xC0 + (unsigned char)((c&gt;&gt;6)&amp;0x1F);     \
    *zOut++ = 0x80 + (unsigned char)(c &amp; 0x3F);        \
  }                                                    \
  else if( c&lt;0x10000 ){                                \
    *zOut++ = 0xE0 + (unsigned char)((c&gt;&gt;12)&amp;0x0F);    \
    *zOut++ = 0x80 + (unsigned char)((c&gt;&gt;6) &amp; 0x3F);   \
    *zOut++ = 0x80 + (unsigned char)(c &amp; 0x3F);        \
  }else{                                               \
    *zOut++ = 0xF0 + (unsigned char)((c&gt;&gt;18) &amp; 0x07);  \
    *zOut++ = 0x80 + (unsigned char)((c&gt;&gt;12) &amp; 0x3F);  \
    *zOut++ = 0x80 + (unsigned char)((c&gt;&gt;6) &amp; 0x3F);   \
    *zOut++ = 0x80 + (unsigned char)(c &amp; 0x3F);        \
  }                                                    \
}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ifndef SQLITE_AMALGAMATION */</comment>

<typedef>typedef <type><name><name>struct</name> <name>Unicode61Tokenizer</name></name></type> <name>Unicode61Tokenizer</name>;</typedef>
<struct>struct <name>Unicode61Tokenizer</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aTokenChar</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* ASCII range token characters */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aFold</name></decl>;</decl_stmt>                    <comment type="block">/* Buffer to fold text into */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFold</name></decl>;</decl_stmt>                      <comment type="block">/* Size of aFold[] in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bRemoveDiacritic</name></decl>;</decl_stmt>           <comment type="block">/* True if remove_diacritics=1 is set */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nException</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiException</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5UnicodeAddExceptions</name><parameter_list>(
  <parameter><decl><type><name>Unicode61Tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,          <comment type="block">/* Tokenizer object */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,                  <comment type="block">/* Characters to treat as exceptions */</comment>
  <parameter><decl><type><name>int</name></type> <name>bTokenChars</name></decl></parameter>                 <comment type="block">/* 1 for 'tokenchars', 0 for 'separators' */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aNew</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>aNew</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nException</name></name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>aNew</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nException</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zCsr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while<condition>( <expr><name>zCsr</name><operator>&lt;</operator><name>zTerm</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iCode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bToken</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>zCsr</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>iCode</name><operator>&lt;</operator><literal type="number">128</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aTokenChar</name><index>[<expr><name>iCode</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>bTokenChars</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>bToken</name> <operator>=</operator> <call><name>sqlite3Fts5UnicodeIsalnum</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>bToken</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bToken</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>bTokenChars</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bTokenChars</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>bToken</name><operator>!=</operator><name>bTokenChars</name> <operator>&amp;&amp;</operator> <call><name>sqlite3Fts5UnicodeIsdiacritic</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nNew</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
              <if_stmt><if>if<condition>( <expr><name><name>aNew</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>iCode</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aNew</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aNew</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>nNew</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>aNew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>iCode</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nNew</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nException</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the p-&gt;aiException[] array contains the value iCode.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5UnicodeIsException</name><parameter_list>(<parameter><decl><type><name>Unicode61Tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nException</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iLo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iHi</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nException</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>iHi</name><operator>&gt;=</operator><name>iLo</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iTest</name> <init>= <expr><operator>(</operator><name>iHi</name> <operator>+</operator> <name>iLo</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>iCode</name><operator>==</operator><name><name>a</name><index>[<expr><name>iTest</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCode</name><operator>&gt;</operator><name><name>a</name><index>[<expr><name>iTest</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iLo</name> <operator>=</operator> <name>iTest</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iHi</name> <operator>=</operator> <name>iTest</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete a "unicode61" tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5UnicodeDelete</name><parameter_list>(<parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier></type><name>pTok</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pTok</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Unicode61Tokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Unicode61Tokenizer</name><operator>*</operator><operator>)</operator><name>pTok</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aFold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create a "unicode61" tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5UnicodeCreate</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Unicode61Tokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* New tokenizer object */</comment> 

  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>%</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Unicode61Tokenizer</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Unicode61Tokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Unicode61Tokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aTokenChar</name></name></expr></argument>, <argument><expr><name>aAsciiTokenChar</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aAsciiTokenChar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bRemoveDiacritic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFold</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aFold</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nFold</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aFold</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nArg</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name> <init>= <expr><name><name>azArg</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"remove_diacritics"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'1'</literal><operator>)</operator> <operator>||</operator> <name><name>zArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bRemoveDiacritic</name></name> <operator>=</operator> <operator>(</operator><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else
        if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tokenchars"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5UnicodeAddExceptions</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else
        if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"separators"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5UnicodeAddExceptions</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5UnicodeDelete</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Tokenizer</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <operator>(</operator><name>Fts5Tokenizer</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if, for the purposes of tokenizing with the tokenizer
** passed as the first argument, codepoint iCode is considered a token 
** character (not a separator).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5UnicodeIsAlnum</name><parameter_list>(<parameter><decl><type><name>Unicode61Tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><call><name>sqlite3Fts5UnicodeIsalnum</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFFE</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3Fts5UnicodeIsalnum</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>fts5UnicodeIsException</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5UnicodeTokenize</name><parameter_list>(
  <parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iUnused</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pText</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nText</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xToken</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iEnd</name></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Unicode61Tokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Unicode61Tokenizer</name><operator>*</operator><operator>)</operator><name>pTokenizer</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>aTokenChar</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pText</name><index>[<expr><name>nText</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zCsr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pText</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Output buffer */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aFold</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>aFold</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nFold</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nFold</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pEnd</name> <init>= <expr><operator>&amp;</operator><name><name>aFold</name><index>[<expr><name>nFold</name><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>iUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Each iteration of this loop gobbles up a contiguous run of separators,
  ** then the next token.  */</comment>
  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iCode</name></decl>;</decl_stmt>                    <comment type="block">/* non-ASCII codepoint read from input */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name> <init>= <expr><name>aFold</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ie</name></decl>;</decl_stmt>

    <comment type="block">/* Skip any separator characters. */</comment>
    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zCsr</name><operator>&gt;=</operator><name>zTerm</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>tokenize_done</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zCsr</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition> <block>{<block_content>
        <comment type="block">/* A character outside of the ascii range. Skip past it if it is
        ** a separator character. Or break out of the loop if it is not. */</comment>
        <expr_stmt><expr><name>is</name> <operator>=</operator> <name>zCsr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pText</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>zCsr</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>fts5UnicodeIsAlnum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <goto>goto <name>non_ascii_tokenchar</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><operator>*</operator><name>zCsr</name></expr>]</index></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>is</name> <operator>=</operator> <name>zCsr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pText</name></expr>;</expr_stmt>
          <goto>goto <name>ascii_tokenchar</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>zCsr</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Run through the tokenchars. Fold them into the output buffer along
    ** the way.  */</comment>
    <while>while<condition>( <expr><name>zCsr</name><operator>&lt;</operator><name>zTerm</name></expr> )</condition><block>{<block_content>

      <comment type="block">/* Grow the output buffer so that there is sufficient space to fit the
      ** largest possible utf-8 character.  */</comment>
      <if_stmt><if>if<condition>( <expr><name>zOut</name><operator>&gt;</operator><name>pEnd</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>aFold</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nFold</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>aFold</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
          <goto>goto <name>tokenize_done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>zOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>aFold</name><index>[<expr><name>zOut</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>aFold</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aFold</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aFold</name></name></expr></argument>, <argument><expr><name>nFold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aFold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aFold</name></name> <operator>=</operator> <name>aFold</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFold</name></name> <operator>=</operator> <name>nFold</name> <operator>=</operator> <name>nFold</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>pEnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>aFold</name><index>[<expr><name>nFold</name><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zCsr</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* An non-ascii-range character. Fold it into the output buffer if
        ** it is a token character, or break out of the loop if it is not. */</comment>
        <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>zCsr</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>fts5UnicodeIsAlnum</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>iCode</name></expr></argument>)</argument_list></call><operator>||</operator><call><name>sqlite3Fts5UnicodeIsdiacritic</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
 <label><name>non_ascii_tokenchar</name>:</label>
          <expr_stmt><expr><name>iCode</name> <operator>=</operator> <call><name>sqlite3Fts5UnicodeFold</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bRemoveDiacritic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>iCode</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>WRITE_UTF8</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>a</name><index>[<expr><operator>*</operator><name>zCsr</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* An ascii-range separator character. End of token. */</comment>
        <break>break;</break> 
      </block_content>}</block></if><else>else<block>{<block_content>
 <label><name>ascii_tokenchar</name>:</label>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zCsr</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>zCsr</name><operator>&lt;=</operator><literal type="char">'Z'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>zOut</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>zCsr</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>zOut</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>zCsr</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>zCsr</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>ie</name> <operator>=</operator> <name>zCsr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pText</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Invoke the token callback */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xToken</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>aFold</name></expr></argument>, <argument><expr><name>zOut</name><operator>-</operator><name>aFold</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></while>
  
 <label><name>tokenize_done</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************************************************************************
** Start of porter stemmer implementation.
*/</comment>

<comment type="block">/* Any tokens larger than this (in bytes) are passed through without
** stemming. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_PORTER_MAX_TOKEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>PorterTokenizer</name></name></type> <name>PorterTokenizer</name>;</typedef>
<struct>struct <name>PorterTokenizer</name> <block>{
  <decl_stmt><decl><type><name>fts5_tokenizer</name></type> <name>tokenizer</name></decl>;</decl_stmt>       <comment type="block">/* Parent tokenizer module */</comment>
  <decl_stmt><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl>;</decl_stmt>      <comment type="block">/* Parent tokenizer instance */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>aBuf</name><index>[<expr><name>FTS5_PORTER_MAX_TOKEN</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** Delete a "porter" tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PorterDelete</name><parameter_list>(<parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier></type><name>pTok</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pTok</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>PorterTokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PorterTokenizer</name><operator>*</operator><operator>)</operator><name>pTok</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pTokenizer</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>tokenizer</name><operator>.</operator><name>xDelete</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTokenizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Create a "porter" tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterCreate</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>fts5_api</name> <modifier>*</modifier></type><name>pApi</name> <init>= <expr><operator>(</operator><name>fts5_api</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PorterTokenizer</name> <modifier>*</modifier></type><name>pRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBase</name> <init>= <expr><literal type="string">"unicode61"</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zBase</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <operator>(</operator><name>PorterTokenizer</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PorterTokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PorterTokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xFindTokenizer</name></name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>zBase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUserdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>tokenizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nArg2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>nArg</name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>nArg</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>nArg2</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pRet</name><operator>-&gt;</operator><name>tokenizer</name><operator>.</operator><name>xCreate</name></name><argument_list>(<argument><expr><name>pUserdata</name></expr></argument>, <argument><expr><name>azArg2</name></expr></argument>, <argument><expr><name>nArg2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>pTokenizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5PorterDelete</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Tokenizer</name><operator>*</operator><operator>)</operator><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <operator>(</operator><name>Fts5Tokenizer</name><operator>*</operator><operator>)</operator><name>pRet</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>PorterContext</name></name></type> <name>PorterContext</name>;</typedef>
<struct>struct <name>PorterContext</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xToken</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>PorterRule</name></name></type> <name>PorterRule</name>;</typedef>
<struct>struct <name>PorterRule</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSuffix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSuffix</name></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xCond</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOutput</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nOutput</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int fts5PorterApply(char *aBuf, int *pnBuf, PorterRule *aRule){
  int ret = -1;
  int nBuf = *pnBuf;
  PorterRule *p;

  for(p=aRule; p-&gt;zSuffix; p++){
    assert( strlen(p-&gt;zSuffix)==p-&gt;nSuffix );
    assert( strlen(p-&gt;zOutput)==p-&gt;nOutput );
    if( nBuf&lt;p-&gt;nSuffix ) continue;
    if( 0==memcmp(&amp;aBuf[nBuf - p-&gt;nSuffix], p-&gt;zSuffix, p-&gt;nSuffix) ) break;
  }

  if( p-&gt;zSuffix ){
    int nStem = nBuf - p-&gt;nSuffix;
    if( p-&gt;xCond==0 || p-&gt;xCond(aBuf, nStem) ){
      memcpy(&amp;aBuf[nStem], p-&gt;zOutput, p-&gt;nOutput);
      *pnBuf = nStem + p-&gt;nOutput;
      ret = p - aRule;
    }
  }

  return ret;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterIsVowel</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bYIsVowel</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator>
      <name>c</name><operator>==</operator><literal type="char">'a'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'e'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'i'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'o'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'u'</literal> <operator>||</operator> <operator>(</operator><name>bYIsVowel</name> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><literal type="char">'y'</literal><operator>)</operator>
  <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterGobbleVC</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bPrevCons</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bCons</name> <init>= <expr><name>bPrevCons</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Scan for a vowel */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nStem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><operator>(</operator><name>bCons</name> <operator>=</operator> <operator>!</operator><call><name>fts5PorterIsVowel</name><argument_list>(<argument><expr><name><name>zStem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bCons</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Scan for a consonent */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nStem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>bCons</name> <operator>=</operator> <operator>!</operator><call><name>fts5PorterIsVowel</name><argument_list>(<argument><expr><name><name>zStem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bCons</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* porter rule condition: (m &gt; 0) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Porter_MGt0</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>!</operator><operator>!</operator><call><name>fts5PorterGobbleVC</name><argument_list>(<argument><expr><name>zStem</name></expr></argument>, <argument><expr><name>nStem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* porter rule condition: (m &gt; 1) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Porter_MGt1</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fts5PorterGobbleVC</name><argument_list>(<argument><expr><name>zStem</name></expr></argument>, <argument><expr><name>nStem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&amp;&amp;</operator> <call><name>fts5PorterGobbleVC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zStem</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>nStem</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* porter rule condition: (m = 1) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Porter_MEq1</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fts5PorterGobbleVC</name><argument_list>(<argument><expr><name>zStem</name></expr></argument>, <argument><expr><name>nStem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>fts5PorterGobbleVC</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zStem</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>nStem</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* porter rule condition: (*o) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Porter_Ostar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>zStem</name><index>[<expr><name>nStem</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal> <operator>||</operator> <name><name>zStem</name><index>[<expr><name>nStem</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal> <operator>||</operator> <name><name>zStem</name><index>[<expr><name>nStem</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'y'</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bCons</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nStem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>bCons</name> <operator>=</operator> <operator>!</operator><call><name>fts5PorterIsVowel</name><argument_list>(<argument><expr><name><name>zStem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bCons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bCons</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bCons</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>mask</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>bCons</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0x0007</literal><operator>)</operator><operator>==</operator><literal type="number">0x0005</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* porter rule condition: (m &gt; 1 and (*S or *T)) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Porter_MGt1_and_S_or_T</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nStem</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name><name>zStem</name><index>[<expr><name>nStem</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'s'</literal> <operator>||</operator> <name><name>zStem</name><index>[<expr><name>nStem</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'t'</literal><operator>)</operator> 
      <operator>&amp;&amp;</operator> <call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>zStem</name></expr></argument>, <argument><expr><name>nStem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* porter rule condition: (*v*) */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Porter_Vowel</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zStem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nStem</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nStem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>fts5PorterIsVowel</name><argument_list>(<argument><expr><name><name>zStem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**************************************************************************
***************************************************************************
** GENERATED CODE STARTS HERE (mkportersteps.tcl)
*/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterStep4</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><operator>*</operator><name>pnBuf</name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    
    <case>case <expr><literal type="char">'a'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'c'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ence"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'e'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"er"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'i'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ic"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'l'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"able"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ible"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'n'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ant"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ement"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ment"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ent"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'o'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1_and_S_or_T</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ou"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ism"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'t'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ate"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"iti"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'u'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ous"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'v'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ive"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'z'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
  </block_content>}</block></switch>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
  

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterStep1B2</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><operator>*</operator><name>pnBuf</name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    
    <case>case <expr><literal type="char">'a'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"at"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ate"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'b'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"bl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ble"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'i'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"iz"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ize"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
  </block_content>}</block></switch>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
  

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterStep2</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><operator>*</operator><name>pnBuf</name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    
    <case>case <expr><literal type="char">'a'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ational"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ate"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"tional"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"tion"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'c'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"enci"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ence"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"anci"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ance"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'e'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"izer"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ize"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'g'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"logi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'l'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"bli"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ble"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"alli"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"entli"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ent"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"eli"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ousli"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ous"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'o'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ization"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ize"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ation"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ate"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ator"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ate"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"alism"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"iveness"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ive"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"fulness"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ful"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ousness"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ous"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'t'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"aliti"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"iviti"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ive"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"biliti"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ble"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
  </block_content>}</block></switch>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
  

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterStep3</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><operator>*</operator><name>pnBuf</name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    
    <case>case <expr><literal type="char">'a'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ical"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ic"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ness"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'t'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"icate"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ic"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"iciti"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ic"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'u'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ful"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'v'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ative"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'z'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"alize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
  </block_content>}</block></switch>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
  

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterStep1B</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><operator>*</operator><name>pnBuf</name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    
    <case>case <expr><literal type="char">'e'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"eed"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt0</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ee"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ed"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_Vowel</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
    <case>case <expr><literal type="char">'n'</literal></expr>:</case> 
      <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"ing"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_Vowel</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  
  </block_content>}</block></switch>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
  
<comment type="block">/* 
** GENERATED CODE ENDS HERE (mkportersteps.tcl)
***************************************************************************
**************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PorterStep1A</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><operator>*</operator><name>pnBuf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'s'</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'e'</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nBuf</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>==</operator><literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>==</operator><literal type="char">'s'</literal><operator>)</operator> 
       <operator>||</operator> <operator>(</operator><name>nBuf</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>==</operator><literal type="char">'i'</literal> <operator>)</operator></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="char">'s'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterCb</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iStart</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iEnd</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PorterContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PorterContext</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nToken</name><operator>&gt;</operator><name>FTS5_PORTER_MAX_TOKEN</name> <operator>||</operator> <name>nToken</name><operator>&lt;</operator><literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>pass_through</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>aBuf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aBuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nBuf</name> <operator>=</operator> <name>nToken</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Step 1. */</comment>
  <expr_stmt><expr><call><name>fts5PorterStep1A</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>fts5PorterStep1B</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>fts5PorterStep1B2</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBuf</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>fts5PorterIsVowel</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
       <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'z'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr> 
      )</condition><block>{<block_content>
        <expr_stmt><expr><name>nBuf</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>fts5Porter_MEq1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fts5Porter_Ostar</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Step 1C. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <call><name>fts5Porter_Vowel</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Steps 2 through 4. */</comment>
  <expr_stmt><expr><call><name>fts5PorterStep2</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5PorterStep3</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5PorterStep4</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Step 5a. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nBuf</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'e'</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> 
     <operator>||</operator> <operator>(</operator><call><name>fts5Porter_MEq1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>fts5Porter_Ostar</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>nBuf</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Step 5b. */</comment>
  <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'l'</literal> 
   <operator>&amp;&amp;</operator> <name><name>aBuf</name><index>[<expr><name>nBuf</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <call><name>fts5Porter_MGt1</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> 
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>nBuf</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>xToken</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>tflags</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>, <argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>iEnd</name></expr></argument>)</argument_list></call></expr>;</return>

 <label><name>pass_through</name>:</label>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>xToken</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pCtx</name></name></expr></argument>, <argument><expr><name>tflags</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>iEnd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Tokenize using the porter tokenizer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PorterTokenize</name><parameter_list>(
  <parameter><decl><type><name>Fts5Tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pText</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nText</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xToken</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iEnd</name></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PorterTokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PorterTokenizer</name><operator>*</operator><operator>)</operator><name>pTokenizer</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PorterContext</name></type> <name>sCtx</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>xToken</name></name> <operator>=</operator> <name>xToken</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pCtx</name></name> <operator>=</operator> <name>pCtx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>aBuf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aBuf</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>tokenizer</name><operator>.</operator><name>xTokenize</name></name><argument_list>(
      <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTokenizer</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pText</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>, <argument><expr><name>fts5PorterCb</name></expr></argument>
  )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register all built-in tokenizers with FTS5.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5TokenizerInit</name><parameter_list>(<parameter><decl><type><name>fts5_api</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>BuiltinTokenizer</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fts5_tokenizer</name></type> <name>x</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aBuiltin</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"unicode61"</literal></expr>, <expr><block>{<expr><name>fts5UnicodeCreate</name></expr>, <expr><name>fts5UnicodeDelete</name></expr>, <expr><name>fts5UnicodeTokenize</name></expr>}</block></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"ascii"</literal></expr>,     <expr><block>{<expr><name>fts5AsciiCreate</name></expr>, <expr><name>fts5AsciiDelete</name></expr>, <expr><name>fts5AsciiTokenize</name></expr> }</block></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"porter"</literal></expr>,    <expr><block>{<expr><name>fts5PorterCreate</name></expr>, <expr><name>fts5PorterDelete</name></expr>, <expr><name>fts5PorterTokenize</name></expr> }</block></expr>}</block></expr>,
  }</block></expr></init></decl>;</struct>
  
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* To iterate through builtin functions */</comment>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aBuiltin</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xCreateTokenizer</name></name><argument_list>(<argument><expr><name>pApi</name></expr></argument>,
        <argument><expr><name><name>aBuiltin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>,
        <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pApi</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>aBuiltin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,
        <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


</unit>
