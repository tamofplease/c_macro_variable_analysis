<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/test/speedtest1.c"><comment type="block">/*
** A program for performance testing.
**
** The available command-line options are described below:
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zHelp</name><index>[]</index></name> <init>=
  <expr><literal type="string">"Usage: %s [--options] DATABASE\n"</literal>
  <literal type="string">"Options:\n"</literal>
  <literal type="string">"  --autovacuum        Enable AUTOVACUUM mode\n"</literal>
  <literal type="string">"  --cachesize N       Set the cache size to N\n"</literal> 
  <literal type="string">"  --exclusive         Enable locking_mode=EXCLUSIVE\n"</literal>
  <literal type="string">"  --explain           Like --sqlonly but with added EXPLAIN keywords\n"</literal>
  <literal type="string">"  --heap SZ MIN       Memory allocator uses SZ bytes &amp; min allocation MIN\n"</literal>
  <literal type="string">"  --incrvacuum        Enable incremenatal vacuum mode\n"</literal>
  <literal type="string">"  --journal M         Set the journal_mode to M\n"</literal>
  <literal type="string">"  --key KEY           Set the encryption key to KEY\n"</literal>
  <literal type="string">"  --lookaside N SZ    Configure lookaside for N slots of SZ bytes each\n"</literal>
  <literal type="string">"  --multithread       Set multithreaded mode\n"</literal>
  <literal type="string">"  --nomemstat         Disable memory statistics\n"</literal>
  <literal type="string">"  --nosync            Set PRAGMA synchronous=OFF\n"</literal>
  <literal type="string">"  --notnull           Add NOT NULL constraints to table columns\n"</literal>
  <literal type="string">"  --pagesize N        Set the page size to N\n"</literal>
  <literal type="string">"  --pcache N SZ       Configure N pages of pagecache each of size SZ bytes\n"</literal>
  <literal type="string">"  --primarykey        Use PRIMARY KEY instead of UNIQUE where appropriate\n"</literal>
  <literal type="string">"  --reprepare         Reprepare each statement upon every invocation\n"</literal>
  <literal type="string">"  --scratch N SZ      Configure scratch memory for N slots of SZ bytes each\n"</literal>
  <literal type="string">"  --serialized        Set serialized threading mode\n"</literal>
  <literal type="string">"  --singlethread      Set single-threaded mode - disables all mutexing\n"</literal>
  <literal type="string">"  --sqlonly           No-op.  Only show the SQL that would have been run.\n"</literal>
  <literal type="string">"  --shrink-memory     Invoke sqlite3_db_release_memory() frequently.\n"</literal>
  <literal type="string">"  --size N            Relative test size.  Default=100\n"</literal>
  <literal type="string">"  --stats             Show statistics at the end\n"</literal>
  <literal type="string">"  --testset T         Run test-set T\n"</literal>
  <literal type="string">"  --trace             Turn on SQL tracing\n"</literal>
  <literal type="string">"  --threads N         Use up to N threads for sorting\n"</literal>
  <literal type="string">"  --utf16be           Set text encoding to UTF-16BE\n"</literal>
  <literal type="string">"  --utf16le           Set text encoding to UTF-16LE\n"</literal>
  <literal type="string">"  --verify            Run additional verification steps.\n"</literal>
  <literal type="string">"  --without-rowid     Use WITHOUT ROWID where appropriate\n"</literal></expr></init></decl>
;</decl_stmt>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPACE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isspace((unsigned char)(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isdigit((unsigned char)(X))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3005000</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_int64</name></cpp:macro> <cpp:value>sqlite_int64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RBU</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"sqlite3rbu.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* All global state is held in this structure */</comment>
<struct><specifier>static</specifier> struct <name>Global</name> <block>{
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>               <comment type="block">/* The open database connection */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>       <comment type="block">/* Current SQL statement */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iStart</name></decl>;</decl_stmt>      <comment type="block">/* Start-time for the current test */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iTotal</name></decl>;</decl_stmt>      <comment type="block">/* Total time */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bWithoutRowid</name></decl>;</decl_stmt>         <comment type="block">/* True for --without-rowid */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bReprepare</name></decl>;</decl_stmt>            <comment type="block">/* True to reprepare the SQL on each rerun */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bSqlOnly</name></decl>;</decl_stmt>              <comment type="block">/* True to print the SQL once only */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bExplain</name></decl>;</decl_stmt>              <comment type="block">/* Print SQL with EXPLAIN prefix */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bVerify</name></decl>;</decl_stmt>               <comment type="block">/* Try to verify that results are correct */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bMemShrink</name></decl>;</decl_stmt>            <comment type="block">/* Call sqlite3_db_release_memory() often */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szTest</name></decl>;</decl_stmt>                <comment type="block">/* Scale factor for test iterations */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWR</name></decl>;</decl_stmt>           <comment type="block">/* Might be WITHOUT ROWID */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNN</name></decl>;</decl_stmt>           <comment type="block">/* Might be NOT NULL */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPK</name></decl>;</decl_stmt>           <comment type="block">/* Might be UNIQUE or PRIMARY KEY */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>         <comment type="block">/* Pseudo-random number generator state */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nResult</name></decl>;</decl_stmt>               <comment type="block">/* Size of the current result */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zResult</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>        <comment type="block">/* Text of the current result */</comment>
}</block> <decl><name>g</name></decl>;</struct>


<comment type="block">/* Print an error message and exit */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fatal_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return the value of a hexadecimal digit.  Return -1 if the input
** is not a hex digit.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hexDigitValue</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'f'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'F'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Provide an alternative to sqlite3_stricmp() in older versions of
** SQLite */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3007011</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_stricmp</name></cpp:macro> <cpp:value>strcmp</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Interpret zArg as an integer value, possibly with suffixes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>integerValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSuffix</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>iMult</name></decl>;</decl_stmt> }</block> <decl><name><name>aMult</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"KiB"</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"KB"</literal></expr>,  <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MB"</literal></expr>,  <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GB"</literal></expr>,  <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"K"</literal></expr>,   <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"M"</literal></expr>,   <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"G"</literal></expr>,   <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isNeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>isNeg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>zArg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>hexDigitValue</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if><else>else<block>{<block_content>
    <while>while<condition>( <expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aMult</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zSuffix</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>*=</operator> <name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iMult</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;</operator><literal type="number">0x7fffffff</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"parameter too large - max 2147483648"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>isNeg</name></expr>?</condition><then> <expr><operator>-</operator><name>v</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the current wall-clock time, in milliseconds */</comment>
<function><type><name>sqlite3_int64</name></type> <name>speedtest1_timestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3005000</literal></expr></cpp:if>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name> <modifier>*</modifier></type><name>clockVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>t</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>clockVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clockVfs</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007000</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name><name>clockVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">86400000.0</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>t</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Return a pseudo-random unsigned integer */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>speedtest1_random</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>.</operator><name>x</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><operator>~</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>x</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xd0000001</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>g</name><operator>.</operator><name>x</name></name> <operator>^</operator> <name><name>g</name><operator>.</operator><name>y</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Map the value in within the range of 1...limit into another
** number in a way that is chatic and invertable.
*/</comment>
<function><type><name>unsigned</name></type> <name>swizzle</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>limit</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>limit</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>out</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>in</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>limit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Round up a number so that it is a power of two minus one
*/</comment>
<function><type><name>unsigned</name></type> <name>roundup_allones</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>limit</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>m</name><operator>&lt;</operator><name>limit</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The speedtest1_numbername procedure below converts its argment (an integer)
** into a string which is the English-language name for that number.
** The returned string should be freed with sqlite3_free().
**
** Example:
**
**     speedtest1_numbername(123)   -&gt;  "one hundred twenty three"
*/</comment>
<function><type><name>int</name></type> <name>speedtest1_numbername</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ones</name><index>[]</index></name> <init>= <expr><block>{  <expr><literal type="string">"zero"</literal></expr>, <expr><literal type="string">"one"</literal></expr>, <expr><literal type="string">"two"</literal></expr>, <expr><literal type="string">"three"</literal></expr>, <expr><literal type="string">"four"</literal></expr>, <expr><literal type="string">"five"</literal></expr>, 
                  <expr><literal type="string">"six"</literal></expr>, <expr><literal type="string">"seven"</literal></expr>, <expr><literal type="string">"eight"</literal></expr>, <expr><literal type="string">"nine"</literal></expr>, <expr><literal type="string">"ten"</literal></expr>, <expr><literal type="string">"eleven"</literal></expr>, <expr><literal type="string">"twelve"</literal></expr>, 
                  <expr><literal type="string">"thirteen"</literal></expr>, <expr><literal type="string">"fourteen"</literal></expr>, <expr><literal type="string">"fifteen"</literal></expr>, <expr><literal type="string">"sixteen"</literal></expr>, <expr><literal type="string">"seventeen"</literal></expr>,
                  <expr><literal type="string">"eighteen"</literal></expr>, <expr><literal type="string">"nineteen"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"ten"</literal></expr>, <expr><literal type="string">"twenty"</literal></expr>, <expr><literal type="string">"thirty"</literal></expr>, <expr><literal type="string">"forty"</literal></expr>,
                 <expr><literal type="string">"fifty"</literal></expr>, <expr><literal type="string">"sixty"</literal></expr>, <expr><literal type="string">"seventy"</literal></expr>, <expr><literal type="string">"eighty"</literal></expr>, <expr><literal type="string">"ninety"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">1000000000</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">1000000000</literal></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">" billion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">1000000</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">" million"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">1000</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">" thousand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">100</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"%s hundred"</literal></expr></argument>, <argument><expr><name><name>ones</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">100</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">20</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ones</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Start a new test case */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMEWIDTH</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zDots</name><index>[]</index></name> <init>=
  <expr><literal type="string">"......................................................................."</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>speedtest1_begin_test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTestNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTestName</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zTestName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zTestName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zTestName</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><name>NAMEWIDTH</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>zName</name><index>[<expr><name>NAMEWIDTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>NAMEWIDTH</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* %4d - %s%.*s */\n"</literal></expr></argument>, <argument><expr><name>iTestNum</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>NAMEWIDTH</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><name>zDots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4d - %s%.*s "</literal></expr></argument>, <argument><expr><name>iTestNum</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>NAMEWIDTH</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><name>zDots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iStart</name></name> <operator>=</operator> <call><name>speedtest1_timestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0xad131d0b</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0x44f9eac8</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Complete a test case */</comment>
<function><type><name>void</name></type> <name>speedtest1_end_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iElapseTime</name> <init>= <expr><call><name>speedtest1_timestamp</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>g</name><operator>.</operator><name>iStart</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iTotal</name></name> <operator>+=</operator> <name>iElapseTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4d.%03ds\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iElapseTime</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iElapseTime</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Report end of testing */</comment>
<function><type><name>void</name></type> <name>speedtest1_final</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"       TOTAL%.*s %4d.%03ds\n"</literal></expr></argument>, <argument><expr><name>NAMEWIDTH</name><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>zDots</name></expr></argument>,
           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>iTotal</name></name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>iTotal</name></name><operator>%</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Print an SQL statement to standard output */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printSql</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">';'</literal> <operator>||</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bExplain</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s;\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bExplain</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007017</literal></expr></cpp:if> 
   <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"CREATE *"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>||</operator> <call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"DROP *"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>||</operator> <call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"ALTER *"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
      <operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s;\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Shrink memory used, if appropriate and if the SQLite version is capable
** of doing so.
*/</comment>
<function><type><name>void</name></type> <name>speedtest1_shrink_memory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007010</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bMemShrink</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_db_release_memory</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Run SQL */</comment>
<function><type><name>void</name></type> <name>speedtest1_exec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printSql</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zErrMsg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"SQL error: %s\n%s\n"</literal></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"exec error: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_shrink_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Prepare an SQL statement */</comment>
<function><type><name>void</name></type> <name>speedtest1_prepare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printSql</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"SQL error: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Run an SQL statement previously prepared */</comment>
<function><type><name>void</name></type> <name>speedtest1_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="string">"nil"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nResult</name></name><operator>+</operator><name>len</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nResult</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zResult</name><index>[<expr><name><name>g</name><operator>.</operator><name>nResult</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>nResult</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResult</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bReprepare</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>speedtest1_shrink_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* The sqlite3_trace() callback function */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>traceCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">';'</literal> <operator>||</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%.*s;\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Substitute random() function that gives the same random
** sequence on each run, for repeatability. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>randomFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>NotUsed</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>NotUsed2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><call><name>speedtest1_random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Estimate the square root of an integer */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>est_square_root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>y0</name> <init>= <expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>y1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>y0</name> <operator>+</operator> <name>x</name><operator>/</operator><name>y0</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>y1</name><operator>==</operator><name>y0</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>y0</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The main and default testset
*/</comment>
<function><type><name>void</name></type> <name>testset_main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                        <comment type="block">/* iteration count */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>                       <comment type="block">/* Size of the tables */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>maxb</name></decl>;</decl_stmt>                     <comment type="block">/* Maximum swizzled value */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>              <comment type="block">/* Parameters */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>                      <comment type="block">/* Length of the zNum[] string */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zNum</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* A number name */</comment>

  <expr_stmt><expr><name>sz</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>maxb</name> <operator>=</operator> <call><name>roundup_allones</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%d INSERTs into table with no index"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE t1(a INTEGER %s, b INTEGER %s, c TEXT %s);"</literal></expr></argument>,
                  <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t1 VALUES(?1,?2,?3); --  %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"%d ordered INSERTS with one index/PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE t2(a INTEGER %s %s, b INTEGER %s, c TEXT %s) %s"</literal></expr></argument>,
                   <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zPK</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t2 VALUES(?1,?2,?3); -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="string">"%d unordered INSERTS with one index/PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE t3(a INTEGER %s %s, b INTEGER %s, c TEXT %s) %s"</literal></expr></argument>,
                   <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zPK</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t3 VALUES(?1,?2,?3); -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, numeric BETWEEN, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)) FROM t1\n"</literal>
    <literal type="string">" WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, LIKE, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)) FROM t1\n"</literal>
    <literal type="string">" WHERE c LIKE ?1; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>zNum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">142</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS w/ORDER BY, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT a, b, c FROM t1 WHERE c LIKE ?1\n"</literal>
    <literal type="string">" ORDER BY a; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>zNum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <comment type="block">/* g.szTest/5; */</comment>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">145</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS w/ORDER BY and LIMIT, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT a, b, c FROM t1 WHERE c LIKE ?1\n"</literal>
    <literal type="string">" ORDER BY a LIMIT 10; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>zNum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX five times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE UNIQUE INDEX t1b ON t1(b);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t1c ON t1(c);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE UNIQUE INDEX t2b ON t2(b);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t2c ON t2(c DESC);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t3bc ON t3(b,c);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, numeric BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)) FROM t1\n"</literal>
    <literal type="string">" WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">161</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, numeric BETWEEN, PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)) FROM t2\n"</literal>
    <literal type="string">" WHERE a BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">170</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, text BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)) FROM t1\n"</literal>
    <literal type="string">" WHERE c BETWEEN ?1 AND (?1||'~'); -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><literal type="string">"%d INSERTS with three indexes"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
    <argument><expr><literal type="string">"CREATE TABLE t4(\n"</literal>
    <literal type="string">"  a INTEGER %s %s,\n"</literal>
    <literal type="string">"  b INTEGER %s,\n"</literal>
    <literal type="string">"  c TEXT %s\n"</literal>
    <literal type="string">") %s"</literal></expr></argument>,
    <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zPK</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t4b ON t4(b)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t4c ON t4(c)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t4 SELECT * FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">190</literal></expr></argument>, <argument><expr><literal type="string">"DELETE and REFILL one table"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM t2;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t2 SELECT * FROM t1;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">210</literal></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE ADD COLUMN, and query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE t2 ADD COLUMN d DEFAULT 123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"SELECT sum(d) FROM t2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">230</literal></expr></argument>, <argument><expr><literal type="string">"%d UPDATES, numeric BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"UPDATE t2 SET d=b*2 WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="string">"%d UPDATES of individual rows"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"UPDATE t2 SET d=b*3 WHERE a=?1; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="string">"One big UPDATE of the whole %d-row table"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"UPDATE t2 SET d=b*4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">260</literal></expr></argument>, <argument><expr><literal type="string">"Query added column after filling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"SELECT sum(d) FROM t2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">270</literal></expr></argument>, <argument><expr><literal type="string">"%d DELETEs, numeric BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"DELETE FROM t2 WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">280</literal></expr></argument>, <argument><expr><literal type="string">"%d DELETEs of individual rows"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"DELETE FROM t3 WHERE a=?1; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">290</literal></expr></argument>, <argument><expr><literal type="string">"Refill two %d-row tables using REPLACE"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"REPLACE INTO t2(a,b,c) SELECT a,b,c FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"REPLACE INTO t3(a,b,c) SELECT a,b,c FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="string">"Refill a %d-row table using (b&amp;1)==(a&amp;1)"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM t2;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t2(a,b,c)\n"</literal>
                  <literal type="string">" SELECT a,b,c FROM t1  WHERE (b&amp;1)==(a&amp;1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t2(a,b,c)\n"</literal>
                  <literal type="string">" SELECT a,b,c FROM t1  WHERE (b&amp;1)&lt;&gt;(a&amp;1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">310</literal></expr></argument>, <argument><expr><literal type="string">"%d four-ways joins"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT t1.c FROM t1, t2, t3, t4\n"</literal>
    <literal type="string">" WHERE t4.a BETWEEN ?1 AND ?2\n"</literal>
    <literal type="string">"   AND t3.a=t4.b\n"</literal>
    <literal type="string">"   AND t2.a=t3.b\n"</literal>
    <literal type="string">"   AND t1.c=t2.c"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>x1</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="string">"subquery in result set"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT sum(a), max(c),\n"</literal>
    <literal type="string">"       avg((SELECT a FROM t2 WHERE 5+t2.b=t1.b) AND rowid&lt;?1), max(c)\n"</literal>
    <literal type="string">" FROM t1 WHERE rowid&lt;?1;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>est_square_root</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>szTest</name></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">980</literal></expr></argument>, <argument><expr><literal type="string">"PRAGMA integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">990</literal></expr></argument>, <argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** A testset for common table expressions.  This exercises code
** for views, subqueries, co-routines, etc.
*/</comment>
<function><type><name>void</name></type> <name>testset_cte</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azPuzzle</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* Easy */</comment>
    <expr><literal type="string">"534...9.."</literal>
    <literal type="string">"67.195..."</literal>
    <literal type="string">".98....6."</literal>
    <literal type="string">"8...6...3"</literal>
    <literal type="string">"4..8.3..1"</literal>
    <literal type="string">"....2...6"</literal>
    <literal type="string">".6....28."</literal>
    <literal type="string">"...419..5"</literal>
    <literal type="string">"...28..79"</literal></expr>,

    <comment type="block">/* Medium */</comment>
    <expr><literal type="string">"53....9.."</literal>
    <literal type="string">"6..195..."</literal>
    <literal type="string">".98....6."</literal>
    <literal type="string">"8...6...3"</literal>
    <literal type="string">"4..8.3..1"</literal>
    <literal type="string">"....2...6"</literal>
    <literal type="string">".6....28."</literal>
    <literal type="string">"...419..5"</literal>
    <literal type="string">"....8..79"</literal></expr>,

    <comment type="block">/* Hard */</comment>
    <expr><literal type="string">"53......."</literal>
    <literal type="string">"6..195..."</literal>
    <literal type="string">".98....6."</literal>
    <literal type="string">"8...6...3"</literal>
    <literal type="string">"4..8.3..1"</literal>
    <literal type="string">"....2...6"</literal>
    <literal type="string">".6....28."</literal>
    <literal type="string">"...419..5"</literal>
    <literal type="string">"....8..79"</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPuz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>rSpacing</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nElem</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>szTest</name></name><operator>&lt;</operator><literal type="number">25</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zPuz</name> <operator>=</operator> <name><name>azPuzzle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>g</name><operator>.</operator><name>szTest</name></name><operator>&lt;</operator><literal type="number">70</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zPuz</name> <operator>=</operator> <name><name>azPuzzle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zPuz</name> <operator>=</operator> <name><name>azPuzzle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"Sudoku with recursive 'digits'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"WITH RECURSIVE\n"</literal>
    <literal type="string">"  input(sud) AS (VALUES(?1)),\n"</literal>
    <literal type="string">"  digits(z,lp) AS (\n"</literal>
    <literal type="string">"    VALUES('1', 1)\n"</literal>
    <literal type="string">"    UNION ALL\n"</literal>
    <literal type="string">"    SELECT CAST(lp+1 AS TEXT), lp+1 FROM digits WHERE lp&lt;9\n"</literal>
    <literal type="string">"  ),\n"</literal>
    <literal type="string">"  x(s, ind) AS (\n"</literal>
    <literal type="string">"    SELECT sud, instr(sud, '.') FROM input\n"</literal>
    <literal type="string">"    UNION ALL\n"</literal>
    <literal type="string">"    SELECT\n"</literal>
    <literal type="string">"      substr(s, 1, ind-1) || z || substr(s, ind+1),\n"</literal>
    <literal type="string">"      instr( substr(s, 1, ind-1) || z || substr(s, ind+1), '.' )\n"</literal>
    <literal type="string">"     FROM x, digits AS z\n"</literal>
    <literal type="string">"    WHERE ind&gt;0\n"</literal>
    <literal type="string">"      AND NOT EXISTS (\n"</literal>
    <literal type="string">"            SELECT 1\n"</literal>
    <literal type="string">"              FROM digits AS lp\n"</literal>
    <literal type="string">"             WHERE z.z = substr(s, ((ind-1)/9)*9 + lp, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, ((ind-1)%%9) + (lp-1)*9 + 1, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, (((ind-1)/3) %% 3) * 3\n"</literal>
    <literal type="string">"                        + ((ind-1)/27) * 27 + lp\n"</literal>
    <literal type="string">"                        + ((lp-1) / 3) * 6, 1)\n"</literal>
    <literal type="string">"         )\n"</literal>
    <literal type="string">"  )\n"</literal>
    <literal type="string">"SELECT s FROM x WHERE ind=0;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zPuz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"Sudoku with VALUES 'digits'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"WITH RECURSIVE\n"</literal>
    <literal type="string">"  input(sud) AS (VALUES(?1)),\n"</literal>
    <literal type="string">"  digits(z,lp) AS (VALUES('1',1),('2',2),('3',3),('4',4),('5',5),\n"</literal>
    <literal type="string">"                         ('6',6),('7',7),('8',8),('9',9)),\n"</literal>
    <literal type="string">"  x(s, ind) AS (\n"</literal>
    <literal type="string">"    SELECT sud, instr(sud, '.') FROM input\n"</literal>
    <literal type="string">"    UNION ALL\n"</literal>
    <literal type="string">"    SELECT\n"</literal>
    <literal type="string">"      substr(s, 1, ind-1) || z || substr(s, ind+1),\n"</literal>
    <literal type="string">"      instr( substr(s, 1, ind-1) || z || substr(s, ind+1), '.' )\n"</literal>
    <literal type="string">"     FROM x, digits AS z\n"</literal>
    <literal type="string">"    WHERE ind&gt;0\n"</literal>
    <literal type="string">"      AND NOT EXISTS (\n"</literal>
    <literal type="string">"            SELECT 1\n"</literal>
    <literal type="string">"              FROM digits AS lp\n"</literal>
    <literal type="string">"             WHERE z.z = substr(s, ((ind-1)/9)*9 + lp, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, ((ind-1)%%9) + (lp-1)*9 + 1, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, (((ind-1)/3) %% 3) * 3\n"</literal>
    <literal type="string">"                        + ((ind-1)/27) * 27 + lp\n"</literal>
    <literal type="string">"                        + ((lp-1) / 3) * 6, 1)\n"</literal>
    <literal type="string">"         )\n"</literal>
    <literal type="string">"  )\n"</literal>
    <literal type="string">"SELECT s FROM x WHERE ind=0;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zPuz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rSpacing</name> <operator>=</operator> <literal type="number">5.0</literal><operator>/</operator><name><name>g</name><operator>.</operator><name>szTest</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="string">"Mandelbrot Set with spacing=%f"</literal></expr></argument>, <argument><expr><name>rSpacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
   <argument><expr><literal type="string">"WITH RECURSIVE \n"</literal>
   <literal type="string">"  xaxis(x) AS (VALUES(-2.0) UNION ALL SELECT x+?1 FROM xaxis WHERE x&lt;1.2),\n"</literal>
   <literal type="string">"  yaxis(y) AS (VALUES(-1.0) UNION ALL SELECT y+?2 FROM yaxis WHERE y&lt;1.0),\n"</literal>
   <literal type="string">"  m(iter, cx, cy, x, y) AS (\n"</literal>
   <literal type="string">"    SELECT 0, x, y, 0.0, 0.0 FROM xaxis, yaxis\n"</literal>
   <literal type="string">"    UNION ALL\n"</literal>
   <literal type="string">"    SELECT iter+1, cx, cy, x*x-y*y + cx, 2.0*x*y + cy FROM m \n"</literal>
   <literal type="string">"     WHERE (x*x + y*y) &lt; 4.0 AND iter&lt;28\n"</literal>
   <literal type="string">"  ),\n"</literal>
   <literal type="string">"  m2(iter, cx, cy) AS (\n"</literal>
   <literal type="string">"    SELECT max(iter), cx, cy FROM m GROUP BY cx, cy\n"</literal>
   <literal type="string">"  ),\n"</literal>
   <literal type="string">"  a(t) AS (\n"</literal>
   <literal type="string">"    SELECT group_concat( substr(' .+*#', 1+min(iter/7,4), 1), '') \n"</literal>
   <literal type="string">"    FROM m2 GROUP BY cy\n"</literal>
   <literal type="string">"  )\n"</literal>
   <literal type="string">"SELECT group_concat(rtrim(t),x'0a') FROM a;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rSpacing</name><operator>*</operator><literal type="number">.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rSpacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nElem</name> <operator>=</operator> <literal type="number">10000</literal><operator>*</operator><name><name>g</name><operator>.</operator><name>szTest</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"EXCEPT operator on %d-element tables"</literal></expr></argument>, <argument><expr><name>nElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"WITH RECURSIVE \n"</literal>
    <literal type="string">"  t1(x) AS (VALUES(2) UNION ALL SELECT x+2 FROM t1 WHERE x&lt;%d),\n"</literal>
    <literal type="string">"  t2(y) AS (VALUES(3) UNION ALL SELECT y+3 FROM t2 WHERE y&lt;%d)\n"</literal>
    <literal type="string">"SELECT count(x), avg(x) FROM (\n"</literal>
    <literal type="string">"  SELECT x FROM t1 EXCEPT SELECT y FROM t2 ORDER BY 1\n"</literal>
    <literal type="string">");"</literal></expr></argument>,
    <argument><expr><name>nElem</name></expr></argument>, <argument><expr><name>nElem</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
<comment type="block">/* Generate two numbers between 1 and mx.  The first number is less than
** the second.  Usually the numbers are near each other but can sometimes
** be far apart.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>twoCoords</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>,                   <comment type="block">/* Parameters adjusting sizes */</comment>
  <parameter><decl><type><name>unsigned</name></type> <name>mx</name></decl></parameter>,                      <comment type="block">/* Range of 1..mx */</comment>
  <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pX0</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pX1</name></decl></parameter>      <comment type="block">/* OUT: write results here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>span</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>span</name> <operator>=</operator> <name>mx</name><operator>/</operator><literal type="number">100</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>span</name> <operator>*=</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>p2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>span</name> <operator>=</operator> <name>mx</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>span</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><operator>(</operator><name>mx</name><operator>-</operator><name>d</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>d</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pX0</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pX1</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
<comment type="block">/* The following routine is an R-Tree geometry callback.  It returns
** true if the object overlaps a slice on the Y coordinate between the
** two values given as arguments.  In other words
**
**     SELECT count(*) FROM rt1 WHERE id MATCH xslice(10,20);
**
** Is the same as saying:
**
**     SELECT count(*) FROM rt1 WHERE y1&gt;=10 AND y0&lt;=20;
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>xsliceGeometryCallback</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_rtree_geometry</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nCoord</name></decl></parameter>,
  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>aCoord</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name><name>aCoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>aCoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_RTREE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
<comment type="block">/*
** A testset for the R-Tree virtual table
*/</comment>
<function><type><name>void</name></type> <name>testset_rtree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>mxCoord</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>iStep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aCheck</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">100</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>mxCoord</name> <operator>=</operator> <literal type="number">15000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%d INSERTs into an r-tree"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE VIRTUAL TABLE rt1 USING rtree(id,x0,x1,y0,y1,z0,z1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO rt1(id,x0,x1,y0,y1,z0,z1)"</literal>
                     <literal type="string">"VALUES(?1,?2,?3,?4,?5,?6,?7)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>twoCoords</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>mxCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>twoCoords</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>mxCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>twoCoords</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>mxCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>z0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>z1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="string">"Copy from rtree to a regular table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE t1(id INTEGER PRIMARY KEY,x0,x1,y0,y1,z0,z1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t1 SELECT * FROM rt1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">20</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"%d one-dimensional intersect slice queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE x0&gt;=?1 AND x1&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bVerify</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">20</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="string">"Verify result from 1-D intersect slice queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM t1 WHERE x0&gt;=?1 AND x1&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Count disagree step %d: %d..%d.  %d vs %d"</literal></expr></argument>,
                    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">20</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="string">"%d one-dimensional overlap slice queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE y1&gt;=?1 AND y0&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bVerify</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">20</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">121</literal></expr></argument>, <argument><expr><literal type="string">"Verify result from 1-D overlap slice queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM t1 WHERE y1&gt;=?1 AND y0&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Count disagree step %d: %d..%d.  %d vs %d"</literal></expr></argument>,
                    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">20</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="string">"%d custom geometry callback queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_rtree_geometry_callback</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"xslice"</literal></expr></argument>, <argument><expr><name>xsliceGeometryCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE id MATCH xslice(?1,?2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Count disagree step %d: %d..%d.  %d vs %d"</literal></expr></argument>,
                  <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">80</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="string">"%d three-dimensional intersect box queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE x1&gt;=?1 AND x0&lt;=?2"</literal>
                     <literal type="string">" AND y1&gt;=?1 AND y0&lt;=?2 AND z1&gt;=?1 AND z0&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="string">"%d rowid queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM rt1 WHERE id=?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_RTREE */</comment>

<comment type="block">/*
** A testset used for debugging speedtest1 itself.
*/</comment>
<function><type><name>void</name></type> <name>testset_debug1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zNum</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* A number name */</comment>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d %5d %5d %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>doAutovac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True for --autovacuum */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>cacheSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Desired cache size.  0 means default */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doExclusive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* True for --exclusive */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mnHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Heap size from --heap */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doIncrvac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True for --incrvacuum */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zJMode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Journal mode */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Encryption key */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>szLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* --lookaside configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>noSync</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* True for --nosync */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Desired page size.  0 means default */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>szPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><comment type="block">/* --pcache configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* True if --pcache is seen */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nScratch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>szScratch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><comment type="block">/* --scratch configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>showStats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True for --stats */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nThread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* --threads value */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTSet</name> <init>= <expr><literal type="string">"main"</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Which --testset torun */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doTrace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* True for --trace */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEncoding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* --utf16be or --utf16le */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Name of the test database */</comment>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Allocated heap space */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Allocated lookaside space */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Allocated storage for pcache */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pScratch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Allocated storage for scratch */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCur</name></decl>, <decl><type ref="prev"/><name>iHi</name></decl>;</decl_stmt>                <comment type="block">/* Stats values, current and "highwater" */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                       <comment type="block">/* API return code */</comment>

  <comment type="block">/* Process command-line arguments */</comment>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zWR</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zNN</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zPK</name></name> <operator>=</operator> <literal type="string">"UNIQUE"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>szTest</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <do>do<block>{<block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition>;</do>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"autovacuum"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doAutovac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"cachesize"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheSize</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"exclusive"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doExclusive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"explain"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bExplain</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"heap"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mnHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"incrvacuum"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doIncrvac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zJMode</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zKey</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"lookaside"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nLook</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szLook</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"multithread"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MULTITHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"nomemstat"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MEMSTATUS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"nosync"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>noSync</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"notnull"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zNN</name></name> <operator>=</operator> <literal type="string">"NOT NULL"</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RBU</name></cpp:ifdef>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"rbu"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3ota_create_vfs</name><argument_list>(<argument><expr><literal type="string">"rbu"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="string">"rbu"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"pagesize"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pageSize</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"pcache"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nPCache</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szPCache</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>doPCache</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"primarykey"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zPK</name></name> <operator>=</operator> <literal type="string">"PRIMARY KEY"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"reprepare"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bReprepare</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"scratch"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nScratch</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szScratch</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"serialized"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"singlethread"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SINGLETHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"sqlonly"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"shrink-memory"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bMemShrink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>szTest</name></name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"stats"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>showStats</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"testset"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zTSet</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"trace"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doTrace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"threads"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nThread</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"utf16le"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zEncoding</name> <operator>=</operator> <literal type="string">"utf16le"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"utf16be"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zEncoding</name> <operator>=</operator> <literal type="string">"utf16be"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"verify"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bVerify</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"without-rowid"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zWR</name></name> <operator>=</operator> <literal type="string">"WITHOUT ROWID"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zPK</name></name> <operator>=</operator> <literal type="string">"PRIMARY KEY"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>zHelp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"unknown option: %s\nUse \"%s -?\" for help\n"</literal></expr></argument>,
                    <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zDbName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDbName</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"surplus argument: %s\nUse \"%s -?\" for help\n"</literal></expr></argument>,
                  <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if( zDbName==0 ){
    fatal_error(zHelp, argv[0]);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>nHeap</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pHeap</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nHeap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pHeap</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %d-byte heap\n"</literal></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_HEAP</name></expr></argument>, <argument><expr><name>pHeap</name></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>, <argument><expr><name>mnHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"heap configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>doPCache</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>nPCache</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>szPCache</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pPCache</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nPCache</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szPCache</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pPCache</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %lld-byte pcache\n"</literal></expr></argument>,
                                   <argument><expr><name>nPCache</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szPCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_PAGECACHE</name></expr></argument>, <argument><expr><name>pPCache</name></expr></argument>, <argument><expr><name>szPCache</name></expr></argument>, <argument><expr><name>nPCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"pcache configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nScratch</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>szScratch</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pScratch</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nScratch</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szScratch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pScratch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %lld-byte scratch\n"</literal></expr></argument>,
                                 <argument><expr><name>nScratch</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szScratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SCRATCH</name></expr></argument>, <argument><expr><name>pScratch</name></expr></argument>, <argument><expr><name>szScratch</name></expr></argument>, <argument><expr><name>nScratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"scratch configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLook</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_LOOKASIDE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
  <comment type="block">/* Open the database and the input file */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_open</name><argument_list>(<argument><expr><name>zDbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Cannot open database file: %s\n"</literal></expr></argument>, <argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>nLook</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>szLook</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pLook</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nLook</name><operator>*</operator><name>szLook</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_db_config</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBCONFIG_LOOKASIDE</name></expr></argument>, <argument><expr><name>pLook</name></expr></argument>, <argument><expr><name>szLook</name></expr></argument>,<argument><expr><name>nLook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"lookaside configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Set database connection options */</comment>
  <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>randomFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>doTrace</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_trace</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>traceCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA threads=%d"</literal></expr></argument>, <argument><expr><name>nThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zKey</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA key('%s')"</literal></expr></argument>, <argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zEncoding</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA encoding=%s"</literal></expr></argument>, <argument><expr><name>zEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>doAutovac</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA auto_vacuum=FULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>doIncrvac</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA auto_vacuum=INCREMENTAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pageSize</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA page_size=%d"</literal></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cacheSize</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cache_size=%d"</literal></expr></argument>, <argument><expr><name>cacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>noSync</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA synchronous=OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>doExclusive</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA locking_mode=EXCLUSIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zJMode</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA journal_mode=%s"</literal></expr></argument>, <argument><expr><name>zJMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bExplain</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">".explain\n.echo on\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zTSet</name></expr></argument>,<argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testset_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zTSet</name></expr></argument>,<argument><expr><literal type="string">"debug1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testset_debug1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zTSet</name></expr></argument>,<argument><expr><literal type="string">"cte"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testset_cte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zTSet</name></expr></argument>,<argument><expr><literal type="string">"rtree"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>testset_rtree</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">147</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"compile with -DSQLITE_ENABLE_RTREE to enable "</literal>
                <literal type="string">"the R-Tree tests\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"unknown testset: \"%s\"\nChoices: main debug1 cte rtree\n"</literal></expr></argument>,
                 <argument><expr><name>zTSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>speedtest1_final</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Database connection statistics printed after both prepared statements
  ** have been finalized */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007009</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside Slots Used:        %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Successful lookasides:       %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside size faults:       %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside OOM faults:        %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Pager Heap Usage:            %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_HIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache hits:             %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_MISS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache misses:           %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007012</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache writes:           %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_SCHEMA_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Schema Heap Usage:           %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_STMT_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Statement Heap Usage:        %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <comment type="block">/* Global memory usage statistics printed after the database connection
  ** has closed.  Memory usage should be zero at this point. */</comment>
  <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MEMORY_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Memory Used (bytes):         %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007000</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MALLOC_COUNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Outstanding Allocations:     %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_PAGECACHE_OVERFLOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Pcache Overflow Bytes:       %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_SCRATCH_OVERFLOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Scratch Overflow Bytes:      %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MALLOC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Largest Allocation:          %d bytes\n"</literal></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_PAGECACHE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Largest Pcache Allocation:   %d bytes\n"</literal></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_SCRATCH_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Largest Scratch Allocation:  %d bytes\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Release memory */</comment>
  <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pLook</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pPCache</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pScratch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pHeap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
