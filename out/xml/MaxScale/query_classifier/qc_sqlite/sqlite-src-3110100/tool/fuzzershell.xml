<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/tool/fuzzershell.c"><comment type="block">/*
** 2015-04-17
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This is a utility program designed to aid running the SQLite library
** against an external fuzzer, such as American Fuzzy Lop (AFL)
** (http://lcamtuf.coredump.cx/afl/).  Basically, this program reads
** SQL text from standard input and passes it through to SQLite for evaluation,
** just like the "sqlite3" command-line shell.  Differences from the
** command-line shell:
**
**    (1)  The complex "dot-command" extensions are omitted.  This
**         prevents the fuzzer from discovering that it can run things
**         like ".shell rm -rf ~"
**
**    (2)  The database is opened with the SQLITE_OPEN_MEMORY flag so that
**         no disk I/O from the database is permitted.  The ATTACH command
**         with a filename still uses an in-memory database.
**
**    (3)  The main in-memory database can be initialized from a template
**         disk database so that the fuzzer starts with a database containing
**         content.
**
**    (4)  The eval() SQL function is added, allowing the fuzzer to do 
**         interesting recursive operations.
**
**    (5)  An error is raised if there is a memory leak.
**
** The input text can be divided into separate test cases using comments
** of the form:
**
**       |****&lt;...&gt;****|
**
** where the "..." is arbitrary text. (Except the "|" should really be "/".
** "|" is used here to avoid compiler errors about nested comments.)
** A separate in-memory SQLite database is created to run each test case.
** This feature allows the "queue" of AFL to be captured into a single big
** file using a command like this:
**
**    (for i in id:*; do echo '|****&lt;'$i'&gt;****|'; cat $i; done) &gt;~/all-queue.txt
**
** (Once again, change the "|" to "/") Then all elements of the AFL queue
** can be run in a single go (for regression testing, for example) by typing:
**
**    fuzzershell -f ~/all-queue.txt
**
** After running each chunk of SQL, the database connection is closed.  The
** program aborts if the close fails or if there is any unfreed memory after
** the close.
**
** New test cases can be appended to all-queue.txt at any time.  If redundant
** test cases are added, they can be eliminated by running:
**
**    fuzzershell -f ~/all-queue.txt --unique-cases ~/unique-cases.txt
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isdigit((unsigned char)(X))</cpp:value></cpp:define>

<comment type="block">/*
** All global variables are gathered into the "g" singleton.
*/</comment>
<struct>struct <name>GlobalVars</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgv0</name></decl>;</decl_stmt>              <comment type="block">/* Name of program */</comment>
  <decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>sOrigMem</name></decl>;</decl_stmt>    <comment type="block">/* Original memory methods */</comment>
  <decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>sOomMem</name></decl>;</decl_stmt>     <comment type="block">/* Memory methods with OOM simulator */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOomCntdown</name></decl>;</decl_stmt>                 <comment type="block">/* Memory fails on 1 to 0 transition */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nOomFault</name></decl>;</decl_stmt>                   <comment type="block">/* Increments for each OOM fault */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bOomOnce</name></decl>;</decl_stmt>                    <comment type="block">/* Fail just once if true */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bOomEnable</name></decl>;</decl_stmt>                  <comment type="block">/* True to enable OOM simulation */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nOomBrkpt</name></decl>;</decl_stmt>                   <comment type="block">/* Number of calls to oomFault() */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zTestName</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>             <comment type="block">/* Name of current test */</comment>
}</block> <decl><name>g</name></decl>;</struct>

<comment type="block">/*
** Maximum number of iterations for an OOM test
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OOM_MAX</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>OOM_MAX</name></cpp:macro> <cpp:value>625</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** This routine is called when a simulated OOM occurs.  It exists as a
** convenient place to set a debugger breakpoint.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>oomFault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nOomBrkpt</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Prevent oomFault() from being optimized out */</comment>
</block_content>}</block></function>


<comment type="block">/* Versions of malloc() and realloc() that simulate OOM conditions */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>oomMalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>g</name><operator>.</operator><name>bOomEnable</name></name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>.</operator><name>iOomCntdown</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iOomCntdown</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>iOomCntdown</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nOomFault</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>oomFault</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nOomFault</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><operator>.</operator><name>bOomOnce</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iOomCntdown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>g</name><operator>.</operator><name>sOrigMem</name><operator>.</operator><name>xMalloc</name></name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>oomRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>g</name><operator>.</operator><name>bOomEnable</name></name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>.</operator><name>iOomCntdown</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iOomCntdown</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>iOomCntdown</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nOomFault</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>oomFault</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nOomFault</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><operator>.</operator><name>bOomOnce</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iOomCntdown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>g</name><operator>.</operator><name>sOrigMem</name><operator>.</operator><name>xRealloc</name></name><argument_list>(<argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Print an error message and abort in such a way to indicate to the
** fuzzer that this counts as a crash.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>abendError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>zTestName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s (%s): "</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zArgv0</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zTestName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zArgv0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
** Print an error message and quit, but not in a way that would look
** like a crash.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fatalError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>zTestName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s (%s): "</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zArgv0</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zTestName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zArgv0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Evaluate some SQL.  Abort if unable.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlexec</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"failed sql [%s]: %s"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This callback is invoked by sqlite3_log().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>shellLog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pNotUsed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErrCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"LOG: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>iErrCode</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>shellLogNoop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pNotUsed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErrCode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
** This callback is invoked by sqlite3_exec() to return query results.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>execCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>colv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ROW #%u:\n"</literal></expr></argument>, <argument><expr><operator>++</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s="</literal></expr></argument>, <argument><expr><name><name>colv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>execNoop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>colv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRACE</name></cpp:ifndef>
<comment type="block">/*
** This callback is invoked by sqlite3_trace() as each SQL statement
** starts.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>traceCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TRACE: %s\n"</literal></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>traceNoop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/***************************************************************************
** eval() implementation copied from ../ext/misc/eval.c
*/</comment>
<comment type="block">/*
** Structure used to accumulate the output
*/</comment>
<struct>struct <name>EvalResult</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>               <comment type="block">/* Accumulated output */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name></decl>;</decl_stmt>      <comment type="block">/* Separator */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szSep</name></decl>;</decl_stmt>             <comment type="block">/* Size of the separator string */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nAlloc</name></decl>;</decl_stmt>  <comment type="block">/* Number of bytes allocated for z[] */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nUsed</name></decl>;</decl_stmt>   <comment type="block">/* Number of bytes of z[] actually used */</comment>
}</block>;</struct>

<comment type="block">/*
** Callback from sqlite_exec() for the eval() function.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>colnames</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>EvalResult</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>EvalResult</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> 
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><ternary><condition><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>sz</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>szSep</name></name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNew</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name>sz</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>szSep</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <comment type="block">/* Using sqlite3_realloc64() would be better, but it is a recent
      ** addition and will cause a segfault if loaded by an older version
      ** of SQLite.  */</comment>
      <expr_stmt><expr><name>zNew</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>&lt;=</operator><literal type="number">0x7fffffff</literal></expr> ?</condition><then> <expr><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name>zNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>z</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zSep</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szSep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>szSep</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>z</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the eval(X) and eval(X,Y) SQL functions.
**
** Evaluate the SQL text in X.  Return the results, using string
** Y as the separator.  If Y is omitted, use a single space character.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlEvalFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>EvalResult</name></name></type> <name>x</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>zSep</name></name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>zSep</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>x</name><operator>.</operator><name>zSep</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>szSep</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>zSep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>x</name><operator>.</operator><name>zSep</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x</name><operator>.</operator><name>nUsed</name></name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/* End of the eval() implementation
******************************************************************************/</comment>

<comment type="block">/*
** Print sketchy documentation for this utility program
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>showHelp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [options] ?FILE...?\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zArgv0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(
<argument><expr><literal type="string">"Read SQL text from FILE... (or from standard input if FILE... is omitted)\n"</literal>
<literal type="string">"and then evaluate each block of SQL contained therein.\n"</literal>
<literal type="string">"Options:\n"</literal>
<literal type="string">"  --autovacuum          Enable AUTOVACUUM mode\n"</literal>
<literal type="string">"  --database FILE       Use database FILE instead of an in-memory database\n"</literal>
<literal type="string">"  --disable-lookaside   Turn off lookaside memory\n"</literal>
<literal type="string">"  --heap SZ MIN         Memory allocator uses SZ bytes &amp; min allocation MIN\n"</literal>
<literal type="string">"  --help                Show this help text\n"</literal>    
<literal type="string">"  --lookaside N SZ      Configure lookaside for N slots of SZ bytes each\n"</literal>
<literal type="string">"  --oom                 Run each test multiple times in a simulated OOM loop\n"</literal>
<literal type="string">"  --pagesize N          Set the page size to N\n"</literal>
<literal type="string">"  --pcache N SZ         Configure N pages of pagecache each of size SZ bytes\n"</literal>
<literal type="string">"  -q                    Reduced output\n"</literal>
<literal type="string">"  --quiet               Reduced output\n"</literal>
<literal type="string">"  --scratch N SZ        Configure scratch memory for N slots of SZ bytes each\n"</literal>
<literal type="string">"  --unique-cases FILE   Write all unique test cases to FILE\n"</literal>
<literal type="string">"  --utf16be             Set text encoding to UTF-16BE\n"</literal>
<literal type="string">"  --utf16le             Set text encoding to UTF-16LE\n"</literal>
<literal type="string">"  -v                    Increased output\n"</literal>
<literal type="string">"  --verbose             Increased output\n"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return the value of a hexadecimal digit.  Return -1 if the input
** is not a hex digit.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hexDigitValue</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'f'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'F'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Interpret zArg as an integer value, possibly with suffixes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>integerValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSuffix</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>iMult</name></decl>;</decl_stmt> }</block> <decl><name><name>aMult</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"KiB"</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"KB"</literal></expr>,  <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MB"</literal></expr>,  <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GB"</literal></expr>,  <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"K"</literal></expr>,   <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"M"</literal></expr>,   <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"G"</literal></expr>,   <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isNeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>isNeg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>zArg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>hexDigitValue</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if><else>else<block>{<block_content>
    <while>while<condition>( <expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aMult</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zSuffix</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>*=</operator> <name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iMult</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;</operator><literal type="number">0x7fffffff</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"parameter too large - max 2147483648"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>isNeg</name></expr>?</condition><then> <expr><operator>-</operator><name>v</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the current wall-clock time */</comment>
<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>timeOfDay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name> <modifier>*</modifier></type><name>clockVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>t</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>clockVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clockVfs</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>clockVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">86400000.0</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* Input text */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Number of bytes allocated for zIn[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Number of bytes of zIn[] used */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>got</name></decl>;</decl_stmt>                   <comment type="block">/* Bytes read from input */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>           <comment type="block">/* Result codes from API functions */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iNext</name></decl>;</decl_stmt>                    <comment type="block">/* Next block of SQL */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                  <comment type="block">/* Open database */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Error message returned from sqlite3_exec() */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEncoding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* --utf16be or --utf16le */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mnHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Heap size from --heap */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>szLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* --lookaside configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>szPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><comment type="block">/* --pcache configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nScratch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>szScratch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><comment type="block">/* --scratch configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Desired page size.  0 means default */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Allocated heap space */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Allocated lookaside space */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Allocated storage for pcache */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pScratch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Allocated storage for scratch */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doAutovac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True for --autovacuum */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>                   <comment type="block">/* SQL to run */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zToFree</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Call sqlite3_free() on this afte running zSql */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>verboseFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* --verbose or -v flag */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>quietFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* --quiet or -q flag */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* Number of test cases run */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>multiTest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True if there will be multiple test cases */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>lastPct</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Previous percentage done output */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>dataDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Database holding compacted input data */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Statement to insert testcase into dataDb */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDataOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* Write compacted data to this output file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nHeader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Bytes of header comment text on input file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>oomFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* --oom */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>oomCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Counter for the OOM loop */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zErrBuf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>            <comment type="block">/* Space for the error message */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFailCode</name></decl>;</decl_stmt>        <comment type="block">/* Value of the TEST_FAILURE environment var */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrompt</name></decl>;</decl_stmt>          <comment type="block">/* Initial prompt when large-file fuzzing */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Number of input files to read */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azInFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Array of input file names */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>                       <comment type="block">/* Loop counter for azInFile[] */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iBegin</name></decl>;</decl_stmt>         <comment type="block">/* Start time for the whole program */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iStart</name></decl>, <decl><type ref="prev"/><name>iEnd</name></decl>;</decl_stmt>   <comment type="block">/* Start and end-times for a test case */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Name of an on-disk database file to open */</comment>

  <expr_stmt><expr><name>iBegin</name> <operator>=</operator> <call><name>timeOfDay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFailCode</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TEST_FAILURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zArgv0</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zPrompt</name> <operator>=</operator> <literal type="string">"&lt;stdin&gt;"</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"autovacuum"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doAutovac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"database"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zDbName</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"disable-lookaside"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>nLook</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>szLook</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>argc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <goto>goto <name>addNewInFile</name>;</goto>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"heap"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mnHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>showHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"lookaside"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nLook</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szLook</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"oom"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>oomFlag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"pagesize"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pageSize</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"pcache"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nPCache</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szPCache</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"quiet"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>quietFlag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>verboseFlag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"scratch"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nScratch</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szScratch</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"unique-cases"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>zDataOut</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"only one --minimize allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zDataOut</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"utf16le"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zEncoding</name> <operator>=</operator> <literal type="string">"utf16le"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"utf16be"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zEncoding</name> <operator>=</operator> <literal type="string">"utf16be"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"verbose"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>quietFlag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>verboseFlag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"unknown option: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <label><name>addNewInFile</name>:</label>
      <expr_stmt><expr><name>nInFile</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>azInFile</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>azInFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>azInFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nInFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>azInFile</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>azInFile</name><index>[<expr><name>nInFile</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Do global SQLite initialization */</comment>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_LOG</name></expr></argument>, <argument><expr><ternary><condition><expr><name>verboseFlag</name></expr> ?</condition><then> <expr><name>shellLog</name></expr> </then><else>: <expr><name>shellLogNoop</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nHeap</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pHeap</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nHeap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pHeap</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatalError</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %d-byte heap\n"</literal></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_HEAP</name></expr></argument>, <argument><expr><name>pHeap</name></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>, <argument><expr><name>mnHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"heap configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>oomFlag</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_GETMALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>sOrigMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>sOomMem</name></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>sOrigMem</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>sOomMem</name><operator>.</operator><name>xMalloc</name></name> <operator>=</operator> <name>oomMalloc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>sOomMem</name><operator>.</operator><name>xRealloc</name></name> <operator>=</operator> <name>oomRealloc</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>sOomMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLook</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_LOOKASIDE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>szLook</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pLook</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nLook</name><operator>*</operator><name>szLook</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pLook</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatalError</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nScratch</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>szScratch</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pScratch</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nScratch</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szScratch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pScratch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatalError</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %lld-byte scratch"</literal></expr></argument>,
                                 <argument><expr><name>nScratch</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szScratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SCRATCH</name></expr></argument>, <argument><expr><name>pScratch</name></expr></argument>, <argument><expr><name>szScratch</name></expr></argument>, <argument><expr><name>nScratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"scratch configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nPCache</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>szPCache</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pPCache</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nPCache</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szPCache</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pPCache</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatalError</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %lld-byte pcache"</literal></expr></argument>,
                                 <argument><expr><name>nPCache</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szPCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_PAGECACHE</name></expr></argument>, <argument><expr><name>pPCache</name></expr></argument>, <argument><expr><name>szPCache</name></expr></argument>, <argument><expr><name>nPCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"pcache configuration failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If the --unique-cases option was supplied, open the database that will
  ** be used to gather unique test cases.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>zDataOut</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"cannot open :memory: database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>,
          <argument><expr><literal type="string">"CREATE TABLE testcase(sql BLOB PRIMARY KEY, tm) WITHOUT ROWID;"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>,
          <argument><expr><literal type="string">"INSERT OR IGNORE INTO testcase(sql,tm)VALUES(?1,?2)"</literal></expr></argument>,
          <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Initialize the input buffer used to hold SQL text */</comment>
  <if_stmt><if>if<condition>( <expr><name>nInFile</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nInFile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nAlloc</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>zIn</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zIn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatalError</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Loop over all input files */</comment>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name>nInFile</name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

    <comment type="block">/* Read the complete content of the next input file into zIn[] */</comment>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>azInFile</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>azInFile</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"cannot open %s for reading"</literal></expr></argument>, <argument><expr><name><name>azInFile</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zPrompt</name> <operator>=</operator> <name><name>azInFile</name><index>[<expr><name>jj</name></expr>]</index></name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zPrompt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if<condition>( <expr><name><name>zPrompt</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">'/'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
      <expr_stmt><expr><name>zPrompt</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>in</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zPrompt</name> <operator>=</operator> <literal type="string">"&lt;stdin&gt;"</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <while>while<condition>( <expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>zIn</name><operator>+</operator><name>nIn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nAlloc</name><operator>-</operator><name>nIn</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name>nIn</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>got</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zIn</name><index>[<expr><name>nIn</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>got</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>nAlloc</name> <operator>-</operator> <name>nIn</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">100</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>nAlloc</name> <operator>+=</operator> <name>nAlloc</name><operator>+</operator><literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>zIn</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zIn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatalError</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><name>in</name><operator>!=</operator><name>stdin</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>lastPct</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Skip initial lines of the input file that begin with "#" */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIn</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name>iNext</name><operator>+</operator><literal type="number">1</literal></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'#'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <for>for<control>(<init><expr><name>iNext</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iNext</name><operator>&lt;</operator><name>nIn</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><name>iNext</name></expr>]</index></name><operator>!=</operator><literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>iNext</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><name>nHeader</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

    <comment type="block">/* Process all test cases contained within the input file.
    */</comment>
    <for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIn</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name>iNext</name></expr><operator>,</operator> <expr><name>nTest</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>g</name><operator>.</operator><name>zTestName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>cSaved</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"/****&lt;"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"&gt;****/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>z</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zTestName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zTestName</name></name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, 
                           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z</name><operator>-</operator><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>verboseFlag</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z</name><operator>-</operator><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z</name><operator>-</operator><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>multiTest</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>iNext</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>iNext</name><operator>&lt;</operator><name>nIn</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>iNext</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"/****&lt;"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iNext</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <expr_stmt><expr><name>cSaved</name> <operator>=</operator> <name><name>zIn</name><index>[<expr><name>iNext</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zIn</name><index>[<expr><name>iNext</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


      <comment type="block">/* Print out the SQL of the next test case is --verbose is enabled
      */</comment>
      <expr_stmt><expr><name>zSql</name> <operator>=</operator> <operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>verboseFlag</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"INPUT (offset: %d, size: %d): [%s]\n"</literal></expr></argument>,
                <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>multiTest</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quietFlag</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>oomFlag</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zTestName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>pct</name> <init>= <expr><operator>(</operator><literal type="number">10</literal><operator>*</operator><name>iNext</name><operator>)</operator><operator>/</operator><name>nIn</name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>pct</name><operator>!=</operator><name>lastPct</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>lastPct</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name>zPrompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d%%"</literal></expr></argument>, <argument><expr><name>pct</name><operator>*</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastPct</name> <operator>=</operator> <name>pct</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nInFile</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zPrompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Run the next test case.  Run it multiple times in --oom mode
      */</comment>
      <if_stmt><if>if<condition>( <expr><name>oomFlag</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>oomCnt</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>iOomCntdown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nOomFault</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bOomOnce</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>verboseFlag</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Once.%d\n"</literal></expr></argument>, <argument><expr><name>oomCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>oomCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <do>do<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>zDbName</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zDbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>SQLITE_OPEN_READWRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"Cannot open database file %s"</literal></expr></argument>, <argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(
            <argument><expr><literal type="string">"main.db"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>,
            <argument><expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name> <operator>|</operator> <name>SQLITE_OPEN_MEMORY</name></expr></argument>,
            <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"Unable to open the in-memory database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>pLook</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_db_config</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBCONFIG_LOOKASIDE</name></expr></argument>,<argument><expr><name>pLook</name></expr></argument>,<argument><expr><name>szLook</name></expr></argument>,<argument><expr><name>nLook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"lookaside configuration filed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRACE</name></cpp:ifndef>
        <expr_stmt><expr><call><name>sqlite3_trace</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><ternary><condition><expr><name>verboseFlag</name></expr> ?</condition><then> <expr><name>traceCallback</name></expr> </then><else>: <expr><name>traceNoop</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"eval"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sqlEvalFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"eval"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sqlEvalFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_LIMIT_LENGTH</name></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zEncoding</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlexec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA encoding=%s"</literal></expr></argument>, <argument><expr><name>zEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>pageSize</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlexec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA pagesize=%d"</literal></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>doAutovac</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlexec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA auto_vacuum=FULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>timeOfDay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bOomEnable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>verboseFlag</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zErrMsg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>execCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>zErrMsg</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zErrBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zErrBuf</name></expr></argument>,<argument><expr><literal type="string">"%z"</literal></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>zErrMsg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>execNoop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bOomEnable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <call><name>timeOfDay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"sqlite3_close() failed with rc=%d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zDataOut</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_memory_used</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"memory in use after close: %lld bytes"</literal></expr></argument>,<argument><expr><call><name>sqlite3_memory_used</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>oomFlag</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* Limit the number of iterations of the OOM loop to OOM_MAX.  If the
          ** first pass (single failure) exceeds 2/3rds of OOM_MAX this skip the
          ** second pass (continuous failure after first) completely. */</comment>
          <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nOomFault</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>oomCnt</name><operator>&gt;</operator><name>OOM_MAX</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bOomOnce</name></name> <operator>&amp;&amp;</operator> <name>oomCnt</name><operator>&lt;=</operator><operator>(</operator><name>OOM_MAX</name><operator>*</operator><literal type="number">2</literal><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name>oomCnt</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>iOomCntdown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bOomOnce</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
              <expr_stmt><expr><name>oomCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iOomCntdown</name></name> <operator>=</operator> <operator>++</operator><name>oomCnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nOomFault</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>oomCnt</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verboseFlag</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s.%d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>g</name><operator>.</operator><name>bOomOnce</name></name></expr> ?</condition><then> <expr><literal type="string">"Once"</literal></expr> </then><else>: <expr><literal type="string">"Multi"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>oomCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>nTest</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>while<condition>( <expr><name>oomCnt</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition>;</do>

      <comment type="block">/* Store unique test cases in the in the dataDb database if the
      ** --unique-cases flag is present
      */</comment>
      <if_stmt><if>if<condition>( <expr><name>zDataOut</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iNext</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iEnd</name> <operator>-</operator> <name>iStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_DONE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Free the SQL from the current test case
      */</comment>
      <if_stmt><if>if<condition>( <expr><name>zToFree</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zToFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zToFree</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>zIn</name><index>[<expr><name>iNext</name></expr>]</index></name> <operator>=</operator> <name>cSaved</name></expr>;</expr_stmt>

      <comment type="block">/* Show test-case results in --verbose mode
      */</comment>
      <if_stmt><if>if<condition>( <expr><name>verboseFlag</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RESULT-CODE: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zErrMsg</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR-MSG: [%s]\n"</literal></expr></argument>, <argument><expr><name>zErrBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Simulate an error if the TEST_FAILURE environment variable is "5".
      ** This is used to verify that automated test script really do spot
      ** errors that occur in this test program.
      */</comment>
      <if_stmt><if>if<condition>( <expr><name>zFailCode</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>zFailCode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'5'</literal> <operator>&amp;&amp;</operator> <name><name>zFailCode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"simulated failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zFailCode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* If TEST_FAILURE is something other than 5, just exit the test
          ** early */</comment>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExit early due to TEST_FAILURE being set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>verboseFlag</name> <operator>&amp;&amp;</operator> <name>multiTest</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quietFlag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>oomFlag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Report total number of tests run
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>nTest</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>quietFlag</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iElapse</name> <init>= <expr><call><name>timeOfDay</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iBegin</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: 0 errors out of %d tests in %d.%03d seconds\nSQLite %s %s\n"</literal></expr></argument>,
           <argument><expr><name><name>g</name><operator>.</operator><name>zArgv0</name></name></expr></argument>, <argument><expr><name>nTest</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iElapse</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iElapse</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>,
           <argument><expr><call><name>sqlite3_libversion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>sqlite3_sourceid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Write the unique test cases if the --unique-cases flag was used
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>zDataOut</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>zDataOut</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>out</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"cannot open %s for writing"</literal></expr></argument>, <argument><expr><name>zDataOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>nHeader</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><name>nHeader</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>, <argument><expr><literal type="string">"SELECT sql, tm FROM testcase ORDER BY tm, sql"</literal></expr></argument>,
                            <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abendError</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><literal type="string">"/****&lt;%d:%dms&gt;****/"</literal></expr></argument>, <argument><expr><operator>++</operator><name>n</name></expr></argument>, <argument><expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>dataDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Clean up and exit.
  */</comment>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>azInFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pLook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pScratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pPCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
