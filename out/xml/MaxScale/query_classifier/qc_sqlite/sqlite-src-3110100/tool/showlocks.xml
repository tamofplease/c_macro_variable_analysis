<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/tool/showlocks.c"><comment type="block">/*
** This file implements a simple command-line utility that shows all of the
** Posix Advisory Locks on a file.
**
** Usage:
**
**     showlocks FILENAME
**
** To compile:  gcc -o showlocks showlocks.c
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* This utility only looks for locks in the first 2 billion bytes */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX_LCK</name></cpp:macro> <cpp:value>2147483647</cpp:value></cpp:define>

<comment type="block">/*
** Print all locks on the inode of "fd" that occur in between
** lwr and upr, inclusive.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>showLocksInRange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>lwr</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>upr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>x</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name>F_WRLCK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <name>lwr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <name>upr</name><operator>-</operator><name>lwr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETLK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>x</name><operator>.</operator><name>l_type</name></name><operator>==</operator><name>F_UNLCK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start: %-12d len: %-5d pid: %-5d type: %s\n"</literal></expr></argument>,
       <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x</name><operator>.</operator><name>l_start</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x</name><operator>.</operator><name>l_len</name></name></expr></argument>,
       <argument><expr><name><name>x</name><operator>.</operator><name>l_pid</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>l_type</name></name><operator>==</operator><name>F_WRLCK</name></expr> ?</condition><then> <expr><literal type="string">"WRLCK"</literal></expr> </then><else>: <expr><literal type="string">"RDLCK"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>x</name><operator>.</operator><name>l_start</name></name><operator>&gt;</operator><name>lwr</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>showLocksInRange</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>lwr</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>l_start</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>x</name><operator>.</operator><name>l_start</name></name><operator>+</operator><name><name>x</name><operator>.</operator><name>l_len</name></name><operator>&lt;</operator><name>upr</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>showLocksInRange</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>l_start</name></name><operator>+</operator><name><name>x</name><operator>.</operator><name>l_len</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>upr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>cnt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s FILENAME\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>fd</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: cannot open %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>showLocksInRange</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MX_LCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"no locks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
