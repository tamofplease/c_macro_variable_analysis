<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/tool/showdb.c"><comment type="block">/*
** A utility for printing all or part of an SQLite database file.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isdigit((unsigned char)(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPRINT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isprint((unsigned char)(X))</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>


<struct><specifier>static</specifier> struct <name>GlobalData</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>pagesize</name></decl>;</decl_stmt>                   <comment type="block">/* Size of a database page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>dbfd</name></decl>;</decl_stmt>                       <comment type="block">/* File descriptor for reading the DB */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mxPage</name></decl>;</decl_stmt>                     <comment type="block">/* Last page number */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>perLine</name></decl>;</decl_stmt>                    <comment type="block">/* HEX elements to print per line */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bRaw</name></decl>;</decl_stmt>                       <comment type="block">/* True to access db file via OS APIs */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFd</name></decl>;</decl_stmt>              <comment type="block">/* File descriptor for non-raw mode */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>                   <comment type="block">/* Database handle that owns pFd */</comment>
}</block> <decl><name>g</name> <init>= <expr><block>{<expr><literal type="number">1024</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>


<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>i64</name>;</typedef>      <comment type="block">/* Datatype for 64-bit integers */</comment>


<comment type="block">/*
** Convert the var-int format into i64.  Return the number of bytes
** in the var-int.  Write the var-int value into *pVal.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decodeVarint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Extract a big-endian 32-bit integer
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>decodeInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Report an out-of-memory error and die.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>out_of_memory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Out of memory...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Open a database connection.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3</name> <modifier>*</modifier></type><name>openDatabase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_URI</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: can't open %s (%s)\n"</literal></expr></argument>, <argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************************************************************************
** Beginning of low-level file access functions.
**
** All low-level access to the database file read by this program is
** performed using the following four functions:
**
**   fileOpen()     - open the db file
**   fileClose()    - close the db file
**   fileRead()     - read raw data from the db file
**   fileGetsize()  - return the size of the db file in bytes
*/</comment>

<comment type="block">/*
** Open the database file.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fileOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>g</name><operator>.</operator><name>dbfd</name></name><operator>&lt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bRaw</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>pFd</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pDb</name></name> <operator>=</operator> <call><name>openDatabase</name><argument_list>(<argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pDb</name></name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, 
          <argument><expr><literal type="string">"%s: failed to obtain fd for %s (SQLite too old?)\n"</literal></expr></argument>, <argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>dbfd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>dbfd</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: can't open %s\n"</literal></expr></argument>, <argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close the database file opened by fileOpen()
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fileClose</name><parameter_list>()</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bRaw</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pFd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>dbfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>dbfd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Read content from the file.
**
** Space to hold the content is obtained from sqlite3_malloc() and needs 
** to be freed by the caller.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fileRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_int64</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>got</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aData</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>out_of_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bRaw</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>pFd</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pFd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>aData</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>SQLITE_IOERR_SHORT_READ</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error in xRead() - %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>dbfd</name></name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>dbfd</name></name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>got</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>got</name><operator>&lt;</operator><name>nByte</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><name>got</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name><operator>-</operator><name>got</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>aData</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the size of the file in byte.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>fileGetsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bRaw</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>pFd</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pFd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error in xFileSize() - %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>dbfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name><name>sbuf</name><operator>.</operator><name>st_size</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** End of low-level file access functions.
**************************************************************************/</comment>

<comment type="block">/*
** Print a range of bytes as hex and as ascii.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>print_byte_range</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>,          <comment type="block">/* First byte in the range of bytes to print */</comment>
  <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,         <comment type="block">/* Number of bytes to print */</comment>
  <parameter><decl><type><name>int</name></type> <name>printOfst</name></decl></parameter>      <comment type="block">/* Add this amount to the index on the left column */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOfstFmt</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xfff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %03x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xffff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %04x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xfffff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %05x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xffffff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %06x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %08x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nByte</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name><name>g</name><operator>.</operator><name>perLine</name></name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>zOfstFmt</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>printOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>g</name><operator>.</operator><name>perLine</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><name>j</name><operator>&gt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>g</name><operator>.</operator><name>perLine</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><name>j</name><operator>&gt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>ISPRINT</name><argument_list>(<argument><expr><name><name>aData</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>aData</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>aData</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Print an entire page of content as hex
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_page</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iPg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iStart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>iStart</name> <operator>=</operator> <operator>(</operator><name>iPg</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Page %d:   (offsets 0x%x..0x%x)\n"</literal></expr></argument>,
          <argument><expr><name>iPg</name></expr></argument>, <argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>iStart</name><operator>+</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>print_byte_range</name><argument_list>(<argument><expr><name>iStart</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Print a line of decode output showing a 4-byte integer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_decode_line</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,      <comment type="block">/* Content being decoded */</comment>
  <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,       <comment type="block">/* Start and size of decode */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>           <comment type="block">/* Message to append */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>aData</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">" %03x: %02x"</literal></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;=</operator><name>nByte</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>ofst</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>aData</name><index>[<expr><name>ofst</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"   %9d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s  %s\n"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Decode the database header.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_db_header</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>print_byte_range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decoded:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Database page size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File format write version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"File format read version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Reserved space at end of page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"File change counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Size of database in pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Page number of first freelist page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Number of freelist pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Schema cookie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Schema format version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Default page cache size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Largest auto-vac root page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Text encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"User version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Incremental-vacuum mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">68</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Application ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"meta[8]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">76</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"meta[9]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"meta[10]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"meta[11]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"meta[12]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">92</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Change counter for version number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"SQLite version number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Describe cell content.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>describeContent</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,       <comment type="block">/* Cell content */</comment>
  <parameter><decl><type><name>i64</name></type> <name>nLocal</name></decl></parameter>,             <comment type="block">/* Bytes in a[] */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zDesc</name></decl></parameter>             <comment type="block">/* Write description here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>nDesc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pLimit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>sep</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pLimit</name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><index>[<expr><name>nLocal</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pData</name><operator>&lt;=</operator><name>pLimit</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLocal</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zDesc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>zDesc</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* NULL is a "*" */</comment>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><literal type="number">6</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
      <switch>switch<condition>( <expr><name>x</name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
        <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
        <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">9</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>&gt;=</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"blob(%lld)"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"txt(%lld)"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zDesc</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>nDesc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Compute the local payload size given the total payload size and
** the page size.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>localPayload</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>nPayload</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>cType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>maxLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>minLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>surplus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nLocal</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Table leaf */</comment>
    <expr_stmt><expr><name>maxLocal</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">35</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minLocal</name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">32</literal><operator>/</operator><literal type="number">255</literal><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>maxLocal</name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal><operator>/</operator><literal type="number">255</literal><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minLocal</name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">32</literal><operator>/</operator><literal type="number">255</literal><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nPayload</name><operator>&gt;</operator><name>maxLocal</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>surplus</name> <operator>=</operator> <name>minLocal</name> <operator>+</operator> <operator>(</operator><name>nPayload</name><operator>-</operator><name>minLocal</name><operator>)</operator><operator>%</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>surplus</name><operator>&lt;=</operator><name>maxLocal</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>surplus</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>minLocal</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>nPayload</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>nLocal</name></expr>;</return>
</block_content>}</block></function>
  

<comment type="block">/*
** Create a description for a single cell.
**
** The return value is the local cell size.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>describeCell</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>cType</name></decl></parameter>,    <comment type="block">/* Page type */</comment>
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,       <comment type="block">/* Cell content */</comment>
  <parameter><decl><type><name>int</name></type> <name>showCellContent</name></decl></parameter>,    <comment type="block">/* Show cell content if true */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzDesc</name></decl></parameter>           <comment type="block">/* Store description here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nDesc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>leftChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>rowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>zDesc</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>&lt;=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>leftChild</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"lx: %d "</literal></expr></argument>, <argument><expr><name>leftChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"n: %lld "</literal></expr></argument>, <argument><expr><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <call><name>localPayload</name><argument_list>(<argument><expr><name>nPayload</name></expr></argument>, <argument><expr><name>cType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <name>nLocal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>==</operator><literal type="number">5</literal> <operator>||</operator> <name>cType</name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r: %lld "</literal></expr></argument>, <argument><expr><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLocal</name><operator>&lt;</operator><name>nPayload</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ovfl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>nLocal</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ovfl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ov: %d "</literal></expr></argument>, <argument><expr><name>ovfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>showCellContent</name> <operator>&amp;&amp;</operator> <name>cType</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>describeContent</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nLocal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzDesc</name> <operator>=</operator> <name>zDesc</name></expr>;</expr_stmt>
  <return>return <expr><name>nLocal</name><operator>+</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Print an offset followed by nByte bytes.  Add extra white-space
** at the end so that subsequent text is aligned.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printBytes</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,      <comment type="block">/* Content being decoded */</comment>
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aStart</name></decl></parameter>,     <comment type="block">/* Start of content to be printed */</comment>
  <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>                  <comment type="block">/* Number of bytes to print */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %03x: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>aStart</name><operator>-</operator><name>aData</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;=</operator><name>nByte</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>aStart</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
** Write a full decode on stdout for the cell at a[ofst].
** Assume the page contains a header of size szPgHdr bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decodeCell</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,       <comment type="block">/* Page content (without the page-1 header) */</comment>
  <parameter><decl><type><name>unsigned</name></type> <name>pgno</name></decl></parameter>,          <comment type="block">/* Page number */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCell</name></decl></parameter>,              <comment type="block">/* Cell index */</comment>
  <parameter><decl><type><name>int</name></type> <name>szPgHdr</name></decl></parameter>,            <comment type="block">/* Size of the page header.  0 or 100 */</comment>
  <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>                <comment type="block">/* Cell begins at a[ofst] */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>leftChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>rowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>a</name> <operator>+</operator> <name>ofst</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cType</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>szCol</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>ofstCol</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>typeCol</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cell[%d]:\n"</literal></expr></argument>, <argument><expr><name>iCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>&lt;=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>leftChild</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"left child page:: %d\n"</literal></expr></argument>, <argument><expr><name>leftChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <call><name>localPayload</name><argument_list>(<argument><expr><name>nPayload</name></expr></argument>, <argument><expr><name>cType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nLocal</name><operator>==</operator><name>nPayload</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"payload-size: %lld\n"</literal></expr></argument>, <argument><expr><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"payload-size: %lld (%lld local, %lld overflow)\n"</literal></expr></argument>,
             <argument><expr><name>nPayload</name></expr></argument>, <argument><expr><name>nLocal</name></expr></argument>, <argument><expr><name>nPayload</name><operator>-</operator><name>nLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <name>nLocal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>nLocal</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>==</operator><literal type="number">5</literal> <operator>||</operator> <name>cType</name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"rowid: %lld\n"</literal></expr></argument>, <argument><expr><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLocal</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"record-header-size: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <name>nHdr</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>x</name><operator>+</operator><name>j</name><operator>&lt;</operator><name>end</name> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;</operator><name>nHdr</name></expr> )</condition><block>{<block_content>
       <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTypeName</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>char</name></type> <name><name>zNm</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
       <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"typecode[%d]: %d - "</literal></expr></argument>, <argument><expr><name>nCol</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <switch>switch<condition>( <expr><name>iType</name></expr> )</condition><block>{<block_content>
         <case>case <expr><literal type="number">0</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>    <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"int8"</literal></expr>;</expr_stmt>    <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"int16"</literal></expr>;</expr_stmt>   <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"int24"</literal></expr>;</expr_stmt>   <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"int32"</literal></expr>;</expr_stmt>   <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"int48"</literal></expr>;</expr_stmt>   <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"int64"</literal></expr>;</expr_stmt>   <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"double"</literal></expr>;</expr_stmt>  <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"zero"</literal></expr>;</expr_stmt>    <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"one"</literal></expr>;</expr_stmt>     <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <break>break;</break>
         <case>case <expr><literal type="number">10</literal></expr>:</case>
         <case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <literal type="string">"error"</literal></expr>;</expr_stmt>   <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <break>break;</break>
         <default>default:</default> <block>{<block_content>
           <expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iType</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zNm</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>iType</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"blob(%d)"</literal></expr> </then><else>: <expr><literal type="string">"text(%d)"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name>zTypeName</name> <operator>=</operator> <name>zNm</name></expr>;</expr_stmt>
           <break>break;</break>
         </block_content>}</block>
       </block_content>}</block></switch>
       <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zTypeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>szCol</name><index>[<expr><name>nCol</name></expr>]</index></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>ofstCol</name><index>[<expr><name>nCol</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>typeCol</name><index>[<expr><name>nCol</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>iType</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>nCol</name><operator>++</operator></expr>;</expr_stmt>
       <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name> <operator>&amp;&amp;</operator> <name><name>ofstCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>nLocal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
       <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>ofstCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>i64</name></type> <name>v</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
       <if_stmt><if>if<condition>( <expr><name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
       <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>s</name></expr></argument>, <argument><expr><name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"data[%d]: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>pData</name> <operator>=</operator> <name>x</name><operator>+</operator><name>s</name></expr>;</expr_stmt>
       <if_stmt><if>if<condition>( <expr><name><name>typeCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
         <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
         <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
           <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
         </block_content>}</block></for>
         <if_stmt><if>if<condition>( <expr><name><name>typeCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
           <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
           <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%#g\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if><else>else<block>{<block_content>
           <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
       </block_content>}</block></if><else>else<block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>, <decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>
         <decl_stmt><decl><type><name>char</name></type> <name><name>zConst</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
         <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>typeCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
           <expr_stmt><expr><name><name>zConst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>zConst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
           <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator> <expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><literal type="number">24</literal></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr><operator>,</operator> <expr><name>ii</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
             <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zConst</name><operator>+</operator><name>ii</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>pData</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></for>
         </block_content>}</block></if><else>else<block>{<block_content>
           <expr_stmt><expr><name><name>zConst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
           <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><literal type="number">24</literal></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr><operator>,</operator> <expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
             <expr_stmt><expr><name><name>zConst</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>ISPRINT</name><argument_list>(<argument><expr><name><name>pData</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pData</name><index>[<expr><name>jj</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr>;</expr_stmt>
           </block_content>}</block></for>
           <expr_stmt><expr><name><name>zConst</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
         <if_stmt><if>if<condition>( <expr><name>jj</name><operator>&lt;</operator><name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
           <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zConst</name><operator>+</operator><name>ii</name></expr></argument>, <argument><expr><literal type="string">"...'"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if><else>else<block>{<block_content>
           <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zConst</name><operator>+</operator><name>ii</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></else></if_stmt>
         <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zConst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
       <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ofstCol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>szCol</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>j</name><operator>&lt;</operator><name>nLocal</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"... %lld bytes of content ...\n"</literal></expr></argument>, <argument><expr><name>nLocal</name><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLocal</name><operator>&lt;</operator><name>nPayload</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printBytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>nLocal</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"overflow-page: %d\n"</literal></expr></argument>, <argument><expr><call><name>decodeInt32</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>nLocal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Decode a btree page
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_btree_page</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,   <comment type="block">/* Page content */</comment>
  <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>,           <comment type="block">/* Page number */</comment>
  <parameter><decl><type><name>int</name></type> <name>hdrSize</name></decl></parameter>,        <comment type="block">/* Size of the page header.  0 or 100 */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zArgs</name></decl></parameter>         <comment type="block">/* Flags to control formatting */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCellPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>showCellContent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>showMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cellToDecode</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"index interior node"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"table interior node"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"index leaf"</literal></expr>;</expr_stmt>           <break>break;</break>
    <case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"table leaf"</literal></expr>;</expr_stmt>           <break>break;</break>
  </block_content>}</block></switch>
  <while>while<condition>( <expr><name><name>zArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><name><name>zArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>showCellContent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <break>break;</break>
      <case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>showMap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>          <break>break;</break>
      <case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>zArgs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>cellToDecode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>cellToDecode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <while>while<condition>( <expr><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>zArgs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>zArgs</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>cellToDecode</name> <operator>=</operator> <name>cellToDecode</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name><name>zArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
          </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>zArgs</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>nCell</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iCellPtr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>cellToDecode</name><operator>&gt;=</operator><name>nCell</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Page %d has only %d cells\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>nCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Header on btree page %d:\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Offset to first freeblock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Number of cells on this page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Offset to cell content area"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Fragmented byte count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Right child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cellToDecode</name><operator>==</operator><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>nCell</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" key: lx=left-child n=payload-size r=rowid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>showMap</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zMap</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zMap</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zMap</name></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><name>hdrSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>hdrSize</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><name>iCellPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>hdrSize</name><operator>+</operator><name>iCellPtr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>nCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cofst</name> <init>= <expr><name>iCellPtr</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDesc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cofst</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>cofst</name></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><name>cofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>describeCell</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>cofst</name><operator>-</operator><name>hdrSize</name></expr>]</index></name></expr></argument>, <argument><expr><name>showCellContent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>showMap</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>cofst</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zMap</name><index>[<expr><name>cofst</name></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zMap</name><index>[<expr><name>cofst</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>cofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>cellToDecode</name><operator>==</operator><operator>(</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %03x: cell[%d] %s\n"</literal></expr></argument>, <argument><expr><name>cofst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>cellToDecode</name><operator>==</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>cellToDecode</name><operator>==</operator><name>i</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>decodeCell</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>hdrSize</name></expr></argument>, <argument><expr><name>cofst</name><operator>-</operator><name>hdrSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>showMap</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Page map:  (H=header P=cell-index 1=page-1-header .=free-space)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">64</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %03x: %.64s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Decode a freelist trunk page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_trunk_page</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>,             <comment type="block">/* The page number */</comment>
  <parameter><decl><type><name>int</name></type> <name>detail</name></decl></parameter>,           <comment type="block">/* Show leaf pages if true */</comment>
  <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>         <comment type="block">/* Follow the trunk change if true */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>pgno</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><operator>(</operator><name>pgno</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decode of freelist trunk page %d:\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Next freelist trunk page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"Number of entries on this page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>detail</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>decodeInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><call><name>decodeInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>zIdx</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zIdx</name></expr></argument>, <argument><expr><literal type="string">"[%d]"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  %5s %7u"</literal></expr></argument>, <argument><expr><name>zIdx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>%</operator><literal type="number">5</literal><operator>==</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>%</operator><literal type="number">5</literal><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>recursive</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pgno</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>decodeInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
** A short text comment on the use of each page.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>zPageUse</name></decl>;</decl_stmt>

<comment type="block">/*
** Add a comment on the use of a page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>page_usage_msg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zMsg</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>pgno</name><operator>&gt;</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: page %d out of range 1..%d: %s\n"</literal></expr></argument>,
            <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zPageUse</name><index>[<expr><name>pgno</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: page %d used multiple times:\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR:    previous: %s\n"</literal></expr></argument>, <argument><expr><name><name>zPageUse</name><index>[<expr><name>pgno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR:    current:  %s\n"</literal></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>zPageUse</name><index>[<expr><name>pgno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>zPageUse</name><index>[<expr><name>pgno</name></expr>]</index></name> <operator>=</operator> <name>zMsg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Find overflow pages of a cell and describe their usage.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>page_usage_cell</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>cType</name></decl></parameter>,    <comment type="block">/* Page type */</comment>
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,       <comment type="block">/* Cell content */</comment>
  <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>,               <comment type="block">/* page containing the cell */</comment>
  <parameter><decl><type><name>int</name></type> <name>cellno</name></decl></parameter>              <comment type="block">/* Index of the cell on the page */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>rowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nLocal</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>&lt;=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <call><name>localPayload</name><argument_list>(<argument><expr><name>nPayload</name></expr></argument>, <argument><expr><name>cType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <name>nLocal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>==</operator><literal type="number">5</literal> <operator>||</operator> <name>cType</name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLocal</name><operator>&lt;</operator><name>nPayload</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ovfl</name> <init>= <expr><call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>nLocal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>ovfl</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cnt</name><operator>++</operator><operator>)</operator><operator>&lt;</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>page_usage_msg</name><argument_list>(<argument><expr><name>ovfl</name></expr></argument>, <argument><expr><literal type="string">"overflow %d from cell %d of page %d"</literal></expr></argument>,
                     <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>cellno</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><operator>(</operator><name>ovfl</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ovfl</name> <operator>=</operator> <call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Describe the usages of a b-tree page
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>page_usage_btree</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>,             <comment type="block">/* Page to describe */</comment>
  <parameter><decl><type><name>int</name></type> <name>parent</name></decl></parameter>,           <comment type="block">/* Parent of this page.  0 for root pages */</comment>
  <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>,              <comment type="block">/* Which child of the parent */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>     <comment type="block">/* Name of the table */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">"corrupt node"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hdr</name> <init>= <expr><ternary><condition><expr><name>pgno</name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>pgno</name><operator>&gt;</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><operator>(</operator><name>pgno</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"interior node of index"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"interior node of table"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"leaf of index"</literal></expr>;</expr_stmt>           <break>break;</break>
    <case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"leaf of table"</literal></expr>;</expr_stmt>           <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if<condition>( <expr><name>parent</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>page_usage_msg</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"%s [%s], child %d of page %d"</literal></expr></argument>,
                   <argument><expr><name>zType</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>page_usage_msg</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"root %s [%s]"</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>nCell</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>hdr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><name>hdr</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cellstart</name> <init>= <expr><name>hdr</name><operator>+</operator><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>child</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ofst</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>ofst</name> <operator>=</operator> <name>cellstart</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>ofst</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>ofst</name></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><name>ofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>ofst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>page_usage_btree</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>cellstart</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>page_usage_btree</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name><operator>==</operator><literal type="number">10</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cellstart</name> <init>= <expr><name>hdr</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name><operator>&lt;=</operator><literal type="number">5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ofst</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>ofst</name> <operator>=</operator> <name>cellstart</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>ofst</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>ofst</name></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><name>ofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>page_usage_cell</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>hdr</name></expr>]</index></name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>ofst</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Determine page usage by the freelist
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>page_usage_freelist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iNext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>parent</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><name>pgno</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pgno</name><operator>&lt;=</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>cnt</name><operator>++</operator><operator>)</operator><operator>&lt;</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>page_usage_msg</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"freelist trunk #%d child of %d"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><operator>(</operator><name>pgno</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iNext</name> <operator>=</operator> <call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>child</name> <init>= <expr><call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>page_usage_msg</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><literal type="string">"freelist leaf, child %d of trunk page %d"</literal></expr></argument>,
                     <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <name>iNext</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
** Determine pages used as PTRMAP pages
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>page_usage_ptrmap</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>usable</name> <init>= <expr><name><name>g</name><operator>.</operator><name>pagesize</name></name> <operator>-</operator> <name><name>a</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pgno</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>perPage</name> <init>= <expr><name>usable</name><operator>/</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>pgno</name><operator>&lt;=</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>page_usage_msg</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"PTRMAP page covering %d..%d"</literal></expr></argument>,
                           <argument><expr><name>pgno</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgno</name><operator>+</operator><name>perPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pgno</name> <operator>+=</operator> <name>perPage</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Try to figure out how every page in the database file is being used.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>page_usage_report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zQuery</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Avoid the pathological case */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>mxPage</name></name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"empty database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Open the database file */</comment>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>openDatabase</name><argument_list>(<argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set up global variables zPageUse[] and g.mxPage to record page
  ** usages */</comment>
  <expr_stmt><expr><name>zPageUse</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>zPageUse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zPageUse</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>out_of_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zPageUse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>zPageUse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Discover the usage of each page */</comment>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>page_usage_freelist</name><argument_list>(<argument><expr><call><name>decodeInt32</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>page_usage_ptrmap</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>page_usage_btree</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"sqlite_master"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema=ON"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zQuery</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zQuery</name></expr></argument>,
             <argument><expr><literal type="string">"SELECT type, name, rootpage FROM SQLITE_MASTER WHERE rootpage"</literal>
             <literal type="string">" ORDER BY rowid %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name></expr>?</condition><then><expr><literal type="string">"DESC"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zQuery</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pgno</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>page_usage_btree</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: cannot query database: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Print the report and free memory used */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>zPageUse</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>zPageUse</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>zPageUse</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zPageUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zPageUse</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Try to figure out how every page in the database file is being used.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ptrmap_coverage_report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>usable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>perPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Avoid the pathological case */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>mxPage</name></name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"empty database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Make sure PTRMAPs are used in this database */</comment>
  <expr_stmt><expr><name>aHdr</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>aHdr</name><index>[<expr><literal type="number">55</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"database does not use PTRMAP pages\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>usable</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>pagesize</name></name> <operator>-</operator> <name><name>aHdr</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>perPage</name> <operator>=</operator> <name>usable</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d: root of sqlite_master\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pgno</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>pgno</name><operator>&lt;=</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr>;</condition> <incr><expr><name>pgno</name> <operator>+=</operator> <name>perPage</name><operator>+</operator><literal type="number">1</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d: PTRMAP page covering %d..%d\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>,
           <argument><expr><name>pgno</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgno</name><operator>+</operator><name>perPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><operator>(</operator><name>pgno</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>, <argument><expr><name>usable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">5</literal><operator>&lt;=</operator><name>usable</name> <operator>&amp;&amp;</operator> <name>pgno</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>/</operator><literal type="number">5</literal><operator>&lt;=</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">5</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">"???"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iFrom</name> <init>= <expr><call><name>decodeInt32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch<condition>( <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"b-tree root page"</literal></expr>;</expr_stmt>        <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"freelist page"</literal></expr>;</expr_stmt>           <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"first page of overflow"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"later page of overflow"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"b-tree non-root page"</literal></expr>;</expr_stmt>    <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d: %s, parent=%u\n"</literal></expr></argument>, <argument><expr><name>pgno</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>/</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Print a usage comment
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage %s ?--uri? FILENAME ?args...?\n\n"</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
    <argument><expr><literal type="string">"switches:\n"</literal>
    <literal type="string">"    --raw           Read db file directly, bypassing SQLite VFS\n"</literal>
    <literal type="string">"args:\n"</literal>
    <literal type="string">"    dbheader        Show database header\n"</literal>
    <literal type="string">"    pgidx           Index of how each page is used\n"</literal>
    <literal type="string">"    ptrmap          Show all PTRMAP page content\n"</literal>
    <literal type="string">"    NNN..MMM        Show hex of pages NNN through MMM\n"</literal>
    <literal type="string">"    NNN..end        Show hex of pages NNN through end of file\n"</literal>
    <literal type="string">"    NNNb            Decode btree page NNN\n"</literal>
    <literal type="string">"    NNNbc           Decode btree page NNN and show content\n"</literal>
    <literal type="string">"    NNNbm           Decode btree page NNN and show a layout map\n"</literal>
    <literal type="string">"    NNNbdCCC        Decode cell CCC on btree page NNN\n"</literal>
    <literal type="string">"    NNNt            Decode freelist trunk page NNN\n"</literal>
    <literal type="string">"    NNNtd           Show leaf freelist pages on the decode\n"</literal>
    <literal type="string">"    NNNtr           Recursively decode freelist starting at NNN\n"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>szFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zPgSz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrg</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>     <comment type="block">/* Name of this executable */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name> <init>= <expr><name>argv</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nArg</name> <init>= <expr><name>argc</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check for the "--uri" or "-uri" switch. */</comment>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"-raw"</literal></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
     <operator>||</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"--raw"</literal></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bRaw</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>azArg</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>nArg</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>zPrg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fileOpen</name><argument_list>(<argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>szFile</name> <operator>=</operator> <call><name>fileGetsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>zPgSz</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name> <operator>=</operator> <name><name>zPgSz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>zPgSz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">65536</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zPgSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pagesize: %d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>mxPage</name></name> <operator>=</operator> <operator>(</operator><name>szFile</name><operator>+</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Available pages: 1..%d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_page</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nArg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iStart</name></decl>, <decl><type ref="prev"/><name>iEnd</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLeft</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"dbheader"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>print_db_header</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"pgidx"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>page_usage_report</name><argument_list>(<argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ptrmap"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>ptrmap_coverage_report</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>zPrg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: unknown option: [%s]\n"</literal></expr></argument>, <argument><expr><name>zPrg</name></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zLeft</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"..end"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>mxPage</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <name><name>zLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>zLeft</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLeft</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <name><name>zLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'b'</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ofst</name></decl>, <decl><type ref="prev"/><name>nByte</name></decl>, <decl><type ref="prev"/><name>hdrSize</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>iStart</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>ofst</name> <operator>=</operator> <name>hdrSize</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>pagesize</name></name><operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>hdrSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ofst</name> <operator>=</operator> <operator>(</operator><name>iStart</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>g</name><operator>.</operator><name>pagesize</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>pagesize</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fileRead</name><argument_list>(<argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decode_btree_page</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>hdrSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zLeft</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <name><name>zLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'t'</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>detail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>recursive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>zLeft</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name><name>zLeft</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">'r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>recursive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>zLeft</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">'d'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>detail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>decode_trunk_page</name><argument_list>(<argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <name>iStart</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iStart</name><operator>&lt;</operator><literal type="number">1</literal> <operator>||</operator> <name><name>iEnd</name><argument_list type="generic">&lt;<argument><expr><name>iStart</name> <operator>||</operator> <name>iEnd</name></expr></argument>&gt;</argument_list></name><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
          <argument><expr><literal type="string">"Page argument should be LOWER?..UPPER?.  Range 1 to %d\n"</literal></expr></argument>,
          <argument><expr><name><name>g</name><operator>.</operator><name>mxPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <while>while<condition>( <expr><name>iStart</name><operator>&lt;=</operator><name>iEnd</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>print_page</name><argument_list>(<argument><expr><name>iStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iStart</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>fileClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
