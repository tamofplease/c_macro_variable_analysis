<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/tool/offsets.c"><comment type="block">/*
** This program searches an SQLite database file for the lengths and
** offsets for all TEXT or BLOB entries for a particular column of a
** particular table.  The rowid, size and offset for the column are
** written to standard output.  There are three arguments, which are the
** name of the database file, the table, and the column.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>GState</name></name></type> <name>GState</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ArraySize</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(sizeof(X)/sizeof(X[0]))</cpp:value></cpp:define>

<comment type="block">/*
** Global state information for this program.
*/</comment>
<struct>struct <name>GState</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>           <comment type="block">/* Error message text */</comment>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>              <comment type="block">/* Open database file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szPg</name></decl>;</decl_stmt>             <comment type="block">/* Page size for the database file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iRoot</name></decl>;</decl_stmt>            <comment type="block">/* Root page of the table */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>             <comment type="block">/* Column number for the column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pgno</name></decl>;</decl_stmt>             <comment type="block">/* Current page number */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aPage</name></decl>;</decl_stmt>            <comment type="block">/* Current page content */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name><name>aStack</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>       <comment type="block">/* Page stack */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>aPgno</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>        <comment type="block">/* Page number stack */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStack</name></decl>;</decl_stmt>           <comment type="block">/* Depth of stack */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bTrace</name></decl>;</decl_stmt>           <comment type="block">/* True for tracing output */</comment>
}</block>;</struct>

<comment type="block">/*
** Write an error.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstError</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Write a trace message
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstTrace</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bTrace</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Find the root page of the table and the column number of the column.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstRootAndColumn</name><parameter_list>(
  <parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,              <comment type="block">/* Global state */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,      <comment type="block">/* Name of the database file */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTable</name></decl></parameter>,     <comment type="block">/* Name of the table */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zColumn</name></decl></parameter>     <comment type="block">/* Name of the column */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot open database file \"%s\""</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>rootAndColumn_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT rootpage FROM sqlite_master WHERE name=%Q"</literal></expr></argument>,
                         <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s: [%s]"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>rootAndColumn_exit</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot find table [%s]\n"</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>rootAndColumn_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iRoot</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA table_info(%Q)"</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s: [%s}"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>rootAndColumn_exit</name>;</goto></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCol</name> <init>= <expr><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zCol</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zColumn</name></expr></argument>)</argument_list></call>
     <operator>&amp;&amp;</operator> <call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><name>zCol</name></expr></argument>, <argument><expr><name>zColumn</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"no such column: %s.%s"</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>, <argument><expr><name>zColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>rootAndColumn_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA page_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content>  <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s: [%s]"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>rootAndColumn_exit</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cannot find page size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>szPg</name></name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>rootAndColumn_exit</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
** Pop a page from the stack
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstPopPage</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStack</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aPgno</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aStack</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Push a new page onto the stack.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstPushPage</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>got</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name> <operator>&gt;=</operator> <call><name>ArraySize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStack</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"page stack overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aPgno</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name></expr>]</index></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aStack</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name></expr>]</index></name> <operator>=</operator> <name>pPage</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pPage</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nStack</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name></name> <operator>=</operator> <name>pPage</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><operator>(</operator><name>pgno</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>szPg</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>pPage</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPg</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>got</name><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>szPg</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"unable to read page %d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ofstPopPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Read a two-byte integer at the given offset into the current page */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ofst2byte</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>ofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read a four-byte integer at the given offset into the current page */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ofst4byte</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>ofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>ofst</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>ofst</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read a variable-length integer.  Update the offset */</comment>
<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>ofstVarint</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOfst</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><operator>*</operator><name>pOfst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOfst</name> <operator>+=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the absolute offset into a file for the given offset
** into the current page */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ofstInFile</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>szPg</name></name><operator>*</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pgno</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>ofst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the size (in bytes) of the data corresponding to the
** given serial code */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ofstSerialSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>scode</name><operator>&lt;</operator><literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>scode</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>scode</name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>scode</name><operator>&lt;</operator><literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>scode</name><operator>&lt;</operator><literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>scode</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Forward reference */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ofstWalkPage</name><parameter_list>(<parameter><decl><type><name>GState</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Walk an interior btree page */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstWalkInteriorPage</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ofst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iChild</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nCell</name> <operator>=</operator> <call><name>ofst2byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>ofst</name> <operator>=</operator> <call><name>ofst2byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">12</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iChild</name> <operator>=</operator> <call><name>ofst4byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ofstWalkPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ofstWalkPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ofst4byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Walk a leaf btree page */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstWalkLeafPage</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ofst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>rowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>scode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dataOfst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zMsg</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nCell</name> <operator>=</operator> <call><name>ofst2byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>ofst</name> <operator>=</operator> <call><name>ofst2byte</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <call><name>ofstVarint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowid</name> <operator>=</operator> <call><name>ofstVarint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nPayload</name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>szPg</name></name><operator>-</operator><literal type="number">35</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>,
         <argument><expr><literal type="string">"# overflow rowid %lld"</literal></expr></argument>, <argument><expr><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>dataOfst</name> <operator>=</operator> <name>ofst</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nHdr</name> <operator>=</operator> <call><name>ofstVarint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataOfst</name> <operator>+=</operator> <name>nHdr</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>scode</name> <operator>=</operator> <call><name>ofstVarint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dataOfst</name> <operator>+=</operator> <call><name>ofstSerialSize</name><argument_list>(<argument><expr><name>scode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>scode</name> <operator>=</operator> <call><name>ofstVarint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>ofstSerialSize</name><argument_list>(<argument><expr><name>scode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>,
         <argument><expr><literal type="string">"rowid %12lld size %5d offset %8d"</literal></expr></argument>,
          <argument><expr><name>rowid</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>ofstInFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dataOfst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Output results from a single page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ofstWalkPage</name><parameter_list>(<parameter><decl><type><name>GState</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>ofstPushPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstWalkInteriorPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ofstWalkLeafPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>ofstError</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"page %d has a faulty type byte: %d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>ofstPopPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>GState</name></type> <name>g</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"--trace"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bTrace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s DATABASE TABLE COLUMN\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ofstRootAndColumn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>zErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ofstTrace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="string">"# szPg = %d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>szPg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ofstTrace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="string">"# iRoot = %d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>iRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ofstTrace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><literal type="string">"# iCol = %d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>iCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>f</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cannot open \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ofstWalkPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>iRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>zErr</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>
</unit>
