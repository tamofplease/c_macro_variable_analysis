<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/test6.c"><comment type="block">/*
** 2004 May 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains code that modified the OS layer in order to simulate
** the effect on the database file of an OS crash or power failure.  This
** is used to test the ability of SQLite to recover from those situations.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_TEST</name></expr></cpp:if>          <comment type="block">/* This file is used for testing only */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DISKIO</name></cpp:ifndef>  <comment type="block">/* This file is a no-op if disk I/O is disabled */</comment>

<comment type="block">/* #define TRACE_CRASHTEST */</comment>

<typedef>typedef <type><name><name>struct</name> <name>CrashFile</name></name></type> <name>CrashFile</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>CrashGlobal</name></name></type> <name>CrashGlobal</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>WriteBuffer</name></name></type> <name>WriteBuffer</name>;</typedef>

<comment type="block">/*
** Method:
**
**   This layer is implemented as a wrapper around the "real" 
**   sqlite3_file object for the host system. Each time data is 
**   written to the file object, instead of being written to the
**   underlying file, the write operation is stored in an in-memory 
**   structure (type WriteBuffer). This structure is placed at the
**   end of a global ordered list (the write-list).
**
**   When data is read from a file object, the requested region is
**   first retrieved from the real file. The write-list is then 
**   traversed and data copied from any overlapping WriteBuffer 
**   structures to the output buffer. i.e. a read() operation following
**   one or more write() operations works as expected, even if no
**   data has actually been written out to the real file.
**
**   When a fsync() operation is performed, an operating system crash 
**   may be simulated, in which case exit(-1) is called (the call to 
**   xSync() never returns). Whether or not a crash is simulated,
**   the data associated with a subset of the WriteBuffer structures 
**   stored in the write-list is written to the real underlying files 
**   and the entries removed from the write-list. If a crash is simulated,
**   a subset of the buffers may be corrupted before the data is written.
**
**   The exact subset of the write-list written and/or corrupted is
**   determined by the simulated device characteristics and sector-size.
**
** "Normal" mode:
**
**   Normal mode is used when the simulated device has none of the
**   SQLITE_IOCAP_XXX flags set.
**
**   In normal mode, if the fsync() is not a simulated crash, the 
**   write-list is traversed from beginning to end. Each WriteBuffer
**   structure associated with the file handle used to call xSync()
**   is written to the real file and removed from the write-list.
**
**   If a crash is simulated, one of the following takes place for 
**   each WriteBuffer in the write-list, regardless of which 
**   file-handle it is associated with:
**
**     1. The buffer is correctly written to the file, just as if
**        a crash were not being simulated.
**
**     2. Nothing is done.
**
**     3. Garbage data is written to all sectors of the file that 
**        overlap the region specified by the WriteBuffer. Or garbage
**        data is written to some contiguous section within the 
**        overlapped sectors.
**
** Device Characteristic flag handling:
**
**   If the IOCAP_ATOMIC flag is set, then option (3) above is 
**   never selected.
**
**   If the IOCAP_ATOMIC512 flag is set, and the WriteBuffer represents
**   an aligned write() of an integer number of 512 byte regions, then
**   option (3) above is never selected. Instead, each 512 byte region
**   is either correctly written or left completely untouched. Similar
**   logic governs the behavior if any of the other ATOMICXXX flags
**   is set.
**
**   If either the IOCAP_SAFEAPPEND or IOCAP_SEQUENTIAL flags are set
**   and a crash is being simulated, then an entry of the write-list is
**   selected at random. Everything in the list after the selected entry 
**   is discarded before processing begins.
**
**   If IOCAP_SEQUENTIAL is set and a crash is being simulated, option 
**   (1) is selected for all write-list entries except the last. If a 
**   crash is not being simulated, then all entries in the write-list
**   that occur before at least one write() on the file-handle specified
**   as part of the xSync() are written to their associated real files.
**
**   If IOCAP_SAFEAPPEND is set and the first byte written by the write()
**   operation is one byte past the current end of the file, then option
**   (1) is always selected.
*/</comment>

<comment type="block">/*
** Each write operation in the write-list is represented by an instance
** of the following structure.
**
** If zBuf is 0, then this structure represents a call to xTruncate(), 
** not xWrite(). In that case, iOffset is the size that the file is
** truncated to.
*/</comment>
<struct>struct <name>WriteBuffer</name> <block>{
  <decl_stmt><decl><type><name>i64</name></type> <name>iOffset</name></decl>;</decl_stmt>                 <comment type="block">/* Byte offset of the start of this write() */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>                    <comment type="block">/* Number of bytes written */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zBuf</name></decl>;</decl_stmt>                    <comment type="block">/* Pointer to copy of written data */</comment>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pFile</name></decl>;</decl_stmt>            <comment type="block">/* File this write() applies to */</comment>

  <decl_stmt><decl><type><name>WriteBuffer</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>          <comment type="block">/* Next in CrashGlobal.pWriteList */</comment>
}</block>;</struct>

<struct>struct <name>CrashFile</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>sqlite3_io_methods</name> <modifier>*</modifier></type><name>pMethod</name></decl>;</decl_stmt>   <comment type="block">/* Must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pRealFile</name></decl>;</decl_stmt>             <comment type="block">/* Underlying "real" file handle */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>                           <comment type="block">/* Flags the file was opened with */</comment>

  <comment type="block">/* Cache of the entire file. This is used to speed up OsRead() and 
  ** OsFileSize() calls. Although both could be done by traversing the
  ** write-list, in practice this is impractically slow.
  */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>                           <comment type="block">/* Buffer containing file contents */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nData</name></decl>;</decl_stmt>                           <comment type="block">/* Size of buffer allocated at zData */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iSize</name></decl>;</decl_stmt>                           <comment type="block">/* Size of file in bytes */</comment>
}</block>;</struct>

<struct>struct <name>CrashGlobal</name> <block>{
  <decl_stmt><decl><type><name>WriteBuffer</name> <modifier>*</modifier></type><name>pWriteList</name></decl>;</decl_stmt>     <comment type="block">/* Head of write-list */</comment>
  <decl_stmt><decl><type><name>WriteBuffer</name> <modifier>*</modifier></type><name>pWriteListEnd</name></decl>;</decl_stmt>  <comment type="block">/* End of write-list */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>iSectorSize</name></decl>;</decl_stmt>             <comment type="block">/* Value of simulated sector size */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDeviceCharacteristics</name></decl>;</decl_stmt>  <comment type="block">/* Value of simulated device characteristics */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>iCrash</name></decl>;</decl_stmt>                  <comment type="block">/* Crash on the iCrash'th call to xSync() */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zCrashFile</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>        <comment type="block">/* Crash during an xSync() on this file */</comment> 
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>CrashGlobal</name></type> <name>g</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SQLITE_DEFAULT_SECTOR_SIZE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Set this global variable to 1 to enable crash testing.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sqlite3CrashTestEnable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>crash_malloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>crash_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>crash_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>Tcl_Realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Wrapper around the sqlite3OsWrite() function that avoids writing to the
** 512 byte block begining at offset PENDING_BYTE.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>writeDbFile</name><parameter_list>(<parameter><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iOff</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSkip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iAmt</name><operator>-</operator><name>iSkip</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pRealFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>iSkip</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iAmt</name><operator>-</operator><name>iSkip</name><operator>)</operator></expr></argument>, <argument><expr><name>iOff</name><operator>+</operator><name>iSkip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Flush the write-list as if xSync() had been called on file handle
** pFile. If isCrash is true, simulate a crash.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>writeListSync</name><parameter_list>(<parameter><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isCrash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDc</name> <init>= <expr><name><name>g</name><operator>.</operator><name>iDeviceCharacteristics</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>WriteBuffer</name> <modifier>*</modifier></type><name>pWrite</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>WriteBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPtr</name></decl>;</decl_stmt>

  <comment type="block">/* If this is not a crash simulation, set pFinal to point to the 
  ** last element of the write-list that is associated with file handle
  ** pFile.
  **
  ** If this is a crash simulation, set pFinal to an arbitrarily selected
  ** element of the write-list.
  */</comment>
  <decl_stmt><decl><type><name>WriteBuffer</name> <modifier>*</modifier></type><name>pFinal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>isCrash</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>pWrite</name><operator>=</operator><name><name>g</name><operator>.</operator><name>pWriteList</name></name></expr>;</init> <condition><expr><name>pWrite</name></expr>;</condition> <incr><expr><name>pWrite</name><operator>=</operator><name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name></name><operator>==</operator><name>pFile</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pFinal</name> <operator>=</operator> <name>pWrite</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iDc</name><operator>&amp;</operator><operator>(</operator><name>SQLITE_IOCAP_SEQUENTIAL</name><operator>|</operator><name>SQLITE_IOCAP_SAFE_APPEND</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iFinal</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>pWrite</name><operator>=</operator><name><name>g</name><operator>.</operator><name>pWriteList</name></name></expr>;</init> <condition><expr><name>pWrite</name></expr>;</condition> <incr><expr><name>pWrite</name><operator>=</operator><name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>nWrite</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>sqlite3_randomness</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>iFinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iFinal</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>iFinal</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>iFinal</name></expr></then><else>:<expr><name>iFinal</name></expr></else></ternary><operator>)</operator><operator>%</operator><name>nWrite</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>pWrite</name><operator>=</operator><name><name>g</name><operator>.</operator><name>pWriteList</name></name></expr>;</init> <condition><expr><name>iFinal</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>pWrite</name><operator>=</operator><name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>iFinal</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>pFinal</name> <operator>=</operator> <name>pWrite</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE_CRASHTEST</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Sync %s (is %s crash)\n"</literal></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>isCrash</name></expr>?</condition><then><expr><literal type="string">"a"</literal></expr></then><else>:<expr><literal type="string">"not a"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>ppPtr</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>.</operator><name>pWriteList</name></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pWrite</name><operator>=</operator><operator>*</operator><name>ppPtr</name></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>pWrite</name></expr>;</condition> <incr><expr><name>pWrite</name><operator>=</operator><operator>*</operator><name>ppPtr</name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pRealFile</name> <init>= <expr><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name><operator>-&gt;</operator><name>pRealFile</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* (eAction==1)      -&gt; write block out normally,
    ** (eAction==2)      -&gt; do nothing,
    ** (eAction==3)      -&gt; trash sectors.
    */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>eAction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>isCrash</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>eAction</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name></name><operator>==</operator><name>pFile</name> <operator>||</operator> <name>iDc</name><operator>&amp;</operator><name>SQLITE_IOCAP_SEQUENTIAL</name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>eAction</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>random</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_randomness</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Do not select option 3 (sector trashing) if the IOCAP_ATOMIC flag 
      ** is set or this is an OsTruncate(), not an Oswrite().
      */</comment>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iDc</name><operator>&amp;</operator><name>SQLITE_IOCAP_ATOMIC</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pWrite</name><operator>-&gt;</operator><name>zBuf</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>random</name> <operator>&amp;=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* If IOCAP_SEQUENTIAL is set and this is not the final entry
      ** in the truncated write-list, always select option 1 (write
      ** out correctly).
      */</comment>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iDc</name><operator>&amp;</operator><name>SQLITE_IOCAP_SEQUENTIAL</name> <operator>&amp;&amp;</operator> <name>pWrite</name><operator>!=</operator><name>pFinal</name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>random</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* If IOCAP_SAFE_APPEND is set and this OsWrite() operation is
      ** an append (first byte of the written region is 1 byte past the
      ** current EOF), always select option 1 (write out correctly).
      */</comment>
      <if_stmt><if>if<condition>( <expr><name>iDc</name><operator>&amp;</operator><name>SQLITE_IOCAP_SAFE_APPEND</name> <operator>&amp;&amp;</operator> <name><name>pWrite</name><operator>-&gt;</operator><name>zBuf</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>iSize</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>iSize</name><operator>==</operator><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>random</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>random</name><operator>&amp;</operator><literal type="number">0x06</literal><operator>)</operator><operator>==</operator><literal type="number">0x06</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>eAction</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>eAction</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>random</name><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">2</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <switch>switch<condition>( <expr><name>eAction</name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>               <comment type="block">/* Write out correctly */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>pWrite</name><operator>-&gt;</operator><name>zBuf</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>writeDbFile</name><argument_list>(
              <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>zBuf</name></name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>nBuf</name></name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsTruncate</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ppPtr</name> <operator>=</operator> <name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE_CRASHTEST</name></cpp:ifdef>
        <if_stmt><if>if<condition>( <expr><name>isCrash</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Writing %d bytes @ %d (%s)\n"</literal></expr></argument>, 
            <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>nBuf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>crash_free</name><argument_list>(<argument><expr><name>pWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>               <comment type="block">/* Do nothing */</comment>
        <expr_stmt><expr><name>ppPtr</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE_CRASHTEST</name></cpp:ifdef>
        <if_stmt><if>if<condition>( <expr><name>isCrash</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Omiting %d bytes @ %d (%s)\n"</literal></expr></argument>, 
            <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>nBuf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="number">3</literal></expr>:</case> <block>{<block_content>               <comment type="block">/* Trash sectors */</comment>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zGarbage</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iFirst</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name><operator>/</operator><name><name>g</name><operator>.</operator><name>iSectorSize</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iLast</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name><operator>+</operator><name><name>pWrite</name><operator>-&gt;</operator><name>nBuf</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>g</name><operator>.</operator><name>iSectorSize</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>zBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE_CRASHTEST</name></cpp:ifdef>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Trashing %d sectors @ %lld (sector %d) (%s)\n"</literal></expr></argument>, 
            <argument><expr><literal type="number">1</literal><operator>+</operator><name>iLast</name><operator>-</operator><name>iFirst</name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>iOffset</name></name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>, <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>zGarbage</name> <operator>=</operator> <call><name>crash_malloc</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>iSectorSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zGarbage</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>i</name></decl>;</decl_stmt>
          <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>iFirst</name></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;=</operator><name>iLast</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3_randomness</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>iSectorSize</name></name></expr></argument>, <argument><expr><name>zGarbage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>writeDbFile</name><argument_list>(
              <argument><expr><name><name>pWrite</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>zGarbage</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>iSectorSize</name></name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name><name>g</name><operator>.</operator><name>iSectorSize</name></name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><call><name>crash_free</name><argument_list>(<argument><expr><name>zGarbage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>ppPtr</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>

      <default>default:</default>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Cannot happen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <if_stmt><if>if<condition>( <expr><name>pWrite</name><operator>==</operator><name>pFinal</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>isCrash</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>pWrite</name><operator>=</operator><name><name>g</name><operator>.</operator><name>pWriteList</name></name></expr>;</init> <condition><expr><name>pWrite</name> <operator>&amp;&amp;</operator> <name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</condition> <incr><expr><name>pWrite</name><operator>=</operator><name><name>pWrite</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pWriteListEnd</name></name> <operator>=</operator> <name>pWrite</name></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Add an entry to the end of the write-list.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>writeListAppend</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOffset</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>WriteBuffer</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>zBuf</name> <operator>&amp;&amp;</operator> <name>nBuf</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>nBuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>zBuf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>WriteBuffer</name> <operator>*</operator><operator>)</operator><call><name>crash_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WriteBuffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"out of memory in the crash simulator\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WriteBuffer</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>iOffset</name></name> <operator>=</operator> <name>iOffset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nBuf</name></name> <operator>=</operator> <name>nBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zBuf</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>zBuf</name></name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNew</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>zBuf</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pWriteList</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pWriteListEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pWriteListEnd</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pWriteList</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pWriteListEnd</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close a crash-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pCrash</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>writeListSync</name><argument_list>(<argument><expr><name>pCrash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name><name>pCrash</name><operator>-&gt;</operator><name>pRealFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from a crash-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pCrash</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCopy</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><name>i64</name><operator>)</operator><name>iAmt</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name> <operator>-</operator> <name>iOfst</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nCopy</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCrash</name><operator>-&gt;</operator><name>zData</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check the file-size to see if this is a short-read */</comment>
  <if_stmt><if>if<condition>( <expr><name>nCopy</name><operator>&lt;</operator><name>iAmt</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR_SHORT_READ</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to a crash-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pCrash</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>iAmt</name><operator>+</operator><name>iOfst</name><operator>&gt;</operator><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iAmt</name><operator>+</operator><name>iOfst</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name><operator>&gt;</operator><name><name>pCrash</name><operator>-&gt;</operator><name>nData</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zNew</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><operator>(</operator><name><name>pCrash</name><operator>-&gt;</operator><name>nData</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zNew</name> <operator>=</operator> <call><name>crash_realloc</name><argument_list>(<argument><expr><name><name>pCrash</name><operator>-&gt;</operator><name>zData</name></name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zNew</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zNew</name><index>[<expr><name><name>pCrash</name><operator>-&gt;</operator><name>nData</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nNew</name><operator>-</operator><name><name>pCrash</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCrash</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCrash</name><operator>-&gt;</operator><name>zData</name></name> <operator>=</operator> <name>zNew</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCrash</name><operator>-&gt;</operator><name>zData</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>writeListAppend</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate a crash-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pCrash</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name><operator>&gt;</operator><name>size</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>writeListAppend</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync a crash-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pCrash</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isCrash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><name><name>pCrash</name><operator>-&gt;</operator><name>zName</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCrashFile</name> <init>= <expr><name><name>g</name><operator>.</operator><name>zCrashFile</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCrashFile</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zCrashFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nCrashFile</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>zCrashFile</name><index>[<expr><name>nCrashFile</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'*'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nCrashFile</name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nName</name><operator>&gt;</operator><name>nCrashFile</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nName</name> <operator>=</operator> <name>nCrashFile</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE_CRASHTEST</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"cfSync(): nName = %d, nCrashFile = %d, zName = %s, zCrashFile = %s\n"</literal></expr></argument>,
         <argument><expr><name>nName</name></expr></argument>, <argument><expr><name>nCrashFile</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zCrashFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><name>nName</name><operator>==</operator><name>nCrashFile</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zCrashFile</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TRACE_CRASHTEST</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"cfSync(): name matched, g.iCrash = %d\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>iCrash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>--</operator><name><name>g</name><operator>.</operator><name>iCrash</name></name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>isCrash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>writeListSync</name><argument_list>(<argument><expr><name>pCrash</name></expr></argument>, <argument><expr><name>isCrash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of the crash-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pCrash</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Calls related to file-locks are passed on to the real file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsLock</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsUnlock</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsCheckReservedLock</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_SIZE_HINT</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pCrash</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>nByte</name> <init>= <expr><operator>*</operator><operator>(</operator><name>i64</name> <operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><call><name>writeListAppend</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCrash</name><operator>-&gt;</operator><name>iSize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nByte</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The xSectorSize() and xDeviceCharacteristics() functions return
** the global values configured by the [sqlite_crashparams] tcl
*  interface.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>g</name><operator>.</operator><name>iSectorSize</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>g</name><operator>.</operator><name>iDeviceCharacteristics</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Pass-throughs for WAL support.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsShmLock</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name><operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cfShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3OsShmBarrier</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name><operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delFlag</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsShmUnmap</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name><operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>, <argument><expr><name>delFlag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfShmMap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,            <comment type="block">/* Handle open on database file */</comment>
  <parameter><decl><type><name>int</name></type> <name>iRegion</name></decl></parameter>,                    <comment type="block">/* Region to retrieve */</comment>
  <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>,                         <comment type="block">/* Size of regions */</comment>
  <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,                          <comment type="block">/* True to extend file if necessary */</comment>
  <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>              <comment type="block">/* OUT: Mapped memory */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsShmMap</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CrashFile</name><operator>*</operator><operator>)</operator><name>pFile</name><operator>)</operator><operator>-&gt;</operator><name>pRealFile</name></expr></argument>, <argument><expr><name>iRegion</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_io_methods</name></type> <name>CrashFileVtab</name> <init>= <expr><block>{
  <expr><literal type="number">2</literal></expr>,                            <comment type="block">/* iVersion */</comment>
  <expr><name>cfClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>cfRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>cfWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>cfTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>cfSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>cfFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>cfLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>cfUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>cfCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>cfFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>cfSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>cfDeviceCharacteristics</name></expr>,      <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><name>cfShmMap</name></expr>,                     <comment type="block">/* xShmMap */</comment>
  <expr><name>cfShmLock</name></expr>,                    <comment type="block">/* xShmLock */</comment>
  <expr><name>cfShmBarrier</name></expr>,                 <comment type="block">/* xShmBarrier */</comment>
  <expr><name>cfShmUnmap</name></expr>                    <comment type="block">/* xShmUnmap */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Application data for the crash VFS
*/</comment>
<struct>struct <name>crashAppData</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pOrig</name></decl>;</decl_stmt>                   <comment type="block">/* Wrapped vfs structure */</comment>
}</block>;</struct>

<comment type="block">/*
** Open a crash-file file handle.
**
** The caller will have allocated pVfs-&gt;szOsFile bytes of space
** at pFile. This file uses this space for the CrashFile structure
** and allocates space for the "real" file structure using 
** sqlite3_malloc(). The assumption here is (pVfs-&gt;szOsFile) is
** equal or greater than sizeof(CrashFile).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CrashFile</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>(</operator><name>CrashFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name> <init>= <expr><operator>(</operator><name>sqlite3_file</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pWrapper</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CrashFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iSize</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pMethod</name></name> <operator>=</operator> <operator>&amp;</operator><name>CrashFileVtab</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>zName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRealFile</name></name> <operator>=</operator> <name>pReal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>iSize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>iSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">4096</literal> <operator>+</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>iSize</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>zData</name></name> <operator>=</operator> <call><name>crash_malloc</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pWrapper</name><operator>-&gt;</operator><name>zData</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* os_unix.c contains an assert() that fails if the caller attempts
      ** to read data from the 512-byte locking region of a file opened
      ** with the SQLITE_OPEN_MAIN_DB flag. This region of a database file
      ** never contains valid data anyhow. So avoid doing such a read here.
      **
      ** UPDATE: It also contains an assert() verifying that each call
      ** to the xRead() method reads less than 128KB of data.
      */</comment>
      <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>zData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iOff</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iOff</name><operator>&lt;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>iSize</name></name></expr>;</condition> <incr><expr><name>iOff</name> <operator>+=</operator> <literal type="number">512</literal></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nRead</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>iSize</name></name> <operator>-</operator> <name>iOff</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>nRead</name><operator>&gt;</operator><literal type="number">512</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nRead</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>zData</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>pMethod</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cfDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xAccess</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nPathOut</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zPathOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xFullPathname</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nPathOut</name></expr></argument>, <argument><expr><name>zPathOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cfDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xDlOpen</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cfDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xDlError</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*cfDlSym(sqlite3_vfs *pCfVfs, void *pH, const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <expr><name>sqlite3_vfs</name> <operator>*</operator><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr>;
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xDlSym</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>pH</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cfDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xDlClose</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xRandomness</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xSleep</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cfCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pCfVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><name><name>pCfVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>processDevSymArgs</name><parameter_list>(
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piDeviceChar</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piSectorSize</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <struct>struct <name>DeviceFlag</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iValue</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aFlag</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"atomic"</literal></expr>,              <expr><name>SQLITE_IOCAP_ATOMIC</name></expr>                }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic512"</literal></expr>,           <expr><name>SQLITE_IOCAP_ATOMIC512</name></expr>             }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic1k"</literal></expr>,            <expr><name>SQLITE_IOCAP_ATOMIC1K</name></expr>              }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic2k"</literal></expr>,            <expr><name>SQLITE_IOCAP_ATOMIC2K</name></expr>              }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic4k"</literal></expr>,            <expr><name>SQLITE_IOCAP_ATOMIC4K</name></expr>              }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic8k"</literal></expr>,            <expr><name>SQLITE_IOCAP_ATOMIC8K</name></expr>              }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic16k"</literal></expr>,           <expr><name>SQLITE_IOCAP_ATOMIC16K</name></expr>             }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic32k"</literal></expr>,           <expr><name>SQLITE_IOCAP_ATOMIC32K</name></expr>             }</block></expr>,
    <expr><block>{ <expr><literal type="string">"atomic64k"</literal></expr>,           <expr><name>SQLITE_IOCAP_ATOMIC64K</name></expr>             }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sequential"</literal></expr>,          <expr><name>SQLITE_IOCAP_SEQUENTIAL</name></expr>            }</block></expr>,
    <expr><block>{ <expr><literal type="string">"safe_append"</literal></expr>,         <expr><name>SQLITE_IOCAP_SAFE_APPEND</name></expr>           }</block></expr>,
    <expr><block>{ <expr><literal type="string">"powersafe_overwrite"</literal></expr>, <expr><name>SQLITE_IOCAP_POWERSAFE_OVERWRITE</name></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
  }</block></expr></init></decl>;</struct>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSectorSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>setSectorsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>setDeviceChar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>objc</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nOpt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOpt</name> <init>= <expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nOpt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nOpt</name><operator>&gt;</operator><literal type="number">11</literal> <operator>||</operator> <name>nOpt</name><operator>&lt;</operator><literal type="number">2</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-sectorsize"</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, <argument><expr><name>nOpt</name></expr></argument>)</argument_list></call><operator>)</operator> 
     <operator>&amp;&amp;</operator> <operator>(</operator><name>nOpt</name><operator>&gt;</operator><literal type="number">16</literal> <operator>||</operator> <name>nOpt</name><operator>&lt;</operator><literal type="number">2</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-characteristics"</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, <argument><expr><name>nOpt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, 
        <argument><expr><literal type="string">"Bad option: \""</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, 
        <argument><expr><literal type="string">"\" - must be \"-characteristics\" or \"-sectorsize\""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name>objc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Option requires an argument: \""</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>zOpt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'s'</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSectorSize</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>setSectorsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>apObj</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nObj</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_ListObjGetElements</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nObj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>apObj</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nObj</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iChoice</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pFlag</name> <init>= <expr><call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>apObj</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Tcl_UtfToLower</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name>pFlag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_GetIndexFromObjStruct</name><argument_list>(
            <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pFlag</name></expr></argument>, <argument><expr><name>aFlag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aFlag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"no such flag"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iChoice</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>iDc</name> <operator>|=</operator> <name><name>aFlag</name><index>[<expr><name>iChoice</name></expr>]</index></name><operator>.</operator><name>iValue</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>setDeviceChar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>setDeviceChar</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piDeviceChar</name> <operator>=</operator> <name>iDc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>setSectorsize</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piSectorSize</name> <operator>=</operator> <name>iSectorSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** tclcmd:   sqlite_crash_enable ENABLE
**
** Parameter ENABLE must be a boolean value. If true, then the "crash"
** vfs is added to the system. If false, it is removed.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>crashEnableCmd</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>isEnable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>crashVfs</name> <init>= <expr><block>{
    <expr><literal type="number">2</literal></expr>,                  <comment type="block">/* iVersion */</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="block">/* szOsFile */</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="block">/* mxPathname */</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="block">/* pNext */</comment>
    <expr><literal type="string">"crash"</literal></expr>,            <comment type="block">/* zName */</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="block">/* pAppData */</comment>
  
    <expr><name>cfOpen</name></expr>,               <comment type="block">/* xOpen */</comment>
    <expr><name>cfDelete</name></expr>,             <comment type="block">/* xDelete */</comment>
    <expr><name>cfAccess</name></expr>,             <comment type="block">/* xAccess */</comment>
    <expr><name>cfFullPathname</name></expr>,       <comment type="block">/* xFullPathname */</comment>
    <expr><name>cfDlOpen</name></expr>,             <comment type="block">/* xDlOpen */</comment>
    <expr><name>cfDlError</name></expr>,            <comment type="block">/* xDlError */</comment>
    <expr><name>cfDlSym</name></expr>,              <comment type="block">/* xDlSym */</comment>
    <expr><name>cfDlClose</name></expr>,            <comment type="block">/* xDlClose */</comment>
    <expr><name>cfRandomness</name></expr>,         <comment type="block">/* xRandomness */</comment>
    <expr><name>cfSleep</name></expr>,              <comment type="block">/* xSleep */</comment>
    <expr><name>cfCurrentTime</name></expr>,        <comment type="block">/* xCurrentTime */</comment>
    <expr><literal type="number">0</literal></expr>,                    <comment type="block">/* xGetlastError */</comment>
    <expr><literal type="number">0</literal></expr>,                    <comment type="block">/* xCurrentTimeInt64 */</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isEnable</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>isEnable</name> <operator>&amp;&amp;</operator> <name><name>crashVfs</name><operator>.</operator><name>pAppData</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>isEnable</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>crashVfs</name><operator>.</operator><name>pAppData</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>crashVfs</name><operator>.</operator><name>pAppData</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pOriginalVfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>crashVfs</name><operator>.</operator><name>mxPathname</name></name> <operator>=</operator> <name><name>pOriginalVfs</name><operator>-&gt;</operator><name>mxPathname</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>crashVfs</name><operator>.</operator><name>pAppData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pOriginalVfs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>crashVfs</name><operator>.</operator><name>szOsFile</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CrashFile</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pOriginalVfs</name><operator>-&gt;</operator><name>szOsFile</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crashVfs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>crashVfs</name><operator>.</operator><name>pAppData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crashVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** tclcmd:   sqlite_crashparams ?OPTIONS? DELAY CRASHFILE
**
** This procedure implements a TCL command that enables crash testing
** in testfixture.  Once enabled, crash testing cannot be disabled.
**
** Available options are "-characteristics" and "-sectorsize". Both require
** an argument. For -sectorsize, this is the simulated sector size in
** bytes. For -characteristics, the argument must be a list of io-capability
** flags to simulate. Valid flags are "atomic", "atomic512", "atomic1K",
** "atomic2K", "atomic4K", "atomic8K", "atomic16K", "atomic32K", 
** "atomic64K", "sequential" and "safe_append".
**
** Example:
**
**   sqlite_crashparams -sect 1024 -char {atomic sequential} ./test.db 1
**
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>crashParamsObjCmd</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iDelay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCrashFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCrashFile</name></decl>, <decl><type ref="prev"/><name>iDc</name></decl>, <decl><type ref="prev"/><name>iSectorSize</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>iDc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>iSectorSize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&lt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?OPTIONS? DELAY CRASHFILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zCrashFile</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nCrashFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nCrashFile</name><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zCrashFile</name></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Filename is too long: \""</literal></expr></argument>, <argument><expr><name>zCrashFile</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDelay</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>processDevSymArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>objc</name><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSectorSize</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iDc</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iDeviceCharacteristics</name></name> <operator>=</operator> <name>iDc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iSectorSize</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iSectorSize</name></name> <operator>=</operator> <name>iSectorSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iCrash</name></name> <operator>=</operator> <name>iDelay</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zCrashFile</name></name></expr></argument>, <argument><expr><name>zCrashFile</name></expr></argument>, <argument><expr><name>nCrashFile</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3CrashTestEnable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>

<label><name>error</name>:</label>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>devSymObjCmd</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name></type> <name>devsym_register</name><argument_list>(<argument><expr><name>int</name> <name>iDeviceChar</name></expr></argument>, <argument><expr><name>int</name> <name>iSectorSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>iDc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSectorSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>processDevSymArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>objc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSectorSize</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>devsym_register</name><argument_list>(<argument><expr><name>iDc</name></expr></argument>, <argument><expr><name>iSectorSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** tclcmd: register_jt_vfs ?-default? PARENT-VFS
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtObjCmd</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>jt_register</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zParent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?-default? PARENT-VFS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zParent</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zParent</name></expr></argument>, <argument><expr><literal type="string">"-default"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, 
          <argument><expr><literal type="string">"bad option \""</literal></expr></argument>, <argument><expr><name>zParent</name></expr></argument>, <argument><expr><literal type="string">"\": must be -default"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zParent</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>zParent</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zParent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>jt_register</name><argument_list>(<argument><expr><name>zParent</name></expr></argument>, <argument><expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error in jt_register"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** tclcmd: unregister_jt_vfs
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtUnregisterObjCmd</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name></type> <name>jt_unregister</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>jt_unregister</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_DISKIO */</comment>

<comment type="block">/*
** This procedure registers the TCL procedures defined in this file.
*/</comment>
<function><type><name>int</name></type> <name>Sqlitetest6_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DISKIO</name></cpp:ifndef>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_crash_enable"</literal></expr></argument>, <argument><expr><name>crashEnableCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_crashparams"</literal></expr></argument>, <argument><expr><name>crashParamsObjCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_simulate_device"</literal></expr></argument>, <argument><expr><name>devSymObjCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"register_jt_vfs"</literal></expr></argument>, <argument><expr><name>jtObjCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"unregister_jt_vfs"</literal></expr></argument>, <argument><expr><name>jtUnregisterObjCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>
</unit>
