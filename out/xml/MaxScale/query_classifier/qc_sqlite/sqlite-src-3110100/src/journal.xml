<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/journal.c"><comment type="block">/*
** 2007 August 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file implements a special kind of sqlite3_file object used
** by SQLite to create journal files if the atomic-write optimization
** is enabled.
**
** The distinctive characteristic of this sqlite3_file is that the
** actual on disk file is created lazily. When the file is created,
** the caller specifies a buffer size for an in-memory buffer to
** be used to service read() and write() requests. The actual file
** on disk is not created or populated until either:
**
**   1) The in-memory representation grows too large for the allocated 
**      buffer, or
**   2) The sqlite3JournalCreate() function is called.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_ATOMIC_WRITE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>


<comment type="block">/*
** A JournalFile object is a subclass of sqlite3_file used by
** as an open file handle for journal files.
*/</comment>
<struct>struct <name>JournalFile</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_io_methods</name> <modifier>*</modifier></type><name>pMethod</name></decl>;</decl_stmt>    <comment type="block">/* I/O methods on journal files */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>                       <comment type="block">/* Size of zBuf[] in bytes */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl>;</decl_stmt>                     <comment type="block">/* Space to buffer journal writes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSize</name></decl>;</decl_stmt>                      <comment type="block">/* Amount of zBuf[] currently used */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>                      <comment type="block">/* xOpen flags */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>              <comment type="block">/* The "real" underlying VFS */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name></decl>;</decl_stmt>            <comment type="block">/* The "real" underlying file descriptor */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zJournal</name></decl>;</decl_stmt>           <comment type="block">/* Name of the journal file */</comment>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>JournalFile</name></name></type> <name>JournalFile</name>;</typedef>

<comment type="block">/*
** If it does not already exists, create and populate the on-disk file 
** for JournalFile p.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>createFile</name><parameter_list>(<parameter><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name> <init>= <expr><operator>(</operator><name>sqlite3_file</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zJournal</name></name></expr></argument>, <argument><expr><name>pReal</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name> <operator>=</operator> <name>pReal</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zBuf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* If an error occurred while writing to the file, close it before
        ** returning. This way, SQLite uses the in-memory journal data to 
        ** roll back changes made to the internal page-cache before this
        ** function was called.  */</comment>
        <expr_stmt><expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jrnlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jrnlRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>,    <comment type="block">/* The journal file from which to read */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,            <comment type="block">/* Put the results here */</comment>
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,              <comment type="block">/* Number of bytes to read */</comment>
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>     <comment type="block">/* Begin reading at this offset */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>iAmt</name><operator>+</operator><name>iOfst</name><operator>)</operator><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR_SHORT_READ</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zBuf</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jrnlWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>,    <comment type="block">/* The journal file into which to write */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,      <comment type="block">/* Take data to be written from here */</comment>
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,              <comment type="block">/* Number of bytes to write */</comment>
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>     <comment type="block">/* Begin writing at this offset into the file */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>)</operator><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>nBuf</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>createFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zBuf</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name><operator>&lt;</operator><operator>(</operator><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name> <operator>=</operator> <operator>(</operator><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jrnlTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsTruncate</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>size</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jrnlSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsSync</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Query the size of the file in bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jrnlFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <operator>(</operator><name>sqlite_int64</name><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>iSize</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Table of methods for JournalFile sqlite3_file object.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sqlite3_io_methods</name></name></type> <name>JournalFileMethods</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>,             <comment type="block">/* iVersion */</comment>
  <expr><name>jrnlClose</name></expr>,     <comment type="block">/* xClose */</comment>
  <expr><name>jrnlRead</name></expr>,      <comment type="block">/* xRead */</comment>
  <expr><name>jrnlWrite</name></expr>,     <comment type="block">/* xWrite */</comment>
  <expr><name>jrnlTruncate</name></expr>,  <comment type="block">/* xTruncate */</comment>
  <expr><name>jrnlSync</name></expr>,      <comment type="block">/* xSync */</comment>
  <expr><name>jrnlFileSize</name></expr>,  <comment type="block">/* xFileSize */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xLock */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xUnlock */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xCheckReservedLock */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xFileControl */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xSectorSize */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xShmMap */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xShmLock */</comment>
  <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xShmBarrier */</comment>
  <expr><literal type="number">0</literal></expr>              <comment type="block">/* xShmUnmap */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* 
** Open a journal file.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3JournalOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,         <comment type="block">/* The VFS to use for actual file I/O */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,         <comment type="block">/* Name of the journal file */</comment>
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>,        <comment type="block">/* Preallocated, blank file handle */</comment>
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,                 <comment type="block">/* Opening flags */</comment>
  <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>                   <comment type="block">/* Bytes buffered before opening the file */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>JournalFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sqlite3JournalSize</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zBuf</name></name> <operator>=</operator> <call><name>sqlite3MallocZero</name><argument_list>(<argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>zBuf</name></name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pJfd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMethod</name></name> <operator>=</operator> <operator>&amp;</operator><name>JournalFileMethods</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nBuf</name></name> <operator>=</operator> <name>nBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zJournal</name></name> <operator>=</operator> <name>zName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name> <operator>=</operator> <name>pVfs</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If the argument p points to a JournalFile structure, and the underlying
** file has not yet been created, create it now.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3JournalCreate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pMethods</name></name><operator>!=</operator><operator>&amp;</operator><name>JournalFileMethods</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>createFile</name><argument_list>(<argument><expr><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The file-handle passed as the only argument is guaranteed to be an open
** file. It may or may not be of class JournalFile. If the file is a
** JournalFile, and the underlying file on disk has not yet been opened,
** return 0. Otherwise, return 1.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3JournalExists</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pMethods</name></name><operator>!=</operator><operator>&amp;</operator><name>JournalFileMethods</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>JournalFile</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>pReal</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Return the number of bytes required to store a JournalFile that uses vfs
** pVfs to create the underlying on-disk files.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3JournalSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>pVfs</name><operator>-&gt;</operator><name>szOsFile</name></name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>JournalFile</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
