<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/random.c"><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code to implement a pseudo-random number
** generator (PRNG) for SQLite.
**
** Random numbers are used by some of the database backends in order
** to generate random integer keys for tables or random filenames.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>


<comment type="block">/* All threads share a single random number generator.
** This structure is the current state of the generator.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <name>SQLITE_WSD</name> struct <name>sqlite3PrngType</name> <block>{
  <expr><name>unsigned</name> <name>char</name> <name>isInit</name></expr>;          <comment type="block">/* True if initialized */</comment>
  <expr><name>unsigned</name> <name>char</name> <name>i</name></expr>, <expr><name>j</name></expr>;            <comment type="block">/* State variables */</comment>
  <expr><name>unsigned</name> <name>char</name> <name><name>s</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr>;          <comment type="block">/* State variables */</comment>
}</block> <name>sqlite3Prng</name></expr>;</expr_stmt>

<comment type="block">/*
** Return N random bytes.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_randomness</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zBuf</name> <init>= <expr><name>pBuf</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* The "wsdPrng" macro will resolve to the pseudo-random number generator
  ** state vector.  If writable static data is unsupported on the target,
  ** we have to locate the state vector at run-time.  In the more common
  ** case where writable static data is supported, wsdPrng can refer directly
  ** to the "sqlite3Prng" state vector declared above.
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>sqlite3PrngType</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdPrng</name></cpp:macro> <cpp:value>p[0]</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdPrng</name></cpp:macro> <cpp:value>sqlite3Prng</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
  <expr_stmt><expr><name>mutex</name> <operator>=</operator> <call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_PRNG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>N</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>pBuf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>isInit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Initialize the state of the random number generator once,
  ** the first time this routine is called.  The seed value does
  ** not need to contain a lot of randomness since we are not
  ** trying to do secure encryption or anything like that...
  **
  ** Nothing in this file or anywhere else in SQLite does any kind of
  ** encryption.  The RC4 algorithm is being used as a PRNG (pseudo-random
  ** number generator) not as an encryption device.
  */</comment>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>wsdPrng</name><operator>.</operator><name>isInit</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>j</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3OsRandomness</name><argument_list>(<argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>j</name></name> <operator>+=</operator> <name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name><name>wsdPrng</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name><name>wsdPrng</name><operator>.</operator><name>j</name></name></expr>]</index></name> <operator>=</operator> <name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>isInit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>N</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name><name>wsdPrng</name><operator>.</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>j</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name><name>wsdPrng</name><operator>.</operator><name>i</name></name></expr>]</index></name> <operator>=</operator> <name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name><name>wsdPrng</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name><name>wsdPrng</name><operator>.</operator><name>j</name></name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name><name>wsdPrng</name><operator>.</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>zBuf</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>wsdPrng</name><operator>.</operator><name>s</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><operator>--</operator><name>N</name></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BUILTIN_TEST</name></cpp:ifndef>
<comment type="block">/*
** For testing purposes, we sometimes want to preserve the state of
** PRNG and restore the PRNG to its saved state at a later time, or
** to reset the PRNG to its initial state.  These routines accomplish
** those tasks.
**
** The sqlite3_test_control() interface calls these routines to
** control the PRNG.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <name>SQLITE_WSD</name> struct <name>sqlite3PrngType</name> <name>sqlite3SavedPrng</name></expr>;</expr_stmt>
<function><type><name>void</name></type> <name>sqlite3PrngSaveState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(
    <argument><expr><operator>&amp;</operator><call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3SavedPrng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><operator>&amp;</operator><call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></sizeof></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3PrngRestoreState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(
    <argument><expr><operator>&amp;</operator><call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><operator>&amp;</operator><call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3SavedPrng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></sizeof></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_BUILTIN_TEST */</comment>
</unit>
