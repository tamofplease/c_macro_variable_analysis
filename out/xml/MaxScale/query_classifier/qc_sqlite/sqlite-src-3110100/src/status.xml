<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/status.c"><comment type="block">/*
** 2008 June 18
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This module implements the sqlite3_status() interface and related
** functionality.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdbeInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** Variables in which to record status information.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_PTRSIZE</name><operator>&gt;</operator><literal type="number">4</literal></expr></cpp:if>
<typedef>typedef <type><name>sqlite3_int64</name></type> <name>sqlite3StatValueType</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>u32</name></type> <name>sqlite3StatValueType</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name><name>struct</name> <name>sqlite3StatType</name></name></type> <name>sqlite3StatType</name>;</typedef>
<expr_stmt><expr><specifier>static</specifier> <name>SQLITE_WSD</name> struct <name>sqlite3StatType</name> <block>{
  <expr><name>sqlite3StatValueType</name> <name><name>nowValue</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;  <comment type="block">/* Current value */</comment>
  <expr><name>sqlite3StatValueType</name> <name><name>mxValue</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;   <comment type="block">/* Maximum value */</comment>
}</block> <name>sqlite3Stat</name> <operator>=</operator> <block>{ <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr> }</block></expr>;</expr_stmt>

<comment type="block">/*
** Elements of sqlite3Stat[] are protected by either the memory allocator
** mutex, or by the pcache1 mutex.  The following array determines which.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>statMutex</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* SQLITE_STATUS_MEMORY_USED */</comment>
  <expr><literal type="number">1</literal></expr>,  <comment type="block">/* SQLITE_STATUS_PAGECACHE_USED */</comment>
  <expr><literal type="number">1</literal></expr>,  <comment type="block">/* SQLITE_STATUS_PAGECACHE_OVERFLOW */</comment>
  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* SQLITE_STATUS_SCRATCH_USED */</comment>
  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* SQLITE_STATUS_SCRATCH_OVERFLOW */</comment>
  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* SQLITE_STATUS_MALLOC_SIZE */</comment>
  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* SQLITE_STATUS_PARSER_STACK */</comment>
  <expr><literal type="number">1</literal></expr>,  <comment type="block">/* SQLITE_STATUS_PAGECACHE_SIZE */</comment>
  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* SQLITE_STATUS_SCRATCH_SIZE */</comment>
  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* SQLITE_STATUS_MALLOC_COUNT */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* The "wsdStat" macro will resolve to the status information
** state vector.  If writable static data is unsupported on the target,
** we have to locate the state vector at run-time.  In the more common
** case where writable static data is supported, wsdStat can refer directly
** to the "sqlite3Stat" state vector declared above.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdStatInit</name></cpp:macro>  <cpp:value>sqlite3StatType *x = &amp;GLOBAL(sqlite3StatType,sqlite3Stat)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdStat</name></cpp:macro> <cpp:value>x[0]</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdStatInit</name></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdStat</name></cpp:macro> <cpp:value>sqlite3Stat</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Return the current value of a status parameter.  The caller must
** be holding the appropriate mutex.
*/</comment>
<function><type><name>sqlite3_int64</name></type> <name>sqlite3StatusValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>wsdStatInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>statMutex</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>statMutex</name><index>[<expr><name>op</name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>sqlite3Pcache1Mutex</name><argument_list>()</argument_list></call></expr>
                                           </then><else>: <expr><call><name>sqlite3MallocMutex</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Add N to the value of a status record.  The caller must hold the
** appropriate mutex.  (Locking is checked by assert()).
**
** The StatusUp() routine can accept positive or negative values for N.
** The value of N is added to the current status value and the high-water
** mark is adjusted if necessary.
**
** The StatusDown() routine lowers the current value by N.  The highwater
** mark is unchanged.  N must be non-negative for StatusDown().
*/</comment>
<function><type><name>void</name></type> <name>sqlite3StatusUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>wsdStatInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>statMutex</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>statMutex</name><index>[<expr><name>op</name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>sqlite3Pcache1Mutex</name><argument_list>()</argument_list></call></expr>
                                           </then><else>: <expr><call><name>sqlite3MallocMutex</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name><index>[<expr><name>op</name></expr>]</index></name> <operator>+=</operator> <name>N</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name><index>[<expr><name>op</name></expr>]</index></name><operator>&gt;</operator><name><name>wsdStat</name><operator>.</operator><name>mxValue</name><index>[<expr><name>op</name></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>wsdStat</name><operator>.</operator><name>mxValue</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <name><name>wsdStat</name><operator>.</operator><name>nowValue</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3StatusDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>wsdStatInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>N</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>statMutex</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>statMutex</name><index>[<expr><name>op</name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>sqlite3Pcache1Mutex</name><argument_list>()</argument_list></call></expr>
                                           </then><else>: <expr><call><name>sqlite3MallocMutex</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name><index>[<expr><name>op</name></expr>]</index></name> <operator>-=</operator> <name>N</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Adjust the highwater mark if necessary.
** The caller must hold the appropriate mutex.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3StatusHighwater</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3StatValueType</name></type> <name>newValue</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>wsdStatInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>X</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>newValue</name> <operator>=</operator> <operator>(</operator><name>sqlite3StatValueType</name><operator>)</operator><name>X</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>statMutex</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>statMutex</name><index>[<expr><name>op</name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>sqlite3Pcache1Mutex</name><argument_list>()</argument_list></call></expr>
                                           </then><else>: <expr><call><name>sqlite3MallocMutex</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>==</operator><name>SQLITE_STATUS_MALLOC_SIZE</name>
          <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_STATUS_PAGECACHE_SIZE</name>
          <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_STATUS_SCRATCH_SIZE</name>
          <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_STATUS_PARSER_STACK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>newValue</name><operator>&gt;</operator><name><name>wsdStat</name><operator>.</operator><name>mxValue</name><index>[<expr><name>op</name></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>wsdStat</name><operator>.</operator><name>mxValue</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <name>newValue</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Query status information.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_status64</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pCurrent</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pHighwater</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>resetFlag</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>wsdStatInit</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>op</name><operator>&gt;=</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>wsdStat</name><operator>.</operator><name>nowValue</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>pCurrent</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>pHighwater</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>pMutex</name> <operator>=</operator> <ternary><condition><expr><name><name>statMutex</name><index>[<expr><name>op</name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>sqlite3Pcache1Mutex</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>sqlite3MallocMutex</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <name><name>wsdStat</name><operator>.</operator><name>nowValue</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <name><name>wsdStat</name><operator>.</operator><name>mxValue</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>resetFlag</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>wsdStat</name><operator>.</operator><name>mxValue</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <name><name>wsdStat</name><operator>.</operator><name>nowValue</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pMutex</name></expr>;</expr_stmt>  <comment type="block">/* Prevent warning when SQLITE_THREADSAFE=0 */</comment>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3_status</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pCurrent</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pHighwater</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resetFlag</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iCur</name></decl>, <decl><type ref="prev"/><name>iHwtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>pCurrent</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>pHighwater</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_status64</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHwtr</name></expr></argument>, <argument><expr><name>resetFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>iCur</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>iHwtr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Query status information for a single database connection
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_db_status</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,          <comment type="block">/* The database connection whose status is desired */</comment>
  <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,               <comment type="block">/* Status verb */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pCurrent</name></decl></parameter>,        <comment type="block">/* Write current value here */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pHighwater</name></decl></parameter>,      <comment type="block">/* Write high-water mark here */</comment>
  <parameter><decl><type><name>int</name></type> <name>resetFlag</name></decl></parameter>         <comment type="block">/* Reset high-water mark if true */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>   <comment type="block">/* Return code */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3SafetyCheckOk</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>pCurrent</name><operator>==</operator><literal type="number">0</literal><operator>||</operator> <name>pHighwater</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name>op</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_DBSTATUS_LOOKASIDE_USED</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>nOut</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>mxOut</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>resetFlag</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>mxOut</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>nOut</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr>:</case>
    <case>case <expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</name></expr>:</case>
    <case>case <expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>op</name><operator>==</operator><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>op</name><operator>==</operator><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>op</name><operator>==</operator><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>op</name><operator>-</operator><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>op</name><operator>-</operator><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name><operator>)</operator><operator>&lt;</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>anStat</name><index>[<expr><name>op</name> <operator>-</operator> <name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>resetFlag</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>anStat</name><index>[<expr><name>op</name> <operator>-</operator> <name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/* 
    ** Return an approximation for the amount of memory currently used
    ** by all pagers associated with the given database connection.  The
    ** highwater mark is meaningless and is returned as zero.
    */</comment>
    <case>case <expr><name>SQLITE_DBSTATUS_CACHE_USED</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>totalUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeEnterAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>pBt</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>totalUsed</name> <operator>+=</operator> <call><name>sqlite3PagerMemUsed</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3BtreeLeaveAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <name>totalUsed</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/*
    ** *pCurrent gets an accurate estimate of the amount of memory used
    ** to store the schema for all databases (main, temp, and any ATTACHed
    ** databases.  *pHighwater is set to zero.
    */</comment>
    <case>case <expr><name>SQLITE_DBSTATUS_SCHEMA_USED</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                      <comment type="block">/* Used to iterate through schemas */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Used to accumulate return value */</comment>

      <expr_stmt><expr><call><name>sqlite3BtreeEnterAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pnBytesFreed</name></name> <operator>=</operator> <operator>&amp;</operator><name>nByte</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pSchema</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pSchema</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>m</name><operator>.</operator><name>xRoundup</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HashElem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator>
              <name><name>pSchema</name><operator>-&gt;</operator><name>tblHash</name><operator>.</operator><name>count</name></name> 
            <operator>+</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name><operator>.</operator><name>count</name></name>
            <operator>+</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>idxHash</name><operator>.</operator><name>count</name></name>
            <operator>+</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>fkeyHash</name><operator>.</operator><name>count</name></name>
          <operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <call><name>sqlite3_msize</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>tblHash</name><operator>.</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <call><name>sqlite3_msize</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name><operator>.</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <call><name>sqlite3_msize</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>idxHash</name><operator>.</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <call><name>sqlite3_msize</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>fkeyHash</name><operator>.</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <for>for<control>(<init><expr><name>p</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3DeleteTrigger</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>Trigger</name><operator>*</operator><operator>)</operator><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <for>for<control>(<init><expr><name>p</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>tblHash</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3DeleteTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>Table</name> <operator>*</operator><operator>)</operator><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pnBytesFreed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeLeaveAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/*
    ** *pCurrent gets an accurate estimate of the amount of memory used
    ** to store all prepared statements.
    ** *pHighwater is set to zero.
    */</comment>
    <case>case <expr><name>SQLITE_DBSTATUS_STMT_USED</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>Vdbe</name></name> <modifier>*</modifier></type><name>pVdbe</name></decl>;</decl_stmt>         <comment type="block">/* Used to iterate through VMs */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Used to accumulate return value */</comment>

      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pnBytesFreed</name></name> <operator>=</operator> <operator>&amp;</operator><name>nByte</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pVdbe</name><operator>=</operator><name><name>db</name><operator>-&gt;</operator><name>pVdbe</name></name></expr>;</init> <condition><expr><name>pVdbe</name></expr>;</condition> <incr><expr><name>pVdbe</name><operator>=</operator><name><name>pVdbe</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3VdbeClearObject</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pVdbe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pVdbe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pnBytesFreed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* IMP: R-64479-57858 */</comment>
      <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/*
    ** Set *pCurrent to the total cache hits or misses encountered by all
    ** pagers the database handle is connected to. *pHighwater is always set 
    ** to zero.
    */</comment>
    <case>case <expr><name>SQLITE_DBSTATUS_CACHE_HIT</name></expr>:</case>
    <case>case <expr><name>SQLITE_DBSTATUS_CACHE_MISS</name></expr>:</case>
    <case>case <expr><name>SQLITE_DBSTATUS_CACHE_WRITE</name></expr>:</case><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_DBSTATUS_CACHE_MISS</name><operator>==</operator><name>SQLITE_DBSTATUS_CACHE_HIT</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_DBSTATUS_CACHE_WRITE</name><operator>==</operator><name>SQLITE_DBSTATUS_CACHE_HIT</name><operator>+</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sqlite3PagerCacheStat</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>resetFlag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* IMP: R-42420-56072 */</comment>
                       <comment type="block">/* IMP: R-54100-20147 */</comment>
                       <comment type="block">/* IMP: R-29431-39229 */</comment>
      <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <name>nRet</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/* Set *pCurrent to non-zero if there are unresolved deferred foreign
    ** key constraints.  Set *pCurrent to zero if all foreign key constraints
    ** have been satisfied.  The *pHighwater is always set to zero.
    */</comment>
    <case>case <expr><name>SQLITE_DBSTATUS_DEFERRED_FKS</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pHighwater</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* IMP: R-11967-56545 */</comment>
      <expr_stmt><expr><operator>*</operator><name>pCurrent</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>nDeferredImmCons</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>db</name><operator>-&gt;</operator><name>nDeferredCons</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
