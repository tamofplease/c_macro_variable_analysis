<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/mutex.c"><comment type="block">/*
** 2007 August 14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the C functions that implement mutexes.
**
** This file contains code that is common across all mutex implementations.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_OMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
** For debugging purposes, record when the mutex subsystem is initialized
** and uninitialized so that we can assert() if there is an attempt to
** allocate a mutex while the system is uninitialized.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>SQLITE_WSD</name> <name>int</name></type> <name>mutexIsInit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_DEBUG &amp;&amp; !defined(SQLITE_MUTEX_OMIT) */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:ifndef>
<comment type="block">/*
** Initialize the mutex system.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MutexInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> 
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* If the xMutexAlloc method has not been set, then the user did not
    ** install a mutex implementation via sqlite3_config() prior to 
    ** sqlite3_initialize() being called. This block copies pointers to
    ** the default implementation into the sqlite3GlobalConfig structure.
    */</comment>
    <decl_stmt><decl><type><name>sqlite3_mutex_methods</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pFrom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_mutex_methods</name> <modifier>*</modifier></type><name>pTo</name> <init>= <expr><operator>&amp;</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bCoreMutex</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pFrom</name> <operator>=</operator> <call><name>sqlite3DefaultMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pFrom</name> <operator>=</operator> <call><name>sqlite3NoopMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexInit</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexInit</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexEnd</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexEnd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexFree</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexFree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexEnter</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexEnter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexTry</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexTry</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexLeave</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexLeave</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexHeld</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexHeld</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexNotheld</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexNotheld</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexAlloc</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexAlloc</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexInit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexInit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>GLOBAL</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>mutexIsInit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Shutdown the mutex system. This call frees resources allocated by
** sqlite3MutexInit().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MutexEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnd</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>GLOBAL</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>mutexIsInit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Retrieve a pointer to a static mutex or allocate a new dynamic one.
*/</comment>
<function><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>sqlite3_mutex_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><name>id</name><operator>&lt;=</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>id</name><operator>&gt;</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>&amp;&amp;</operator> <call><name>sqlite3MutexInit</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>sqlite3MutexAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bCoreMutex</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>GLOBAL</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>mutexIsInit</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free a dynamic mutex.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_free</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexFree</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexFree</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Obtain the mutex p. If some other thread already has the mutex, block
** until it can be obtained.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_enter</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnter</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Obtain the mutex p. If successful, return SQLITE_OK. Otherwise, if another
** thread holds the mutex and it cannot be obtained, return SQLITE_BUSY.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_mutex_try</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexTry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexTry</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The sqlite3_mutex_leave() routine exits a mutex that was previously
** entered by the same thread.  The behavior is undefined if the mutex 
** is not currently entered. If a NULL pointer is passed as an argument
** this function is a no-op.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_leave</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexLeave</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexLeave</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
<comment type="block">/*
** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are
** intended for use inside assert() statements.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_mutex_held</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexHeld</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexHeld</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3_mutex_notheld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexNotheld</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexNotheld</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_MUTEX_OMIT) */</comment>
</unit>
