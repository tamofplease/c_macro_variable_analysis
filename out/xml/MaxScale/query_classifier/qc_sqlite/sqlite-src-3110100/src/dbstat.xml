<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/dbstat.c"><comment type="block">/*
** 2010 July 12
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains an implementation of the "dbstat" virtual table.
**
** The dbstat virtual table is used to extract low-level formatting
** information from an SQLite database in order to implement the
** "sqlite3_analyzer" utility.  See the ../tool/spaceanal.tcl script
** for an example implementation.
**
** Additional information is available on the "dbstat.html" page of the
** official SQLite documentation.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>   <comment type="block">/* Requires access to internal data structures */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_DBSTAT_VTAB</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call><operator>)</operator> \
    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VIRTUALTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
** Page paths:
** 
**   The value of the 'path' column describes the path taken from the 
**   root-node of the b-tree structure to each page. The value of the 
**   root-node path is '/'.
**
**   The value of the path for the left-most child page of the root of
**   a b-tree is '/000/'. (Btrees store content ordered from left to right
**   so the pages to the left have smaller keys than the pages to the right.)
**   The next to left-most child of the root page is
**   '/001', and so on, each sibling page identified by a 3-digit hex 
**   value. The children of the 451st left-most sibling have paths such
**   as '/1c2/000/, '/1c2/001/' etc.
**
**   Overflow pages are specified by appending a '+' character and a 
**   six-digit hexadecimal value to the path to the cell they are linked
**   from. For example, the three overflow pages in a chain linked from 
**   the left-most cell of the 450th child of the root page are identified
**   by the paths:
**
**      '/1c2/000+000000'         // First page in overflow chain
**      '/1c2/000+000001'         // Second page in overflow chain
**      '/1c2/000+000002'         // Third page in overflow chain
**
**   If the paths are sorted using the BINARY collation sequence, then
**   the overflow pages associated with a cell will appear earlier in the
**   sort-order than its child page:
**
**      '/1c2/000/'               // Left-most child of 451st child of root
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTAB_SCHEMA</name></cpp:macro>                                                         \
  <cpp:value>"CREATE TABLE xx( "                                                       \
  "  name       STRING,           /* Name of table or index */"             \
  "  path       INTEGER,          /* Path to page from root */"             \
  "  pageno     INTEGER,          /* Page number */"                        \
  "  pagetype   STRING,           /* 'internal', 'leaf' or 'overflow' */"   \
  "  ncell      INTEGER,          /* Cells on page (0 for overflow) */"     \
  "  payload    INTEGER,          /* Bytes of payload on this page */"      \
  "  unused     INTEGER,          /* Bytes of unused space on this page */" \
  "  mx_payload INTEGER,          /* Largest payload size of all cells */"  \
  "  pgoffset   INTEGER,          /* Offset of page in file */"             \
  "  pgsize     INTEGER,          /* Size of the page */"                   \
  "  schema     TEXT HIDDEN       /* Database schema being analyzed */"     \
  ");"</cpp:value></cpp:define>


<typedef>typedef <type><name><name>struct</name> <name>StatTable</name></name></type> <name>StatTable</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>StatCursor</name></name></type> <name>StatCursor</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>StatPage</name></name></type> <name>StatPage</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>StatCell</name></name></type> <name>StatCell</name>;</typedef>

<struct>struct <name>StatCell</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nLocal</name></decl>;</decl_stmt>                     <comment type="block">/* Bytes of local payload */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iChildPg</name></decl>;</decl_stmt>                   <comment type="block">/* Child node (or 0 if this is a leaf) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nOvfl</name></decl>;</decl_stmt>                      <comment type="block">/* Entries in aOvfl[] */</comment>
  <decl_stmt><decl><type><name>u32</name> <modifier>*</modifier></type><name>aOvfl</name></decl>;</decl_stmt>                     <comment type="block">/* Array of overflow page numbers */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLastOvfl</name></decl>;</decl_stmt>                  <comment type="block">/* Bytes of payload on final overflow page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOvfl</name></decl>;</decl_stmt>                      <comment type="block">/* Iterates through aOvfl[] */</comment>
}</block>;</struct>

<struct>struct <name>StatPage</name> <block>{
  <decl_stmt><decl><type><name>u32</name></type> <name>iPgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DbPage</name> <modifier>*</modifier></type><name>pPg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCell</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>                    <comment type="block">/* Path to this page */</comment>

  <comment type="block">/* Variables populated by statDecodePage(): */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>flags</name></decl>;</decl_stmt>                       <comment type="block">/* Copy of flags byte */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>                      <comment type="block">/* Number of cells on page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nUnused</name></decl>;</decl_stmt>                    <comment type="block">/* Number of unused bytes on page */</comment>
  <decl_stmt><decl><type><name>StatCell</name> <modifier>*</modifier></type><name>aCell</name></decl>;</decl_stmt>                <comment type="block">/* Array of parsed cells */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iRightChildPg</name></decl>;</decl_stmt>              <comment type="block">/* Right-child page number (or 0) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nMxPayload</name></decl>;</decl_stmt>                 <comment type="block">/* Largest payload of any cell on this page */</comment>
}</block>;</struct>

<struct>struct <name>StatCursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>            <comment type="block">/* Iterates through set of root pages */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isEof</name></decl>;</decl_stmt>                      <comment type="block">/* After pStmt has returned SQLITE_DONE */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>                        <comment type="block">/* Schema used for this query */</comment>

  <decl_stmt><decl><type><name>StatPage</name></type> <name><name>aPage</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iPage</name></decl>;</decl_stmt>                      <comment type="block">/* Current entry in aPage[] */</comment>

  <comment type="block">/* Values to return. */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>                    <comment type="block">/* Value of 'name' column */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPath</name></decl>;</decl_stmt>                    <comment type="block">/* Value of 'path' column */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iPageno</name></decl>;</decl_stmt>                    <comment type="block">/* Value of 'pageno' column */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPagetype</name></decl>;</decl_stmt>                <comment type="block">/* Value of 'pagetype' column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>                      <comment type="block">/* Value of 'ncell' column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPayload</name></decl>;</decl_stmt>                   <comment type="block">/* Value of 'payload' column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nUnused</name></decl>;</decl_stmt>                    <comment type="block">/* Value of 'unused' column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nMxPayload</name></decl>;</decl_stmt>                 <comment type="block">/* Value of 'mx_payload' column */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOffset</name></decl>;</decl_stmt>                    <comment type="block">/* Value of 'pgOffset' column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szPage</name></decl>;</decl_stmt>                     <comment type="block">/* Value of 'pgSize' column */</comment>
}</block>;</struct>

<struct>struct <name>StatTable</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>                        <comment type="block">/* Index of database to analyze */</comment>
}</block>;</struct>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>get2byte</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>get2byte</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((x)[0]&lt;&lt;8 | (x)[1])</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Connect to or create a statvfs virtual table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>statConnect</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Token</name></type> <name>nm</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3TokenInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nm</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3FindDb</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"no such database: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>VTAB_SCHEMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pTab</name> <operator>=</operator> <operator>(</operator><name>StatTable</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StatTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name>pTab</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StatTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>iDb</name></name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pTab</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Disconnect from or destroy a statvfs virtual table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>statDisconnect</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** There is no "best-index". This virtual table always does a linear
** scan.  However, a schema=? constraint should cause this table to
** operate on a different database schema, so check for it.
**
** idxNum is normally 0, but will be 1 if a schema=? constraint exists.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>statBestIndex</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pIdxInfo</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">1.0e6</literal></expr>;</expr_stmt>  <comment type="block">/* Initial cost estimate */</comment>

  <comment type="block">/* Look for a valid schema=? constraint.  If found, change the idxNum to
  ** 1 and request the value of that constraint be sent to xFilter.  And
  ** lower the cost estimate to encourage the constrained version to be
  ** used.
  */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIdxInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usable</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>op</name><operator>!=</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>!=</operator><literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>omit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></for>


  <comment type="block">/* Records are always returned in ascending order of (name, path). 
  ** If this will satisfy the client, set the orderByConsumed flag so that 
  ** SQLite does not do an external sort.
  */</comment>
  <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">1</literal>
     <operator>&amp;&amp;</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal>
     <operator>)</operator> <operator>||</operator>
      <operator>(</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">2</literal>
     <operator>&amp;&amp;</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>==</operator><literal type="number">1</literal>
     <operator>&amp;&amp;</operator> <name><name>pIdxInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal>
     <operator>)</operator></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a new statvfs cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>statOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>StatTable</name> <operator>*</operator><operator>)</operator><name>pVTab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>StatCursor</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StatCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCsr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StatCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pVtab</name></name> <operator>=</operator> <name>pVTab</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>iDb</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab_cursor</name> <operator>*</operator><operator>)</operator><name>pCsr</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>statClearPage</name><parameter_list>(<parameter><decl><type><name>StatPage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aCell</name></name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aCell</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aOvfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aCell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3PagerUnref</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StatPage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>statResetCsr</name><parameter_list>(<parameter><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>statClearPage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPath</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close a statvfs cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>statClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>StatCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>statResetCsr</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getLocalPayload</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>nUsable</name></decl></parameter>,                    <comment type="block">/* Usable bytes per page */</comment>
  <parameter><decl><type><name>u8</name></type> <name>flags</name></decl></parameter>,                       <comment type="block">/* Page flags */</comment>
  <parameter><decl><type><name>int</name></type> <name>nTotal</name></decl></parameter>,                     <comment type="block">/* Total record (payload) size */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnLocal</name></decl></parameter>                    <comment type="block">/* OUT: Bytes stored locally */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMinLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMaxLocal</name></decl>;</decl_stmt>
 
  <if_stmt><if>if<condition>( <expr><name>flags</name><operator>==</operator><literal type="number">0x0D</literal></expr> )</condition><block>{<block_content>              <comment type="block">/* Table leaf node */</comment>
    <expr_stmt><expr><name>nMinLocal</name> <operator>=</operator> <operator>(</operator><name>nUsable</name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal> <operator>/</operator> <literal type="number">255</literal> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMaxLocal</name> <operator>=</operator> <name>nUsable</name> <operator>-</operator> <literal type="number">35</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>                          <comment type="block">/* Index interior and leaf nodes */</comment>
    <expr_stmt><expr><name>nMinLocal</name> <operator>=</operator> <operator>(</operator><name>nUsable</name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal> <operator>/</operator> <literal type="number">255</literal> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMaxLocal</name> <operator>=</operator> <operator>(</operator><name>nUsable</name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">64</literal> <operator>/</operator> <literal type="number">255</literal> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>nMinLocal</name> <operator>+</operator> <operator>(</operator><name>nTotal</name> <operator>-</operator> <name>nMinLocal</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>nUsable</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLocal</name><operator>&gt;</operator><name>nMaxLocal</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>nMinLocal</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnLocal</name> <operator>=</operator> <name>nLocal</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>statDecodePage</name><parameter_list>(<parameter><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name></decl></parameter>, <parameter><decl><type><name>StatPage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nUnused</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isLeaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>szPage</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aData</name> <init>= <expr><call><name>sqlite3PagerGetData</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aHdr</name> <init>= <expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>iPgno</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>aHdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name> <operator>=</operator> <call><name>get2byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aHdr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMxPayload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>isLeaf</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>==</operator><literal type="number">0x0A</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>==</operator><literal type="number">0x0D</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>nHdr</name> <operator>=</operator> <literal type="number">12</literal> <operator>-</operator> <name>isLeaf</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iPgno</name></name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>nUnused</name> <operator>=</operator> <call><name>get2byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aHdr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>nHdr</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nUnused</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>aHdr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>get2byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aHdr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>iOff</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nUnused</name> <operator>+=</operator> <call><name>get2byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>iOff</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>get2byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nUnused</name></name> <operator>=</operator> <name>nUnused</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iRightChildPg</name></name> <operator>=</operator> <ternary><condition><expr><name>isLeaf</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>sqlite3Get4byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aHdr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>szPage</name> <operator>=</operator> <call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Used to iterate through cells */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nUsable</name></decl>;</decl_stmt>                  <comment type="block">/* Usable bytes per page */</comment>

    <expr_stmt><expr><call><name>sqlite3BtreeEnter</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nUsable</name> <operator>=</operator> <name>szPage</name> <operator>-</operator> <call><name>sqlite3BtreeGetReserveNoMutex</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeLeave</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aCell</name></name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StatCell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aCell</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aCell</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StatCell</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>StatCell</name> <modifier>*</modifier></type><name>pCell</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aCell</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>get2byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>nHdr</name><operator>+</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>isLeaf</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>iChildPg</name></name> <operator>=</operator> <call><name>sqlite3Get4byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>==</operator><literal type="number">0x05</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* A table interior node. nPayload==0. */</comment>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>u32</name></type> <name>nPayload</name></decl>;</decl_stmt>             <comment type="block">/* Bytes of payload total (local+overflow) */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nLocal</name></decl>;</decl_stmt>               <comment type="block">/* Bytes of payload stored locally */</comment>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>getVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>==</operator><literal type="number">0x0D</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>u64</name></type> <name>dummy</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>sqlite3GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>nPayload</name><operator>&gt;</operator><operator>(</operator><name>u32</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nMxPayload</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMxPayload</name></name> <operator>=</operator> <name>nPayload</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>getLocalPayload</name><argument_list>(<argument><expr><name>nUsable</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>nPayload</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>nLocal</name></name> <operator>=</operator> <name>nLocal</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nLocal</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nPayload</name><operator>&gt;=</operator><operator>(</operator><name>u32</name><operator>)</operator><name>nLocal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nLocal</name><operator>&lt;=</operator><operator>(</operator><name>nUsable</name><operator>-</operator><literal type="number">35</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>nPayload</name><operator>&gt;</operator><operator>(</operator><name>u32</name><operator>)</operator><name>nLocal</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>nOvfl</name> <init>= <expr><operator>(</operator><operator>(</operator><name>nPayload</name> <operator>-</operator> <name>nLocal</name><operator>)</operator> <operator>+</operator> <name>nUsable</name><operator>-</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>nUsable</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>nLastOvfl</name></name> <operator>=</operator> <operator>(</operator><name>nPayload</name><operator>-</operator><name>nLocal</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>nOvfl</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>nUsable</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>nOvfl</name></name> <operator>=</operator> <name>nOvfl</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>aOvfl</name></name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nOvfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pCell</name><operator>-&gt;</operator><name>aOvfl</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>aOvfl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqlite3Get4byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>iOff</name><operator>+</operator><name>nLocal</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nOvfl</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>u32</name></type> <name>iPrev</name> <init>= <expr><name><name>pCell</name><operator>-&gt;</operator><name>aOvfl</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DbPage</name> <modifier>*</modifier></type><name>pPg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iPrev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPg</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>rc</name></expr>;</return>
            </block_content>}</block></if></if_stmt> 
            <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>aOvfl</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3Get4byte</name><argument_list>(<argument><expr><call><name>sqlite3PagerGetData</name><argument_list>(<argument><expr><name>pPg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3PagerUnref</name><argument_list>(<argument><expr><name>pPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the pCsr-&gt;iOffset and pCsr-&gt;szPage member variables. Based on
** the current value of pCsr-&gt;iPageno.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>statSizeAndOffset</name><parameter_list>(<parameter><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>StatTable</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>sqlite3_vtab_cursor</name> <operator>*</operator><operator>)</operator><name>pCsr</name><operator>)</operator><operator>-&gt;</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name><name>pTab</name><operator>-&gt;</operator><name>iDb</name></name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* The default page size and offset */</comment>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iOffset</name></name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>szPage</name></name> <operator>*</operator> <operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>iPageno</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* If connected to a ZIPVFS backend, override the page size and
  ** offset with actual values obtained from ZIPVFS.
  */</comment>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iPageno</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>fd</name><operator>-&gt;</operator><name>pMethods</name></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">230440</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iOffset</name></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Move a statvfs cursor to the next entry in the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>statNext</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>StatCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StatTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>StatTable</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPath</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>statNextRestart</name>:</label>
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pPg</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nPage</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>iRoot</name> <init>= <expr><operator>(</operator><name>u32</name><operator>)</operator><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3PagerPagecount</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nPage</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>iRoot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pPg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iPgno</name> <operator>=</operator> <name>iRoot</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iCell</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zPath</name> <operator>=</operator> <name>z</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>

    <comment type="block">/* Page p itself has already been visited. */</comment>
    <decl_stmt><decl><type><name>StatPage</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>StatCell</name> <modifier>*</modifier></type><name>pCell</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aCell</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCell</name><operator>-&gt;</operator><name>iOvfl</name></name><operator>&lt;</operator><name><name>pCell</name><operator>-&gt;</operator><name>nOvfl</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nUsable</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3BtreeEnter</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nUsable</name> <operator>=</operator> <call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call> <operator>-</operator> 
                        <call><name>sqlite3BtreeGetReserveNoMutex</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3BtreeLeave</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPageno</name></name> <operator>=</operator> <name><name>pCell</name><operator>-&gt;</operator><name>aOvfl</name><index>[<expr><name><name>pCell</name><operator>-&gt;</operator><name>iOvfl</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPagetype</name></name> <operator>=</operator> <literal type="string">"overflow"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nMxPayload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPath</name></name> <operator>=</operator> <name>z</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
            <argument><expr><literal type="string">"%s%.3x+%.6x"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zPath</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name></expr></argument>, <argument><expr><name><name>pCell</name><operator>-&gt;</operator><name>iOvfl</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pCell</name><operator>-&gt;</operator><name>iOvfl</name></name><operator>&lt;</operator><name><name>pCell</name><operator>-&gt;</operator><name>nOvfl</name></name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nUnused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nPayload</name></name> <operator>=</operator> <name>nUsable</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nPayload</name></name> <operator>=</operator> <name><name>pCell</name><operator>-&gt;</operator><name>nLastOvfl</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nUnused</name></name> <operator>=</operator> <name>nUsable</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nPayload</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>pCell</name><operator>-&gt;</operator><name>iOvfl</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>statSizeAndOffset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iRightChildPg</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>iRightChildPg</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>iCell</name></name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>statClearPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>statNext</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name><operator>--</operator></expr>;</expr_stmt>
      <goto>goto <name>statNextRestart</name>;</goto> <comment type="block">/* Tail recursion */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>==</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPgno</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iRightChildPg</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPgno</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCell</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name></expr>]</index></name><operator>.</operator><name>iChildPg</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pPg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iCell</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>zPath</name> <operator>=</operator> <name>z</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s%.3x/"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zPath</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCell</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>


  <comment type="block">/* Populate the StatCursor fields with the values to be returned
  ** by the xColumn() and xRowid() methods.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StatPage</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPage</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPageno</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iPgno</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>statDecodePage</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>statSizeAndOffset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <switch>switch<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="number">0x05</literal></expr>:</case>             <comment type="block">/* table internal */</comment>
        <case>case <expr><literal type="number">0x02</literal></expr>:</case>             <comment type="block">/* index internal */</comment>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPagetype</name></name> <operator>=</operator> <literal type="string">"internal"</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">0x0D</literal></expr>:</case>             <comment type="block">/* table leaf */</comment>
        <case>case <expr><literal type="number">0x0A</literal></expr>:</case>             <comment type="block">/* index leaf */</comment>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPagetype</name></name> <operator>=</operator> <literal type="string">"leaf"</literal></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPagetype</name></name> <operator>=</operator> <literal type="string">"corrupted"</literal></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nUnused</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nUnused</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nMxPayload</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nMxPayload</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPath</name></name> <operator>=</operator> <name>z</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCell</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>nPayload</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCell</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nLocal</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nPayload</name></name> <operator>=</operator> <name>nPayload</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>statEof</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>StatCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>statFilter</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>StatCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StatTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>StatTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMaster</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>idxNum</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbase</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name> <operator>=</operator> <call><name>sqlite3FindDbName</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zDbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"no such schema: %s"</literal></expr></argument>, <argument><expr><name>zDbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr> ?</condition><then> <expr><name>SQLITE_ERROR</name></expr> </then><else>: <expr><name>SQLITE_NOMEM</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>iDb</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>statResetCsr</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>zMaster</name> <operator>=</operator> <ternary><condition><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"sqlite_temp_master"</literal></expr> </then><else>: <expr><literal type="string">"sqlite_master"</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
      <argument><expr><literal type="string">"SELECT 'sqlite_master' AS name, 1 AS rootpage, 'table' AS type"</literal>
      <literal type="string">"  UNION ALL  "</literal>
      <literal type="string">"SELECT name, rootpage, type"</literal>
      <literal type="string">"  FROM \"%w\".%s WHERE rootpage!=0"</literal>
      <literal type="string">"  ORDER BY name"</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><name>zMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>statNext</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>statColumn</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>StatCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>i</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>            <comment type="block">/* name */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>            <comment type="block">/* path */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPath</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>            <comment type="block">/* pageno */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPageno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>            <comment type="block">/* pagetype */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zPagetype</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>            <comment type="block">/* ncell */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nCell</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>            <comment type="block">/* payload */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nPayload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">6</literal></expr>:</case>            <comment type="block">/* unused */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nUnused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">7</literal></expr>:</case>            <comment type="block">/* mx_payload */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nMxPayload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">8</literal></expr>:</case>            <comment type="block">/* pgoffset */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">9</literal></expr>:</case>            <comment type="block">/* pgsize */</comment>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <block>{<block_content>          <comment type="block">/* schema */</comment>
      <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iDb</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDb</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>statRowid</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StatCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>StatCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iPageno</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Invoke this routine to register the "dbstat" virtual table module
*/</comment>
<function><type><name>int</name></type> <name>sqlite3DbstatRegister</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_module</name></type> <name>dbstat_module</name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* iVersion */</comment>
    <expr><name>statConnect</name></expr>,                  <comment type="block">/* xCreate */</comment>
    <expr><name>statConnect</name></expr>,                  <comment type="block">/* xConnect */</comment>
    <expr><name>statBestIndex</name></expr>,                <comment type="block">/* xBestIndex */</comment>
    <expr><name>statDisconnect</name></expr>,               <comment type="block">/* xDisconnect */</comment>
    <expr><name>statDisconnect</name></expr>,               <comment type="block">/* xDestroy */</comment>
    <expr><name>statOpen</name></expr>,                     <comment type="block">/* xOpen - open a cursor */</comment>
    <expr><name>statClose</name></expr>,                    <comment type="block">/* xClose - close a cursor */</comment>
    <expr><name>statFilter</name></expr>,                   <comment type="block">/* xFilter - configure scan constraints */</comment>
    <expr><name>statNext</name></expr>,                     <comment type="block">/* xNext - advance a cursor */</comment>
    <expr><name>statEof</name></expr>,                      <comment type="block">/* xEof - check for end of scan */</comment>
    <expr><name>statColumn</name></expr>,                   <comment type="block">/* xColumn - read data */</comment>
    <expr><name>statRowid</name></expr>,                    <comment type="block">/* xRowid - read data */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xUpdate */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xBegin */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xSync */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xCommit */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xRollback */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xFindMethod */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xRename */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"dbstat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbstat_module</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_DBSTAT_VTAB</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><name>int</name></type> <name>sqlite3DbstatRegister</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_DBSTAT_VTAB */</comment>
</unit>
