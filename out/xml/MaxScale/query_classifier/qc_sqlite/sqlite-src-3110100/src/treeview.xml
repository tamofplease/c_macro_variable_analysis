<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/treeview.c"><comment type="block">/*
** 2015-06-08
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains C code to implement the TreeView debugging routines.
** These routines print a parse tree to standard output for debugging and
** analysis. 
**
** The interfaces in this file is only available when compiling
** with SQLITE_DEBUG.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>

<comment type="block">/*
** Add a new subitem to the tree.  The moreToFollow flag indicates that this
** is not the last item in the tree.
*/</comment>
<function><type><specifier>static</specifier> <name>TreeView</name> <modifier>*</modifier></type><name>sqlite3TreeViewPush</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>moreToFollow</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>moreToFollow</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name></expr>]</index></name> <operator>=</operator> <name>moreToFollow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Finished with one layer of the tree
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3TreeViewPop</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a single line of output for the tree, with a prefix that contains
** all the appropriate tree lines
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3TreeViewLine</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StrAccum</name></type> <name>acc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3StrAccumInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3StrAccumAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"|   "</literal></expr> </then><else>: <expr><literal type="string">"    "</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3StrAccumAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"|-- "</literal></expr> </then><else>: <expr><literal type="string">"'-- "</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3VXPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zBuf</name><index>[<expr><name><name>acc</name><operator>.</operator><name>nChar</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3StrAccumAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3StrAccumFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Shorthand for starting a new tree item that consists of a single label
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3TreeViewItem</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>,<parameter><decl><type><name>u8</name></type> <name>moreFollows</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>moreFollows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable description of a WITH clause.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewWith</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>With</name> <modifier>*</modifier></type><name>pWith</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWith</name><operator>-&gt;</operator><name>pOuter</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WITH (0x%p, pOuter=0x%p)"</literal></expr></argument>,<argument><expr><name>pWith</name></expr></argument>,<argument><expr><name><name>pWith</name><operator>-&gt;</operator><name>pOuter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WITH (0x%p)"</literal></expr></argument>, <argument><expr><name>pWith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pView</name> <operator>=</operator> <call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>StrAccum</name></type> <name>x</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>zLine</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Cte</name></name> <modifier>*</modifier></type><name>pCte</name> <init>= <expr><operator>&amp;</operator><name><name>pWith</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3StrAccumInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCte</name><operator>-&gt;</operator><name>pCols</name></name> <operator>&amp;&amp;</operator> <name><name>pCte</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>nExpr</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>cSep</name> <init>= <expr><literal type="char">'('</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pCte</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>nExpr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">"%c%s"</literal></expr></argument>, <argument><expr><name>cSep</name></expr></argument>, <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>cSep</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" AS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3StrAccumFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>i</name><operator>&lt;</operator><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Generate a human-readable description of a the Select object.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewSelect</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Select</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pView</name> <operator>=</operator> <call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWith</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewWith</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWith</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <do>do<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"SELECT%s%s (0x%p) selFlags=0x%x"</literal></expr></argument>,
      <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>selFlags</name></name> <operator>&amp;</operator> <name>SF_Distinct</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" DISTINCT"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
      <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>selFlags</name></name> <operator>&amp;</operator> <name>SF_Aggregate</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" agg_flag"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>selFlags</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cnt</name><operator>++</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPrior</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWhere</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pGroupBy</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pHaving</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pOffset</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"result-set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pView</name> <operator>=</operator> <call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>SrcList_item</name></name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StrAccum</name></type> <name>x</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>zLine</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3StrAccumInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">"{%d,*}"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>iCursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>zDatabase</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" %s.%s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>zDatabase</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>zName</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" tabname=%Q"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>zAlias</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" (AS %s)"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>zAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>jointype</name></name> <operator>&amp;</operator> <name>JT_LEFT</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3XPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" LEFT-JOIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3StrAccumFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>pSelect</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isTabFunc</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>pFuncArg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"func-args:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWhere</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WHERE"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pGroupBy</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pGroupBy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GROUPBY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pHaving</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"HAVING"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHaving</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ORDERBY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"LIMIT"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pOffset</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"OFFSET"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPrior</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOp</name> <init>= <expr><literal type="string">"UNION"</literal></expr></init></decl>;</decl_stmt>
      <switch>switch<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>TK_ALL</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"UNION ALL"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><name>TK_INTERSECT</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"INTERSECT"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><name>TK_EXCEPT</name></expr>:</case>      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"EXCEPT"</literal></expr>;</expr_stmt>     <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zOp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pPrior</name></name></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>p</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable explanation of an expression tree.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewExpr</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBinOp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Binary operator */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUniOp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Unary operator */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zFlgs</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pView</name> <operator>=</operator> <call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pExpr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zFlgs</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zFlgs</name></expr></argument>,<argument><expr><literal type="string">"  flags=0x%x"</literal></expr></argument>,<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>zFlgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <switch>switch<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>TK_AGG_COLUMN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"AGG{%d:%d}%s"</literal></expr></argument>,
            <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_COLUMN</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* This only happens when coding check constraints */</comment>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"COLUMN(%d)%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"{%d:%d}%s"</literal></expr></argument>,
                             <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_INTEGER</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EP_IntValue</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>iValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FLOATING_POINT</name></cpp:ifndef>
    <case>case <expr><name>TK_FLOAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>TK_STRING</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"%Q"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_NULL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BLOB_LITERAL</name></cpp:ifndef>
    <case>case <expr><name>TK_BLOB</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>TK_VARIABLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"VARIABLE(%s,%d)"</literal></expr></argument>,
                          <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_REGISTER</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"REGISTER(%d)"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_ID</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"ID \"%w\""</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_CAST</name></cpp:ifndef>
    <case>case <expr><name>TK_CAST</name></expr>:</case> <block>{<block_content>
      <comment type="block">/* Expressions of the form:   CAST(pLeft AS token) */</comment>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"CAST %Q"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_CAST */</comment>
    <case>case <expr><name>TK_LT</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"LT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_LE</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"LE"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_GT</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"GT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_GE</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"GE"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_NE</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"NE"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_EQ</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"EQ"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_IS</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"IS"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_ISNOT</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"ISNOT"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>TK_AND</name></expr>:</case>     <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"AND"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_OR</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"OR"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_PLUS</name></expr>:</case>    <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"ADD"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_STAR</name></expr>:</case>    <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"MUL"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_MINUS</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"SUB"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_REM</name></expr>:</case>     <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"REM"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_BITAND</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"BITAND"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_BITOR</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"BITOR"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>TK_SLASH</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"DIV"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_LSHIFT</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"LSHIFT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_RSHIFT</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"RSHIFT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_CONCAT</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"CONCAT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_DOT</name></expr>:</case>     <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"DOT"</literal></expr>;</expr_stmt>    <break>break;</break>

    <case>case <expr><name>TK_UMINUS</name></expr>:</case>  <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"UMINUS"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_UPLUS</name></expr>:</case>   <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"UPLUS"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>TK_BITNOT</name></expr>:</case>  <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"BITNOT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_NOT</name></expr>:</case>     <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"NOT"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_ISNULL</name></expr>:</case>  <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"ISNULL"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_NOTNULL</name></expr>:</case> <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"NOTNULL"</literal></expr>;</expr_stmt> <break>break;</break>

    <case>case <expr><name>TK_COLLATE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"COLLATE %Q"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TK_AGG_FUNCTION</name></expr>:</case>
    <case>case <expr><name>TK_FUNCTION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pFarg</name></decl>;</decl_stmt>       <comment type="block">/* List of function arguments */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_TokenOnly</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pFarg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>pFarg</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_AGG_FUNCTION</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"AGG_FUNCTION%d %Q"</literal></expr></argument>,
                             <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION %Q"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>pFarg</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pFarg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_SUBQUERY</name></cpp:ifndef>
    <case>case <expr><name>TK_EXISTS</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"EXISTS-expr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_SELECT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"SELECT-expr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_IN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_xIsSelect</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_SUBQUERY */</comment>

    <comment type="block">/*
    **    x BETWEEN y AND z
    **
    ** This is equivalent to
    **
    **    x&gt;=y AND x&lt;=z
    **
    ** X is stored in pExpr-&gt;pLeft.
    ** Y is stored in pExpr-&gt;pList-&gt;a[0].pExpr.
    ** Z is stored in pExpr-&gt;pList-&gt;a[1].pExpr.
    */</comment>
    <case>case <expr><name>TK_BETWEEN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pX</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pY</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pZ</name> <init>= <expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"BETWEEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_TRIGGER</name></expr>:</case> <block>{<block_content>
      <comment type="block">/* If the opcode is TK_TRIGGER, then the expression is a reference
      ** to a column in the new.* or old.* pseudo-tables available to
      ** trigger programs. In this case Expr.iTable is set to 1 for the
      ** new.* pseudo-table, or 0 for the old.* pseudo-table. Expr.iColumn
      ** is set to the column of the pseudo-table to read, or to -1 to
      ** read the rowid field.
      */</comment>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s(%d)"</literal></expr></argument>, 
          <argument><expr><ternary><condition><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr> ?</condition><then> <expr><literal type="string">"NEW"</literal></expr> </then><else>: <expr><literal type="string">"OLD"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_CASE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"CASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
    <case>case <expr><name>TK_RAISE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">"unk"</literal></expr></init></decl>;</decl_stmt>
      <switch>switch<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>affinity</name></name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>OE_Rollback</name></expr>:</case>   <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"rollback"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><name>OE_Abort</name></expr>:</case>      <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"abort"</literal></expr>;</expr_stmt>     <break>break;</break>
        <case>case <expr><name>OE_Fail</name></expr>:</case>       <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"fail"</literal></expr>;</expr_stmt>      <break>break;</break>
        <case>case <expr><name>OE_Ignore</name></expr>:</case>     <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"ignore"</literal></expr>;</expr_stmt>    <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"RAISE %s(%Q)"</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"op=%d"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <if_stmt><if>if<condition>( <expr><name>zBinOp</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>zBinOp</name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zUniOp</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>zUniOp</name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable explanation of an expression list.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewExprList</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pView</name> <operator>=</operator> <call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zLabel</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>zLabel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"LIST"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pList</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s (empty)"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nExpr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>x</name><operator>.</operator><name>iOrderByCol</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"iOrderByCol=%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></argument>, <argument><expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nExpr</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_DEBUG */</comment>
</unit>
