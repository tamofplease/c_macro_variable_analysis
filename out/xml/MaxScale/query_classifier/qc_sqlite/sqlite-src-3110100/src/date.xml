<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/date.c"><comment type="block">/*
** 2003 October 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the C functions that implement date and time
** functions for SQLite.  
**
** There is only one exported symbol in this file - the function
** sqlite3RegisterDateTimeFunctions() found at the bottom of the file.
** All other code has file scope.
**
** SQLite processes all times and dates as julian day numbers.  The
** dates and times are stored as the number of days since noon
** in Greenwich on November 24, 4714 B.C. according to the Gregorian
** calendar system. 
**
** 1970-01-01 00:00:00 is JD 2440587.5
** 2000-01-01 00:00:00 is JD 2451544.5
**
** This implementation requires years to be expressed as a 4-digit number
** which means that only dates between 0000-01-01 and 9999-12-31 can
** be represented, even though julian day numbers allow a much wider
** range of dates.
**
** The Gregorian calendar system is used for all dates and times,
** even those that predate the Gregorian calendar.  Historians usually
** use the julian calendar for dates prior to 1582-10-15 and for some
** dates afterwards, depending on locale.  Beware of this difference.
**
** The conversion algorithms are implemented based on descriptions
** in the following text:
**
**      Jean Meeus
**      Astronomical Algorithms, 2nd Edition, 1998
**      ISBM 0-943396-61-1
**      Willmann-Bell, Inc
**      Richmond, Virginia (USA)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DATETIME_FUNCS</name></cpp:ifndef>


<comment type="block">/*
** A structure for holding a single date and time.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>DateTime</name></name></type> <name>DateTime</name>;</typedef>
<struct>struct <name>DateTime</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iJD</name></decl>;</decl_stmt> <comment type="block">/* The julian day number times 86400000 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>Y</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>D</name></decl>;</decl_stmt>       <comment type="block">/* Year, month, and day */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>          <comment type="block">/* Hour and minutes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>tz</name></decl>;</decl_stmt>            <comment type="block">/* Timezone offset in minutes */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>s</name></decl>;</decl_stmt>          <comment type="block">/* Seconds */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>validYMD</name></decl>;</decl_stmt>     <comment type="block">/* True (1) if Y,M,D are valid */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>validHMS</name></decl>;</decl_stmt>     <comment type="block">/* True (1) if h,m,s are valid */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>validJD</name></decl>;</decl_stmt>      <comment type="block">/* True (1) if iJD is valid */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>validTZ</name></decl>;</decl_stmt>      <comment type="block">/* True (1) if tz is valid */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>tzSet</name></decl>;</decl_stmt>        <comment type="block">/* Timezone was set explicitly */</comment>
}</block>;</struct>


<comment type="block">/*
** Convert zDate into one or more integers according to the conversion
** specifier zFormat.
**
** zFormat[] contains 4 characters for each integer converted, except for
** the last integer which is specified by three characters.  The meaning
** of a four-character format specifiers ABCD is:
**
**    A:   number of digits to convert.  Always "2" or "4".
**    B:   minimum value.  Always "0" or "1".
**    C:   maximum value, decoded as:
**           a:  12
**           b:  14
**           c:  24
**           d:  31
**           e:  59
**           f:  9999
**    D:   the separator character, or \000 to indicate this is the
**         last number to convert.
**
** Example:  To translate an ISO-8601 date YYYY-MM-DD, the format would
** be "40f-21a-20c".  The "40f-" indicates the 4-digit year followed by "-".
** The "21a-" indicates the 2-digit month followed by "-".  The "20c" indicates
** the 2-digit day which is the last integer in the set.
**
** The function returns the number of successful conversions.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getDigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="block">/* The aMx[] array translates the 3rd character of each format
  ** spec into a max size:    a   b   c   d   e     f */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u16</name></type> <name><name>aMx</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">9999</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>nextC</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>N</name> <init>= <expr><name><name>zFormat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>min</name> <init>= <expr><name><name>zFormat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u16</name></type> <name>max</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>zFormat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>zFormat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><literal type="char">'f'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>aMx</name><index>[<expr><name><name>zFormat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nextC</name> <operator>=</operator> <name><name>zFormat</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>N</name><operator>--</operator></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>zDate</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <goto>goto <name>end_getDigits</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>zDate</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><macro><name>val</name></macro><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><name>min</name> <operator>||</operator> <name>val</name><operator>&gt;</operator><operator>(</operator><name>int</name><operator>)</operator><name>max</name> <operator>||</operator> <operator>(</operator><name>nextC</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nextC</name><operator>!=</operator><operator>*</operator><name>zDate</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <goto>goto <name>end_getDigits</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>,<argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>zFormat</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>nextC</name></expr> )</condition>;</do>
<label><name>end_getDigits</name>:</label>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>cnt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Parse a timezone extension on the end of a date-time.
** The extension is of the form:
**
**        (+/-)HH:MM
**
** Or the "zulu" notation:
**
**        Z
**
** If the parse is successful, write the number of minutes
** of change in p-&gt;tz and return 0.  If a parser error occurs,
** return non-zero.
**
** A missing specifier is not considered an error.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseTimezone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDate</name></decl></parameter>, <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>sgn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nHr</name></decl>, <decl><type ref="prev"/><name>nMn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><operator>*</operator><name>zDate</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>zDate</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>sgn</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>sgn</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'Z'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'z'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
    <goto>goto <name>zulu_time</name>;</goto>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><name>c</name><operator>!=</operator><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>getDigits</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><literal type="string">"20b:20e"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nHr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nMn</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zDate</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tz</name></name> <operator>=</operator> <name>sgn</name><operator>*</operator><operator>(</operator><name>nMn</name> <operator>+</operator> <name>nHr</name><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<label><name>zulu_time</name>:</label>
  <while>while<condition>( <expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><operator>*</operator><name>zDate</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tzSet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>zDate</name><operator>!=</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Parse times of the form HH:MM or HH:MM:SS or HH:MM:SS.FFFF.
** The HH, MM, and SS must each be exactly 2 digits.  The
** fractional seconds FFFF can be one or more digits.
**
** Return 1 if there is a parsing error and 0 on success.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseHhMmSs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDate</name></decl></parameter>, <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>ms</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>getDigits</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><literal type="string">"20c:20e"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zDate</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zDate</name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>getDigits</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><literal type="string">"20e"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zDate</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zDate</name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>zDate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>rScale</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
      <while>while<condition>( <expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>zDate</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>ms</name><operator>*</operator><literal type="number">10.0</literal> <operator>+</operator> <operator>*</operator><name>zDate</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rScale</name> <operator>*=</operator> <literal type="number">10.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>ms</name> <operator>/=</operator> <name>rScale</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>ms</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>parseTimezone</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validTZ</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>tz</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Convert from YYYY-MM-DD HH:MM:SS to julian day.  We always assume
** that the YYYY-MM-DD is according to the Gregorian calendar.
**
** Reference:  Meeus page 61
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>computeJD</name><parameter_list>(<parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>Y</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>X1</name></decl>, <decl><type ref="prev"/><name>X2</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>validYMD</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>Y</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>Y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>M</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>M</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>D</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>D</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>Y</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>  <comment type="block">/* If no YMD specified, assume 2000-Jan-01 */</comment>
    <expr_stmt><expr><name>M</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>D</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>M</name><operator>&lt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>Y</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>M</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>A</name> <operator>=</operator> <name>Y</name><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>B</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name>A</name> <operator>+</operator> <operator>(</operator><name>A</name><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>X1</name> <operator>=</operator> <literal type="number">36525</literal><operator>*</operator><operator>(</operator><name>Y</name><operator>+</operator><literal type="number">4716</literal><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>X2</name> <operator>=</operator> <literal type="number">306001</literal><operator>*</operator><operator>(</operator><name>M</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">10000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>X1</name> <operator>+</operator> <name>X2</name> <operator>+</operator> <name>D</name> <operator>+</operator> <name>B</name> <operator>-</operator> <literal type="number">1524.5</literal> <operator>)</operator> <operator>*</operator> <literal type="number">86400000</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><literal type="number">3600000</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name></name><operator>*</operator><literal type="number">60000</literal> <operator>+</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>*</operator><literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>validTZ</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>tz</name></name><operator>*</operator><literal type="number">60000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validYMD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validTZ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Parse dates of the form
**
**     YYYY-MM-DD HH:MM:SS.FFF
**     YYYY-MM-DD HH:MM:SS
**     YYYY-MM-DD HH:MM
**     YYYY-MM-DD
**
** Write the result into the DateTime structure and return 0
** on success and 1 if the input string is not a well-formed
** date.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseYyyyMmDd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDate</name></decl></parameter>, <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>Y</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>neg</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>zDate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>getDigits</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><literal type="string">"40f-21a-21d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zDate</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><operator>*</operator><name>zDate</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="char">'T'</literal><operator>==</operator><operator>*</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zDate</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zDate</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><call><name>parseHhMmSs</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* We got the time */</comment>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>*</operator><name>zDate</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validYMD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <ternary><condition><expr><name>neg</name></expr> ?</condition><then> <expr><operator>-</operator><name>Y</name></expr> </then><else>: <expr><name>Y</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <name>M</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <name>D</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>validTZ</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set the time to the current time reported by the VFS.
**
** Return the number of errors.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setDateTimeToCurrent</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>=</operator> <call><name>sqlite3StmtCurrentTime</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Attempt to parse the given string into a julian day number.  Return
** the number of errors.
**
** The following are acceptable forms for the input string:
**
**      YYYY-MM-DD HH:MM:SS.FFF  +/-HH:MM
**      DDDD.DD 
**      now
**
** In the first form, the +/-HH:MM is always optional.  The fractional
** seconds extension (the ".FFF") is optional.  The seconds portion
** (":SS.FFF") is option.  The year and date can be omitted as long
** as there is a time string.  The time string can be omitted as long
** as there is a year and date.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseDateOrTime</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDate</name></decl></parameter>, 
  <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>parseYyyyMmDd</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>parseHhMmSs</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>,<argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <return>return <expr><call><name>setDateTimeToCurrent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3AtoF</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">86400000.0</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Compute the Year, Month, and Day from the julian day number.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>computeYMD</name><parameter_list>(<parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>Z</name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>X1</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>validYMD</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>Z</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+</operator> <literal type="number">43200000</literal><operator>)</operator><operator>/</operator><literal type="number">86400000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>Z</name> <operator>-</operator> <literal type="number">1867216.25</literal><operator>)</operator><operator>/</operator><literal type="number">36524.25</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>Z</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>A</name> <operator>-</operator> <operator>(</operator><name>A</name><operator>/</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <name>A</name> <operator>+</operator> <literal type="number">1524</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>B</name> <operator>-</operator> <literal type="number">122.1</literal><operator>)</operator><operator>/</operator><literal type="number">365.25</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><literal type="number">36525</literal><operator>*</operator><operator>(</operator><name>C</name><operator>&amp;</operator><literal type="number">32767</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">100</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>E</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>B</name><operator>-</operator><name>D</name><operator>)</operator><operator>/</operator><literal type="number">30.6001</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>X1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">30.6001</literal><operator>*</operator><name>E</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <name>B</name> <operator>-</operator> <name>D</name> <operator>-</operator> <name>X1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <ternary><condition><expr><name>E</name><operator>&lt;</operator><literal type="number">14</literal></expr> ?</condition><then> <expr><name>E</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>E</name><operator>-</operator><literal type="number">13</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name><operator>&gt;</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><name>C</name> <operator>-</operator> <literal type="number">4716</literal></expr> </then><else>: <expr><name>C</name> <operator>-</operator> <literal type="number">4715</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validYMD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compute the Hour, Minute, and Seconds from the julian day number.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>computeHMS</name><parameter_list>(<parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+</operator> <literal type="number">43200000</literal><operator>)</operator> <operator>%</operator> <literal type="number">86400000</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name><operator>/</operator><literal type="number">1000.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>s</name><operator>/</operator><literal type="number">3600</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name><operator>*</operator><literal type="number">3600</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>s</name><operator>/</operator><literal type="number">60</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>+=</operator> <name>s</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name></name><operator>*</operator><literal type="number">60</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compute both YMD and HMS
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>computeYMD_HMS</name><parameter_list>(<parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>computeYMD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>computeHMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Clear the YMD and HMS and the TZ
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clearYMD_HMS_TZ</name><parameter_list>(<parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validYMD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validTZ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** On recent Windows platforms, the localtime_s() function is available
** as part of the "Secure CRT". It is essentially equivalent to 
** localtime_r() available under most POSIX platforms, except that the 
** order of the parameters is reversed.
**
** See http://msdn.microsoft.com/en-us/library/a442x3ye(VS.80).aspx.
**
** If the user has not indicated to use localtime_r() or localtime_s()
** already, check for an MSVC build environment that provides 
** localtime_s().
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LOCALTIME_R</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_LOCALTIME_S</name> \
    <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_CRT_INSECURE_DEPRECATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>HAVE_LOCALTIME_S</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_LOCALTIME_S</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOCALTIME</name></cpp:ifndef>
<comment type="block">/*
** The following routine implements the rough equivalent of localtime_r()
** using whatever operating-system specific localtime facility that
** is available.  This routine returns 0 on success and
** non-zero on any kind of error.
**
** If the sqlite3GlobalConfig.bLocaltimeFault variable is true then this
** routine will always fail.
**
** EVIDENCE-OF: R-62172-00036 In this implementation, the standard C
** library function localtime_r() is used to assist in the calculation of
** local time.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>osLocaltime</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_LOCALTIME_R</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_LOCALTIME_S</name></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>pX</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name><operator>&gt;</operator><literal type="number">0</literal></expr></cpp:if>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pX</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BUILTIN_TEST</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bLocaltimeFault</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pX</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name>pX</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pTm</name> <operator>=</operator> <operator>*</operator><name>pX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>pX</name><operator>==</operator><literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BUILTIN_TEST</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bLocaltimeFault</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALTIME_R</name></expr></cpp:if>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pTm</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>localtime_s</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_LOCALTIME_R */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_LOCALTIME_R || HAVE_LOCALTIME_S */</comment>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOCALTIME */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOCALTIME</name></cpp:ifndef>
<comment type="block">/*
** Compute the difference (in milliseconds) between localtime and UTC
** (a.k.a. GMT) for the time value p where p is in UTC. If no error occurs,
** return this value and set *pRc to SQLITE_OK. 
**
** Or, if an error does occur, set *pRc to SQLITE_ERROR. The returned value
** is undefined in this case.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>localtimeOffset</name><parameter_list>(
  <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                    <comment type="block">/* Date at which to calculate offset */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Write error here if one occurs */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* OUT: Error code. SQLITE_OK or ERROR */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DateTime</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>sLocal</name></decl>;</decl_stmt>

  <comment type="block">/* Initialize the contents of sLocal to avoid a compiler warning. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sLocal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sLocal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>computeYMD_HMS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>x</name><operator>.</operator><name>Y</name></name><operator>&lt;</operator><literal type="number">1971</literal> <operator>||</operator> <name><name>x</name><operator>.</operator><name>Y</name></name><operator>&gt;=</operator><literal type="number">2038</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* EVIDENCE-OF: R-55269-29598 The localtime_r() C function normally only
    ** works for years between 1970 and 2037. For dates outside this range,
    ** SQLite attempts to map the year into an equivalent year within this
    ** range, do the calculation, then map the year back.
    */</comment>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>M</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>D</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>h</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>m</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>s</name></name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>tz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><operator>.</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>iJD</name></name><operator>/</operator><literal type="number">1000</literal> <operator>-</operator> <literal type="number">21086676</literal><operator>*</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">10000</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>osLocaltime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sLocal</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"local time unavailable"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>sLocal</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>M</name></name> <operator>=</operator> <name><name>sLocal</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>D</name></name> <operator>=</operator> <name><name>sLocal</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name><name>sLocal</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>m</name></name> <operator>=</operator> <name><name>sLocal</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name><name>sLocal</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>validYMD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>validHMS</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>y</name><operator>.</operator><name>validTZ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  <return>return <expr><name><name>y</name><operator>.</operator><name>iJD</name></name> <operator>-</operator> <name><name>x</name><operator>.</operator><name>iJD</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOCALTIME */</comment>

<comment type="block">/*
** Process a modifier to a date-time stamp.  The modifiers are
** as follows:
**
**     NNN days
**     NNN hours
**     NNN minutes
**     NNN.NNNN seconds
**     NNN months
**     NNN years
**     start of month
**     start of year
**     start of week
**     start of day
**     weekday N
**     unixepoch
**     localtime
**     utc
**
** Return 0 on success and 1 if there is any kind of error. If the error
** is in a system call (i.e. localtime()), then an error message is written
** to context pCtx. If the error is an unrecognized modifier, no error is
** written to pCtx.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parseModifier</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMod</name></decl></parameter>, <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>, <decl><type ref="prev"/><name><name>zBuf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>zMod</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>sqlite3UpperToLower</name><index>[<expr><operator>(</operator><name>u8</name><operator>)</operator><name><name>zMod</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOCALTIME</name></cpp:ifndef>
    <case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content>
      <comment type="block">/*    localtime
      **
      ** Assuming the current time value is UTC (a.k.a. GMT), shift it to
      ** show local time.
      */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"localtime"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <call><name>localtimeOffset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearYMD_HMS_TZ</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>
      <comment type="block">/*
      **    unixepoch
      **
      ** Treat the current value of p-&gt;iJD as the number of
      ** seconds since 1970.  Convert to a real julian day number.
      */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"unixepoch"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>validJD</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+</operator> <literal type="number">43200</literal><operator>)</operator><operator>/</operator><literal type="number">86400</literal> <operator>+</operator> <literal type="number">21086676</literal><operator>*</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">10000000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearYMD_HMS_TZ</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOCALTIME</name></cpp:ifndef>
      <if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"utc"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>tzSet</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>c1</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>localtimeOffset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>-=</operator> <name>c1</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clearYMD_HMS_TZ</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <name>c1</name> <operator>-</operator> <call><name>localtimeOffset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tzSet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case> <block>{<block_content>
      <comment type="block">/*
      **    weekday N
      **
      ** Move the date to the same time on the next occurrence of
      ** weekday N where 0==Sunday, 1==Monday, and so forth.  If the
      ** date is already on the appropriate weekday, this is a no-op.
      */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"weekday "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
               <operator>&amp;&amp;</operator> <call><name>sqlite3AtoF</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>)</argument_list></call>
               <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name><operator>=</operator><operator>(</operator><name>int</name><operator>)</operator><name>r</name><operator>)</operator><operator>==</operator><name>r</name> <operator>&amp;&amp;</operator> <name>n</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name><operator>&lt;</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>Z</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>computeYMD_HMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validTZ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>Z</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+</operator> <literal type="number">129600000</literal><operator>)</operator><operator>/</operator><literal type="number">86400000</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>Z</name><operator>&gt;</operator><name>n</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Z</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>Z</name><operator>)</operator><operator>*</operator><literal type="number">86400000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearYMD_HMS_TZ</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
      <comment type="block">/*
      **    start of TTTTT
      **
      ** Move the date backwards to the beginning of the current day,
      ** or month or year.
      */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"start of "</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>z</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>computeYMD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validHMS</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validTZ</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"month"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>computeYMD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"day"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'+'</literal></expr>:</case>
    <case>case <expr><literal type="char">'-'</literal></expr>:</case>
    <case>case <expr><literal type="char">'0'</literal></expr>:</case>
    <case>case <expr><literal type="char">'1'</literal></expr>:</case>
    <case>case <expr><literal type="char">'2'</literal></expr>:</case>
    <case>case <expr><literal type="char">'3'</literal></expr>:</case>
    <case>case <expr><literal type="char">'4'</literal></expr>:</case>
    <case>case <expr><literal type="char">'5'</literal></expr>:</case>
    <case>case <expr><literal type="char">'6'</literal></expr>:</case>
    <case>case <expr><literal type="char">'7'</literal></expr>:</case>
    <case>case <expr><literal type="char">'8'</literal></expr>:</case>
    <case>case <expr><literal type="char">'9'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>rRounder</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>n</name></expr>]</index></name><operator>!=</operator><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3AtoF</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* A modifier of the form (+|-)HH:MM:SS.FFF adds (or subtracts) the
        ** specified number of hours, minutes, seconds, and fractional seconds
        ** to the time.  The ".FFF" may be omitted.  The ":SS.FFF" may be
        ** omitted.
        */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z2</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateTime</name></type> <name>tx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>day</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>z2</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>parseHhMmSs</name><argument_list>(<argument><expr><name>z2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>iJD</name></name> <operator>-=</operator> <literal type="number">43200000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>day</name> <operator>=</operator> <name><name>tx</name><operator>.</operator><name>iJD</name></name><operator>/</operator><literal type="number">86400000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>iJD</name></name> <operator>-=</operator> <name>day</name><operator>*</operator><literal type="number">86400000</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>iJD</name></name> <operator>=</operator> <operator>-</operator><name><name>tx</name><operator>.</operator><name>iJD</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearYMD_HMS_TZ</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <name><name>tx</name><operator>.</operator><name>iJD</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>z</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
      <while>while<condition>( <expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">10</literal> <operator>||</operator> <name>n</name><operator>&lt;</operator><literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'s'</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name><name>z</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rRounder</name> <operator>=</operator> <ternary><condition><expr><name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">0.5</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">0.5</literal></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"day"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">86400000.0</literal> <operator>+</operator> <name>rRounder</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><operator>(</operator><literal type="number">86400000.0</literal><operator>/</operator><literal type="number">24.0</literal><operator>)</operator> <operator>+</operator> <name>rRounder</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"minute"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><operator>(</operator><literal type="number">86400000.0</literal><operator>/</operator><operator>(</operator><literal type="number">24.0</literal><operator>*</operator><literal type="number">60.0</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>rRounder</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><operator>(</operator><literal type="number">86400000.0</literal><operator>/</operator><operator>(</operator><literal type="number">24.0</literal><operator>*</operator><literal type="number">60.0</literal><operator>*</operator><literal type="number">60.0</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>rRounder</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"month"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>computeYMD_HMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>M</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">12</literal></expr> </then><else>: <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>M</name></name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>/</operator><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Y</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>M</name></name> <operator>-=</operator> <name>x</name><operator>*</operator><literal type="number">12</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>y</name><operator>!=</operator><name>r</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>y</name><operator>)</operator><operator>*</operator><literal type="number">30.0</literal><operator>*</operator><literal type="number">86400000.0</literal> <operator>+</operator> <name>rRounder</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>computeYMD_HMS</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>Y</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>y</name><operator>!=</operator><name>r</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>+=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>r</name> <operator>-</operator> <name>y</name><operator>)</operator><operator>*</operator><literal type="number">365.0</literal><operator>*</operator><literal type="number">86400000.0</literal> <operator>+</operator> <name>rRounder</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>clearYMD_HMS_TZ</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Process time function arguments.  argv[0] is a date-time stamp.
** argv[1] and following are modifiers.  Parse them all and write
** the resulting time into the DateTime structure p.  Return 0
** on success and 1 if there are any errors.
**
** If there are zero parameters (if even argv[0] is undefined)
** then assume a default value of "now" for argv[0].
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isDate</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, 
  <parameter><decl><type><name>DateTime</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name>setDateTimeToCurrent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>eType</name> <operator>=</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>SQLITE_FLOAT</name>
                   <operator>||</operator> <name>eType</name><operator>==</operator><name>SQLITE_INTEGER</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iJD</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">86400000.0</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>z</name> <operator>||</operator> <call><name>parseDateOrTime</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>parseModifier</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** The following routines implement the various date and time functions
** of SQLite.
*/</comment>

<comment type="block">/*
**    julianday( TIMESTRING, MOD, MOD, ...)
**
** Return the julian day number of the date specified in the arguments
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>juliandayFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DateTime</name></type> <name>x</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>isDate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_double</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>iJD</name></name><operator>/</operator><literal type="number">86400000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
**    datetime( TIMESTRING, MOD, MOD, ...)
**
** Return YYYY-MM-DD HH:MM:SS
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>datetimeFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DateTime</name></type> <name>x</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>isDate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>computeYMD_HMS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>,
                     <argument><expr><name><name>x</name><operator>.</operator><name>Y</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>M</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>D</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>s</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
**    time( TIMESTRING, MOD, MOD, ...)
**
** Return HH:MM:SS
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>timeFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DateTime</name></type> <name>x</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>isDate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>computeHMS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
**    date( TIMESTRING, MOD, MOD, ...)
**
** Return YYYY-MM-DD
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dateFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DateTime</name></type> <name>x</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>isDate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>computeYMD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>Y</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>M</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>D</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
**    strftime( FORMAT, TIMESTRING, MOD, MOD, ...)
**
** Return a string described by FORMAT.  Conversions as follows:
**
**   %d  day of month
**   %f  ** fractional seconds  SS.SSS
**   %H  hour 00-24
**   %j  day of year 000-366
**   %J  ** julian day number
**   %m  month 01-12
**   %M  minute 00-59
**   %s  seconds since 1970-01-01
**   %S  seconds 00-59
**   %w  day of week 0-6  sunday==0
**   %W  week of year 00-53
**   %Y  year 0000-9999
**   %%  %
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>strftimeFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DateTime</name></type> <name>x</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>zFmt</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zFmt</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>isDate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>zFmt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>zFmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'%'</literal></expr> )</condition><block>{<block_content>
      <switch>switch<condition>( <expr><name><name>zFmt</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="char">'d'</literal></expr>:</case>
        <case>case <expr><literal type="char">'H'</literal></expr>:</case>
        <case>case <expr><literal type="char">'m'</literal></expr>:</case>
        <case>case <expr><literal type="char">'M'</literal></expr>:</case>
        <case>case <expr><literal type="char">'S'</literal></expr>:</case>
        <case>case <expr><literal type="char">'W'</literal></expr>:</case>
          <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
          <comment type="block">/* fall thru */</comment>
        <case>case <expr><literal type="char">'w'</literal></expr>:</case>
        <case>case <expr><literal type="char">'%'</literal></expr>:</case>
          <break>break;</break>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case>
          <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'j'</literal></expr>:</case>
          <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'Y'</literal></expr>:</case>
          <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'s'</literal></expr>:</case>
        <case>case <expr><literal type="char">'J'</literal></expr>:</case>
          <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <return>return;</return>  <comment type="block">/* ERROR.  return a NULL */</comment>
      </block_content>}</block></switch>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>n</name><operator>==</operator><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>n</name><operator>==</operator><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>n</name><operator>==</operator><operator>(</operator><name>u64</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>aLimit</name><index>[<expr><name>SQLITE_LIMIT_LENGTH</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>n</name><operator>==</operator><operator>(</operator><name>u64</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>aLimit</name><index>[<expr><name>SQLITE_LIMIT_LENGTH</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name><operator>&gt;</operator><operator>(</operator><name>u64</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>aLimit</name><index>[<expr><name>SQLITE_LIMIT_LENGTH</name></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_toobig</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3DbMallocRawNN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>computeYMD_HMS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zFmt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>zFmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'%'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>zFmt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <switch>switch<condition>( <expr><name><name>zFmt</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="char">'d'</literal></expr>:</case>  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%02d"</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>D</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><name><name>x</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>s</name><operator>&gt;</operator><literal type="number">59.999</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">59.999</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%06.3f"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name> <operator>+=</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'H'</literal></expr>:</case>  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%02d"</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'W'</literal></expr>:</case> <comment type="block">/* Fall thru */</comment>
        <case>case <expr><literal type="char">'j'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>nDay</name></decl>;</decl_stmt>             <comment type="block">/* Number of days since 1st day of year */</comment>
          <decl_stmt><decl><type><name>DateTime</name></type> <name>y</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>y</name><operator>.</operator><name>validJD</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>y</name><operator>.</operator><name>M</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>y</name><operator>.</operator><name>D</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>computeJD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nDay</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>iJD</name></name><operator>-</operator><name><name>y</name><operator>.</operator><name>iJD</name></name><operator>+</operator><literal type="number">43200000</literal><operator>)</operator><operator>/</operator><literal type="number">86400000</literal><operator>)</operator></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>zFmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>wd</name></decl>;</decl_stmt>   <comment type="block">/* 0=Monday, 1=Tuesday, ... 6=Sunday */</comment>
            <expr_stmt><expr><name>wd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>iJD</name></name><operator>+</operator><literal type="number">43200000</literal><operator>)</operator><operator>/</operator><literal type="number">86400000</literal><operator>)</operator><operator>%</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%02d"</literal></expr></argument>,<argument><expr><operator>(</operator><name>nDay</name><operator>+</operator><literal type="number">7</literal><operator>-</operator><name>wd</name><operator>)</operator><operator>/</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%03d"</literal></expr></argument>,<argument><expr><name>nDay</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'J'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%.16g"</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>iJD</name></name><operator>/</operator><literal type="number">86400000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name><operator>+=</operator><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'m'</literal></expr>:</case>  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%02d"</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'M'</literal></expr>:</case>  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%02d"</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%lld"</literal></expr></argument>,
                           <argument><expr><operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>iJD</name></name><operator>/</operator><literal type="number">1000</literal> <operator>-</operator> <literal type="number">21086676</literal><operator>*</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">10000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name> <operator>+=</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'S'</literal></expr>:</case>  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%02d"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>x</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="char">'w'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>iJD</name></name><operator>+</operator><literal type="number">129600000</literal><operator>)</operator><operator>/</operator><literal type="number">86400000</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'Y'</literal></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"%04d"</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>+=</operator><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default>   <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt> <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
                      <argument><expr><ternary><condition><expr><name>z</name><operator>==</operator><name>zBuf</name></expr> ?</condition><then> <expr><name>SQLITE_TRANSIENT</name></expr> </then><else>: <expr><name>SQLITE_DYNAMIC</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** current_time()
**
** This function returns the same value as time('now').
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctimeFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>NotUsed</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>NotUsed2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER2</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>, <argument><expr><name>NotUsed2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>timeFunc</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** current_date()
**
** This function returns the same value as date('now').
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cdateFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>NotUsed</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>NotUsed2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER2</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>, <argument><expr><name>NotUsed2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dateFunc</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** current_timestamp()
**
** This function returns the same value as datetime('now').
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctimestampFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>NotUsed</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>NotUsed2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER2</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>, <argument><expr><name>NotUsed2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>datetimeFunc</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_DATETIME_FUNCS) */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_DATETIME_FUNCS</name></cpp:ifdef>
<comment type="block">/*
** If the library is compiled to omit the full-scale date and time
** handling (to get a smaller binary), the following minimal version
** of the functions current_time(), current_date() and current_timestamp()
** are included instead. This is to support column declarations that
** include "DEFAULT CURRENT_TIME" etc.
**
** This function uses the C-library functions time(), gmtime()
** and strftime(). The format string to pass to strftime() is supplied
** as the user-data for the function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>currentTimeFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFormat</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iT</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>pTm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>sNow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iT</name> <operator>=</operator> <call><name>sqlite3StmtCurrentTime</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iT</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <name>iT</name><operator>/</operator><literal type="number">1000</literal> <operator>-</operator> <literal type="number">10000</literal><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><literal type="number">21086676</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GMTIME_R</name></expr></cpp:if>
  <expr_stmt><expr><name>pTm</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sNow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTm</name> <operator>=</operator> <call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTm</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sNow</name></expr></argument>, <argument><expr><name>pTm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sNow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name>pTm</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sNow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** This function registered all of the above C functions as SQL
** functions.  This should be the only routine in this file with
** external linkage.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3RegisterDateTimeFunctions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>SQLITE_WSD</name> <name>FuncDef</name></type> <name><name>aDateTimeFuncs</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DATETIME_FUNCS</name></cpp:ifndef>
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>julianday</name></expr></argument>,        <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>juliandayFunc</name></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>date</name></expr></argument>,             <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dateFunc</name></expr></argument>      )</argument_list></call></expr>,
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>time</name></expr></argument>,             <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeFunc</name></expr></argument>      )</argument_list></call></expr>,
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>datetime</name></expr></argument>,         <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>datetimeFunc</name></expr></argument>  )</argument_list></call></expr>,
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>strftime</name></expr></argument>,         <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>strftimeFunc</name></expr></argument>  )</argument_list></call></expr>,
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>current_time</name></expr></argument>,      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctimeFunc</name></expr></argument>     )</argument_list></call></expr>,
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>current_timestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctimestampFunc</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>DFUNCTION</name><argument_list>(<argument><expr><name>current_date</name></expr></argument>,      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cdateFunc</name></expr></argument>     )</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><call><name>STR_FUNCTION</name><argument_list>(<argument><expr><name>current_time</name></expr></argument>,      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>,          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>currentTimeFunc</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>STR_FUNCTION</name><argument_list>(<argument><expr><name>current_date</name></expr></argument>,      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>,          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>currentTimeFunc</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>STR_FUNCTION</name><argument_list>(<argument><expr><name>current_timestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>currentTimeFunc</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FuncDefHash</name> <modifier>*</modifier></type><name>pHash</name> <init>= <expr><operator>&amp;</operator><call><name>GLOBAL</name><argument_list>(<argument><expr><name>FuncDefHash</name></expr></argument>, <argument><expr><name>sqlite3GlobalFunctions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FuncDef</name> <modifier>*</modifier></type><name>aFunc</name> <init>= <expr><operator>(</operator><name>FuncDef</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>GLOBAL</name><argument_list>(<argument><expr><name>FuncDef</name></expr></argument>, <argument><expr><name>aDateTimeFuncs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aDateTimeFuncs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3FuncDefInsert</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aFunc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
