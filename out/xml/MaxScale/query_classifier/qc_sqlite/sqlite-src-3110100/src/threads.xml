<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/threads.c"><comment type="block">/*
** 2012 July 21
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file presents a simple cross-platform threading interface for
** use internally by SQLite.
**
** A "thread" can be created using sqlite3ThreadCreate().  This thread
** runs independently of its creator until it is joined using
** sqlite3ThreadJoin(), at which point it terminates.
**
** Threads do not have to be real.  It could be that the work of the
** "thread" is done by the main thread at either the sqlite3ThreadCreate()
** or sqlite3ThreadJoin() call.  This is, in fact, what happens in
** single threaded systems.  Nothing in SQLite requires multiple threads.
** This interface exists so that applications that want to take advantage
** of multiple cores can do so, while also allowing applications to stay
** single-threaded if desired.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"os_win.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_MAX_WORKER_THREADS</name><operator>&gt;</operator><literal type="number">0</literal></expr></cpp:if>

<comment type="block" format="doxygen">/********************************* Unix Pthreads ****************************/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_PTHREADS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SQLITE_THREADSAFE</name><operator>&gt;</operator><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_THREADS_IMPLEMENTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>  <comment type="block">/* Prevent the single-thread code below */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<comment type="block">/* A running thread */</comment>
<struct>struct <name>SQLiteThread</name> <block>{
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>                 <comment type="block">/* Thread ID */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>                      <comment type="block">/* Set to true when thread finishes */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pOut</name></decl>;</decl_stmt>                    <comment type="block">/* Result returned by the thread */</comment>
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xTask</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>         <comment type="block">/* The thread routine */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIn</name></decl>;</decl_stmt>                     <comment type="block">/* Argument to the thread */</comment>
}</block>;</struct>

<comment type="block">/* Create a new thread */</comment>
<function><type><name>int</name></type> <name>sqlite3ThreadCreate</name><parameter_list>(
  <parameter><decl><type><name>SQLiteThread</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppThread</name></decl></parameter>,  <comment type="block">/* OUT: Write the thread object here */</comment>
  <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xTask</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,    <comment type="block">/* Routine to run in a separate thread */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>                 <comment type="block">/* Argument passed into xTask() */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SQLiteThread</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ppThread</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>xTask</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* This routine is never used in single-threaded mode */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bCoreMutex</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppThread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name> <operator>=</operator> <name>xTask</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pIn</name></expr>;</expr_stmt>
  <comment type="block">/* If the SQLITE_TESTCTRL_FAULT_INSTALL callback is registered to a 
  ** function that returns SQLITE_ERROR when passed the argument 200, that
  ** forces worker threads to run sequentially and deterministically 
  ** for testing purposes. */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3FaultSim</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>    
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xTask</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pOut</name></name> <operator>=</operator> <call><name>xTask</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppThread</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get the results of the thread */</comment>
<function><type><name>int</name></type> <name>sqlite3ThreadJoin</name><parameter_list>(<parameter><decl><type><name>SQLiteThread</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ppOut</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>done</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pOut</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>ppOut</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SQLITE_ERROR</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OS_UNIX &amp;&amp; defined(SQLITE_MUTEX_PTHREADS) */</comment>
<comment type="block" format="doxygen">/******************************** End Unix Pthreads *************************/</comment>


<comment type="block" format="doxygen">/********************************* Win32 Threads ****************************/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN_THREADS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_THREADS_IMPLEMENTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>  <comment type="block">/* Prevent the single-thread code below */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>

<comment type="block">/* A running thread */</comment>
<struct>struct <name>SQLiteThread</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tid</name></decl>;</decl_stmt>               <comment type="block">/* The thread handle */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>id</name></decl>;</decl_stmt>             <comment type="block">/* The thread identifier */</comment>
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xTask</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>   <comment type="block">/* The routine to run as a thread */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIn</name></decl>;</decl_stmt>               <comment type="block">/* Argument to xTask */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pResult</name></decl>;</decl_stmt>           <comment type="block">/* Result of xTask */</comment>
}</block>;</struct>

<comment type="block">/* Thread procedure Win32 compatibility shim */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>sqlite3ThreadProc</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>  <comment type="block">/* IN: Pointer to the SQLiteThread structure */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SQLiteThread</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>SQLiteThread</name> <operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  <comment type="block">/*
  ** This assert appears to trigger spuriously on certain
  ** versions of Windows, possibly due to _beginthreadex()
  ** and/or CreateThread() not fully setting their thread
  ** ID parameter before starting the thread.
  */</comment>
  assert( p-&gt;id==GetCurrentThreadId() );
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pResult</name></name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>_endthreadex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* NOT REACHED */</comment>
</block_content>}</block></function>

<comment type="block">/* Create a new thread */</comment>
<function><type><name>int</name></type> <name>sqlite3ThreadCreate</name><parameter_list>(
  <parameter><decl><type><name>SQLiteThread</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppThread</name></decl></parameter>,  <comment type="block">/* OUT: Write the thread object here */</comment>
  <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xTask</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,    <comment type="block">/* Routine to run in a separate thread */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>                 <comment type="block">/* Argument passed into xTask() */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SQLiteThread</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ppThread</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>xTask</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppThread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <comment type="block">/* If the SQLITE_TESTCTRL_FAULT_INSTALL callback is registered to a 
  ** function that returns SQLITE_ERROR when passed the argument 200, that
  ** forces worker threads to run sequentially and deterministically 
  ** (via the sqlite3FaultSim() term of the conditional) for testing
  ** purposes. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bCoreMutex</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>sqlite3FaultSim</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name> <operator>=</operator> <name>xTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>_beginthreadex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sqlite3ThreadProc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pResult</name></name> <operator>=</operator> <call><name>xTask</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppThread</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>DWORD</name></type> <name>sqlite3Win32Wait</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hObject</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* os_win.c */</comment>

<comment type="block">/* Get the results of the thread */</comment>
<function><type><name>int</name></type> <name>sqlite3ThreadJoin</name><parameter_list>(<parameter><decl><type><name>SQLiteThread</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>bRc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ppOut</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* assert( p-&gt;id==GetCurrentThreadId() ); */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>WAIT_OBJECT_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>id</name></name><operator>!=</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Win32Wait</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>WAIT_IO_COMPLETION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bRc</name> <operator>=</operator> <call><name>CloseHandle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bRc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>WAIT_OBJECT_0</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pResult</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name><operator>==</operator><name>WAIT_OBJECT_0</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name>SQLITE_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OS_WIN_THREADS */</comment>
<comment type="block" format="doxygen">/******************************** End Win32 Threads *************************/</comment>


<comment type="block" format="doxygen">/********************************* Single-Threaded **************************/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_THREADS_IMPLEMENTED</name></cpp:ifndef>
<comment type="block">/*
** This implementation does not actually create a new thread.  It does the
** work of the thread in the main thread, when either the thread is created
** or when it is joined
*/</comment>

<comment type="block">/* A running thread */</comment>
<struct>struct <name>SQLiteThread</name> <block>{
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xTask</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>   <comment type="block">/* The routine to run as a thread */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIn</name></decl>;</decl_stmt>               <comment type="block">/* Argument to xTask */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pResult</name></decl>;</decl_stmt>           <comment type="block">/* Result of xTask */</comment>
}</block>;</struct>

<comment type="block">/* Create a new thread */</comment>
<function><type><name>int</name></type> <name>sqlite3ThreadCreate</name><parameter_list>(
  <parameter><decl><type><name>SQLiteThread</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppThread</name></decl></parameter>,  <comment type="block">/* OUT: Write the thread object here */</comment>
  <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xTask</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,    <comment type="block">/* Routine to run in a separate thread */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>                 <comment type="block">/* Argument passed into xTask() */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SQLiteThread</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ppThread</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>xTask</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppThread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><call><name>SQLITE_PTR_TO_INT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">17</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name> <operator>=</operator> <name>xTask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pIn</name></name> <operator>=</operator> <name>pIn</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pResult</name></name> <operator>=</operator> <call><name>xTask</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppThread</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get the results of the thread */</comment>
<function><type><name>int</name></type> <name>sqlite3ThreadJoin</name><parameter_list>(<parameter><decl><type><name>SQLiteThread</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list><block>{<block_content>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ppOut</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>xTask</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pResult</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pTstAlloc</name> <init>= <expr><call><name>sqlite3Malloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTstAlloc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTstAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_THREADS_IMPLEMENTED) */</comment>
<comment type="block" format="doxygen">/****************************** End Single-Threaded *************************/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_MAX_WORKER_THREADS&gt;0 */</comment>
</unit>
