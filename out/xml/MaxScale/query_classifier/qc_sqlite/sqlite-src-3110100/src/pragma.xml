<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/pragma.c"><comment type="block">/*
** 2003 April 6
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to implement the PRAGMA command.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_LOCKING_STYLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_ENABLE_LOCKING_STYLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_ENABLE_LOCKING_STYLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/***************************************************************************
** The "pragma.h" include file is an automatically generated file that
** that includes the PragType_XXXX macro definitions and the aPragmaName[]
** object.  This ensures that the aPragmaName[] table is arranged in
** lexicographical order to facility a binary search of the pragma name.
** Do not edit pragma.h directly.  Edit and rerun the script in at 
** ../tool/mkpragmatab.tcl. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pragma.h"</cpp:file></cpp:include>

<comment type="block">/*
** Interpret the given string as a safety level.  Return 0 for OFF,
** 1 for ON or NORMAL, 2 for FULL, and 3 for EXTRA.  Return 1 for an empty or 
** unrecognized string argument.  The FULL and EXTRA option is disallowed
** if the omitFull parameter it 1.
**
** Note that the values returned are one less that the values that
** should be passed into sqlite3BtreeSetSafetyLevel().  The is done
** to support legacy SQL code.  The safety level used to be boolean
** and older scripts may have used numbers 0 for OFF and 1 for ON.
*/</comment>
<function><type><specifier>static</specifier> <name>u8</name></type> <name>getSafetyLevel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>omitFull</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>dflt</name></decl></parameter>)</parameter_list><block>{<block_content>
                             <comment type="block">/* 123456789 123456789 123 */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zText</name><index>[]</index></name> <init>= <expr><literal type="string">"onoffalseyestruextrafull"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type> <name><name>iOffset</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">12</literal></expr>,  <expr><literal type="number">15</literal></expr>,   <expr><literal type="number">20</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type> <name><name>iLength</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">4</literal></expr>,   <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type> <name><name>iValue</name><index>[]</index></name> <init>=  <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                            <comment type="block">/* on no off false yes true extra full */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><operator>(</operator><name>u8</name><operator>)</operator><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>iLength</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>iLength</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>n</name> <operator>&amp;&amp;</operator> <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zText</name><index>[<expr><name><name>iOffset</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>omitFull</name> <operator>||</operator> <name><name>iValue</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><literal type="number">1</literal><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <return>return <expr><name><name>iValue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>dflt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Interpret the given string as a boolean value.
*/</comment>
<function><type><name>u8</name></type> <name>sqlite3GetBoolean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>dflt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>getSafetyLevel</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>dflt</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The sqlite3GetBoolean() function is used by other modules but the
** remainder of this file is specific to PRAGMA processing.  So omit
** the rest of the file if PRAGMAs are omitted from the build.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_PRAGMA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
** Interpret the given string as a locking mode value.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getLockingMode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>z</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"exclusive"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>PAGER_LOCKINGMODE_EXCLUSIVE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"normal"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>PAGER_LOCKINGMODE_NORMAL</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>PAGER_LOCKINGMODE_QUERY</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
<comment type="block">/*
** Interpret the given string as an auto-vacuum mode value.
**
** The following strings, "none", "full" and "incremental" are 
** acceptable, as are their numeric equivalents: 0, 1 and 2 respectively.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getAutoVacuum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>BTREE_AUTOVACUUM_NONE</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>BTREE_AUTOVACUUM_FULL</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"incremental"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>BTREE_AUTOVACUUM_INCR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>i</name><operator>&lt;=</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><name>i</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ifndef SQLITE_OMIT_AUTOVACUUM */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
<comment type="block">/*
** Interpret the given string as a temp db location. Return 1 for file
** backed temporary databases, 2 for the Red-Black tree in memory database
** and 0 to use the compile-time default.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getTempStore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;=</operator><literal type="char">'2'</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"memory"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_PAGER_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
<comment type="block">/*
** Invalidate temp storage, either when the temp storage is changed
** from default, or when 'file' and the temp_store_directory has changed
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>invalidateTempStorage</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pBt</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>||</operator> <call><name>sqlite3BtreeIsInReadTrans</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"temporary storage cannot be changed "</literal>
        <literal type="string">"from within a transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pBt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ResetAllSchemasOfConnection</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_PAGER_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
<comment type="block">/*
** If the TEMP database is open, close it and mark the database schema
** as needing reloading.  This must be done when using the SQLITE_TEMP_STORE
** or DEFAULT_TEMP_STORE pragmas.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>changeTempStorage</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStorageType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ts</name> <init>= <expr><call><name>getTempStore</name><argument_list>(<argument><expr><name>zStorageType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>temp_store</name></name><operator>==</operator><name>ts</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>invalidateTempStorage</name><argument_list>( <argument><expr><name>pParse</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>temp_store</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>ts</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_PAGER_PRAGMAS */</comment>

<comment type="block">/*
** Set the names of the first N columns to the values in azCol[]
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setAllColumnNames</name><parameter_list>(
  <parameter><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,               <comment type="block">/* The query under construction */</comment>
  <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,                 <comment type="block">/* Number of columns */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azCol</name></decl></parameter>     <comment type="block">/* Names of columns */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr><name><name>azCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setOneColumnName</name><parameter_list>(<parameter><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate code to return a single integer value.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>returnSingleInt</name><parameter_list>(<parameter><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>value</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp4Dup8</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Int64</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>P4_INT64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setOneColumnName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate code to return a single text value.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>returnSingleText</name><parameter_list>(
  <parameter><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,                <comment type="block">/* Prepared statement under construction */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>,     <comment type="block">/* Name of the result column */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zValue</name></decl></parameter>      <comment type="block">/* Value to be returned */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>zValue</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>zValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOneColumnName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Set the safety_level and pager flags for pager iDb.  Or if iDb&lt;0
** set these values for all pagers.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setAllPagerFlags</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_FullFSync</name><operator>==</operator><name>PAGER_FULLFSYNC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_CkptFullFSync</name><operator>==</operator><name>PAGER_CKPT_FULLFSYNC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_CacheSpill</name><operator>==</operator><name>PAGER_CACHESPILL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>PAGER_FULLFSYNC</name> <operator>|</operator> <name>PAGER_CKPT_FULLFSYNC</name> <operator>|</operator> <name>PAGER_CACHESPILL</name><operator>)</operator>
             <operator>==</operator>  <name>PAGER_FLAGS_MASK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pDb</name><operator>-&gt;</operator><name>safety_level</name></name> <operator>&amp;</operator> <name>PAGER_SYNCHRONOUS_MASK</name><operator>)</operator><operator>==</operator><name><name>pDb</name><operator>-&gt;</operator><name>safety_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3BtreeSetPagerFlags</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>,
                 <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>safety_level</name></name> <operator>|</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PAGER_FLAGS_MASK</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>pDb</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>setAllPagerFlags</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>  <comment type="block">/* no-op */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Return a human-readable name for a constraint resolution action.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FOREIGN_KEY</name></cpp:ifndef>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actionName</name><parameter_list>(<parameter><decl><type><name>u8</name></type> <name>action</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>action</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>OE_SetNull</name></expr>:</case>  <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"SET NULL"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>OE_SetDflt</name></expr>:</case>  <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"SET DEFAULT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>OE_Cascade</name></expr>:</case>  <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"CASCADE"</literal></expr>;</expr_stmt>         <break>break;</break>
    <case>case <expr><name>OE_Restrict</name></expr>:</case> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"RESTRICT"</literal></expr>;</expr_stmt>        <break>break;</break>
    <default>default:</default>          <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"NO ACTION"</literal></expr>;</expr_stmt>  
                      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>action</name><operator>==</operator><name>OE_None</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>zName</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Parameter eMode must be one of the PAGER_JOURNALMODE_XXX constants
** defined in pager.h. This function returns the associated lowercase
** journal-mode name.
*/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlite3JournalModename</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eMode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>azModeName</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"delete"</literal></expr>, <expr><literal type="string">"persist"</literal></expr>, <expr><literal type="string">"off"</literal></expr>, <expr><literal type="string">"truncate"</literal></expr>, <expr><literal type="string">"memory"</literal></expr>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WAL</name></cpp:ifndef>
     , <expr><literal type="string">"wal"</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>PAGER_JOURNALMODE_DELETE</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>PAGER_JOURNALMODE_PERSIST</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>PAGER_JOURNALMODE_OFF</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>PAGER_JOURNALMODE_TRUNCATE</name><operator>==</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>PAGER_JOURNALMODE_MEMORY</name><operator>==</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>PAGER_JOURNALMODE_WAL</name><operator>==</operator><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eMode</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eMode</name><operator>&lt;=</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azModeName</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>eMode</name><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azModeName</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name><name>azModeName</name><index>[<expr><name>eMode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Process a pragma statement.  
**
** Pragmas are of this form:
**
**      PRAGMA [schema.]id [= value]
**
** The identifier might also be a string.  The value is a string, and
** identifier, or a number.  If minusFlag is true, then the value is
** a number that was preceded by a minus sign.
**
** If the left side is "database.id" then pId1 is the database name
** and pId2 is the id.  If the left side is just "id" then pId1 is the
** id and pId2 is any empty string.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Pragma</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, 
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pId1</name></decl></parameter>,        <comment type="block">/* First part of [schema.]id field */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pId2</name></decl></parameter>,        <comment type="block">/* Second part of [schema.]id field, or NULL */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pValue</name></decl></parameter>,      <comment type="block">/* Token for &lt;value&gt;, or NULL */</comment>
  <parameter><decl><type><name>int</name></type> <name>minusFlag</name></decl></parameter>       <comment type="block">/* True if a '-' sign preceded &lt;value&gt; */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLeft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Nul-terminated UTF-8 string &lt;id&gt; */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Nul-terminated UTF-8 string &lt;value&gt;, or NULL */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* The database name */</comment>
  <decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>pId</name></decl>;</decl_stmt>            <comment type="block">/* Pointer to &lt;id&gt; token */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>aFcntl</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>       <comment type="block">/* Argument to SQLITE_FCNTL_PRAGMA */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>               <comment type="block">/* Database index for &lt;database&gt; */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>lwr</name></decl>, <decl><type ref="prev"/><name>upr</name></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Binary search bounds */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                      <comment type="block">/* return value form SQLITE_FCNTL_PRAGMA */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>    <comment type="block">/* The database connection */</comment>
  <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>                     <comment type="block">/* The specific database being pragmaed */</comment>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Prepared statement */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sPragmaNames</name></name> <modifier>*</modifier></type><name>pPragma</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeRunOnlyOnce</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <comment type="block">/* Interpret the [schema.] part of the pragma statement. iDb is the
  ** index of the database this pragma is being applied to in db.aDb[]. */</comment>
  <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3TwoPartName</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pId1</name></expr></argument>, <argument><expr><name>pId2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* If the temp database has been explicitly named as part of the 
  ** pragma, make sure it is open. 
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3OpenTempDatabase</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zLeft</name> <operator>=</operator> <call><name>sqlite3NameFromToken</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zLeft</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>minusFlag</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zRight</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"-%T"</literal></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zRight</name> <operator>=</operator> <call><name>sqlite3NameFromToken</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pId2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zDb</name> <operator>=</operator> <ternary><condition><expr><name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>pDb</name><operator>-&gt;</operator><name>zName</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>SQLITE_PRAGMA</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <goto>goto <name>pragma_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Send an SQLITE_FCNTL_PRAGMA file-control to the underlying VFS
  ** connection.  If it returns SQLITE_OK, then assume that the VFS
  ** handled the pragma and generate a no-op prepared statement.
  **
  ** IMPLEMENTATION-OF: R-12238-55120 Whenever a PRAGMA statement is parsed,
  ** an SQLITE_FCNTL_PRAGMA file control is sent to the open sqlite3_file
  ** object corresponding to the database file to which the pragma
  ** statement refers.
  **
  ** IMPLEMENTATION-OF: R-29875-31678 The argument to the SQLITE_FCNTL_PRAGMA
  ** file control is an array of pointers to strings (char**) in which the
  ** second element of the array is the name of the pragma and the third
  ** element is the argument to the pragma or NULL if the pragma has no
  ** argument.
  */</comment>
  <expr_stmt><expr><name><name>aFcntl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aFcntl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>zLeft</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aFcntl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zRight</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aFcntl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>busyHandler</name><operator>.</operator><name>nBusy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_PRAGMA</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>aFcntl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>returnSingleText</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><name><name>aFcntl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>aFcntl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>pragma_out</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_NOTFOUND</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>aFcntl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>aFcntl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>aFcntl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <goto>goto <name>pragma_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Locate the pragma in the lookup table */</comment>
  <expr_stmt><expr><name>lwr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>upr</name> <operator>=</operator> <call><name>ArraySize</name><argument_list>(<argument><expr><name>aPragmaNames</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>lwr</name><operator>&lt;=</operator><name>upr</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>lwr</name><operator>+</operator><name>upr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name><name>aPragmaNames</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>upr</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>lwr</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>lwr</name><operator>&gt;</operator><name>upr</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>pragma_out</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pPragma</name> <operator>=</operator> <operator>&amp;</operator><name><name>aPragmaNames</name><index>[<expr><name>mid</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Make sure the database schema is loaded if the pragma requires that */</comment>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pPragma</name><operator>-&gt;</operator><name>mPragFlag</name></name> <operator>&amp;</operator> <name>PragFlag_NeedSchema</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>pragma_out</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Jump to the appropriate pragma handler */</comment>
  <switch>switch<condition>( <expr><name><name>pPragma</name><operator>-&gt;</operator><name>ePragTyp</name></name></expr> )</condition><block>{<block_content>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_PAGER_PRAGMAS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_DEPRECATED</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*
  **  PRAGMA [schema.]default_cache_size
  **  PRAGMA [schema.]default_cache_size=N
  **
  ** The first form reports the current persistent setting for the
  ** page cache size.  The value returned is the maximum number of
  ** pages in the page cache.  The second form sets both the current
  ** page cache size value and the persistent page cache size value
  ** stored in the database file.
  **
  ** Older versions of SQLite would set the default cache size to a
  ** negative number to indicate synchronous=OFF.  These days, synchronous
  ** is always on by default regardless of the sign of the default cache
  ** size.  But continue to take the absolute value of the default cache
  ** size of historical compatibility.
  */</comment>
  <case>case <expr><name>PragTyp_DEFAULT_CACHE_SIZE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>iLn</name> <init>= <expr><call><name>VDBE_OFFSET_LINENO</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdbeOpList</name></type> <name><name>getCacheSize</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><name>OP_Transaction</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,                         <comment type="block">/* 0 */</comment>
      <expr><block>{ <expr><name>OP_ReadCookie</name></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,        <expr><name>BTREE_DEFAULT_CACHE_SIZE</name></expr>}</block></expr>,  <comment type="block">/* 1 */</comment>
      <expr><block>{ <expr><name>OP_IfPos</name></expr>,       <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_Integer</name></expr>,     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_Subtract</name></expr>,    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,        <expr><literal type="number">1</literal></expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_IfPos</name></expr>,       <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_Integer</name></expr>,     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,                         <comment type="block">/* 6 */</comment>
      <expr><block>{ <expr><name>OP_Noop</name></expr>,        <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_ResultRow</name></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VdbeOp</name> <modifier>*</modifier></type><name>aOp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>setOneColumnName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"cache_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeVerifyNoMallocRequired</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>getCacheSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>aOp</name> <operator>=</operator> <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>getCacheSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>getCacheSize</name></expr></argument>, <argument><expr><name>iLn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ONLY_IF_REALLOC_STRESS</name><argument_list>(<argument><expr><name>aOp</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>SQLITE_DEFAULT_CACHE_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>sqlite3AbsInt32</name><argument_list>(<argument><expr><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3BeginWriteOperation</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_SetCookie</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>BTREE_DEFAULT_CACHE_SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeSetCacheSize</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !SQLITE_OMIT_PAGER_PRAGMAS &amp;&amp; !SQLITE_OMIT_DEPRECATED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_PAGER_PRAGMAS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*
  **  PRAGMA [schema.]page_size
  **  PRAGMA [schema.]page_size=N
  **
  ** The first form reports the current setting for the
  ** database page size in bytes.  The second form sets the
  ** database page size value.  The value can only be set if
  ** the database has not yet been created.
  */</comment>
  <case>case <expr><name>PragTyp_PAGE_SIZE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pBt</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"page_size"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Malloc may fail when setting the page-size, as there is an internal
      ** buffer that the pager module resizes using sqlite3_realloc().
      */</comment>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name> <operator>=</operator> <call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_NOMEM</name><operator>==</operator><call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3OomFault</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **  PRAGMA [schema.]secure_delete
  **  PRAGMA [schema.]secure_delete=ON/OFF
  **
  ** The first form reports the current setting for the
  ** secure_delete flag.  The second form changes the secure_delete
  ** flag setting and reports thenew value.
  */</comment>
  <case>case <expr><name>PragTyp_SECURE_DELETE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pBt</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3BtreeSecureDelete</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>sqlite3BtreeSecureDelete</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"secure_delete"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **  PRAGMA [schema.]max_page_count
  **  PRAGMA [schema.]max_page_count=N
  **
  ** The first form reports the current setting for the
  ** maximum number of pages in the database file.  The 
  ** second form attempts to change this setting.  Both
  ** forms return the current setting.
  **
  ** The absolute value of N is used.  This is undocumented and might
  ** change.  The only purpose is to provide an easy way to test
  ** the sqlite3AbsInt32() function.
  **
  **  PRAGMA [schema.]page_count
  **
  ** Return the number of pages in the specified database.
  */</comment>
  <case>case <expr><name>PragTyp_PAGE_COUNT</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iReg</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iReg</name> <operator>=</operator> <operator>++</operator><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3Tolower</name><argument_list>(<argument><expr><name><name>zLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'p'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Pagecount</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>iReg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MaxPgcnt</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>iReg</name></expr></argument>, 
                        <argument><expr><call><name>sqlite3AbsInt32</name><argument_list>(<argument><expr><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><name>iReg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **  PRAGMA [schema.]locking_mode
  **  PRAGMA [schema.]locking_mode = (normal|exclusive)
  */</comment>
  <case>case <expr><name>PragTyp_LOCKING_MODE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="string">"normal"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eMode</name> <init>= <expr><call><name>getLockingMode</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eMode</name><operator>==</operator><name>PAGER_LOCKINGMODE_QUERY</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Simple "PRAGMA locking_mode;" statement. This is a query for
      ** the current default locking mode (which may be different to
      ** the locking-mode of the main database).
      */</comment>
      <expr_stmt><expr><name>eMode</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dfltLockMode</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* This indicates that no database name was specified as part
        ** of the PRAGMA command. In this case the locking-mode must be
        ** set on all attached databases, as well as the main db file.
        **
        ** Also, the sqlite3.dfltLockMode variable is set so that
        ** any subsequently attached databases also use the specified
        ** locking mode.
        */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pDb</name><operator>==</operator><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><name>pPager</name> <operator>=</operator> <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3PagerLockingMode</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dfltLockMode</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>eMode</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>pPager</name> <operator>=</operator> <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>eMode</name> <operator>=</operator> <call><name>sqlite3PagerLockingMode</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eMode</name><operator>==</operator><name>PAGER_LOCKINGMODE_NORMAL</name>
            <operator>||</operator> <name>eMode</name><operator>==</operator><name>PAGER_LOCKINGMODE_EXCLUSIVE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>eMode</name><operator>==</operator><name>PAGER_LOCKINGMODE_EXCLUSIVE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zRet</name> <operator>=</operator> <literal type="string">"exclusive"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>returnSingleText</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"locking_mode"</literal></expr></argument>, <argument><expr><name>zRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **  PRAGMA [schema.]journal_mode
  **  PRAGMA [schema.]journal_mode =
  **                      (delete|persist|off|truncate|memory|wal|off)
  */</comment>
  <case>case <expr><name>PragTyp_JOURNAL_MODE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>eMode</name></decl>;</decl_stmt>        <comment type="block">/* One of the PAGER_JOURNALMODE_XXX symbols */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>           <comment type="block">/* Loop counter */</comment>

    <expr_stmt><expr><call><name>setOneColumnName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"journal_mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* If there is no "=MODE" part of the pragma, do a query for the
      ** current mode */</comment>
      <expr_stmt><expr><name>eMode</name> <operator>=</operator> <name>PAGER_JOURNALMODE_QUERY</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMode</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>eMode</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>zMode</name> <operator>=</operator> <call><name>sqlite3JournalModename</name><argument_list>(<argument><expr><name>eMode</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>eMode</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zMode</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zMode</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* If the "=MODE" part does not match any known journal mode,
        ** then do a query */</comment>
        <expr_stmt><expr><name>eMode</name> <operator>=</operator> <name>PAGER_JOURNALMODE_QUERY</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>eMode</name><operator>==</operator><name>PAGER_JOURNALMODE_QUERY</name> <operator>&amp;&amp;</operator> <name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* Convert "PRAGMA journal_mode" into "PRAGMA main.journal_mode" */</comment>
      <expr_stmt><expr><name>iDb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pId2</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>pBt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ii</name><operator>==</operator><name>iDb</name> <operator>||</operator> <name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_JournalMode</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>eMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **  PRAGMA [schema.]journal_size_limit
  **  PRAGMA [schema.]journal_size_limit=N
  **
  ** Get or set the size limit on rollback journal files.
  */</comment>
  <case>case <expr><name>PragTyp_JOURNAL_SIZE_LIMIT</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iLimit</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3DecOrHexToI64</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iLimit</name><operator>&lt;</operator><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iLimit</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iLimit</name> <operator>=</operator> <call><name>sqlite3PagerJournalSizeLimit</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>iLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"journal_size_limit"</literal></expr></argument>, <argument><expr><name>iLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_PAGER_PRAGMAS */</comment>

  <comment type="block">/*
  **  PRAGMA [schema.]auto_vacuum
  **  PRAGMA [schema.]auto_vacuum=N
  **
  ** Get or set the value of the database 'auto-vacuum' parameter.
  ** The value is one of:  0 NONE 1 FULL 2 INCREMENTAL
  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
  <case>case <expr><name>PragTyp_AUTO_VACUUM</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pBt</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"auto_vacuum"</literal></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>eAuto</name> <init>= <expr><call><name>getAutoVacuum</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eAuto</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eAuto</name><operator>&lt;=</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nextAutovac</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>eAuto</name></expr>;</expr_stmt>
      <comment type="block">/* Call SetAutoVacuum() to set initialize the internal auto and
      ** incr-vacuum flags. This is required in case this connection
      ** creates the database file. It is important that it is created
      ** as an auto-vacuum capable db.
      */</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>eAuto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>eAuto</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>eAuto</name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr> )</condition><block>{<block_content>
        <comment type="block">/* When setting the auto_vacuum mode to either "full" or 
        ** "incremental", write the value of meta[6] in the database
        ** file. Before writing to meta[6], check that meta[3] indicates
        ** that this really is an auto-vacuum capable database.
        */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>iLn</name> <init>= <expr><call><name>VDBE_OFFSET_LINENO</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdbeOpList</name></type> <name><name>setMeta6</name><index>[]</index></name> <init>= <expr><block>{
          <expr><block>{ <expr><name>OP_Transaction</name></expr>,    <expr><literal type="number">0</literal></expr>,         <expr><literal type="number">1</literal></expr>,                 <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
          <expr><block>{ <expr><name>OP_ReadCookie</name></expr>,     <expr><literal type="number">0</literal></expr>,         <expr><literal type="number">1</literal></expr>,         <expr><name>BTREE_LARGEST_ROOT_PAGE</name></expr>}</block></expr>,
          <expr><block>{ <expr><name>OP_If</name></expr>,             <expr><literal type="number">1</literal></expr>,         <expr><literal type="number">0</literal></expr>,                 <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 2 */</comment>
          <expr><block>{ <expr><name>OP_Halt</name></expr>,           <expr><name>SQLITE_OK</name></expr>, <expr><name>OE_Abort</name></expr>,          <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 3 */</comment>
          <expr><block>{ <expr><name>OP_SetCookie</name></expr>,      <expr><literal type="number">0</literal></expr>,         <expr><name>BTREE_INCR_VACUUM</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 4 */</comment>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VdbeOp</name> <modifier>*</modifier></type><name>aOp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iAddr</name> <init>= <expr><call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeVerifyNoMallocRequired</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>setMeta6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aOp</name> <operator>=</operator> <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>setMeta6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setMeta6</name></expr></argument>, <argument><expr><name>iLn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>ONLY_IF_REALLOC_STRESS</name><argument_list>(<argument><expr><name>aOp</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p2</name> <operator>=</operator> <name>iAddr</name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>p3</name> <operator>=</operator> <name>eAuto</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/*
  **  PRAGMA [schema.]incremental_vacuum(N)
  **
  ** Do N steps of incremental vacuuming on a database.
  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
  <case>case <expr><name>PragTyp_INCREMENTAL_VACUUM</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iLimit</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>sqlite3GetInt32</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLimit</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>iLimit</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iLimit</name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3BeginWriteOperation</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>iLimit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IncrVacuum</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
  <comment type="block">/*
  **  PRAGMA [schema.]cache_size
  **  PRAGMA [schema.]cache_size=N
  **
  ** The first form reports the current local setting for the
  ** page cache size. The second form sets the local
  ** page cache size value.  If N is positive then that is the
  ** number of pages in the cache.  If N is negative, then the
  ** number of pages is adjusted so that the cache uses -N kibibytes
  ** of memory.
  */</comment>
  <case>case <expr><name>PragTyp_CACHE_SIZE</name></expr>:</case> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"cache_size"</literal></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeSetCacheSize</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **  PRAGMA [schema.]cache_spill
  **  PRAGMA cache_spill=BOOLEAN
  **  PRAGMA [schema.]cache_spill=N
  **
  ** The first form reports the current local setting for the
  ** page cache spill size. The second form turns cache spill on
  ** or off.  When turnning cache spill on, the size is set to the
  ** current cache_size.  The third form sets a spill size that
  ** may be different form the cache size.
  ** If N is positive then that is the
  ** number of pages in the cache.  If N is negative, then the
  ** number of pages is adjusted so that the cache uses -N kibibytes
  ** of memory.
  **
  ** If the number of cache_spill pages is less then the number of
  ** cache_size pages, no spilling occurs until the page count exceeds
  ** the number of cache_size pages.
  **
  ** The cache_spill=BOOLEAN setting applies to all attached schemas,
  ** not just the schema specified.
  */</comment>
  <case>case <expr><name>PragTyp_CACHE_SPILL</name></expr>:</case> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"cache_spill"</literal></expr></argument>, 
         <argument><expr><ternary><condition><expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SQLITE_CacheSpill</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: 
            <expr><call><name>sqlite3BtreeSetSpillSize</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3GetInt32</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3BtreeSetSpillSize</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>size</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SQLITE_CacheSpill</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_CacheSpill</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>setAllPagerFlags</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **  PRAGMA [schema.]mmap_size(N)
  **
  ** Used to set mapping size limit. The mapping size limit is
  ** used to limit the aggregate size of all memory mapped regions of the
  ** database file. If this parameter is set to zero, then memory mapping
  ** is not used at all.  If N is negative, then the default memory map
  ** limit determined by sqlite3_config(SQLITE_CONFIG_MMAP_SIZE) is set.
  ** The parameter N is measured in bytes.
  **
  ** This value is advisory.  The underlying VFS is free to memory map
  ** as little or as much as it wants.  Except, if N is set to 0 then the
  ** upper layers will never invoke the xFetch interfaces to the VFS.
  */</comment>
  <case>case <expr><name>PragTyp_MMAP_SIZE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_MAX_MMAP_SIZE</name><operator>&gt;</operator><literal type="number">0</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3DecOrHexToI64</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>sz</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>szMmap</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>szMmap</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <for>for<control>(<init><expr><name>ii</name><operator>=</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>pBt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ii</name><operator>==</operator><name>iDb</name> <operator>||</operator> <name><name>pId2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3BtreeSetMmapLimit</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_MMAP_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"mmap_size"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_NOTFOUND</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **   PRAGMA temp_store
  **   PRAGMA temp_store = "default"|"memory"|"file"
  **
  ** Return or set the local value of the temp_store flag.  Changing
  ** the local value does not make changes to the disk file and the default
  ** value will be restored the next time the database is opened.
  **
  ** Note that it is possible for the library compile-time options to
  ** override this setting
  */</comment>
  <case>case <expr><name>PragTyp_TEMP_STORE</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"temp_store"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>temp_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>changeTempStorage</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **   PRAGMA temp_store_directory
  **   PRAGMA temp_store_directory = ""|"directory_name"
  **
  ** Return or set the local value of the temp_store_directory flag.  Changing
  ** the value sets a specific directory to be used for temporary files.
  ** Setting to a null string reverts to the default temporary directory search.
  ** If temporary directory is changed, then invalidateTempStorage.
  **
  */</comment>
  <case>case <expr><name>PragTyp_TEMP_STORE_DIRECTORY</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleText</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"temp_store_directory"</literal></expr></argument>, <argument><expr><name>sqlite3_temp_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>zRight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsAccess</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLITE_ACCESS_READWRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>res</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"not a writable directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>pragma_out</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_TEMP_STORE</name><operator>==</operator><literal type="number">0</literal>
       <operator>||</operator> <operator>(</operator><name>SQLITE_TEMP_STORE</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>temp_store</name></name><operator>&lt;=</operator><literal type="number">1</literal><operator>)</operator>
       <operator>||</operator> <operator>(</operator><name>SQLITE_TEMP_STORE</name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>temp_store</name></name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>invalidateTempStorage</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>sqlite3_temp_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>zRight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>sqlite3_temp_directory</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>sqlite3_temp_directory</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WSD */</comment>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
  <comment type="block">/*
  **   PRAGMA data_store_directory
  **   PRAGMA data_store_directory = ""|"directory_name"
  **
  ** Return or set the local value of the data_store_directory flag.  Changing
  ** the value sets a specific directory to be used for database files that
  ** were specified with a relative pathname.  Setting to a null string reverts
  ** to the default database directory, which for database files specified with
  ** a relative path will probably be based on the current directory for the
  ** process.  Database file specified with an absolute path are not impacted
  ** by this setting, regardless of its value.
  **
  */</comment>
  <case>case <expr><name>PragTyp_DATA_STORE_DIRECTORY</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleText</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"data_store_directory"</literal></expr></argument>, <argument><expr><name>sqlite3_data_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>zRight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsAccess</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLITE_ACCESS_READWRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>res</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"not a writable directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>pragma_out</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>sqlite3_data_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>zRight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>sqlite3_data_directory</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>sqlite3_data_directory</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WSD */</comment>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_ENABLE_LOCKING_STYLE</name></expr></cpp:if>
  <comment type="block">/*
  **   PRAGMA [schema.]lock_proxy_file
  **   PRAGMA [schema.]lock_proxy_file = ":auto:"|"lock_file_path"
  **
  ** Return or set the value of the lock_proxy_file flag.  Changing
  ** the value sets a specific file to be used for database access locks.
  **
  */</comment>
  <case>case <expr><name>PragTyp_LOCK_PROXY_FILE</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proxy_file_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3OsFileControlHint</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>SQLITE_GET_LOCKPROXYFILE</name></expr></argument>, 
                           <argument><expr><operator>&amp;</operator><name>proxy_file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>returnSingleText</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"lock_proxy_file"</literal></expr></argument>, <argument><expr><name>proxy_file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>zRight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>res</name><operator>=</operator><call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>SQLITE_SET_LOCKPROXYFILE</name></expr></argument>, 
                                     <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>res</name><operator>=</operator><call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>SQLITE_SET_LOCKPROXYFILE</name></expr></argument>, 
                                     <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>res</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"failed to set lock proxy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>pragma_out</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_LOCKING_STYLE */</comment>      
    
  <comment type="block">/*
  **   PRAGMA [schema.]synchronous
  **   PRAGMA [schema.]synchronous=OFF|ON|NORMAL|FULL|EXTRA
  **
  ** Return or set the local value of the synchronous flag.  Changing
  ** the local value does not make changes to the disk file and the
  ** default value will be restored the next time the database is
  ** opened.
  */</comment>
  <case>case <expr><name>PragTyp_SYNCHRONOUS</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"synchronous"</literal></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>safety_level</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, 
            <argument><expr><literal type="string">"Safety level may not be changed inside a transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iLevel</name> <init>= <expr><operator>(</operator><call><name>getSafetyLevel</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>PAGER_SYNCHRONOUS_MASK</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>iLevel</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iLevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>safety_level</name></name> <operator>=</operator> <name>iLevel</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAllPagerFlags</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_PAGER_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FLAG_PRAGMAS</name></cpp:ifndef>
  <case>case <expr><name>PragTyp_FLAG</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>pPragma</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>pPragma</name><operator>-&gt;</operator><name>iArg</name></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>pPragma</name><operator>-&gt;</operator><name>iArg</name></name></expr></init></decl>;</decl_stmt>    <comment type="block">/* Mask of bits to set or clear. */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Foreign key support may not be enabled or disabled while not
        ** in auto-commit mode.  */</comment>
        <expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SQLITE_ForeignKeys</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_USER_AUTHENTICATION</name></expr></cpp:if>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>auth</name><operator>.</operator><name>authLevel</name></name><operator>==</operator><name>UAUTH_User</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* Do not allow non-admin users to modify the schema arbitrarily */</comment>
        <expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SQLITE_WriteSchema</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <if_stmt><if>if<condition>( <expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>mask</name><operator>==</operator><name>SQLITE_DeferFKs</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nDeferredImmCons</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* Many of the flag-pragmas modify the code generated by the SQL 
      ** compiler (eg. count_changes). So add an opcode to expire all
      ** compiled SQL statements after modifying a pragma value.
      */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Expire</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setAllPagerFlags</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_FLAG_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_SCHEMA_PRAGMAS</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA table_info(&lt;table&gt;)
  **
  ** Return a single row for each column of the named table. The columns of
  ** the returned data set are:
  **
  ** cid:        Column id (numbered from left to right, starting at 0)
  ** name:       Column name
  ** type:       Column declaration type.
  ** notnull:    True if 'NOT NULL' is part of column declaration
  ** dflt_value: The default value for the column, if any.
  */</comment>
  <case>case <expr><name>PragTyp_TABLE_INFO</name></expr>:</case> <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{
         <expr><literal type="string">"cid"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"type"</literal></expr>, <expr><literal type="string">"notnull"</literal></expr>, <expr><literal type="string">"dflt_value"</literal></expr>, <expr><literal type="string">"pk"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nHidden</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Column</name> <modifier>*</modifier></type><name>pCol</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pPk</name> <init>= <expr><call><name>sqlite3PrimaryKeyIndex</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">6</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3ViewGetColumnNames</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>pCol</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pCol</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>IsHiddenColumn</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>nHidden</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>colFlags</name></name> <operator>&amp;</operator> <name>COLFLAG_PRIMKEY</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>pPk</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name> <operator>&amp;&amp;</operator> <name><name>pPk</name><operator>-&gt;</operator><name>aiColumn</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><name>i</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"issisi"</literal></expr></argument>,
               <argument><expr><name>i</name><operator>-</operator><name>nHidden</name></expr></argument>,
               <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
               <argument><expr><ternary><condition><expr><name><name>pCol</name><operator>-&gt;</operator><name>zType</name></name></expr> ?</condition><then> <expr><name><name>pCol</name><operator>-&gt;</operator><name>zType</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
               <argument><expr><ternary><condition><expr><name><name>pCol</name><operator>-&gt;</operator><name>notNull</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
               <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>zDflt</name></name></expr></argument>,
               <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <break>break;</break>

  <case>case <expr><name>PragTyp_STATS</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"index"</literal></expr>, <expr><literal type="string">"width"</literal></expr>, <expr><literal type="string">"height"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">4</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>tblHash</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssii"</literal></expr></argument>,
           <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
           <argument><expr><literal type="number">0</literal></expr></argument>,
           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sqlite3LogEstToInt</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>szTabRow</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sqlite3LogEstToInt</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>nRowLogEst</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"sii"</literal></expr></argument>,
           <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sqlite3LogEstToInt</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>szIdxRow</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sqlite3LogEstToInt</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aiRowLogEst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block>
  <break>break;</break>

  <case>case <expr><name>PragTyp_INDEX_INFO</name></expr>:</case> <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pIdx</name> <operator>=</operator> <call><name>sqlite3FindIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pIdx</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{
         <expr><literal type="string">"seqno"</literal></expr>, <expr><literal type="string">"cid"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"desc"</literal></expr>, <expr><literal type="string">"coll"</literal></expr>, <expr><literal type="string">"key"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pPragma</name><operator>-&gt;</operator><name>iArg</name></name></expr> )</condition><block>{<block_content>
        <comment type="block">/* PRAGMA index_xinfo (newer version with more rows and columns) */</comment>
        <expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nColumn</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/* PRAGMA index_info (legacy version) */</comment>
        <expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pTab</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>pTable</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name><operator>&lt;=</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>mx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>i16</name></type> <name>cnum</name> <init>= <expr><name><name>pIdx</name><operator>-&gt;</operator><name>aiColumn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"iis"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cnum</name></expr></argument>,
                             <argument><expr><ternary><condition><expr><name>cnum</name><operator>&lt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>cnum</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pPragma</name><operator>-&gt;</operator><name>iArg</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"isi"</literal></expr></argument>,
            <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSortOrder</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
            <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>azColl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
            <argument><expr><name>i</name><operator>&lt;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <break>break;</break>

  <case>case <expr><name>PragTyp_INDEX_LIST</name></expr>:</case> <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"seq"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"unique"</literal></expr>, <expr><literal type="string">"origin"</literal></expr>, <expr><literal type="string">"partial"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">5</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr><operator>,</operator> <expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azOrigin</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"c"</literal></expr>, <expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"pk"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"isisi"</literal></expr></argument>,
           <argument><expr><name>i</name></expr></argument>,
           <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
           <argument><expr><call><name>IsUniqueIndex</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>azOrigin</name><index>[<expr><name><name>pIdx</name><operator>-&gt;</operator><name>idxType</name></name></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>pPartIdxWhere</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <break>break;</break>

  <case>case <expr><name>PragTyp_DATABASE_LIST</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"seq"</literal></expr>, <expr><literal type="string">"name"</literal></expr>, <expr><literal type="string">"file"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">3</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pBt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"iss"</literal></expr></argument>,
         <argument><expr><name>i</name></expr></argument>,
         <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>,
         <argument><expr><call><name>sqlite3BtreeGetFilename</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block>
  <break>break;</break>

  <case>case <expr><name>PragTyp_COLLATION_LIST</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"seq"</literal></expr>, <expr><literal type="string">"name"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>p</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aCollSeq</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>CollSeq</name> <modifier>*</modifier></type><name>pColl</name> <init>= <expr><operator>(</operator><name>CollSeq</name> <operator>*</operator><operator>)</operator><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"is"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name><name>pColl</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_SCHEMA_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FOREIGN_KEY</name></cpp:ifndef>
  <case>case <expr><name>PragTyp_FOREIGN_KEY_LIST</name></expr>:</case> <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>FKey</name> <modifier>*</modifier></type><name>pFK</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pFK</name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pFKey</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pFK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{
           <expr><literal type="string">"id"</literal></expr>, <expr><literal type="string">"seq"</literal></expr>, <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"from"</literal></expr>, <expr><literal type="string">"to"</literal></expr>, <expr><literal type="string">"on_update"</literal></expr>, <expr><literal type="string">"on_delete"</literal></expr>,
           <expr><literal type="string">"match"</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">8</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>pFK</name></expr>)</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
          <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pFK</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"iissssss"</literal></expr></argument>,
                   <argument><expr><name>i</name></expr></argument>,
                   <argument><expr><name>j</name></expr></argument>,
                   <argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>zTo</name></name></expr></argument>,
                   <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name><name>pFK</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFrom</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>,
                   <argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>zCol</name></expr></argument>,
                   <argument><expr><call><name>actionName</name><argument_list>(<argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>aAction</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,  <comment type="block">/* ON UPDATE */</comment>
                   <argument><expr><call><name>actionName</name><argument_list>(<argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>aAction</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,  <comment type="block">/* ON DELETE */</comment>
                   <argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>pFK</name> <operator>=</operator> <name><name>pFK</name><operator>-&gt;</operator><name>pNextFrom</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_FOREIGN_KEY) */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FOREIGN_KEY</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
  <case>case <expr><name>PragTyp_FOREIGN_KEY_CHECK</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>FKey</name> <modifier>*</modifier></type><name>pFK</name></decl>;</decl_stmt>             <comment type="block">/* A foreign key constraint */</comment>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>           <comment type="block">/* Child table contain "REFERENCES" keyword */</comment>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pParent</name></decl>;</decl_stmt>        <comment type="block">/* Parent table that child points to */</comment>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>           <comment type="block">/* Index in the parent table */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                 <comment type="block">/* Loop counter:  Foreign key number for pTab */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>                 <comment type="block">/* Loop counter:  Field of the foreign key */</comment>
    <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>           <comment type="block">/* Loop counter:  Next table in schema */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>                 <comment type="block">/* result variable */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>regResult</name></decl>;</decl_stmt>         <comment type="block">/* 3 registers to hold a result row */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>regKey</name></decl>;</decl_stmt>            <comment type="block">/* Register to hold key for checking the FK */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>regRow</name></decl>;</decl_stmt>            <comment type="block">/* Registers to hold a row from pTab */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>addrTop</name></decl>;</decl_stmt>           <comment type="block">/* Top of a loop checking foreign keys */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>addrOk</name></decl>;</decl_stmt>            <comment type="block">/* Jump here if the key is OK */</comment>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiCols</name></decl>;</decl_stmt>           <comment type="block">/* child to parent column mapping */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"rowid"</literal></expr>, <expr><literal type="string">"parent"</literal></expr>, <expr><literal type="string">"fkid"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>regResult</name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>regKey</name> <operator>=</operator> <operator>++</operator><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>regRow</name> <operator>=</operator> <operator>++</operator><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">4</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>tblHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>k</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3LocateTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>pTab</name> <operator>=</operator> <operator>(</operator><name>Table</name><operator>*</operator><operator>)</operator><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>pTab</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pFKey</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3TableLock</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>tnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><name>regRow</name><operator>&gt;</operator><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name> <operator>+</operator> <name>regRow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3OpenTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>OP_OpenRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regResult</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>pFK</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pFKey</name></name></expr>;</init> <condition><expr><name>pFK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pFK</name><operator>=</operator><name><name>pFK</name><operator>-&gt;</operator><name>pNextFrom</name></name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>pParent</name> <operator>=</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>zTo</name></name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pParent</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3TableLock</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name><name>pParent</name><operator>-&gt;</operator><name>tnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pParent</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sqlite3FkLocateIndex</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>pFK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>pIdx</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3OpenTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>OP_OpenRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_OpenRead</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>tnum</name></name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeSetP4KeyInfo</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <name>pFK</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pFK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name><operator>&lt;</operator><name>i</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>addrTop</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Rewind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>pFK</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pFKey</name></name></expr>;</init> <condition><expr><name>pFK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pFK</name><operator>=</operator><name><name>pFK</name><operator>-&gt;</operator><name>pNextFrom</name></name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>pParent</name> <operator>=</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>zTo</name></name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>aiCols</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pParent</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>sqlite3FkLocateIndex</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>pFK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aiCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>addrOk</name> <operator>=</operator> <call><name>sqlite3VdbeMakeLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pParent</name> <operator>&amp;&amp;</operator> <name>pIdx</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>iKey</name> <init>= <expr><name><name>pFK</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iFrom</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iKey</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iKey</name><operator>&lt;</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>iKey</name><operator>!=</operator><name><name>pTab</name><operator>-&gt;</operator><name>iPKey</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Column</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><name>regRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3ColumnDefault</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><name>regRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IsNull</name></expr></argument>, <argument><expr><name>regRow</name></expr></argument>, <argument><expr><name>addrOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MustBeInt</name></expr></argument>, <argument><expr><name>regRow</name></expr></argument>, 
               <argument><expr><call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Rowid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_NotExists</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeGoto</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addrOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pFK</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3ExprCodeGetColumnOfTable</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                            <argument><expr><ternary><condition><expr><name>aiCols</name></expr> ?</condition><then> <expr><name><name>aiCols</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><name><name>pFK</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFrom</name></expr></else></ternary></expr></argument>, <argument><expr><name>regRow</name><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IsNull</name></expr></argument>, <argument><expr><name>regRow</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>addrOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <if_stmt><if>if<condition>( <expr><name>pParent</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MakeRecord</name></expr></argument>, <argument><expr><name>regRow</name></expr></argument>, <argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>, <argument><expr><name>regKey</name></expr></argument>,
                              <argument><expr><call><name>sqlite3IndexAffinityStr</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4Int</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Found</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>addrOk</name></expr></argument>, <argument><expr><name>regKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Rowid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regResult</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regResult</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"si"</literal></expr></argument>, <argument><expr><name><name>pFK</name><operator>-&gt;</operator><name>zTo</name></name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><name>regResult</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeResolveLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addrOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>aiCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>addrTop</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addrTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_TRIGGER) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_FOREIGN_KEY) */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <case>case <expr><name>PragTyp_PARSER_TRACE</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3ParserTrace</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"parser: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3ParserTrace</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Reinstall the LIKE and GLOB functions.  The variant of LIKE
  ** used will be case sensitive or not depending on the RHS.
  */</comment>
  <case>case <expr><name>PragTyp_CASE_SENSITIVE_LIKE</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3RegisterLikeFunctions</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
  <break>break;</break>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_INTEGRITY_CHECK</name></cpp:ifndef>
  <comment type="block">/* Pragma "quick_check" is reduced version of 
  ** integrity_check designed to detect most database corruption
  ** without most of the overhead of a full integrity-check.
  */</comment>
  <case>case <expr><name>PragTyp_INTEGRITY_CHECK</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>, <decl><type ref="prev"/><name>mxErr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>isQuick</name> <init>= <expr><operator>(</operator><call><name>sqlite3Tolower</name><argument_list>(<argument><expr><name><name>zLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'q'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If the PRAGMA command was of the form "PRAGMA &lt;db&gt;.integrity_check",
    ** then iDb is set to the index of the database identified by &lt;db&gt;.
    ** In this case, the integrity of database iDb only is verified by
    ** the VDBE created below.
    **
    ** Otherwise, if the command was simply "PRAGMA integrity_check" (or
    ** "PRAGMA quick_check"), then iDb is set to 0. In this case, set iDb
    ** to -1 here, to indicate that the VDBE should verify the integrity
    ** of all attached databases.  */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iDb</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iDb</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pId2</name><operator>-&gt;</operator><name>z</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pId2</name><operator>-&gt;</operator><name>z</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iDb</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Initialize the VDBE program */</comment>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOneColumnName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the maximum error count */</comment>
    <expr_stmt><expr><name>mxErr</name> <operator>=</operator> <name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3GetInt32</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mxErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>mxErr</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>mxErr</name> <operator>=</operator> <name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>mxErr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reg[1] holds errors left */</comment>

    <comment type="block">/* Do an integrity check on each database file */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pTbls</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name>OMIT_TEMPDB</name> <operator>&amp;&amp;</operator> <name>i</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>iDb</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Halt if out of errors */</comment>
      <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Do an integrity check of the B-Tree
      **
      ** Begin by filling registers 2, 3, ... with the root pages numbers
      ** for all tables and indices in the database.
      */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTbls</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>tblHash</name></name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>x</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><name>pTbls</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>HasRowid</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>tnum</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for<control>(<init><expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>tnum</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>zName</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>

      <comment type="block">/* Make sure sufficient number of registers have been allocated */</comment>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>, <argument><expr><name>cnt</name><operator>+</operator><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Do the b-tree integrity checks */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IntegrityCk</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IsNull</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
         <argument><expr><call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"*** in database %s ***\n"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Move</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Concat</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Make sure all the indices are constructed correctly.
      */</comment>
      <for>for<control>(<init><expr><name>x</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><name>pTbls</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isQuick</name></expr>;</condition> <incr><expr><name>x</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pPk</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pPrior</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>loopTop</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iDataCur</name></decl>, <decl><type ref="prev"/><name>iIdxCur</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pPk</name> <operator>=</operator> <ternary><condition><expr><call><name>HasRowid</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>sqlite3PrimaryKeyIndex</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Stop if out of errors */</comment>
        <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3ExprCacheClear</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3OpenTableAndIndices</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>OP_OpenRead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                   <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDataCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iIdxCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* index entries counter */</comment>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Rewind</name></expr></argument>, <argument><expr><name>iDataCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loopTop</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Verify that all NOT NULL columns really are NOT NULL */</comment>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>jmp2</name></decl>, <decl><type ref="prev"/><name>jmp3</name></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><name><name>pTab</name><operator>-&gt;</operator><name>iPKey</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>notNull</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>sqlite3ExprCodeGetColumnOfTable</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>iDataCur</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OPFLAG_TYPEOFARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>jmp2</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_NotNull</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Decrement error limit */</comment>
          <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"NULL value in %s.%s"</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
                              <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>jmp3</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="block">/* Validate index entries for the current row */</comment>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>jmp2</name></decl>, <decl><type ref="prev"/><name>jmp3</name></decl>, <decl><type ref="prev"/><name>jmp4</name></decl>, <decl><type ref="prev"/><name>jmp5</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>ckUniq</name> <init>= <expr><call><name>sqlite3VdbeMakeLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>pPk</name><operator>==</operator><name>pIdx</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>sqlite3GenerateIndexKey</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr><name>iDataCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmp3</name></expr></argument>,
                                       <argument><expr><name>pPrior</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pPrior</name> <operator>=</operator> <name>pIdx</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* increment entry count */</comment>
          <comment type="block">/* Verify that an index entry exists for the current table row */</comment>
          <expr_stmt><expr><name>jmp2</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp4Int</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Found</name></expr></argument>, <argument><expr><name>iIdxCur</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>ckUniq</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>,
                                      <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Decrement error limit */</comment>
          <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"row "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Concat</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">" missing from index "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Concat</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>jmp5</name> <operator>=</operator> <call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Concat</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>jmp4</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* For UNIQUE indexes, verify that only one entry exists with the
          ** current key.  The entry is unique if (1) any column is NULL
          ** or (2) the next entry has a different key */</comment>
          <if_stmt><if>if<condition>( <expr><call><name>IsUniqueIndex</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>uniqOk</name> <init>= <expr><call><name>sqlite3VdbeMakeLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>jmp6</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>kk</name></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>kk</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>kk</name><operator>&lt;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><name><name>pIdx</name><operator>-&gt;</operator><name>aiColumn</name><index>[<expr><name>kk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>!=</operator><name>XN_ROWID</name> <operator>&amp;&amp;</operator> <name>iCol</name><operator>&lt;</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>iCol</name></expr>]</index></name><operator>.</operator><name>notNull</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
              <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IsNull</name></expr></argument>, <argument><expr><name>r1</name><operator>+</operator><name>kk</name></expr></argument>, <argument><expr><name>uniqOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>jmp6</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Next</name></expr></argument>, <argument><expr><name>iIdxCur</name><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeGoto</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>uniqOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jmp6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4Int</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IdxGT</name></expr></argument>, <argument><expr><name>iIdxCur</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>uniqOk</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>,
                                 <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Decrement error limit */</comment>
            <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"non-unique entry in index "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeGoto</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeResolveLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>uniqOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3ResolvePartIdxLabel</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>jmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Next</name></expr></argument>, <argument><expr><name>iDataCur</name></expr></argument>, <argument><expr><name>loopTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>loopTop</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BTREECOUNT</name></cpp:ifndef>
        <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"wrong # of entries in index "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>pPk</name><operator>==</operator><name>pIdx</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addr</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Count</name></expr></argument>, <argument><expr><name>iIdxCur</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Eq</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>addr</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>SQLITE_NOTNULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Concat</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_BTREECOUNT */</comment>
      </block_content>}</block></for> 
    </block_content>}</block></for>
    <block>{<block_content>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>iLn</name> <init>= <expr><call><name>VDBE_OFFSET_LINENO</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdbeOpList</name></type> <name><name>endCode</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{ <expr><name>OP_AddImm</name></expr>,      <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
        <expr><block>{ <expr><name>OP_If</name></expr>,          <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 1 */</comment>
        <expr><block>{ <expr><name>OP_String8</name></expr>,     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 2 */</comment>
        <expr><block>{ <expr><name>OP_ResultRow</name></expr>,   <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>,        <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 3 */</comment>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>VdbeOp</name> <modifier>*</modifier></type><name>aOp</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>aOp</name> <operator>=</operator> <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>endCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>endCode</name></expr></argument>, <argument><expr><name>iLn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>aOp</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p2</name> <operator>=</operator> <operator>-</operator><name>mxErr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p4type</name> <operator>=</operator> <name>P4_STATIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p4</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="string">"ok"</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_INTEGRITY_CHECK */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA encoding
  **   PRAGMA encoding = "utf-8"|"utf-16"|"utf-16le"|"utf-16be"
  **
  ** In its first form, this pragma returns the encoding of the main
  ** database. If the database is not initialized, it is initialized now.
  **
  ** The second form of this pragma is a no-op if the main database file
  ** has not already been initialized. In this case it sets the default
  ** encoding that will be used for the main database file if a new file
  ** is created. If an existing main database file is opened, then the
  ** default text encoding for the existing database is used.
  ** 
  ** In all cases new databases created using the ATTACH command are
  ** created to use the same default text encoding as the main database. If
  ** the main database has not been initialized and/or created when ATTACH
  ** is executed, this is done before the ATTACH operation.
  **
  ** In the second form this pragma sets the text encoding to be used in
  ** new database files created using this database handle. It is only
  ** useful if invoked immediately after the main database i
  */</comment>
  <case>case <expr><name>PragTyp_ENCODING</name></expr>:</case> <block>{<block_content>
    <struct><specifier>static</specifier> <specifier>const</specifier> struct <name>EncName</name> <block>{
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name></type> <name>enc</name></decl>;</decl_stmt>
    }</block> <decl><name><name>encnames</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><literal type="string">"UTF8"</literal></expr>,     <expr><name>SQLITE_UTF8</name></expr>        }</block></expr>,
      <expr><block>{ <expr><literal type="string">"UTF-8"</literal></expr>,    <expr><name>SQLITE_UTF8</name></expr>        }</block></expr>,  <comment type="block">/* Must be element [1] */</comment>
      <expr><block>{ <expr><literal type="string">"UTF-16le"</literal></expr>, <expr><name>SQLITE_UTF16LE</name></expr>     }</block></expr>,  <comment type="block">/* Must be element [2] */</comment>
      <expr><block>{ <expr><literal type="string">"UTF-16be"</literal></expr>, <expr><name>SQLITE_UTF16BE</name></expr>     }</block></expr>,  <comment type="block">/* Must be element [3] */</comment>
      <expr><block>{ <expr><literal type="string">"UTF16le"</literal></expr>,  <expr><name>SQLITE_UTF16LE</name></expr>     }</block></expr>,
      <expr><block>{ <expr><literal type="string">"UTF16be"</literal></expr>,  <expr><name>SQLITE_UTF16BE</name></expr>     }</block></expr>,
      <expr><block>{ <expr><literal type="string">"UTF-16"</literal></expr>,   <expr><literal type="number">0</literal></expr>                  }</block></expr>, <comment type="block">/* SQLITE_UTF16NATIVE */</comment>
      <expr><block>{ <expr><literal type="string">"UTF16"</literal></expr>,    <expr><literal type="number">0</literal></expr>                  }</block></expr>, <comment type="block">/* SQLITE_UTF16NATIVE */</comment>
      <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
    }</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>EncName</name></name> <modifier>*</modifier></type><name>pEnc</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>    <comment type="block">/* "PRAGMA encoding" */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>pragma_out</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>encnames</name><index>[<expr><name>SQLITE_UTF8</name></expr>]</index></name><operator>.</operator><name>enc</name><operator>==</operator><name>SQLITE_UTF8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>encnames</name><index>[<expr><name>SQLITE_UTF16LE</name></expr>]</index></name><operator>.</operator><name>enc</name><operator>==</operator><name>SQLITE_UTF16LE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>encnames</name><index>[<expr><name>SQLITE_UTF16BE</name></expr>]</index></name><operator>.</operator><name>enc</name><operator>==</operator><name>SQLITE_UTF16BE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>returnSingleText</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>, <argument><expr><name><name>encnames</name><index>[<expr><call><name>ENC</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>                        <comment type="block">/* "PRAGMA encoding = XXX" */</comment>
      <comment type="block">/* Only change the value of sqlite.enc if the database handle is not
      ** initialized. If the main database exists, the new sqlite.enc value
      ** will be overwritten when the schema is next loaded. If it does not
      ** already exists, it will be created to use the new encoding value.
      */</comment>
      <if_stmt><if>if<condition>( 
        <expr><operator>!</operator><operator>(</operator><call><name>DbHasProperty</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DB_SchemaLoaded</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> 
        <call><name>DbHasProperty</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DB_Empty</name></expr></argument>)</argument_list></call></expr> 
      )</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>pEnc</name><operator>=</operator><operator>&amp;</operator><name><name>encnames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>pEnc</name><operator>-&gt;</operator><name>zName</name></name></expr>;</condition> <incr><expr><name>pEnc</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name><name>pEnc</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>SCHEMA_ENC</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ENC</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>=</operator>
                <ternary><condition><expr><name><name>pEnc</name><operator>-&gt;</operator><name>enc</name></name></expr> ?</condition><then> <expr><name><name>pEnc</name><operator>-&gt;</operator><name>enc</name></name></expr> </then><else>: <expr><name>SQLITE_UTF16NATIVE</name></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pEnc</name><operator>-&gt;</operator><name>zName</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"unsupported encoding: %s"</literal></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA [schema.]schema_version
  **   PRAGMA [schema.]schema_version = &lt;integer&gt;
  **
  **   PRAGMA [schema.]user_version
  **   PRAGMA [schema.]user_version = &lt;integer&gt;
  **
  **   PRAGMA [schema.]freelist_count = &lt;integer&gt;
  **
  **   PRAGMA [schema.]application_id
  **   PRAGMA [schema.]application_id = &lt;integer&gt;
  **
  ** The pragma's schema_version and user_version are used to set or get
  ** the value of the schema-version and user-version, respectively. Both
  ** the schema-version and the user-version are 32-bit signed integers
  ** stored in the database header.
  **
  ** The schema-cookie is usually only manipulated internally by SQLite. It
  ** is incremented by SQLite whenever the database schema is modified (by
  ** creating or dropping a table or index). The schema version is used by
  ** SQLite each time a query is executed to ensure that the internal cache
  ** of the schema used when compiling the SQL query matches the schema of
  ** the database against which the compiled query is actually executed.
  ** Subverting this mechanism by using "PRAGMA schema_version" to modify
  ** the schema-version is potentially dangerous and may lead to program
  ** crashes or database corruption. Use with caution!
  **
  ** The user-version is not used internally by SQLite. It may be used by
  ** applications for any purpose.
  */</comment>
  <case>case <expr><name>PragTyp_HEADER_VALUE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iCookie</name> <init>= <expr><name><name>pPragma</name><operator>-&gt;</operator><name>iArg</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Which cookie to read or write */</comment>
    <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pPragma</name><operator>-&gt;</operator><name>mPragFlag</name></name> <operator>&amp;</operator> <name>PragFlag_ReadOnly</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* Write the specified cookie value */</comment>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdbeOpList</name></type> <name><name>setCookie</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{ <expr><name>OP_Transaction</name></expr>,    <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
        <expr><block>{ <expr><name>OP_SetCookie</name></expr>,      <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 1 */</comment>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>VdbeOp</name> <modifier>*</modifier></type><name>aOp</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeVerifyNoMallocRequired</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>setCookie</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>aOp</name> <operator>=</operator> <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>setCookie</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCookie</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ONLY_IF_REALLOC_STRESS</name><argument_list>(<argument><expr><name>aOp</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p2</name> <operator>=</operator> <name>iCookie</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p3</name> <operator>=</operator> <call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Read the specified cookie value */</comment>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdbeOpList</name></type> <name><name>readCookie</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{ <expr><name>OP_Transaction</name></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
        <expr><block>{ <expr><name>OP_ReadCookie</name></expr>,      <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>}</block></expr>,    <comment type="block">/* 1 */</comment>
        <expr><block>{ <expr><name>OP_ResultRow</name></expr>,       <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>}</block></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>VdbeOp</name> <modifier>*</modifier></type><name>aOp</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeVerifyNoMallocRequired</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>readCookie</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>aOp</name> <operator>=</operator> <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>readCookie</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>readCookie</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ONLY_IF_REALLOC_STRESS</name><argument_list>(<argument><expr><name>aOp</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p3</name> <operator>=</operator> <name>iCookie</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_COMPILEOPTION_DIAGS</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA compile_options
  **
  ** Return the names of all compile-time options used in this build,
  ** one option per row.
  */</comment>
  <case>case <expr><name>PragTyp_COMPILE_OPTIONS</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOpt</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOneColumnName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"compile_option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>zOpt</name> <operator>=</operator> <call><name>sqlite3_compileoption_get</name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_COMPILEOPTION_DIAGS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WAL</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA [schema.]wal_checkpoint = passive|full|restart|truncate
  **
  ** Checkpoint the database.
  */</comment>
  <case>case <expr><name>PragTyp_WAL_CHECKPOINT</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"busy"</literal></expr>, <expr><literal type="string">"log"</literal></expr>, <expr><literal type="string">"checkpointed"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iBt</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pId2</name><operator>-&gt;</operator><name>z</name></name></expr>?</condition><then><expr><name>iDb</name></expr></then><else>:<expr><name>SQLITE_MAX_ATTACHED</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eMode</name> <init>= <expr><name>SQLITE_CHECKPOINT_PASSIVE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>eMode</name> <operator>=</operator> <name>SQLITE_CHECKPOINT_FULL</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"restart"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>eMode</name> <operator>=</operator> <name>SQLITE_CHECKPOINT_RESTART</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"truncate"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>eMode</name> <operator>=</operator> <name>SQLITE_CHECKPOINT_TRUNCATE</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">3</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Checkpoint</name></expr></argument>, <argument><expr><name>iBt</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <break>break;</break>

  <comment type="block">/*
  **   PRAGMA wal_autocheckpoint
  **   PRAGMA wal_autocheckpoint = N
  **
  ** Configure a database connection to automatically checkpoint a database
  ** after accumulating N frames in the log. Or query for the current value
  ** of N.
  */</comment>
  <case>case <expr><name>PragTyp_WAL_AUTOCHECKPOINT</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_wal_autocheckpoint</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"wal_autocheckpoint"</literal></expr></argument>, 
       <argument><expr><ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>xWalCallback</name></name><operator>==</operator><name>sqlite3WalDefaultHook</name></expr> ?</condition><then> 
           <expr><call><name>SQLITE_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pWalArg</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/*
  **  PRAGMA shrink_memory
  **
  ** IMPLEMENTATION-OF: R-23445-46109 This pragma causes the database
  ** connection on which it is invoked to free up as much memory as it
  ** can, by calling sqlite3_db_release_memory().
  */</comment>
  <case>case <expr><name>PragTyp_SHRINK_MEMORY</name></expr>:</case> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_db_release_memory</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **   PRAGMA busy_timeout
  **   PRAGMA busy_timeout = N
  **
  ** Call sqlite3_busy_timeout(db, N).  Return the current timeout value
  ** if one is set.  If no busy handler or a different busy handler is set
  ** then 0 is returned.  Setting the busy_timeout to 0 or negative
  ** disables the timeout.
  */</comment>
  <comment type="block">/*case PragTyp_BUSY_TIMEOUT*/</comment> <default>default:</default> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pPragma</name><operator>-&gt;</operator><name>ePragTyp</name></name><operator>==</operator><name>PragTyp_BUSY_TIMEOUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_busy_timeout</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"timeout"</literal></expr></argument>,  <argument><expr><name><name>db</name><operator>-&gt;</operator><name>busyTimeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **   PRAGMA soft_heap_limit
  **   PRAGMA soft_heap_limit = N
  **
  ** IMPLEMENTATION-OF: R-26343-45930 This pragma invokes the
  ** sqlite3_soft_heap_limit64() interface with the argument N, if N is
  ** specified and is a non-negative integer.
  ** IMPLEMENTATION-OF: R-64451-07163 The soft_heap_limit pragma always
  ** returns the same integer that would be returned by the
  ** sqlite3_soft_heap_limit64(-1) C-language function.
  */</comment>
  <case>case <expr><name>PragTyp_SOFT_HEAP_LIMIT</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>N</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name> <operator>&amp;&amp;</operator> <call><name>sqlite3DecOrHexToI64</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_soft_heap_limit64</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"soft_heap_limit"</literal></expr></argument>,  <argument><expr><call><name>sqlite3_soft_heap_limit64</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **   PRAGMA threads
  **   PRAGMA threads = N
  **
  ** Configure the maximum number of worker threads.  Return the new
  ** maximum, which might be less than requested.
  */</comment>
  <case>case <expr><name>PragTyp_THREADS</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>N</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRight</name>
     <operator>&amp;&amp;</operator> <call><name>sqlite3DecOrHexToI64</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name>
     <operator>&amp;&amp;</operator> <name>N</name><operator>&gt;=</operator><literal type="number">0</literal></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_LIMIT_WORKER_THREADS</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>N</name><operator>&amp;</operator><literal type="number">0x7fffffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>,
                    <argument><expr><call><name>sqlite3_limit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_LIMIT_WORKER_THREADS</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_DEBUG</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*
  ** Report the current state of file logs for all databases
  */</comment>
  <case>case <expr><name>PragTyp_LOCK_STATUS</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>azLockName</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="string">"unlocked"</literal></expr>, <expr><literal type="string">"shared"</literal></expr>, <expr><literal type="string">"reserved"</literal></expr>, <expr><literal type="string">"pending"</literal></expr>, <expr><literal type="string">"exclusive"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCol</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"database"</literal></expr>, <expr><literal type="string">"status"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setAllColumnNames</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zState</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>pBt</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pBt</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zState</name> <operator>=</operator> <literal type="string">"closed"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, 
                                     <argument><expr><name>SQLITE_FCNTL_LOCKSTATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
         <expr_stmt><expr><name>zState</name> <operator>=</operator> <name><name>azLockName</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeMultiLoad</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ss"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><name>zState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <case>case <expr><name>PragTyp_KEY</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_key_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block>
  <case>case <expr><name>PragTyp_REKEY</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_rekey_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block>
  <case>case <expr><name>PragTyp_HEXKEY</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u8</name></type> <name>iByte</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>zKey</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>iByte</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3Isxdigit</name><argument_list>(<argument><expr><name><name>zRight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>iByte</name> <operator>=</operator> <operator>(</operator><name>iByte</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>sqlite3HexToInt</name><argument_list>(<argument><expr><name><name>zRight</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zKey</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>iByte</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>zLeft</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator><operator>==</operator><literal type="number">0xb</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_key_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_rekey_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_HAS_CODEC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_CEROD</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <case>case <expr><name>PragTyp_ACTIVATE_EXTENSIONS</name></expr>:</case> <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"see-"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_activate_see</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zRight</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_CEROD</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"cerod-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_activate_cerod</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zRight</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  </block_content>}</block></switch> <comment type="block">/* End of the PRAGMA switch */</comment>

<label><name>pragma_out</name>:</label>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_PRAGMA */</comment>
</unit>
