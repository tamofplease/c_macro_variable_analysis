<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/analyze.c"><comment type="block">/*
** 2005-07-08
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code associated with the ANALYZE command.
**
** The ANALYZE command gather statistics about the content of tables
** and indices.  These statistics are made available to the query planner
** to help it make better decisions about how to perform queries.
**
** The following system tables are or have been supported:
**
**    CREATE TABLE sqlite_stat1(tbl, idx, stat);
**    CREATE TABLE sqlite_stat2(tbl, idx, sampleno, sample);
**    CREATE TABLE sqlite_stat3(tbl, idx, nEq, nLt, nDLt, sample);
**    CREATE TABLE sqlite_stat4(tbl, idx, nEq, nLt, nDLt, sample);
**
** Additional tables might be added in future releases of SQLite.
** The sqlite_stat2 table is not created or used unless the SQLite version
** is between 3.6.18 and 3.7.8, inclusive, and unless SQLite is compiled
** with SQLITE_ENABLE_STAT2.  The sqlite_stat2 table is deprecated.
** The sqlite_stat2 table is superseded by sqlite_stat3, which is only
** created and used by SQLite versions 3.7.9 and later and with
** SQLITE_ENABLE_STAT3 defined.  The functionality of sqlite_stat3
** is a superset of sqlite_stat2.  The sqlite_stat4 is an enhanced
** version of sqlite_stat3 and is only available when compiled with
** SQLITE_ENABLE_STAT4 and in SQLite versions 3.8.1 and later.  It is
** not possible to enable both STAT3 and STAT4 at the same time.  If they
** are both enabled, then STAT4 takes precedence.
**
** For most applications, sqlite_stat1 provides all the statistics required
** for the query planner to make good choices.
**
** Format of sqlite_stat1:
**
** There is normally one row per index, with the index identified by the
** name in the idx column.  The tbl column is the name of the table to
** which the index belongs.  In each such row, the stat column will be
** a string consisting of a list of integers.  The first integer in this
** list is the number of rows in the index.  (This is the same as the
** number of rows in the table, except for partial indices.)  The second
** integer is the average number of rows in the index that have the same
** value in the first column of the index.  The third integer is the average
** number of rows in the index that have the same value for the first two
** columns.  The N-th integer (for N&gt;1) is the average number of rows in 
** the index which have the same value for the first N-1 columns.  For
** a K-column index, there will be K+1 integers in the stat column.  If
** the index is unique, then the last integer will be 1.
**
** The list of integers in the stat column can optionally be followed
** by the keyword "unordered".  The "unordered" keyword, if it is present,
** must be separated from the last integer by a single space.  If the
** "unordered" keyword is present, then the query planner assumes that
** the index is unordered and will not use the index for a range query.
** 
** If the sqlite_stat1.idx column is NULL, then the sqlite_stat1.stat
** column contains a single integer which is the (estimated) number of
** rows in the table identified by sqlite_stat1.tbl.
**
** Format of sqlite_stat2:
**
** The sqlite_stat2 is only created and is only used if SQLite is compiled
** with SQLITE_ENABLE_STAT2 and if the SQLite version number is between
** 3.6.18 and 3.7.8.  The "stat2" table contains additional information
** about the distribution of keys within an index.  The index is identified by
** the "idx" column and the "tbl" column is the name of the table to which
** the index belongs.  There are usually 10 rows in the sqlite_stat2
** table for each index.
**
** The sqlite_stat2 entries for an index that have sampleno between 0 and 9
** inclusive are samples of the left-most key value in the index taken at
** evenly spaced points along the index.  Let the number of samples be S
** (10 in the standard build) and let C be the number of rows in the index.
** Then the sampled rows are given by:
**
**     rownumber = (i*C*2 + C)/(S*2)
**
** For i between 0 and S-1.  Conceptually, the index space is divided into
** S uniform buckets and the samples are the middle row from each bucket.
**
** The format for sqlite_stat2 is recorded here for legacy reference.  This
** version of SQLite does not support sqlite_stat2.  It neither reads nor
** writes the sqlite_stat2 table.  This version of SQLite only supports
** sqlite_stat3.
**
** Format for sqlite_stat3:
**
** The sqlite_stat3 format is a subset of sqlite_stat4.  Hence, the
** sqlite_stat4 format will be described first.  Further information
** about sqlite_stat3 follows the sqlite_stat4 description.
**
** Format for sqlite_stat4:
**
** As with sqlite_stat2, the sqlite_stat4 table contains histogram data
** to aid the query planner in choosing good indices based on the values
** that indexed columns are compared against in the WHERE clauses of
** queries.
**
** The sqlite_stat4 table contains multiple entries for each index.
** The idx column names the index and the tbl column is the table of the
** index.  If the idx and tbl columns are the same, then the sample is
** of the INTEGER PRIMARY KEY.  The sample column is a blob which is the
** binary encoding of a key from the index.  The nEq column is a
** list of integers.  The first integer is the approximate number
** of entries in the index whose left-most column exactly matches
** the left-most column of the sample.  The second integer in nEq
** is the approximate number of entries in the index where the
** first two columns match the first two columns of the sample.
** And so forth.  nLt is another list of integers that show the approximate
** number of entries that are strictly less than the sample.  The first
** integer in nLt contains the number of entries in the index where the
** left-most column is less than the left-most column of the sample.
** The K-th integer in the nLt entry is the number of index entries 
** where the first K columns are less than the first K columns of the
** sample.  The nDLt column is like nLt except that it contains the 
** number of distinct entries in the index that are less than the
** sample.
**
** There can be an arbitrary number of sqlite_stat4 entries per index.
** The ANALYZE command will typically generate sqlite_stat4 tables
** that contain between 10 and 40 samples which are distributed across
** the key space, though not uniformly, and which include samples with
** large nEq values.
**
** Format for sqlite_stat3 redux:
**
** The sqlite_stat3 table is like sqlite_stat4 except that it only
** looks at the left-most column of the index.  The sqlite_stat3.sample
** column contains the actual value of the left-most column instead
** of a blob encoding of the complete index key as is found in
** sqlite_stat4.sample.  The nEq, nLt, and nDLt entries of sqlite_stat3
** all contain just a single integer which is the same as the first
** integer in the equivalent columns in sqlite_stat4.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_ANALYZE</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_STAT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>IsStat4</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>IsStat3</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_STAT3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>IsStat4</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>IsStat3</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>IsStat4</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>IsStat3</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>SQLITE_STAT4_SAMPLES</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_STAT4_SAMPLES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsStat34</name></cpp:macro>    <cpp:value>(IsStat3+IsStat4)</cpp:value></cpp:define>  <comment type="block">/* 1 for STAT3 or STAT4. 0 otherwise */</comment>

<comment type="block">/*
** This routine generates code that opens the sqlite_statN tables.
** The sqlite_stat1 table is always relevant.  sqlite_stat2 is now
** obsolete.  sqlite_stat3 and sqlite_stat4 are only opened when
** appropriate compile-time options are provided.
**
** If the sqlite_statN tables do not previously exist, it is created.
**
** Argument zWhere may be a pointer to a buffer containing a table name,
** or it may be a NULL pointer. If it is not NULL, then all entries in
** the sqlite_statN tables associated with the named table are deleted.
** If zWhere==0, then code is generated to delete all stat table entries.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>openStatTable</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,          <comment type="block">/* Parsing context */</comment>
  <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>,                <comment type="block">/* The database we are looking in */</comment>
  <parameter><decl><type><name>int</name></type> <name>iStatCur</name></decl></parameter>,           <comment type="block">/* Open the sqlite_stat1 table on this cursor */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWhere</name></decl></parameter>,     <comment type="block">/* Delete entries for this table or index */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWhereType</name></decl></parameter>  <comment type="block">/* Either "tbl" or "idx" */</comment>
)</parameter_list><block>{<block_content>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCols</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aTable</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"sqlite_stat1"</literal></expr>, <expr><literal type="string">"tbl,idx,stat"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_STAT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><literal type="string">"sqlite_stat4"</literal></expr>, <expr><literal type="string">"tbl,idx,neq,nlt,ndlt,sample"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sqlite_stat3"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_STAT3</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr><block>{ <expr><literal type="string">"sqlite_stat3"</literal></expr>, <expr><literal type="string">"tbl,idx,neq,nlt,ndlt,sample"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sqlite_stat4"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><block>{ <expr><literal type="string">"sqlite_stat3"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sqlite_stat4"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>aRoot</name><index>[<expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>aCreateTbl</name><index>[<expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeHoldsAllMutexes</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3VdbeDb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>==</operator><name>db</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Create new statistic tables if they do not exist, or clear them
  ** if they do already exist.
  */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTab</name> <init>= <expr><name><name>aTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pStat</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>pStat</name> <operator>=</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zTab</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>aTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zCols</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* The sqlite_statN table does not exist. Create it. Note that a 
        ** side-effect of the CREATE TABLE statement is to leave the rootpage 
        ** of the new table in register pParse-&gt;regRoot. This is important 
        ** because the OpenWrite opcode below will be needing it. */</comment>
        <expr_stmt><expr><call><name>sqlite3NestedParse</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,
            <argument><expr><literal type="string">"CREATE TABLE %Q.%s(%s)"</literal></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zTab</name></expr></argument>, <argument><expr><name><name>aTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zCols</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aRoot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>regRoot</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aCreateTbl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>OPFLAG_P2ISREG</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* The table already exists. If zWhere is not NULL, delete all entries 
      ** associated with the table zWhere. If zWhere is NULL, delete the
      ** entire contents of the table. */</comment>
      <expr_stmt><expr><name><name>aRoot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pStat</name><operator>-&gt;</operator><name>tnum</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aCreateTbl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TableLock</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name><name>aRoot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zWhere</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3NestedParse</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,
           <argument><expr><literal type="string">"DELETE FROM %Q.%s WHERE %s=%Q"</literal></expr></argument>,
           <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zTab</name></expr></argument>, <argument><expr><name>zWhereType</name></expr></argument>, <argument><expr><name>zWhere</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/* The sqlite_stat[134] table already exists.  Delete all rows. */</comment>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Clear</name></expr></argument>, <argument><expr><name><name>aRoot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Open the sqlite_stat[134] tables for writing. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>aTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTable</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4Int</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_OpenWrite</name></expr></argument>, <argument><expr><name>iStatCur</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>aRoot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>aCreateTbl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <name><name>aTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Recommended number of samples for sqlite_stat4
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_STAT4_SAMPLES</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_STAT4_SAMPLES</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Three SQL functions - stat_init(), stat_push(), and stat_get() -
** share an instance of the following structure to hold their state
** information.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Stat4Accum</name></name></type> <name>Stat4Accum</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Stat4Sample</name></name></type> <name>Stat4Sample</name>;</typedef>
<struct>struct <name>Stat4Sample</name> <block>{
  <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>anEq</name></decl>;</decl_stmt>                  <comment type="block">/* sqlite_stat4.nEq */</comment>
  <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>anDLt</name></decl>;</decl_stmt>                 <comment type="block">/* sqlite_stat4.nDLt */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>anLt</name></decl>;</decl_stmt>                  <comment type="block">/* sqlite_stat4.nLt */</comment>
  <union>union <block>{
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Rowid in main table of the key */</comment>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Key for WITHOUT ROWID tables */</comment>
  }</block> <decl><name>u</name></decl>;</union>
  <decl_stmt><decl><type><name>u32</name></type> <name>nRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Sizeof aRowid[] */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>isPSample</name></decl>;</decl_stmt>                   <comment type="block">/* True if a periodic sample */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>                       <comment type="block">/* If !isPSample, the reason for inclusion */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iHash</name></decl>;</decl_stmt>                      <comment type="block">/* Tiebreaker hash */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>                                                    
<struct>struct <name>Stat4Accum</name> <block>{
  <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nRow</name></decl>;</decl_stmt>             <comment type="block">/* Number of rows in the entire table */</comment>
  <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nPSample</name></decl>;</decl_stmt>         <comment type="block">/* How often to do a periodic sample */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                 <comment type="block">/* Number of columns in index + pk/rowid */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nKeyCol</name></decl>;</decl_stmt>              <comment type="block">/* Number of index columns w/o the pk/rowid */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mxSample</name></decl>;</decl_stmt>             <comment type="block">/* Maximum number of samples to accumulate */</comment>
  <decl_stmt><decl><type><name>Stat4Sample</name></type> <name>current</name></decl>;</decl_stmt>      <comment type="block">/* Current row as a Stat4Sample */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iPrn</name></decl>;</decl_stmt>                 <comment type="block">/* Pseudo-random number used for sampling */</comment>
  <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>aBest</name></decl>;</decl_stmt>       <comment type="block">/* Array of nCol best samples */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iMin</name></decl>;</decl_stmt>                 <comment type="block">/* Index in a[] of entry with minimum score */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSample</name></decl>;</decl_stmt>              <comment type="block">/* Current number of samples */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iGet</name></decl>;</decl_stmt>                 <comment type="block">/* Index of current sample accessed by stat_get() */</comment>
  <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>           <comment type="block">/* Array of mxSample Stat4Sample objects */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>              <comment type="block">/* Database connection, for malloc() */</comment>
}</block>;</struct>

<comment type="block">/* Reclaim memory used by a Stat4Sample
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sampleClear</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRowid</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRowid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Initialize the BLOB value of a ROWID
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sampleSetRowid</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRowid</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name> <operator>=</operator> <call><name>sqlite3DbMallocRawNN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRowid</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRowid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Initialize the INTEGER value of a ROWID.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sampleSetRowidInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRowid</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRowid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>iRowid</name></name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Copy the contents of object (*pFrom) into (*pTo).
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sampleCopy</name><parameter_list>(<parameter><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pTo</name></decl></parameter>, <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>isPSample</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>isPSample</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>iCol</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>iHash</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>iHash</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTo</name><operator>-&gt;</operator><name>anEq</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>anEq</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTo</name><operator>-&gt;</operator><name>anLt</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>anLt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTo</name><operator>-&gt;</operator><name>anDLt</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>anDLt</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFrom</name><operator>-&gt;</operator><name>nRowid</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sampleSetRowid</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pTo</name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>nRowid</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sampleSetRowidInt64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pTo</name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Reclaim all memory of a Stat4Accum structure.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stat4Destructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Stat4Accum</name><operator>*</operator><operator>)</operator><name>pOld</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sampleClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aBest</name></name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sampleClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>sampleClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the stat_init(N,K,C) SQL function. The three parameters
** are:
**     N:    The number of columns in the index including the rowid/pk (note 1)
**     K:    The number of columns in the index excluding the rowid/pk.
**     C:    The number of rows in the index (note 2)
**
** Note 1:  In the special case of the covering index that implements a
** WITHOUT ROWID table, N is the number of PRIMARY KEY columns, not the
** total number of columns in the table.
**
** Note 2:  C is only used for STAT3 and STAT4.
**
** For indexes on ordinary rowid tables, N==K+1.  But for indexes on
** WITHOUT ROWID tables, N=K+P where P is the number of columns in the
** PRIMARY KEY of the table.  The covering index that implements the
** original WITHOUT ROWID table as N==K as a special case.
**
** This routine allocates the Stat4Accum object in heap memory. The return 
** value is a pointer to the Stat4Accum object.  The datatype of the
** return value is BLOB, but it is really just a pointer to the Stat4Accum
** object.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>statInit</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                       <comment type="block">/* Number of columns in index being sampled */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nKeyCol</name></decl>;</decl_stmt>                    <comment type="block">/* Number of key columns */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nColUp</name></decl>;</decl_stmt>                     <comment type="block">/* nCol rounded up for alignment */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                          <comment type="block">/* Bytes of space to allocate */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                    <comment type="block">/* Database connection */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>mxSample</name> <init>= <expr><name>SQLITE_STAT4_SAMPLES</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Decode the three function arguments */</comment>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nCol</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nColUp</name> <operator>=</operator> <ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>&lt;</operator><literal type="number">8</literal></expr> ?</condition><then> <expr><operator>(</operator><name>nCol</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>nCol</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>nKeyCol</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nKeyCol</name><operator>&lt;=</operator><name>nCol</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nKeyCol</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate the space required for the Stat4Accum object */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> 
    <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nColUp</name>                  <comment type="block">/* Stat4Accum.anEq */</comment>
    <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nColUp</name>                  <comment type="block">/* Stat4Accum.anDLt */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
    <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nColUp</name>                  <comment type="block">/* Stat4Accum.anLt */</comment>
    <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Stat4Sample</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>nCol</name><operator>+</operator><name>mxSample</name><operator>)</operator>     <comment type="block">/* Stat4Accum.aBest[], a[] */</comment>
    <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>nColUp</name><operator>*</operator><operator>(</operator><name>nCol</name><operator>+</operator><name>mxSample</name><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  ;</expr_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <name>nCol</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nKeyCol</name></name> <operator>=</operator> <name>nKeyCol</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anDLt</name></name> <operator>=</operator> <operator>(</operator><name>tRowcnt</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anDLt</name><index>[<expr><name>nColUp</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pSpace</name></decl>;</decl_stmt>                     <comment type="block">/* Allocated space not yet assigned */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Used to iterate through p-&gt;aSample[] */</comment>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name> <operator>=</operator> <name>mxSample</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPSample</name></name> <operator>=</operator> <operator>(</operator><name>tRowcnt</name><operator>)</operator><operator>(</operator><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><name>mxSample</name><operator>/</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anLt</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>nColUp</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iPrn</name></name> <operator>=</operator> <literal type="number">0x689e962d</literal><operator>*</operator><operator>(</operator><name>u32</name><operator>)</operator><name>nCol</name> <operator>^</operator> <literal type="number">0xd0944565</literal><operator>*</operator><operator>(</operator><name>u32</name><operator>)</operator><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block">/* Set up the Stat4Accum.a[] and aBest[] arrays */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <operator>(</operator>struct <name>Stat4Sample</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anLt</name><index>[<expr><name>nColUp</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aBest</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>mxSample</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSpace</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>mxSample</name><operator>+</operator><name>nCol</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>mxSample</name><operator>+</operator><name>nCol</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>anEq</name> <operator>=</operator> <operator>(</operator><name>tRowcnt</name> <operator>*</operator><operator>)</operator><name>pSpace</name></expr>;</expr_stmt> <expr_stmt><expr><name>pSpace</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nColUp</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>anLt</name> <operator>=</operator> <operator>(</operator><name>tRowcnt</name> <operator>*</operator><operator>)</operator><name>pSpace</name></expr>;</expr_stmt> <expr_stmt><expr><name>pSpace</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nColUp</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>anDLt</name> <operator>=</operator> <operator>(</operator><name>tRowcnt</name> <operator>*</operator><operator>)</operator><name>pSpace</name></expr>;</expr_stmt> <expr_stmt><expr><name>pSpace</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nColUp</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>pSpace</name> <operator>-</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>==</operator><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aBest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iCol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Return a pointer to the allocated object to the caller.  Note that
  ** only the pointer (the 2nd parameter) matters.  The size of the object
  ** (given by the 3rd parameter) is never used and can be any positive
  ** value. */</comment>
  <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stat4Destructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FuncDef</name></type> <name>statInitFuncdef</name> <init>= <expr><block>{
  <expr><literal type="number">2</literal><operator>+</operator><name>IsStat34</name></expr>,      <comment type="block">/* nArg */</comment>
  <expr><name>SQLITE_UTF8</name></expr>,     <comment type="block">/* funcFlags */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pUserData */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pNext */</comment>
  <expr><name>statInit</name></expr>,        <comment type="block">/* xSFunc */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* xFinalize */</comment>
  <expr><literal type="string">"stat_init"</literal></expr>,     <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pHash */</comment>
  <expr><literal type="number">0</literal></expr>                <comment type="block">/* pDestructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT4</name></cpp:ifdef>
<comment type="block">/*
** pNew and pOld are both candidate non-periodic samples selected for 
** the same column (pNew-&gt;iCol==pOld-&gt;iCol). Ignoring this column and 
** considering only any trailing columns and the sample hash value, this
** function returns true if sample pNew is to be preferred over pOld.
** In other words, if we assume that the cardinalities of the selected
** column for pNew and pOld are equal, is pNew to be preferred over pOld.
**
** This function assumes that for each argument sample, the contents of
** the anEq[] array from pSample-&gt;anEq[pSample-&gt;iCol+1] onwards are valid. 
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sampleIsBetterPost</name><parameter_list>(
  <parameter><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>pAccum</name></decl></parameter>, 
  <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, 
  <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>pAccum</name><operator>-&gt;</operator><name>nCol</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name><operator>==</operator><name><name>pOld</name><operator>-&gt;</operator><name>iCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>pOld</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>pOld</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>iHash</name></name><operator>&gt;</operator><name><name>pOld</name><operator>-&gt;</operator><name>iHash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
<comment type="block">/*
** Return true if pNew is to be preferred over pOld.
**
** This function assumes that for each argument sample, the contents of
** the anEq[] array from pSample-&gt;anEq[pSample-&gt;iCol] onwards are valid. 
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sampleIsBetter</name><parameter_list>(
  <parameter><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>pAccum</name></decl></parameter>, 
  <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, 
  <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nEqNew</name> <init>= <expr><name><name>pNew</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nEqOld</name> <init>= <expr><name><name>pOld</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name><name>pOld</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>isPSample</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>isPSample</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>IsStat4</name> <operator>||</operator> <operator>(</operator><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pOld</name><operator>-&gt;</operator><name>iCol</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nEqNew</name><operator>&gt;</operator><name>nEqOld</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT4</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>nEqNew</name><operator>==</operator><name>nEqOld</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name><operator>&lt;</operator><name><name>pOld</name><operator>-&gt;</operator><name>iCol</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name><operator>==</operator><name><name>pOld</name><operator>-&gt;</operator><name>iCol</name></name> <operator>&amp;&amp;</operator> <call><name>sampleIsBetterPost</name><argument_list>(<argument><expr><name>pAccum</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>nEqNew</name><operator>==</operator><name>nEqOld</name> <operator>&amp;&amp;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>iHash</name></name><operator>&gt;</operator><name><name>pOld</name><operator>-&gt;</operator><name>iHash</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** Copy the contents of sample *pNew into the p-&gt;a[] array. If necessary,
** remove the least desirable sample from p-&gt;a[] to make room.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sampleInsert</name><parameter_list>(<parameter><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nEqZero</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pSample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>IsStat4</name> <operator>||</operator> <name>nEqZero</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT4</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>isPSample</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pUpgrade</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* This sample is being added because the prefix that ends in column 
    ** iCol occurs many times in the table. However, if we have already
    ** added a sample that shares this prefix, there is no need to add
    ** this one. Instead, upgrade the priority of the highest priority
    ** existing sample that shares this prefix.  */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pOld</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pOld</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pOld</name><operator>-&gt;</operator><name>isPSample</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pOld</name><operator>-&gt;</operator><name>iCol</name></name><operator>&gt;</operator><name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sampleIsBetter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pUpgrade</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>sampleIsBetter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pOld</name></expr></argument>, <argument><expr><name>pUpgrade</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>pUpgrade</name> <operator>=</operator> <name>pOld</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>pUpgrade</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pUpgrade</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>iCol</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pUpgrade</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name><name>pUpgrade</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name><name>pUpgrade</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr>;</expr_stmt>
      <goto>goto <name>find_new_min</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* If necessary, remove sample iMin to make room for the new sample. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pMin</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iMin</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>anEq</name> <init>= <expr><name><name>pMin</name><operator>-&gt;</operator><name>anEq</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>anLt</name> <init>= <expr><name><name>pMin</name><operator>-&gt;</operator><name>anLt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>anDLt</name> <init>= <expr><name><name>pMin</name><operator>-&gt;</operator><name>anDLt</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sampleClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>pMin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>iMin</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSample</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSample</name><operator>-&gt;</operator><name>nRowid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSample</name><operator>-&gt;</operator><name>anEq</name></name> <operator>=</operator> <name>anEq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSample</name><operator>-&gt;</operator><name>anDLt</name></name> <operator>=</operator> <name>anDLt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSample</name><operator>-&gt;</operator><name>anLt</name></name> <operator>=</operator> <name>anLt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* The "rows less-than" for the rowid column must be greater than that
  ** for the last sample in the p-&gt;a[] array. Otherwise, the samples would
  ** be out of order. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT4</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>==</operator><literal type="number">0</literal> 
       <operator>||</operator> <name><name>pNew</name><operator>-&gt;</operator><name>anLt</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>anLt</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Insert the new sample */</comment>
  <expr_stmt><expr><name>pSample</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sampleCopy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSample</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>++</operator></expr>;</expr_stmt>

  <comment type="block">/* Zero the first nEqZero entries in the anEq[] array. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pSample</name><operator>-&gt;</operator><name>anEq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nEqZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT4</name></cpp:ifdef>
 <label><name>find_new_min</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iMin</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPSample</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iMin</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <call><name>sampleIsBetter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>iMin</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iMin</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iMin</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iMin</name></name> <operator>=</operator> <name>iMin</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_STAT3_OR_STAT4 */</comment>

<comment type="block">/*
** Field iChng of the index being scanned has changed. So at this point
** p-&gt;current contains a sample that reflects the previous row of the
** index. The value of anEq[iChng] and subsequent anEq[] elements are
** correct at this point.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>samplePushPrevious</name><parameter_list>(<parameter><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iChng</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT4</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Check if any samples from the aBest[] array should be pushed
  ** into IndexSample.a[] at this point.  */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><name>iChng</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pBest</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aBest</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pBest</name><operator>-&gt;</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name> <operator>||</operator> <call><name>sampleIsBetter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pBest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iMin</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sampleInsert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pBest</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Update the anEq[] fields of any samples already collected. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>iChng</name></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>anEq</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>anEq</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_STAT3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_STAT4</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>iChng</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nLt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anLt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nEq</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check if this is to be a periodic sample. If so, add it. */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nLt</name><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>nPSample</name></name><operator>)</operator><operator>!=</operator><operator>(</operator><name>nLt</name><operator>+</operator><name>nEq</name><operator>)</operator><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>nPSample</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isPSample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sampleInsert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isPSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else 

    <comment type="block">/* Or if it is a non-periodic sample. Add it in this case too. */</comment>
    if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>mxSample</name></name> 
     <operator>||</operator> <call><name>sampleIsBetter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iMin</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sampleInsert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifndef>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>( <argument><expr><name>iChng</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the stat_push SQL function:  stat_push(P,C,R)
** Arguments:
**
**    P     Pointer to the Stat4Accum object created by stat_init()
**    C     Index of left-most column to differ from previous row
**    R     Rowid for the current row.  Might be a key record for
**          WITHOUT ROWID tables.
**
** This SQL function always returns NULL.  It's purpose it to accumulate
** statistical data and/or samples in the Stat4Accum object about the
** index being analyzed.  The stat_get() SQL function will later be used to
** extract relevant information for constructing the sqlite_statN tables.
**
** The R parameter is only used for STAT3 and STAT4
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>statPush</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* The three function arguments */</comment>
  <decl_stmt><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Stat4Accum</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iChng</name> <init>= <expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>( <argument><expr><name>argc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>( <argument><expr><name>context</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iChng</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* This is the first call to this function. Do initialization. */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Second and subsequent calls get processed here */</comment>
    <expr_stmt><expr><call><name>samplePushPrevious</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iChng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update anDLt[], anLt[] and anEq[] to reflect the values that apply
    ** to the current row of the index. */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>iChng</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>iChng</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anDLt</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anLt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_INTEGER</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sampleSetRowidInt64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sampleSetRowid</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>iHash</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iPrn</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iPrn</name></name><operator>*</operator><literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT4</name></cpp:ifdef>
  <block>{<block_content>
    <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nLt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anLt</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check if this is to be a periodic sample. If so, add it. */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nLt</name><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>nPSample</name></name><operator>)</operator><operator>!=</operator><operator>(</operator><name>nLt</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>nPSample</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isPSample</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>iCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sampleInsert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isPSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Update the aBest[] array. */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>iCol</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>iChng</name> <operator>||</operator> <call><name>sampleIsBetterPost</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aBest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sampleCopy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aBest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FuncDef</name></type> <name>statPushFuncdef</name> <init>= <expr><block>{
  <expr><literal type="number">2</literal><operator>+</operator><name>IsStat34</name></expr>,      <comment type="block">/* nArg */</comment>
  <expr><name>SQLITE_UTF8</name></expr>,     <comment type="block">/* funcFlags */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pUserData */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pNext */</comment>
  <expr><name>statPush</name></expr>,        <comment type="block">/* xSFunc */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* xFinalize */</comment>
  <expr><literal type="string">"stat_push"</literal></expr>,     <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pHash */</comment>
  <expr><literal type="number">0</literal></expr>                <comment type="block">/* pDestructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_GET_STAT1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>          <comment type="block">/* "stat" column of stat1 table */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_GET_ROWID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>          <comment type="block">/* "rowid" column of stat[34] entry */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_GET_NEQ</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>          <comment type="block">/* "neq" column of stat[34] entry */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_GET_NLT</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>          <comment type="block">/* "nlt" column of stat[34] entry */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAT_GET_NDLT</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>          <comment type="block">/* "ndlt" column of stat[34] entry */</comment>

<comment type="block">/*
** Implementation of the stat_get(P,J) SQL function.  This routine is
** used to query statistical information that has been gathered into
** the Stat4Accum object by prior calls to stat_push().  The P parameter
** has type BLOB but it is really just a pointer to the Stat4Accum object.
** The content to returned is determined by the parameter J
** which is one of the STAT_GET_xxxx values defined above.
**
** If neither STAT3 nor STAT4 are enabled, then J is always
** STAT_GET_STAT1 and is hence omitted and this routine becomes
** a one-parameter function, stat_get(P), that always returns the
** stat1 table entry information.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>statGet</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Stat4Accum</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Stat4Accum</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <comment type="block">/* STAT3 and STAT4 have a parameter on this routine. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eCall</name> <init>= <expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eCall</name><operator>==</operator><name>STAT_GET_STAT1</name> <operator>||</operator> <name>eCall</name><operator>==</operator><name>STAT_GET_NEQ</name> 
       <operator>||</operator> <name>eCall</name><operator>==</operator><name>STAT_GET_ROWID</name> <operator>||</operator> <name>eCall</name><operator>==</operator><name>STAT_GET_NLT</name>
       <operator>||</operator> <name>eCall</name><operator>==</operator><name>STAT_GET_NDLT</name></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eCall</name><operator>==</operator><name>STAT_GET_STAT1</name></expr> )</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <comment type="block">/* Return the value to store in the "stat" column of the sqlite_stat1
    ** table for this index.
    **
    ** The value is a string composed of a list of integers describing 
    ** the index. The first integer in the list is the total number of 
    ** entries in the index. There is one additional integer in the list 
    ** for each indexed column. This additional integer is an estimate of
    ** the number of rows matched by a stabbing query on the index using
    ** a key with the corresponding number of fields. In other words,
    ** if the index is on columns (a,b) and the sqlite_stat1 value is 
    ** "100 10 2", then SQLite estimates that:
    **
    **   * the index contains 100 rows,
    **   * "WHERE a=?" matches 10 rows, and
    **   * "WHERE a=? AND b=?" matches 2 rows.
    **
    ** If D is the count of distinct values and K is the total number of 
    ** rows, then each estimate is computed as:
    **
    **        I = (K+D-1)/D
    */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><call><name>sqlite3MallocZero</name><argument_list>( <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nKeyCol</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">25</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>zRet</name></expr></argument>, <argument><expr><literal type="string">"%llu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>zRet</name> <operator>+</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>u64</name></type> <name>nDistinct</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anDLt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u64</name></type> <name>iVal</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name> <operator>+</operator> <name>nDistinct</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nDistinct</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">" %llu"</literal></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>z</name> <operator>+=</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>anEq</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>z</name><operator>&gt;</operator><name>zRet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zRet</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <if_stmt><if type="elseif">else if<condition>( <expr><name>eCall</name><operator>==</operator><name>STAT_GET_ROWID</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>samplePushPrevious</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Stat4Sample</name> <modifier>*</modifier></type><name>pS</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>iGet</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pS</name><operator>-&gt;</operator><name>nRowid</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>pS</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>pS</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>aRowid</name></name></expr></argument>, <argument><expr><name><name>pS</name><operator>-&gt;</operator><name>nRowid</name></name></expr></argument>,
                            <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>aCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nSample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>( <expr><name>eCall</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>STAT_GET_NEQ</name></expr>:</case>  <expr_stmt><expr><name>aCnt</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name></expr>]</index></name><operator>.</operator><name>anEq</name></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>STAT_GET_NLT</name></expr>:</case>  <expr_stmt><expr><name>aCnt</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name></expr>]</index></name><operator>.</operator><name>anLt</name></expr>;</expr_stmt> <break>break;</break>
      <default>default:</default> <block>{<block_content>
        <expr_stmt><expr><name>aCnt</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name></expr>]</index></name><operator>.</operator><name>anDLt</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iGet</name></name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>

    <if_stmt><if>if<condition>( <expr><name>IsStat3</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>i64</name><operator>)</operator><name><name>aCnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><call><name>sqlite3MallocZero</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name> <operator>*</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>zRet</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"%llu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>)</operator><name><name>aCnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>z</name> <operator>+=</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>z</name><operator>&gt;</operator><name>zRet</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zRet</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_STAT3_OR_STAT4 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifndef>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>( <argument><expr><name>argc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FuncDef</name></type> <name>statGetFuncdef</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal><operator>+</operator><name>IsStat34</name></expr>,      <comment type="block">/* nArg */</comment>
  <expr><name>SQLITE_UTF8</name></expr>,     <comment type="block">/* funcFlags */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pUserData */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pNext */</comment>
  <expr><name>statGet</name></expr>,         <comment type="block">/* xSFunc */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* xFinalize */</comment>
  <expr><literal type="string">"stat_get"</literal></expr>,      <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,               <comment type="block">/* pHash */</comment>
  <expr><literal type="number">0</literal></expr>                <comment type="block">/* pDestructor */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>callStatGet</name><parameter_list>(<parameter><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regStat4</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iParam</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>regOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>regOut</name><operator>!=</operator><name>regStat4</name> <operator>&amp;&amp;</operator> <name>regOut</name><operator>!=</operator><name>regStat4</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>iParam</name></expr></argument>, <argument><expr><name>regStat4</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SQLITE_DEBUG</name></expr></cpp:elif>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iParam</name><operator>==</operator><name>STAT_GET_STAT1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>( <argument><expr><name>iParam</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Function0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>, <argument><expr><name>regOut</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>statGetFuncdef</name></expr></argument>, <argument><expr><name>P4_FUNCDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>IsStat34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate code to do an analysis of all indices associated with
** a single table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>analyzeOneTable</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,   <comment type="block">/* Parser context */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,     <comment type="block">/* Table whose indices are to be analyzed */</comment>
  <parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>pOnlyIdx</name></decl></parameter>, <comment type="block">/* If not NULL, only analyze this one index */</comment>
  <parameter><decl><type><name>int</name></type> <name>iStatCur</name></decl></parameter>,    <comment type="block">/* Index of VdbeCursor that writes the sqlite_stat1 table */</comment>
  <parameter><decl><type><name>int</name></type> <name>iMem</name></decl></parameter>,        <comment type="block">/* Available memory locations begin here */</comment>
  <parameter><decl><type><name>int</name></type> <name>iTab</name></decl></parameter>         <comment type="block">/* Next available cursor */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>    <comment type="block">/* Database handle */</comment>
  <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>                 <comment type="block">/* An index to being analyzed */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iIdxCur</name></decl>;</decl_stmt>                 <comment type="block">/* Cursor open on index being analyzed */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iTabCur</name></decl>;</decl_stmt>                 <comment type="block">/* Table cursor */</comment>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>                     <comment type="block">/* The virtual machine being built up */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                       <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>jZeroRows</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Jump from here if number of rows is zero */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>                     <comment type="block">/* Index of database containing pTab */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>needTableCnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* True to count the table */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>regNewRowid</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>    <comment type="block">/* Rowid for the inserted record */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>regStat4</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>       <comment type="block">/* Register to hold Stat4Accum object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>regChng</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>        <comment type="block">/* Index of changed index field */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>regRowid</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>       <comment type="block">/* Rowid argument passed to stat_push() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>regTemp</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>        <comment type="block">/* Temporary use register */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>regTabname</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>     <comment type="block">/* Register containing table name */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>regIdxname</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>     <comment type="block">/* Register containing index name */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>regStat1</name> <init>= <expr><name>iMem</name><operator>++</operator></expr></init></decl>;</decl_stmt>       <comment type="block">/* Value for the stat column of sqlite_stat1 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>regPrev</name> <init>= <expr><name>iMem</name></expr></init></decl>;</decl_stmt>          <comment type="block">/* MUST BE LAST (see below) */</comment>

  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>, <argument><expr><name>iMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>NEVER</name><argument_list>(<argument><expr><name>pTab</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>tnum</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Do not gather statistics on views or virtual tables */</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strlike</name><argument_list>(<argument><expr><literal type="string">"sqlite_%"</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Do not gather statistics on system tables */</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeHoldsAllMutexes</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iDb</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>SQLITE_ANALYZE</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
      <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument> )</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Establish a read-lock on the table at the shared-cache level. 
  ** Open a read-only cursor on the table. Also allocate a cursor number
  ** to use for scanning indexes (iIdxCur). No index cursor is opened at
  ** this time though.  */</comment>
  <expr_stmt><expr><call><name>sqlite3TableLock</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>tnum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iTabCur</name> <operator>=</operator> <name>iTab</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>iIdxCur</name> <operator>=</operator> <name>iTab</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name></expr></argument>, <argument><expr><name>iTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3OpenTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iTabCur</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>OP_OpenRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regTabname</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                     <comment type="block">/* Number of columns in pIdx. "N" */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>addrRewind</name></decl>;</decl_stmt>               <comment type="block">/* Address of "OP_Rewind iIdxCur" */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>addrNextRow</name></decl>;</decl_stmt>              <comment type="block">/* Address of "next_row:" */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIdxName</name></decl>;</decl_stmt>         <comment type="block">/* Name of the index */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nColTest</name></decl>;</decl_stmt>                 <comment type="block">/* Number of columns to test for changes */</comment>

    <if_stmt><if>if<condition>( <expr><name>pOnlyIdx</name> <operator>&amp;&amp;</operator> <name>pOnlyIdx</name><operator>!=</operator><name>pIdx</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIdx</name><operator>-&gt;</operator><name>pPartIdxWhere</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>needTableCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>HasRowid</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsPrimaryKeyIndex</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zIdxName</name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nColTest</name> <operator>=</operator> <name>nCol</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nColumn</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zIdxName</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nColTest</name> <operator>=</operator> <ternary><condition><expr><name><name>pIdx</name><operator>-&gt;</operator><name>uniqNotNull</name></name></expr> ?</condition><then> <expr><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>nCol</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Populate the register containing the index name. */</comment>
    <expr_stmt><expr><call><name>sqlite3VdbeLoadString</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regIdxname</name></expr></argument>, <argument><expr><name>zIdxName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"Analysis for %s.%s"</literal><operator>,</operator> <name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name><operator>,</operator> <name>zIdxName</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
    ** Pseudo-code for loop that calls stat_push():
    **
    **   Rewind csr
    **   if eof(csr) goto end_of_scan;
    **   regChng = 0
    **   goto chng_addr_0;
    **
    **  next_row:
    **   regChng = 0
    **   if( idx(0) != regPrev(0) ) goto chng_addr_0
    **   regChng = 1
    **   if( idx(1) != regPrev(1) ) goto chng_addr_1
    **   ...
    **   regChng = N
    **   goto chng_addr_N
    **
    **  chng_addr_0:
    **   regPrev(0) = idx(0)
    **  chng_addr_1:
    **   regPrev(1) = idx(1)
    **  ...
    **
    **  endDistinctTest:
    **   regRowid = idx(rowid)
    **   stat_push(P, regChng, regRowid)
    **   Next csr
    **   if !eof(csr) goto next_row;
    **
    **  end_of_scan:
    */</comment>

    <comment type="block">/* Make sure there are enough memory cells allocated to accommodate 
    ** the regPrev array and a trailing rowid (the rowid slot is required
    ** when building a record to insert into the sample column of 
    ** the sqlite_stat4 table.  */</comment>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>, <argument><expr><name>regPrev</name><operator>+</operator><name>nColTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Open a read-only cursor on the index being analyzed. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iDb</name><operator>==</operator><call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_OpenRead</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>tnum</name></name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetP4KeyInfo</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>zName</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Invoke the stat_init() function. The arguments are:
    ** 
    **    (1) the number of columns in the index including the rowid
    **        (or for a WITHOUT ROWID table, the number of PK columns),
    **    (2) the number of columns in the key without the rowid/pk
    **    (3) the number of rows in the index,
    **
    **
    ** The third argument is only used for STAT3 and STAT4
    */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Count</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>, <argument><expr><name>regStat4</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>nCol</name></expr></argument>, <argument><expr><name>regStat4</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr></argument>, <argument><expr><name>regStat4</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Function0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regStat4</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>,
                     <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>statInitFuncdef</name></expr></argument>, <argument><expr><name>P4_FUNCDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><name>IsStat34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Implementation of the following:
    **
    **   Rewind csr
    **   if eof(csr) goto end_of_scan;
    **   regChng = 0
    **   goto next_push_0;
    **
    */</comment>
    <expr_stmt><expr><name>addrRewind</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Rewind</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regChng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>addrNextRow</name> <operator>=</operator> <call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>nColTest</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>endDistinctTest</name> <init>= <expr><call><name>sqlite3VdbeMakeLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aGotoChng</name></decl>;</decl_stmt>               <comment type="block">/* Array of jump instruction addresses */</comment>
      <expr_stmt><expr><name>aGotoChng</name> <operator>=</operator> <call><name>sqlite3DbMallocRawNN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nColTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>aGotoChng</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <comment type="block">/*
      **  next_row:
      **   regChng = 0
      **   if( idx(0) != regPrev(0) ) goto chng_addr_0
      **   regChng = 1
      **   if( idx(1) != regPrev(1) ) goto chng_addr_1
      **   ...
      **   regChng = N
      **   goto endDistinctTest
      */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Goto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>addrNextRow</name> <operator>=</operator> <call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nColTest</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>IsUniqueIndex</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <comment type="block">/* For a single-column UNIQUE index, once we have found a non-NULL
        ** row, we know that all the rest will be distinct, so skip 
        ** subsequent distinctness tests. */</comment>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_NotNull</name></expr></argument>, <argument><expr><name>regPrev</name></expr></argument>, <argument><expr><name>endDistinctTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nColTest</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pColl</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3LocateCollSeq</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>azColl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>regChng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Column</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aGotoChng</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> 
        <call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Ne</name></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regPrev</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>pColl</name></expr></argument>, <argument><expr><name>P4_COLLSEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>SQLITE_NULLEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>nColTest</name></expr></argument>, <argument><expr><name>regChng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeGoto</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>endDistinctTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  
      <comment type="block">/*
      **  chng_addr_0:
      **   regPrev(0) = idx(0)
      **  chng_addr_1:
      **   regPrev(1) = idx(1)
      **  ...
      */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addrNextRow</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nColTest</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>aGotoChng</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Column</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>regPrev</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3VdbeResolveLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>endDistinctTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>aGotoChng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
    <comment type="block">/*
    **  chng_addr_N:
    **   regRowid = idx(rowid)            // STAT34 only
    **   stat_push(P, regChng, regRowid)  // 3rd parameter STAT34 only
    **   Next csr
    **   if !eof(csr) goto next_row;
    */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>regRowid</name><operator>==</operator><operator>(</operator><name>regStat4</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>HasRowid</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IdxRowid</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>, <argument><expr><name>regRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pPk</name> <init>= <expr><call><name>sqlite3PrimaryKeyIndex</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>pTable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>regKey</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>regKey</name> <operator>=</operator> <call><name>sqlite3GetTempRange</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pPk</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pPk</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>sqlite3ColumnOfIndex</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>, <argument><expr><name><name>pPk</name><operator>-&gt;</operator><name>aiColumn</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name><operator>&lt;</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Column</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>regKey</name><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name><name>pPk</name><operator>-&gt;</operator><name>aiColumn</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>zName</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MakeRecord</name></expr></argument>, <argument><expr><name>regKey</name></expr></argument>, <argument><expr><name><name>pPk</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr></argument>, <argument><expr><name>regRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3ReleaseTempRange</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>regKey</name></expr></argument>, <argument><expr><name><name>pPk</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>regChng</name><operator>==</operator><operator>(</operator><name>regStat4</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Function0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>,
                     <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>statPushFuncdef</name></expr></argument>, <argument><expr><name>P4_FUNCDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><name>IsStat34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Next</name></expr></argument>, <argument><expr><name>iIdxCur</name></expr></argument>, <argument><expr><name>addrNextRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add the entry to the stat1 table. */</comment>
    <expr_stmt><expr><call><name>callStatGet</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>, <argument><expr><name>STAT_GET_STAT1</name></expr></argument>, <argument><expr><name>regStat1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="string">"BBB"</literal><index>[<expr><literal type="number">0</literal></expr>]</index><operator>==</operator><name>SQLITE_AFF_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MakeRecord</name></expr></argument>, <argument><expr><name>regTabname</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>, <argument><expr><literal type="string">"BBB"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_NewRowid</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><name>regNewRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Insert</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>, <argument><expr><name>regNewRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OPFLAG_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add the entries to the stat3 or stat4 table. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>regEq</name> <init>= <expr><name>regStat1</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>regLt</name> <init>= <expr><name>regStat1</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>regDLt</name> <init>= <expr><name>regStat1</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>regSample</name> <init>= <expr><name>regStat1</name><operator>+</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>regCol</name> <init>= <expr><name>regStat1</name><operator>+</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>regSampleRowid</name> <init>= <expr><name>regCol</name> <operator>+</operator> <name>nCol</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>addrNext</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>addrIsNull</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name></type> <name>seekOp</name> <init>= <expr><ternary><condition><expr><call><name>HasRowid</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OP_NotExists</name></expr> </then><else>: <expr><name>OP_NotFound</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>, <argument><expr><name>regCol</name><operator>+</operator><name>nCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>addrNext</name> <operator>=</operator> <call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>callStatGet</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>, <argument><expr><name>STAT_GET_ROWID</name></expr></argument>, <argument><expr><name>regSampleRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>addrIsNull</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IsNull</name></expr></argument>, <argument><expr><name>regSampleRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>callStatGet</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>, <argument><expr><name>STAT_GET_NEQ</name></expr></argument>, <argument><expr><name>regEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>callStatGet</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>, <argument><expr><name>STAT_GET_NLT</name></expr></argument>, <argument><expr><name>regLt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>callStatGet</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>regStat4</name></expr></argument>, <argument><expr><name>STAT_GET_NDLT</name></expr></argument>, <argument><expr><name>regDLt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4Int</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>seekOp</name></expr></argument>, <argument><expr><name>iTabCur</name></expr></argument>, <argument><expr><name>addrNext</name></expr></argument>, <argument><expr><name>regSampleRowid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* We know that the regSampleRowid row exists because it was read by
      ** the previous loop.  Thus the not-found jump of seekOp will never
      ** be taken */</comment>
      <expr_stmt><expr><call><name>VdbeCoverageNeverTaken</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3</name></cpp:ifdef>
      <expr_stmt><expr><call><name>sqlite3ExprCodeLoadIndexColumn</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr><name>iTabCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3ExprCodeLoadIndexColumn</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr><name>iTabCur</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>regCol</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MakeRecord</name></expr></argument>, <argument><expr><name>regCol</name></expr></argument>, <argument><expr><name>nCol</name></expr></argument>, <argument><expr><name>regSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MakeRecord</name></expr></argument>, <argument><expr><name>regTabname</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_NewRowid</name></expr></argument>, <argument><expr><name>iStatCur</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>regNewRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Insert</name></expr></argument>, <argument><expr><name>iStatCur</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>, <argument><expr><name>regNewRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Goto</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>addrNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* P1==1 for end-of-loop */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addrIsNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_STAT3_OR_STAT4 */</comment>

    <comment type="block">/* End of analysis */</comment>
    <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addrRewind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>


  <comment type="block">/* Create a single sqlite_stat1 entry containing NULL as the index
  ** name and the row count as the content.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>pOnlyIdx</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>needTableCnt</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"%s"</literal><operator>,</operator> <name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Count</name></expr></argument>, <argument><expr><name>iTabCur</name></expr></argument>, <argument><expr><name>regStat1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>jZeroRows</name> <operator>=</operator> <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfNot</name></expr></argument>, <argument><expr><name>regStat1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VdbeCoverage</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Null</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regIdxname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="string">"BBB"</literal><index>[<expr><literal type="number">0</literal></expr>]</index><operator>==</operator><name>SQLITE_AFF_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MakeRecord</name></expr></argument>, <argument><expr><name>regTabname</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>, <argument><expr><literal type="string">"BBB"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_NewRowid</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><name>regNewRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Insert</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><name>regTemp</name></expr></argument>, <argument><expr><name>regNewRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OPFLAG_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jZeroRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Generate code that will cause the most recent index analysis to
** be loaded into internal hash tables where is can be used.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>loadAnalysis</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_LoadAnalysis</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate code that will do an analysis of an entire database
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>analyzeDatabase</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pSchema</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* Schema of database iDb */</comment>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iStatCur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iMem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iTab</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3BeginWriteOperation</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStatCur</name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>openStatTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iMem</name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>iTab</name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>k</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>tblHash</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Table</name><operator>*</operator><operator>)</operator><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>analyzeOneTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><name>iMem</name></expr></argument>, <argument><expr><name>iTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>loadAnalysis</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate code that will do an analysis of a single table in
** a database.  If pOnlyIdx is not NULL then it is a single index
** in pTab that should be analyzed.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>analyzeTable</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>, <parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>pOnlyIdx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iStatCur</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pTab</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeHoldsAllMutexes</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BeginWriteOperation</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStatCur</name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOnlyIdx</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>openStatTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><name><name>pOnlyIdx</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><literal type="string">"idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>openStatTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><literal type="string">"tbl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>analyzeOneTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>pOnlyIdx</name></expr></argument>, <argument><expr><name>iStatCur</name></expr></argument>,<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>loadAnalysis</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate code for the ANALYZE command.  The parser calls this routine
** when it recognizes an ANALYZE command.
**
**        ANALYZE                            -- 1
**        ANALYZE  &lt;database&gt;                -- 2
**        ANALYZE  ?&lt;database&gt;.?&lt;tablename&gt;  -- 3
**
** Form 1 causes all indices in all attached databases to be analyzed.
** Form 2 analyzes all indices the single database named.
** Form 3 analyzes all indices associated with the named table.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Analyze</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pName1</name></decl></parameter>, <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pName2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>pTableName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

  <comment type="block">/* Read the database schema. If an error occurs, leave an error message
  ** and code in pParse and return NULL. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeHoldsAllMutexes</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pName2</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name>pName1</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pName1</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Form 1:  Analyze everything */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Do not analyze the TEMP database */</comment>
      <expr_stmt><expr><call><name>analyzeDatabase</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pName2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Form 2:  Analyze the database or table named */</comment>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3FindDb</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pName1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>analyzeDatabase</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3NameFromToken</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pName1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name>pIdx</name> <operator>=</operator> <call><name>sqlite3FindIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>analyzeTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>pTable</name></name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pTab</name> <operator>=</operator> <call><name>sqlite3LocateTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>analyzeTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Form 3: Analyze the fully qualified table name */</comment>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3TwoPartName</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pName1</name></expr></argument>, <argument><expr><name>pName2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zName</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3NameFromToken</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name>pIdx</name> <operator>=</operator> <call><name>sqlite3FindIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>analyzeTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>pTable</name></name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>pTab</name> <operator>=</operator> <call><name>sqlite3LocateTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>analyzeTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>   
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Expire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Used to pass information from the analyzer reader through to the
** callback routine.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>analysisInfo</name></name></type> <name>analysisInfo</name>;</typedef>
<struct>struct <name>analysisInfo</name> <block>{
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDatabase</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** The first argument points to a nul-terminated string containing a
** list of space separated integers. Read the first nOut of these into
** the array aOut[].
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decodeIntArray</name><parameter_list>(
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zIntArray</name></decl></parameter>,       <comment type="block">/* String containing int array to decode */</comment>
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>,              <comment type="block">/* Number of slots in aOut[] */</comment>
  <parameter><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>,         <comment type="block">/* Store integers here */</comment>
  <parameter><decl><type><name>LogEst</name> <modifier>*</modifier></type><name>aLog</name></decl></parameter>,          <comment type="block">/* Or, if aOut==0, here */</comment>
  <parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIndex</name></decl></parameter>          <comment type="block">/* Handle extra flags for this index, if not NULL */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>zIntArray</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tRowcnt</name></type> <name>v</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>z</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>z</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><name>aOut</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>aLog</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aLog</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3LogEst</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>aOut</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>aOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>aLog</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aLog</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3LogEst</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>z</name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifndef>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pIndex</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if<condition>( <expr><name>pIndex</name></expr> )</condition><block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>bUnordered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>noSkipScan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"unordered*"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>bUnordered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"sz=[0-9]*"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>szIdxRow</name></name> <operator>=</operator> <call><name>sqlite3LogEst</name><argument_list>(<argument><expr><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"noskipscan*"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>noSkipScan</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_COSTMULT</name></cpp:ifdef>
      <if type="elseif">else if<condition>( <expr><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"costmult=[0-9]*"</literal></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>pTable</name><operator>-&gt;</operator><name>costMult</name></name> <operator>=</operator> <call><name>sqlite3LogEst</name><argument_list>(<argument><expr><call><name>sqlite3Atoi</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <while>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
      <while>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block>

<comment type="block">/*
** This callback is invoked once for each index when reading the
** sqlite_stat1 table.  
**
**     argv[0] = name of the table
**     argv[1] = name of the index (might be NULL)
**     argv[2] = results of analysis - on integer for each column
**
** Entries for which argv[1]==NULL simply record the number of rows in
** the table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>analysisLoader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>NotUsed</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>analysisInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>analysisInfo</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER2</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>argv</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pTable</name> <operator>=</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTable</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pIndex</name> <operator>=</operator> <call><name>sqlite3PrimaryKeyIndex</name><argument_list>(<argument><expr><name>pTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pIndex</name> <operator>=</operator> <call><name>sqlite3FindIndex</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pIndex</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>aiRowEst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>pIndex</name><operator>-&gt;</operator><name>nKeyCol</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
    <comment type="block">/* Index.aiRowEst may already be set here if there are duplicate 
    ** sqlite_stat1 entries for this index. In that case just clobber
    ** the old data with the new instead of allocating a new array.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pIndex</name><operator>-&gt;</operator><name>aiRowEst</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>aiRowEst</name></name> <operator>=</operator> <operator>(</operator><name>tRowcnt</name><operator>*</operator><operator>)</operator><call><name>sqlite3MallocZero</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pIndex</name><operator>-&gt;</operator><name>aiRowEst</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3OomFault</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>aiRowEst</name> <operator>=</operator> <name><name>pIndex</name><operator>-&gt;</operator><name>aiRowEst</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>pIndex</name><operator>-&gt;</operator><name>bUnordered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decodeIntArray</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>nCol</name></expr></argument>, <argument><expr><name>aiRowEst</name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>aiRowLogEst</name></name></expr></argument>, <argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIndex</name><operator>-&gt;</operator><name>pPartIdxWhere</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pTable</name><operator>-&gt;</operator><name>nRowLogEst</name></name> <operator>=</operator> <name><name>pIndex</name><operator>-&gt;</operator><name>aiRowLogEst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>Index</name></type> <name>fakeIdx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fakeIdx</name><operator>.</operator><name>szIdxRow</name></name> <operator>=</operator> <name><name>pTable</name><operator>-&gt;</operator><name>szTabRow</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_COSTMULT</name></cpp:ifdef>
    <expr_stmt><expr><name><name>fakeIdx</name><operator>.</operator><name>pTable</name></name> <operator>=</operator> <name>pTable</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>decodeIntArray</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTable</name><operator>-&gt;</operator><name>nRowLogEst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakeIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTable</name><operator>-&gt;</operator><name>szTabRow</name></name> <operator>=</operator> <name><name>fakeIdx</name><operator>.</operator><name>szIdxRow</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If the Index.aSample variable is not NULL, delete the aSample[] array
** and its contents.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3DeleteIndexSamples</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>IndexSample</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>db</name> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>pnBytesFreed</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_STAT3_OR_STAT4 */</comment>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
<comment type="block">/*
** Populate the pIdx-&gt;aAvgEq[] array based on the samples currently
** stored in pIdx-&gt;aSample[]. 
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>initAvgEq</name><parameter_list>(<parameter><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pIdx</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>IndexSample</name> <modifier>*</modifier></type><name>aSample</name> <init>= <expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IndexSample</name> <modifier>*</modifier></type><name>pFinal</name> <init>= <expr><operator>&amp;</operator><name><name>aSample</name><index>[<expr><name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIdx</name><operator>-&gt;</operator><name>nSampleCol</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* If this is stat4 data, then calculate aAvgEq[] values for all
      ** sample columns except the last. The last is always set to 1, as
      ** once the trailing PK fields are considered all index keys are
      ** unique.  */</comment>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nSampleCol</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aAvgEq</name><index>[<expr><name>nCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>iCol</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iCol</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nSample</name> <init>= <expr><name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                    <comment type="block">/* Used to iterate through samples */</comment>
      <decl_stmt><decl><type><name>tRowcnt</name></type> <name>sumEq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Sum of the nEq values */</comment>
      <decl_stmt><decl><type><name>tRowcnt</name></type> <name>avgEq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>tRowcnt</name></type> <name>nRow</name></decl>;</decl_stmt>             <comment type="block">/* Number of rows in index */</comment>
      <decl_stmt><decl><type><name>i64</name></type> <name>nSum100</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Number of terms contributing to sumEq */</comment>
      <decl_stmt><decl><type><name>i64</name></type> <name>nDist100</name></decl>;</decl_stmt>             <comment type="block">/* Number of distinct values in index */</comment>

      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pIdx</name><operator>-&gt;</operator><name>aiRowEst</name></name> <operator>||</operator> <name>iCol</name><operator>&gt;=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name> <operator>||</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>aiRowEst</name><index>[<expr><name>iCol</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>nRow</name> <operator>=</operator> <name><name>pFinal</name><operator>-&gt;</operator><name>anLt</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nDist100</name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>)</operator><literal type="number">100</literal> <operator>*</operator> <name><name>pFinal</name><operator>-&gt;</operator><name>anDLt</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSample</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>nRow</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>aiRowEst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nDist100</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">100</literal> <operator>*</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>aiRowEst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>aiRowEst</name><index>[<expr><name>iCol</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nRowEst0</name></name> <operator>=</operator> <name>nRow</name></expr>;</expr_stmt>

      <comment type="block">/* Set nSum to the number of distinct (iCol+1) field prefixes that
      ** occur in the stat4 table for this index. Set sumEq to the sum of 
      ** the nEq values for column iCol for the same set (adding the value 
      ** only once where there exist duplicate prefixes).  */</comment>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nSample</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><operator>(</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator>
         <operator>||</operator> <name><name>aSample</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>anDLt</name><index>[<expr><name>iCol</name></expr>]</index></name><operator>!=</operator><name><name>aSample</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>anDLt</name><index>[<expr><name>iCol</name></expr>]</index></name></expr> 
        )</condition><block>{<block_content>
          <expr_stmt><expr><name>sumEq</name> <operator>+=</operator> <name><name>aSample</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>anEq</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nSum100</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if<condition>( <expr><name>nDist100</name><operator>&gt;</operator><name>nSum100</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>avgEq</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">100</literal> <operator>*</operator> <operator>(</operator><name>nRow</name> <operator>-</operator> <name>sumEq</name><operator>)</operator><operator>)</operator><operator>/</operator><operator>(</operator><name>nDist100</name> <operator>-</operator> <name>nSum100</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>avgEq</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>avgEq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aAvgEq</name><index>[<expr><name>iCol</name></expr>]</index></name> <operator>=</operator> <name>avgEq</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Look up an index by name.  Or, if the name of a WITHOUT ROWID table
** is supplied instead, find the PRIMARY KEY index for that table.
*/</comment>
<function><type><specifier>static</specifier> <name>Index</name> <modifier>*</modifier></type><name>findIndexOrPrimaryKey</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><call><name>sqlite3FindIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pIdx</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HasRowid</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pIdx</name> <operator>=</operator> <call><name>sqlite3PrimaryKeyIndex</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pIdx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Load the content from either the sqlite_stat4 or sqlite_stat3 table 
** into the relevant Index.aSample[] arrays.
**
** Arguments zSql1 and zSql2 must point to SQL statements that return
** data equivalent to the following (statements are different for stat3,
** see the caller of this function for details):
**
**    zSql1: SELECT idx,count(*) FROM %Q.sqlite_stat4 GROUP BY idx
**    zSql2: SELECT idx,neq,nlt,ndlt,sample FROM %Q.sqlite_stat4
**
** where %Q is replaced with the database name before the SQL is executed.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>loadStatTbl</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                  <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><name>int</name></type> <name>bStat3</name></decl></parameter>,                   <comment type="block">/* Assume single column records only */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql1</name></decl></parameter>,            <comment type="block">/* SQL statement 1 (see above) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql2</name></decl></parameter>,            <comment type="block">/* SQL statement 2 (see above) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>               <comment type="block">/* Database name (e.g. "main") */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                       <comment type="block">/* Result codes from subroutines */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* An SQL statement being run */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>                   <comment type="block">/* Text of the SQL statement */</comment>
  <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pPrevIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Previous index in the loop */</comment>
  <decl_stmt><decl><type><name>IndexSample</name> <modifier>*</modifier></type><name>pSample</name></decl>;</decl_stmt>         <comment type="block">/* A slot in pIdx-&gt;aSample[] */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>bDisable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql1</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zSql</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nIdxCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Number of columns in stat4 records */</comment>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIndex</name></decl>;</decl_stmt>   <comment type="block">/* Index name */</comment>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>    <comment type="block">/* Pointer to the index object */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nSample</name></decl>;</decl_stmt>    <comment type="block">/* Number of samples */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>      <comment type="block">/* Bytes of space required */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>          <comment type="block">/* Bytes of space required */</comment>
    <decl_stmt><decl><type><name>tRowcnt</name> <modifier>*</modifier></type><name>pSpace</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>zIndex</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zIndex</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nSample</name> <operator>=</operator> <call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIdx</name> <operator>=</operator> <call><name>findIndexOrPrimaryKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zIndex</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pIdx</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bStat3</name> <operator>||</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Index.nSample is non-zero at this point if data has already been
    ** loaded from the stat4 table. In this case ignore stat3 data.  */</comment>
    <if_stmt><if>if<condition>( <expr><name>pIdx</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>bStat3</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>HasRowid</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>pTable</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nColumn</name></name><operator>==</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>HasRowid</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>pTable</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsPrimaryKeyIndex</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>nIdxCol</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>nIdxCol</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nColumn</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nSampleCol</name></name> <operator>=</operator> <name>nIdxCol</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IndexSample</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nSample</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nIdxCol</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>nSample</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <name>nIdxCol</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tRowcnt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>     <comment type="block">/* Space for Index.aAvgEq[] */</comment>

    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name> <operator>=</operator> <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pSpace</name> <operator>=</operator> <operator>(</operator><name>tRowcnt</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name><index>[<expr><name>nSample</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aAvgEq</name></name> <operator>=</operator> <name>pSpace</name></expr>;</expr_stmt> <expr_stmt><expr><name>pSpace</name> <operator>+=</operator> <name>nIdxCol</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nSample</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>anEq</name> <operator>=</operator> <name>pSpace</name></expr>;</expr_stmt> <expr_stmt><expr><name>pSpace</name> <operator>+=</operator> <name>nIdxCol</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>anLt</name> <operator>=</operator> <name>pSpace</name></expr>;</expr_stmt> <expr_stmt><expr><name>pSpace</name> <operator>+=</operator> <name>nIdxCol</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>anDLt</name> <operator>=</operator> <name>pSpace</name></expr>;</expr_stmt> <expr_stmt><expr><name>pSpace</name> <operator>+=</operator> <name>nIdxCol</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>pSpace</name><operator>)</operator><operator>-</operator><name>nByte</name><operator>==</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql2</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zSql</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIndex</name></decl>;</decl_stmt>                 <comment type="block">/* Index name */</comment>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>                  <comment type="block">/* Pointer to the index object */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Number of columns in index */</comment>

    <expr_stmt><expr><name>zIndex</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zIndex</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pIdx</name> <operator>=</operator> <call><name>findIndexOrPrimaryKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zIndex</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pIdx</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <comment type="block">/* This next condition is true if data has already been loaded from 
    ** the sqlite_stat4 table. In this case ignore stat3 data.  */</comment>
    <expr_stmt><expr><name>nCol</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nSampleCol</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bStat3</name> <operator>&amp;&amp;</operator> <name>nCol</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pIdx</name><operator>!=</operator><name>pPrevIdx</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>initAvgEq</name><argument_list>(<argument><expr><name>pPrevIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pPrevIdx</name> <operator>=</operator> <name>pIdx</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pSample</name> <operator>=</operator> <operator>&amp;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name><index>[<expr><name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decodeIntArray</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>nCol</name></expr></argument>,<argument><expr><name><name>pSample</name><operator>-&gt;</operator><name>anEq</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decodeIntArray</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>nCol</name></expr></argument>,<argument><expr><name><name>pSample</name><operator>-&gt;</operator><name>anLt</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decodeIntArray</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>nCol</name></expr></argument>,<argument><expr><name><name>pSample</name><operator>-&gt;</operator><name>anDLt</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Take a copy of the sample. Add two 0x00 bytes the end of the buffer.
    ** This is in case the sample record is corrupted. In that case, the
    ** sqlite3VdbeRecordCompare() may read up to two varints past the
    ** end of the allocated buffer before it realizes it is dealing with
    ** a corrupt record. Adding the two 0x00 bytes prevents this from causing
    ** a buffer overread.  */</comment>
    <expr_stmt><expr><name><name>pSample</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSample</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pSample</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pSample</name><operator>-&gt;</operator><name>p</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pSample</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSample</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nSample</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>initAvgEq</name><argument_list>(<argument><expr><name>pPrevIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Load content from the sqlite_stat4 and sqlite_stat3 tables into 
** the Index.aSample[] arrays of all indices.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>loadStat4</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Result codes from subroutines */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>bDisable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sqlite_stat4"</literal></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>loadStatTbl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
      <argument><expr><literal type="string">"SELECT idx,count(*) FROM %Q.sqlite_stat4 GROUP BY idx"</literal></expr></argument>, 
      <argument><expr><literal type="string">"SELECT idx,neq,nlt,ndlt,sample FROM %Q.sqlite_stat4"</literal></expr></argument>,
      <argument><expr><name>zDb</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sqlite_stat3"</literal></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>loadStatTbl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
      <argument><expr><literal type="string">"SELECT idx,count(*) FROM %Q.sqlite_stat3 GROUP BY idx"</literal></expr></argument>, 
      <argument><expr><literal type="string">"SELECT idx,neq,nlt,ndlt,sqlite_record(sample) FROM %Q.sqlite_stat3"</literal></expr></argument>,
      <argument><expr><name>zDb</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_STAT3_OR_STAT4 */</comment>

<comment type="block">/*
** Load the content of the sqlite_stat1 and sqlite_stat3/4 tables. The
** contents of sqlite_stat1 are used to populate the Index.aiRowEst[]
** arrays. The contents of sqlite_stat3/4 are used to populate the
** Index.aSample[] arrays.
**
** If the sqlite_stat1 table is not present in the database, SQLITE_ERROR
** is returned. In this case, even if SQLITE_ENABLE_STAT3/4 was defined 
** during compilation and the sqlite_stat3/4 table is present, no data is 
** read from it.
**
** If SQLITE_ENABLE_STAT3/4 was defined during compilation and the 
** sqlite_stat4 table is not present in the database, SQLITE_ERROR is
** returned. However, in this case, data is read from the sqlite_stat1
** table (if it is present) before returning.
**
** If an OOM error occurs, this function always sets db-&gt;mallocFailed.
** This means if the caller does not care about other errors, the return
** code may be ignored.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3AnalysisLoad</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>analysisInfo</name></type> <name>sInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iDb</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iDb</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pBt</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Clear any prior statistics */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>idxHash</name></name></expr></argument>)</argument_list></call></expr>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3DefaultRowEst</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
    <expr_stmt><expr><call><name>sqlite3DeleteIndexSamples</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aSample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>

  <comment type="block">/* Check to make sure the sqlite_stat1 table exists */</comment>
  <expr_stmt><expr><name><name>sInfo</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sInfo</name><operator>.</operator><name>zDatabase</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zName</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sqlite_stat1"</literal></expr></argument>, <argument><expr><name><name>sInfo</name><operator>.</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Load new statistics out of the sqlite_stat1 table */</comment>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
      <argument><expr><literal type="string">"SELECT tbl,idx,stat FROM %Q.sqlite_stat1"</literal></expr></argument>, <argument><expr><name><name>sInfo</name><operator>.</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>analysisLoader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>


  <comment type="block">/* Load the statistics from the sqlite_stat4 table. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_STAT3_OR_STAT4</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>OptimizationEnabled</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_Stat34</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>bDisable</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>loadStat4</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sInfo</name><operator>.</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>lookaside</name><operator>.</operator><name>bDisable</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>idxHash</name></name></expr></argument>)</argument_list></call></expr>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aiRowEst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>aiRowEst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_NOMEM</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3OomFault</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_ANALYZE */</comment>
</unit>
