<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/vacuum.c"><comment type="block">/*
** 2003 April 6
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to implement the VACUUM command.
**
** Most of the code in this file may be omitted by defining the
** SQLITE_OMIT_VACUUM macro.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdbeInt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VACUUM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_ATTACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
** Finalize a prepared statement.  If there was an error, store the
** text of the error message in *pzErrMsg.  Return the result code.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vacuumFinalize</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3VdbeFinalize</name><argument_list>(<argument><expr><operator>(</operator><name>Vdbe</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Execute zSql on database db. Return an error code.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>execSql</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <macro><name>VVA_ONLY</name><argument_list>( <argument>int rc;</argument> )</argument_list></macro>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zSql</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <macro><name>VVA_ONLY</name><argument_list>( <argument>rc =</argument> )</argument_list></macro> <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name> <operator>||</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_CountRows</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>vacuumFinalize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Execute zSql on database db. The statement returns exactly
** one column. Execute this as SQL on the same database.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>execExecSql</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>vacuumFinalize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><call><name>vacuumFinalize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The VACUUM command is used to clean up the database,
** collapse free space, etc.  It is modelled after the VACUUM command
** in PostgreSQL.  The VACUUM command works as follows:
**
**   (1)  Create a new transient database file
**   (2)  Copy all content from the database being vacuumed into
**        the new transient database file
**   (3)  Copy content from the transient database back into the
**        original database.
**
** The transient database requires temporary disk space approximately
** equal to the size of the original database.  The copy operation of
** step (3) requires additional temporary disk space approximately equal
** to the size of the original database for the rollback journal.
** Hence, temporary disk space that is approximately 2x the size of the
** original database is required.  Every page of the database is written
** approximately 3 times:  Once for step (2) and twice for step (3).
** Two writes per page are required in step (3) because the original
** database content must be written into the rollback journal prior to
** overwriting the database with the vacuumed content.
**
** Only 1x temporary space and only 1x writes would be required if
** the copy of step (3) were replaced by deleting the original database
** and renaming the transient database as the original.  But that will
** not work if other processes are attached to the original database.
** And a power loss in between deleting the original and renaming the
** transient would cause the database file to appear to be deleted
** following reboot.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Vacuum</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Vacuum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
** This routine implements the OP_Vacuum opcode of the VDBE.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3RunVacuum</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>     <comment type="block">/* Return code from service routines */</comment>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pMain</name></decl>;</decl_stmt>           <comment type="block">/* The database being vacuumed */</comment>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>           <comment type="block">/* The temporary database we vacuum into */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* SQL statements */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_flags</name></decl>;</decl_stmt>        <comment type="block">/* Saved value of the db-&gt;flags */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_nChange</name></decl>;</decl_stmt>      <comment type="block">/* Saved value of db-&gt;nChange */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_nTotalChange</name></decl>;</decl_stmt> <comment type="block">/* Saved value of db-&gt;nTotalChange */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>saved_xTrace</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>  <comment type="block">/* Saved db-&gt;xTrace */</comment>
  <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Database to detach at end of vacuum */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isMemDb</name></decl>;</decl_stmt>            <comment type="block">/* True if vacuuming a :memory: database */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>;</decl_stmt>               <comment type="block">/* Bytes of reserved space at the end of each page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDb</name></decl>;</decl_stmt>                <comment type="block">/* Number of attached databases */</comment>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"cannot VACUUM from within a transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nVdbeActive</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="string">"cannot VACUUM - SQL statements in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Save the current value of the database flags so that it can be 
  ** restored before returning. Then set the writable-schema flag, and
  ** disable CHECK and foreign key constraints.  */</comment>
  <expr_stmt><expr><name>saved_flags</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_nChange</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>nChange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_nTotalChange</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>nTotalChange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_xTrace</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>xTrace</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SQLITE_WriteSchema</name> <operator>|</operator> <name>SQLITE_IgnoreChecks</name> <operator>|</operator> <name>SQLITE_PreferBuiltin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SQLITE_ForeignKeys</name> <operator>|</operator> <name>SQLITE_ReverseOrder</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>xTrace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>pMain</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>isMemDb</name> <operator>=</operator> <call><name>sqlite3PagerIsMemdb</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Attach the temporary database as 'vacuum_db'. The synchronous pragma
  ** can be set to 'off' for this file, as it is not recovered if a crash
  ** occurs anyway. The integrity of the database is maintained by a
  ** (possibly synchronous) transaction opened on the main database before
  ** sqlite3BtreeCopyFile() is called.
  **
  ** An optimisation would be to use a non-journaled pager.
  ** (Later:) I tried setting "PRAGMA vacuum_db.journal_mode=OFF" but
  ** that actually made the VACUUM run slower.  Very little journalling
  ** actually occurs when doing a vacuum since the vacuum_db is initially
  ** empty.  Only the journal header is written.  Apparently it takes more
  ** time to parse and run the PRAGMA to turn journalling off than it does
  ** to write the journal header file.
  */</comment>
  <expr_stmt><expr><name>nDb</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3TempInMemory</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <literal type="string">"ATTACH ':memory:' AS vacuum_db;"</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <literal type="string">"ATTACH '' AS vacuum_db;"</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>&gt;</operator><name>nDb</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,<argument><expr><literal type="string">"vacuum_db"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pBt</name></expr>;</expr_stmt>

  <comment type="block">/* The call to execSql() to attach the temp database has left the file
  ** locked (as there was more than one active statement when the transaction
  ** to read the schema was concluded. Unlock it here so that this doesn't
  ** cause problems for the call to BtreeSetPageSize() below.  */</comment>
  <expr_stmt><expr><call><name>sqlite3BtreeCommit</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>sqlite3BtreeGetOptimalReserve</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* A VACUUM cannot change the pagesize of an encrypted database. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlite3CodecGetKey</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3CodecGetKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>zKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nKey</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA vacuum_db.synchronous=OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Begin a transaction and take an exclusive lock on the main database
  ** file. This is done before the sqlite3BtreeGetPageSize(pMain) call below,
  ** to ensure that we do not try to change the page-size on a WAL database.
  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><literal type="string">"BEGIN;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeBeginTrans</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Do not attempt to change the page size for a WAL database */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3PagerGetJournalMode</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                               <operator>==</operator><name>PAGER_JOURNALMODE_WAL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
   <operator>||</operator> <operator>(</operator><operator>!</operator><name>isMemDb</name> <operator>&amp;&amp;</operator> <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name></expr></argument>, <argument><expr><name>nRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator>
   <operator>||</operator> <call><name>NEVER</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument>)</argument_list></call></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    <goto>goto <name>end_of_vacuum</name>;</goto>
  </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>nextAutovac</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>db</name><operator>-&gt;</operator><name>nextAutovac</name></name></expr> </then><else>:
                                           <expr><call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Query the schema of the main database. Create a mirror schema
  ** in the temporary database.
  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14) "</literal>
      <literal type="string">"  FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'"</literal>
      <literal type="string">"   AND coalesce(rootpage,1)&gt;0"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)"</literal>
      <literal type="string">"  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21) "</literal>
      <literal type="string">"  FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Loop through the tables in the main database. For each, do
  ** an "INSERT INTO vacuum_db.xxx SELECT * FROM main.xxx;" to copy
  ** the contents to the temporary database.
  */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SQLITE_Vacuum</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SQLITE_Vacuum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT 'INSERT INTO vacuum_db.' || quote(name) "</literal>
      <literal type="string">"|| ' SELECT * FROM main.' || quote(name) || ';'"</literal>
      <literal type="string">"FROM main.sqlite_master "</literal>
      <literal type="string">"WHERE type = 'table' AND name!='sqlite_sequence' "</literal>
      <literal type="string">"  AND coalesce(rootpage,1)&gt;0"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SQLITE_Vacuum</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_Vacuum</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Copy over the sequence table
  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT 'DELETE FROM vacuum_db.' || quote(name) || ';' "</literal>
      <literal type="string">"FROM vacuum_db.sqlite_master WHERE name='sqlite_sequence' "</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT 'INSERT INTO vacuum_db.' || quote(name) "</literal>
      <literal type="string">"|| ' SELECT * FROM main.' || quote(name) || ';' "</literal>
      <literal type="string">"FROM vacuum_db.sqlite_master WHERE name=='sqlite_sequence';"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>


  <comment type="block">/* Copy the triggers, views, and virtual tables from the main database
  ** over to the temporary database.  None of these objects has any
  ** associated storage, so all we have to do is copy their entries
  ** from the SQLITE_MASTER table.
  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO vacuum_db.sqlite_master "</literal>
      <literal type="string">"  SELECT type, name, tbl_name, rootpage, sql"</literal>
      <literal type="string">"    FROM main.sqlite_master"</literal>
      <literal type="string">"   WHERE type='view' OR type='trigger'"</literal>
      <literal type="string">"      OR (type='table' AND rootpage=0)"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* At this point, there is a write transaction open on both the 
  ** vacuum database and the main database. Assuming no error occurs,
  ** both transactions are closed by this block - the main database
  ** transaction by sqlite3BtreeCopyFile() and the other by an explicit
  ** call to sqlite3BtreeCommit().
  */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>meta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* This array determines which meta meta values are preserved in the
    ** vacuum.  Even entries are the meta value number and odd entries
    ** are an increment to apply to the meta value after the vacuum.
    ** The increment is used to increase the schema cookie so that other
    ** connections to the same database will know to reread the schema.
    */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aCopy</name><index>[]</index></name> <init>= <expr><block>{
       <expr><name>BTREE_SCHEMA_VERSION</name></expr>,     <expr><literal type="number">1</literal></expr>,  <comment type="block">/* Add one to the old schema cookie */</comment>
       <expr><name>BTREE_DEFAULT_CACHE_SIZE</name></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the default page cache size */</comment>
       <expr><name>BTREE_TEXT_ENCODING</name></expr>,      <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the text encoding */</comment>
       <expr><name>BTREE_USER_VERSION</name></expr>,       <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the user version */</comment>
       <expr><name>BTREE_APPLICATION_ID</name></expr>,     <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the application id */</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">1</literal><operator>==</operator><call><name>sqlite3BtreeIsInTrans</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">1</literal><operator>==</operator><call><name>sqlite3BtreeIsInTrans</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Copy Btree meta values */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aCopy</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
      <comment type="block">/* GetMeta() and UpdateMeta() cannot fail in this context because
      ** we already have page 1 loaded into cache and marked dirty. */</comment>
      <expr_stmt><expr><call><name>sqlite3BtreeGetMeta</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><name><name>aCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeUpdateMeta</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name><name>aCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>meta</name><operator>+</operator><name><name>aCopy</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeCopyFile</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeCommit</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
    <expr_stmt><expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nRes</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end_of_vacuum</name>:</label>
  <comment type="block">/* Restore the original value of db-&gt;flags */</comment>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>saved_flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nChange</name></name> <operator>=</operator> <name>saved_nChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nTotalChange</name></name> <operator>=</operator> <name>saved_nTotalChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>xTrace</name></name> <operator>=</operator> <name>saved_xTrace</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Currently there is an SQL level transaction open on the vacuum
  ** database. No locks are held on any other files (since the main file
  ** was committed at the btree level). So it safe to end the transaction
  ** by manually setting the autoCommit flag to true and detaching the
  ** vacuum database. The vacuum_db journal file is deleted when the pager
  ** is closed by the DETACH.
  */</comment>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pDb</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* This both clears the schemas and reduces the size of the db-&gt;aDb[]
  ** array. */</comment> 
  <expr_stmt><expr><call><name>sqlite3ResetAllSchemasOfConnection</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SQLITE_OMIT_VACUUM &amp;&amp; SQLITE_OMIT_ATTACH */</comment>
</unit>
