<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/test_init.c"><comment type="block">/*
** 2009 August 17
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** The code in this file is used for testing SQLite. It is not part of
** the source code used in production systems.
**
** Specifically, this file tests the effect of errors while initializing
** the various pluggable sub-systems from within sqlite3_initialize().
** If an error occurs in sqlite3_initialize() the following should be
** true:
**
**   1) An error code is returned to the user, and
**   2) A subsequent call to sqlite3_shutdown() calls the shutdown method
**      of those subsystems that were initialized, and
**   3) A subsequent call to sqlite3_initialize() attempts to initialize
**      the remaining, uninitialized, subsystems.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcl.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> struct <name>Wrapped</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_pcache_methods2</name></type> <name>pcache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_mem_methods</name></type>     <name>mem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_mutex_methods</name></type>   <name>mutex</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>mem_init</name></decl>;</decl_stmt>                <comment type="block">/* True if mem subsystem is initalized */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mem_fail</name></decl>;</decl_stmt>                <comment type="block">/* True to fail mem subsystem inialization */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mutex_init</name></decl>;</decl_stmt>              <comment type="block">/* True if mutex subsystem is initalized */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mutex_fail</name></decl>;</decl_stmt>              <comment type="block">/* True to fail mutex subsystem inialization */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pcache_init</name></decl>;</decl_stmt>             <comment type="block">/* True if pcache subsystem is initalized */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pcache_fail</name></decl>;</decl_stmt>             <comment type="block">/* True to fail pcache subsystem inialization */</comment>
}</block> <decl><name>wrapped</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMemInit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAppData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wrapped</name><operator>.</operator><name>mem_fail</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>xInit</name></name><argument_list>(<argument><expr><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>pAppData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mem_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrMemShutdown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAppData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>xShutdown</name></name><argument_list>(<argument><expr><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>pAppData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mem_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>wrMemMalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>           <block>{<block_content><return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>xMalloc</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrMemFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>            <block>{<block_content><expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>xFree</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>wrMemRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>xRealloc</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMemSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>             <block>{<block_content><return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>xSize</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMemRoundup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>            <block>{<block_content><return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mem</name><operator>.</operator><name>xRoundup</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMutexInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wrapped</name><operator>.</operator><name>mutex_fail</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexInit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mutex_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMutexEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mutex_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sqlite3_mutex</name> <modifier>*</modifier></type><name>wrMutexAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrMutexFree</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexFree</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrMutexEnter</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnter</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMutexTry</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexTry</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrMutexLeave</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexLeave</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMutexHeld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexHeld</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>wrMutexNotheld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexNotheld</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>wrPCacheInit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wrapped</name><operator>.</operator><name>pcache_fail</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xInit</name></name><argument_list>(<argument><expr><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>pArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>pcache_init</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrPCacheShutdown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xShutdown</name></name><argument_list>(<argument><expr><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>pArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>pcache_init</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sqlite3_pcache</name> <modifier>*</modifier></type><name>wrPCacheCreate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xCreate</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>  
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrPCacheCachesize</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xCachesize</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>  
<function><type><specifier>static</specifier> <name>int</name></type> <name>wrPCachePagecount</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xPagecount</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>  
<function><type><specifier>static</specifier> <name>sqlite3_pcache_page</name> <modifier>*</modifier></type><name>wrPCacheFetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xFetch</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>  
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrPCacheUnpin</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3_pcache_page</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xUnpin</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>  
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrPCacheRekey</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_pcache_page</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, 
  <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>, 
  <parameter><decl><type><name>unsigned</name></type> <name>c</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xRekey</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>  
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrPCacheTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>  
<function><type><specifier>static</specifier> <name>void</name></type> <name>wrPCacheDestroy</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>pcache</name><operator>.</operator><name>xDestroy</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>  

<function><type><specifier>static</specifier> <name>void</name></type> <name>installInitWrappers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_mutex_methods</name></type> <name>mutexmethods</name> <init>= <expr><block>{
    <expr><name>wrMutexInit</name></expr>,  <expr><name>wrMutexEnd</name></expr>,   <expr><name>wrMutexAlloc</name></expr>,
    <expr><name>wrMutexFree</name></expr>,  <expr><name>wrMutexEnter</name></expr>, <expr><name>wrMutexTry</name></expr>,
    <expr><name>wrMutexLeave</name></expr>, <expr><name>wrMutexHeld</name></expr>,  <expr><name>wrMutexNotheld</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_pcache_methods2</name></type> <name>pcachemethods</name> <init>= <expr><block>{
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><name>wrPCacheInit</name></expr>,      <expr><name>wrPCacheShutdown</name></expr>,  <expr><name>wrPCacheCreate</name></expr>, 
    <expr><name>wrPCacheCachesize</name></expr>, <expr><name>wrPCachePagecount</name></expr>, <expr><name>wrPCacheFetch</name></expr>,
    <expr><name>wrPCacheUnpin</name></expr>,     <expr><name>wrPCacheRekey</name></expr>,     <expr><name>wrPCacheTruncate</name></expr>,  
    <expr><name>wrPCacheDestroy</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_mem_methods</name></type> <name>memmethods</name> <init>= <expr><block>{
    <expr><name>wrMemMalloc</name></expr>,   <expr><name>wrMemFree</name></expr>,    <expr><name>wrMemRealloc</name></expr>,
    <expr><name>wrMemSize</name></expr>,     <expr><name>wrMemRoundup</name></expr>, <expr><name>wrMemInit</name></expr>,
    <expr><name>wrMemShutdown</name></expr>,
    <expr><literal type="number">0</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wrapped</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wrapped</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_GETMUTEX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wrapped</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_GETMALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wrapped</name><operator>.</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_GETPCACHE2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wrapped</name><operator>.</operator><name>pcache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MUTEX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutexmethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memmethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_PCACHE2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcachemethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_wrapper_install</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>clientData</name></decl></parameter>, <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,              <comment type="block">/* Number of arguments */</comment>
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>installInitWrappers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>objc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"mem"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mem_fail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"mutex"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mutex_fail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"pcache"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>pcache_fail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Unknown argument: \""</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_wrapper_uninstall</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>clientData</name></decl></parameter>, <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,              <comment type="block">/* Number of arguments */</comment>
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MUTEX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wrapped</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wrapped</name><operator>.</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_PCACHE2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wrapped</name><operator>.</operator><name>pcache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_wrapper_clear</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>clientData</name></decl></parameter>, <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,              <comment type="block">/* Number of arguments */</comment>
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mem_fail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>mutex_fail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wrapped</name><operator>.</operator><name>pcache_fail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_wrapper_query</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>clientData</name></decl></parameter>, <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,              <comment type="block">/* Number of arguments */</comment>
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pRet</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wrapped</name><operator>.</operator><name>mutex_init</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><literal type="string">"mutex"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wrapped</name><operator>.</operator><name>mem_init</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><literal type="string">"mem"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wrapped</name><operator>.</operator><name>pcache_init</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><literal type="string">"pcache"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Sqlitetest_init_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct><specifier>static</specifier> struct <block>{
     <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Tcl_ObjCmdProc</name> <modifier>*</modifier></type><name>xProc</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aObjCmd</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"init_wrapper_install"</literal></expr>,   <expr><name>init_wrapper_install</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"init_wrapper_query"</literal></expr>,     <expr><name>init_wrapper_query</name></expr>  }</block></expr>,
    <expr><block>{<expr><literal type="string">"init_wrapper_uninstall"</literal></expr>, <expr><name>init_wrapper_uninstall</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"init_wrapper_clear"</literal></expr>,     <expr><name>init_wrapper_clear</name></expr>}</block></expr>
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aObjCmd</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aObjCmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xProc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
