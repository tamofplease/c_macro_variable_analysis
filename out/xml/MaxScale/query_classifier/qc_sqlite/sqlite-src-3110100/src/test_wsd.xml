<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/test_wsd.c"><comment type="block">/*
** 2008 September 1
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** The code in this file contains sample implementations of the 
** sqlite3_wsd_init() and sqlite3_wsd_find() functions required if the
** SQLITE_OMIT_WSD symbol is defined at build time.
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_WSD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLS_HASHSIZE</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>ProcessLocalStorage</name></name></type> <name>ProcessLocalStorage</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ProcessLocalVar</name></name></type> <name>ProcessLocalVar</name>;</typedef>

<struct>struct <name>ProcessLocalStorage</name> <block>{
  <decl_stmt><decl><type><name>ProcessLocalVar</name> <modifier>*</modifier></type><name><name>aData</name><index>[<expr><name>PLS_HASHSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pFree</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ProcessLocalVar</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ProcessLocalVar</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>ProcessLocalStorage</name> <modifier>*</modifier></type><name>pGlobal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>sqlite3_wsd_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>J</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pGlobal</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nMalloc</name> <init>= <expr><name>N</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProcessLocalStorage</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>J</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ProcessLocalVar</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pGlobal</name> <operator>=</operator> <operator>(</operator><name>ProcessLocalStorage</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>nMalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pGlobal</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProcessLocalStorage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>nFree</name></name> <operator>=</operator> <name>nMalloc</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProcessLocalStorage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>pFree</name></name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pGlobal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><name>pGlobal</name></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name>SQLITE_NOMEM</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3_wsd_find</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>K</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iHash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ProcessLocalVar</name> <modifier>*</modifier></type><name>pVar</name></decl>;</decl_stmt>

  <comment type="block">/* Calculate a hash of K */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>iHash</name> <operator>=</operator> <operator>(</operator><name>iHash</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>K</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>iHash</name> <operator>=</operator> <name>iHash</name><operator>%</operator><name>PLS_HASHSIZE</name></expr>;</expr_stmt>

  <comment type="block">/* Search the hash table for K. */</comment>
  <for>for<control>(<init><expr><name>pVar</name><operator>=</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>aData</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</init> <condition><expr><name>pVar</name> <operator>&amp;&amp;</operator> <name><name>pVar</name><operator>-&gt;</operator><name>pKey</name></name><operator>!=</operator><name>K</name></expr>;</condition> <incr><expr><name>pVar</name><operator>=</operator><name><name>pVar</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

  <comment type="block">/* If no entry for K was found, create and populate a new one. */</comment>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pVar</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>ROUND8</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProcessLocalVar</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>nFree</name></name><operator>&gt;=</operator><name>nByte</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pVar</name> <operator>=</operator> <operator>(</operator><name>ProcessLocalVar</name> <operator>*</operator><operator>)</operator><name><name>pGlobal</name><operator>-&gt;</operator><name>pFree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <name>K</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pGlobal</name><operator>-&gt;</operator><name>aData</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>aData</name><index>[<expr><name>iHash</name></expr>]</index></name> <operator>=</operator> <name>pVar</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>nFree</name></name> <operator>-=</operator> <name>nByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>pFree</name></name> <operator>+=</operator> <name>nByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
